{
  "generator": "cannon cli 2.17.4",
  "timestamp": 1730118003,
  "def": {
    "setting": {
      "snx_package": {
        "defaultValue": "synthetix:3.8.1"
      },
      "owner": {
        "defaultValue": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      },
      "target_preset": {
        "defaultValue": "andromeda"
      },
      "salt": {
        "defaultValue": "andromeda-dev-2"
      },
      "bundleSalt": {
        "defaultValue": "snax"
      },
      "spot_market_package": {
        "defaultValue": "synthetix-spot-market:3.8.1"
      },
      "deployer": {
        "defaultValue": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      },
      "sc_pool_id": {
        "defaultValue": "1"
      },
      "pool_owner": {
        "defaultValue": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      },
      "buybackStalenessTolerance": {
        "defaultValue": "30"
      },
      "buyback_premium": {
        "defaultValue": "<%= parseEther('0.01') %>"
      },
      "buyback_fee_share": {
        "defaultValue": "<%= parseEther('0.5') %>"
      },
      "pythSnxFeedId": {
        "defaultValue": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3"
      },
      "synthUsdcMaxMarketCollateral": {
        "defaultValue": "<%= parseEther(String(100_000_000)) %>"
      },
      "spotStrictStalenessTolerance": {
        "defaultValue": "60"
      },
      "synthStataUsdcMaxMarketCollateral": {
        "defaultValue": "<%= parseEther(String(5_000_000)) %>"
      },
      "statausdc_issuance_ratio": {
        "defaultValue": "<%= MaxUint256 %>"
      },
      "statausdc_liquidation_ratio": {
        "defaultValue": "<%= parseEther('1.1') %>"
      },
      "statausdc_liquidation_reward": {
        "defaultValue": "<%= parseEther('1') %>"
      },
      "statausdc_min_delegation": {
        "defaultValue": "<%= parseEther('100') %>"
      },
      "pyth_feed_id_snx": {
        "defaultValue": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3"
      },
      "referrerFee": {
        "defaultValue": "<%= parseEther('0.2') %>"
      },
      "perps_market_package": {
        "defaultValue": "synthetix-perps-market:3.9.0"
      },
      "perps_super_market_name": {
        "defaultValue": "High MCap"
      },
      "perps_lowcap_super_market_name": {
        "defaultValue": "Low MCap"
      },
      "oracle_manager_package": {
        "defaultValue": "oracle-manager:3.8.1"
      },
      "perps_keeper_cost_package": {
        "defaultValue": "op-gas-price-oracle:3.4.0"
      },
      "buyback_snx_package": {
        "defaultValue": "buyback-snx:3.3.14"
      },
      "pyth_price_verification_address": {
        "defaultValue": "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"
      },
      "minimum_liquidity_ratio": {
        "defaultValue": "<%= parseEther('1.25') %>"
      },
      "account_timeout_withdraw": {
        "defaultValue": "86400"
      },
      "commitment_price_delay": {
        "defaultValue": "2"
      },
      "default_staleness_tolerance": {
        "defaultValue": "60"
      },
      "strict_staleness_tolerance": {
        "defaultValue": "60"
      },
      "settlement_window_duration": {
        "defaultValue": "60"
      },
      "settlement_delay": {
        "defaultValue": "2"
      },
      "settlement_reward": {
        "defaultValue": "<%= parseEther('1') %>"
      },
      "settlement_minimum_usd_exchange_amount": {
        "defaultValue": "<%= parseEther('0.000001') %>"
      },
      "settlement_max_rounding_loss": {
        "defaultValue": "<%= parseEther('0.000001') %>"
      },
      "price_deviation_tolerance": {
        "defaultValue": "<%= parseEther('1') %>"
      },
      "stataBasUSDC_address": {
        "defaultValue": "<%= imports.erc_4626_to_assets_ratio_oracle.imports.statausdc_token_mock.contracts.Token.address %>",
        "description": "We use the mock generated by erc-4626-to-assets-ratio-oracle package in statausdc-usdc.toml"
      },
      "pyth_feed_url": {
        "defaultValue": "https://api.synthetix.io/pyth-mainnet/api/get_vaa_ccip?data={data}",
        "description": "Pyth settlement strategy config"
      }
    },
    "clone": {
      "oracle_manager": {
        "source": "<%= settings.oracle_manager_package %>",
        "target": "<%= settings.oracle_manager_package %>",
        "options": {
          "salt": "<%= settings.salt %>-oracle",
          "owner": "<%= settings.owner %>"
        }
      },
      "erc_4626_to_assets_ratio_oracle": {
        "source": "erc-4626-to-assets-ratio-oracle:3.3.19",
        "target": "erc-4626-to-assets-ratio-oracle:3.3.19@stataBasUSDC_USDC"
      }
    },
    "provision": {
      "system": {
        "source": "<%= settings.snx_package %>",
        "target": "<%= settings.snx_package %>@<%= settings.target_preset %>",
        "options": {
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>",
          "bundleSalt": "<%= settings.bundleSalt %>",
          "oracle_manager_package": "<%= settings.oracle_manager_package %>"
        }
      },
      "spotFactory": {
        "source": "<%= settings.spot_market_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "coreProxyOwner": "<%= settings.owner %>",
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>",
          "synthetixPackage": "<%= settings.snx_package %>@<%= settings.target_preset %>",
          "synthetixPreset": "<%= settings.target_preset %>"
        },
        "depends": [
          "provision.system"
        ]
      },
      "snx_mock_collateral": {
        "source": "mintable-token:1.8@permissionless-mint",
        "target": "synthetix-mock-tokens@snx",
        "options": {
          "salt": "<%= settings.salt %>",
          "name": "Fake Wrapped SNX",
          "symbol": "fwSNX",
          "owner": "<%= settings.owner %>"
        }
      },
      "buyback_snx": {
        "source": "<%= settings.buyback_snx_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "salt": "<%= settings.salt %>",
          "premium": "<%= settings.buyback_premium %>",
          "snx_fee_share": "<%= settings.buyback_fee_share %>",
          "oracle_manager_address": "<%= imports.system.imports.oracle_manager.contracts.Proxy.address %>",
          "snx_token": "<%= imports.snx_mock_collateral.contracts.MintableToken.address %>",
          "usd_token": "<%= imports.system.contracts.USDProxy.address %>",
          "snx_oracle_id": "<%= extras.snx_oracle_id_buyback %>"
        }
      },
      "usdc_mock_collateral": {
        "source": "mintable-token:1.8",
        "target": "synthetix-mock-tokens:1.8@usdc",
        "options": {
          "salt": "<%= settings.salt %>",
          "name": "Fake USD Coin",
          "symbol": "fUSDC",
          "owner": "<%= settings.owner %>",
          "decimals": "6"
        }
      },
      "spartan_council_pool_rewards": {
        "source": "synthetix-rewards-distributor:0.0.2",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "salt": "<%= settings.salt %>",
          "rewardManager": "<%= imports.system.contracts.CoreProxy.address %>",
          "poolId": "<%= settings.sc_pool_id %>",
          "collateralType": "<%= extras.synth_usdc_token_address %>",
          "payoutToken": "<%= imports.snx_mock_collateral.contracts.MintableToken.address %>",
          "payoutTokenDecimals": "18",
          "name": "Spartan Council Pool Rewards"
        }
      },
      "sccp_313_spartan_council_pool_usdc_rewards": {
        "source": "synthetix-rewards-distributor:0.0.2",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "salt": "<%= settings.salt %>",
          "rewardManager": "<%= imports.system.contracts.CoreProxy.address %>",
          "poolId": "<%= settings.sc_pool_id %>",
          "collateralType": "<%= extras.synth_usdc_token_address %>",
          "payoutToken": "<%= imports.usdc_mock_collateral.contracts.MintableToken.address %>",
          "payoutTokenDecimals": "6",
          "name": "Spartan Council Pool USDC Rewards"
        }
      },
      "RewardsDistributor_scbbtc_liquidation_rewards": {
        "source": "synthetix-rewards-dist-ext:3.6.0",
        "target": "synthetix-rewards-dist-ext:3.6.0@perps-scbbtc",
        "options": {
          "salt": "<%= settings.salt %>-perps-scbbtc",
          "rewardManager": "<%= imports.system.contracts.CoreProxy.address %>",
          "poolId": "<%= settings.sc_pool_id %>",
          "payoutToken": "<%= extras.synth_cbbtc_token_address %>",
          "payoutTokenDecimals": "18",
          "name": "Perps Coinbase Wrapped Bitcoin Liquidation Rewards",
          "authorizedDistributor": "<%= imports.perpsFactory.contracts.PerpsMarketProxy.address %>"
        }
      },
      "RewardsDistributor_scbeth_liquidation_rewards": {
        "source": "synthetix-rewards-dist-ext:3.6.0",
        "target": "synthetix-rewards-dist-ext:3.6.0@perps-scbeth",
        "options": {
          "salt": "<%= settings.salt %>-perps-scbeth",
          "rewardManager": "<%= imports.system.contracts.CoreProxy.address %>",
          "poolId": "<%= settings.sc_pool_id %>",
          "payoutToken": "<%= extras.synth_cbeth_token_address %>",
          "payoutTokenDecimals": "18",
          "name": "Perps Coinbase Wrapped Staked ETH Liquidation Rewards",
          "authorizedDistributor": "<%= imports.perpsFactory.contracts.PerpsMarketProxy.address %>"
        }
      },
      "RewardsDistributor_swsteth_liquidation_rewards": {
        "source": "synthetix-rewards-dist-ext:3.6.0",
        "target": "synthetix-rewards-dist-ext:3.6.0@perps-swsteth",
        "options": {
          "salt": "<%= settings.salt %>-perps-swsteth",
          "rewardManager": "<%= imports.system.contracts.CoreProxy.address %>",
          "poolId": "<%= settings.sc_pool_id %>",
          "payoutToken": "<%= extras.synth_wsteth_token_address %>",
          "payoutTokenDecimals": "18",
          "name": "Perps Lido Wrapped Staked ETH Liquidation Rewards",
          "authorizedDistributor": "<%= imports.perpsFactory.contracts.PerpsMarketProxy.address %>"
        }
      },
      "RewardsDistributor_sweth_liquidation_rewards": {
        "source": "synthetix-rewards-dist-ext:3.6.0",
        "target": "synthetix-rewards-dist-ext:3.6.0@perps-sweth",
        "options": {
          "salt": "<%= settings.salt %>-perps-sweth",
          "rewardManager": "<%= imports.system.contracts.CoreProxy.address %>",
          "poolId": "<%= settings.sc_pool_id %>",
          "payoutToken": "<%= extras.synth_weth_token_address %>",
          "payoutTokenDecimals": "18",
          "name": "Perps Lido Wrapped ETH Liquidation Rewards",
          "authorizedDistributor": "<%= imports.perpsFactory.contracts.PerpsMarketProxy.address %>"
        }
      },
      "perps_gas_oracle_node": {
        "source": "<%= settings.perps_keeper_cost_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "salt": "<%= settings.salt %>"
        }
      },
      "perpsFactory": {
        "source": "<%= settings.perps_market_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "coreProxyOwner": "<%= settings.owner %>",
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>",
          "synthetixPackage": "<%= settings.snx_package %>@<%= settings.target_preset %>",
          "spotMarketPackage": "<%= settings.spot_market_package %>@<%= settings.target_preset %>"
        },
        "depends": [
          "provision.spotFactory"
        ]
      },
      "perpsLowCapFactory": {
        "source": "<%= settings.perps_market_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "coreProxyOwner": "<%= settings.owner %>",
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>-perps-lowcap",
          "synthetixPackage": "<%= settings.snx_package %>@<%= settings.target_preset %>",
          "spotMarketPackage": "<%= settings.spot_market_package %>@<%= settings.target_preset %>"
        },
        "depends": [
          "provision.spotFactory"
        ]
      },
      "pyth_erc7412_wrapper": {
        "source": "pyth-erc7412-wrapper:3.3.15",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "salt": "<%= settings.salt %>",
          "pythAddress": "<%= settings.pyth_price_verification_address %>"
        }
      },
      "cbbtc_mock_collateral": {
        "source": "mintable-token:1.8",
        "target": "synthetix-mock-tokens:1.8@cbbtc",
        "options": {
          "name": "Fake Coinbase Bitcoin",
          "symbol": "cbBTC",
          "owner": "<%= settings.owner %>",
          "decimals": "18"
        }
      },
      "cbeth_mock_collateral": {
        "source": "mintable-token:1.8",
        "target": "synthetix-mock-tokens:1.8@cbeth",
        "options": {
          "name": "Fake Coinbase Wrapped Staked ETH",
          "symbol": "cbETH",
          "owner": "<%= settings.owner %>",
          "decimals": "18"
        }
      },
      "wsteth_mock_collateral": {
        "source": "mintable-token:1.8",
        "target": "synthetix-mock-tokens:1.8@wsteth",
        "options": {
          "name": "Fake Lido Wrapped Staked Eth",
          "symbol": "wstETH",
          "owner": "<%= settings.owner %>",
          "decimals": "18"
        }
      }
    },
    "invoke": {
      "CoreProxy_initOrUpgradeToken_USDToken": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "initOrUpgradeToken",
        "args": [
          "<%= formatBytes32String('USDToken') %>",
          "Synthetic USD Token v3",
          "snxUSD",
          18,
          "<%= imports.system.contracts.USDRouter.address %>"
        ]
      },
      "permitCreatePool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addToFeatureFlagAllowlist",
        "args": [
          "<%= formatBytes32String('createPool') %>",
          "<%= settings.deployer %>"
        ]
      },
      "set_deniers_core_withdraw": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setDeniers",
        "args": [
          "<%= formatBytes32String('withdraw') %>",
          [
            "0x28Ed18Bd77A061E0A886a2a8FFb91da95FF03E56",
            "0xd9b891AB93C210eafa46c61fAeb53836F99aa35B",
            "0x0B67bab43157e53D21965Af0d83f83BeD9553E0a",
            "0xe1Efa5C91cA533E4a51884d805879249E3FCB2BC",
            "0x6985b94Db148eDd4df6BD1Ba3F4640da79B44947",
            "0x599e835cbFC903eF09f3Dd5E08D1cF63c32AF8d8",
            "0x347c3190bD015FBD0e47fb90AA4917138A8A32FE",
            "0x562948111d50BF039A39Eea48D127f2Ae51ddF02",
            "0x1C8236B406911A376369e33D39189F1b4B39F27D"
          ]
        ]
      },
      "set_deniers_perps": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setDeniers",
        "args": [
          "<%= formatBytes32String('perpsSystem') %>",
          [
            "0x28Ed18Bd77A061E0A886a2a8FFb91da95FF03E56",
            "0xd9b891AB93C210eafa46c61fAeb53836F99aa35B",
            "0x0B67bab43157e53D21965Af0d83f83BeD9553E0a",
            "0xe1Efa5C91cA533E4a51884d805879249E3FCB2BC",
            "0x6985b94Db148eDd4df6BD1Ba3F4640da79B44947",
            "0x599e835cbFC903eF09f3Dd5E08D1cF63c32AF8d8",
            "0x347c3190bD015FBD0e47fb90AA4917138A8A32FE",
            "0x562948111d50BF039A39Eea48D127f2Ae51ddF02",
            "0x1C8236B406911A376369e33D39189F1b4B39F27D"
          ]
        ]
      },
      "createScPool": {
        "target": [
          "system.CoreProxy"
        ],
        "func": "createPool",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.pool_owner %>"
        ],
        "depends": [
          "invoke.permitCreatePool"
        ]
      },
      "setScPoolName": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolName",
        "args": [
          "<%= settings.sc_pool_id %>",
          "Spartan Council Pool"
        ],
        "depends": [
          "invoke.createScPool"
        ]
      },
      "setPreferredPool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPreferredPool",
        "args": [
          "<%= settings.sc_pool_id %>"
        ],
        "depends": [
          "invoke.createScPool"
        ]
      },
      "setFeeCollector": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFeeCollector",
        "args": [
          "<%= imports.buyback_snx.contracts.buyback_snx.address %>"
        ]
      },
      "registerPythSnxOracleNodeBuyback": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pythSnxFeedId, false]) %>",
          []
        ],
        "extra": {
          "snx_pyth_oracle_id_buyback": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "provision.system",
          "setting.pythSnxFeedId",
          "setting.pyth_price_verification_address"
        ]
      },
      "registerLookupSnxOracleNodeBuyback": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pythSnxFeedId, settings.buybackStalenessTolerance]) %>",
          []
        ],
        "extra": {
          "snx_lookup_oracle_id_buyback": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "provision.pyth_erc7412_wrapper",
          "provision.system",
          "setting.buybackStalenessTolerance",
          "setting.pythSnxFeedId"
        ]
      },
      "registerSnxOracleNodeBuyback": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.buybackStalenessTolerance]) %>",
          [
            "<%= extras.snx_pyth_oracle_id_buyback %>",
            "<%= extras.snx_lookup_oracle_id_buyback %>"
          ]
        ],
        "extra": {
          "snx_oracle_id_buyback": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "CoreProxy_configureCollateral_cbbtc": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.cbbtc_address %>",
            "oracleNodeId": "<%= extras.cbbtc_oracle_id %>",
            "issuanceRatioD18": "<%= settings.cbbtc_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.cbbtc_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.cbbtc_liquidation_reward %>",
            "minDelegationD18": "<%= settings.cbbtc_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "CoreProxy_setPoolCollateralConfiguration_cbbtc": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolCollateralConfiguration",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.cbbtc_address %>",
          {
            "collateralLimitD18": "<%= settings.cbbtc_max_collateral_limit %>",
            "issuanceRatioD18": 0
          }
        ]
      },
      "CoreProxy_configureCollateral_cbeth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.cbeth_address %>",
            "oracleNodeId": "<%= extras.cbeth_oracle_id %>",
            "issuanceRatioD18": "<%= settings.cbeth_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.cbeth_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.cbeth_liquidation_reward %>",
            "minDelegationD18": "<%= settings.cbeth_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "CoreProxy_setPoolCollateralConfiguration_cbeth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolCollateralConfiguration",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.cbeth_address %>",
          {
            "collateralLimitD18": "<%= settings.cbeth_max_collateral_limit %>",
            "issuanceRatioD18": 0
          }
        ]
      },
      "CoreProxy_configureCollateral_wsteth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.wsteth_address %>",
            "oracleNodeId": "<%= extras.wsteth_oracle_id %>",
            "issuanceRatioD18": "<%= settings.wsteth_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.wsteth_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.wsteth_liquidation_reward %>",
            "minDelegationD18": "<%= settings.wsteth_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "CoreProxy_setPoolCollateralConfiguration_wsteth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolCollateralConfiguration",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.wsteth_address %>",
          {
            "collateralLimitD18": "<%= settings.wsteth_max_collateral_limit %>",
            "issuanceRatioD18": 0
          }
        ]
      },
      "CoreProxy_configureCollateral_weth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.weth_address %>",
            "oracleNodeId": "<%= extras.eth_oracle_id %>",
            "issuanceRatioD18": "<%= settings.weth_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.weth_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.weth_liquidation_reward %>",
            "minDelegationD18": "<%= settings.weth_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "CoreProxy_setPoolCollateralConfiguration_weth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolCollateralConfiguration",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.weth_address %>",
          {
            "collateralLimitD18": "<%= settings.weth_max_collateral_limit %>",
            "issuanceRatioD18": 0
          }
        ]
      },
      "configure_susdc_collateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= extras.synth_usdc_token_address %>",
            "oracleNodeId": "<%= imports.system.extras.const_one_oracle_id %>",
            "issuanceRatioD18": "<%= settings.susdc_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.susdc_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.susdc_liquidation_reward %>",
            "minDelegationD18": "<%= settings.susdc_min_delegation %>",
            "depositingEnabled": true
          }
        ]
      },
      "configure_sstatausdc_collateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= extras.synth_stata_usdc_token_address %>",
            "oracleNodeId": "<%= extras.erc_4626_to_assets_ratio_oracle_id %>",
            "issuanceRatioD18": "<%= settings.sstatausdc_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.sstatausdc_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.sstatausdc_liquidation_reward %>",
            "minDelegationD18": "<%= settings.sstatausdc_min_delegation %>",
            "depositingEnabled": true
          }
        ]
      },
      "configure_scbbtc_collateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= extras.synth_cbbtc_token_address %>",
            "oracleNodeId": "<%= extras.cbbtc_oracle_id %>",
            "issuanceRatioD18": "<%= settings.scbbtc_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.scbbtc_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.scbbtc_liquidation_reward %>",
            "minDelegationD18": "<%= settings.scbbtc_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "configure_scbeth_collateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= extras.synth_cbeth_token_address %>",
            "oracleNodeId": "<%= extras.cbeth_oracle_id %>",
            "issuanceRatioD18": "<%= settings.scbeth_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.scbeth_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.scbeth_liquidation_reward %>",
            "minDelegationD18": "<%= settings.scbeth_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "configure_swsteth_collateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= extras.synth_wsteth_token_address %>",
            "oracleNodeId": "<%= extras.wsteth_oracle_id %>",
            "issuanceRatioD18": "<%= settings.swsteth_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.swsteth_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.swsteth_liquidation_reward %>",
            "minDelegationD18": "<%= settings.swsteth_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "configure_sweth_collateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= extras.synth_weth_token_address %>",
            "oracleNodeId": "<%= extras.eth_oracle_id %>",
            "issuanceRatioD18": "<%= settings.sweth_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.sweth_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.sweth_liquidation_reward %>",
            "minDelegationD18": "<%= settings.sweth_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "createUsdcSynth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createSynth",
        "args": [
          "Synthetic USD Coin",
          "sUSDC",
          "<%= settings.owner %>"
        ],
        "extra": {
          "synth_usdc_market_id": {
            "event": "SynthRegistered",
            "arg": 0
          },
          "synth_usdc_token_address": {
            "event": "SynthRegistered",
            "arg": 1
          }
        }
      },
      "setSynthPriceUsdc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_usdc_market_id %>"
          ]
        },
        "func": "updatePriceData",
        "args": [
          "<%= extras.synth_usdc_market_id %>",
          "<%= imports.system.extras.const_one_oracle_id %>",
          "<%= imports.system.extras.const_one_oracle_id %>",
          "<%= settings.spotStrictStalenessTolerance %>"
        ]
      },
      "setSynthMaxMarketCollateralUsdc": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= extras.synth_usdc_market_id %>",
          "<%= imports.usdc_mock_collateral.contracts.MintableToken.address %>",
          "<%= settings.synthUsdcMaxMarketCollateral %>"
        ]
      },
      "configureSynthWrapperUsdc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_usdc_market_id %>"
          ]
        },
        "func": "setWrapper",
        "args": [
          "<%= extras.synth_usdc_market_id %>",
          "<%= imports.usdc_mock_collateral.contracts.MintableToken.address %>",
          "<%= settings.synthUsdcMaxMarketCollateral %>"
        ]
      },
      "configure_usdc_collateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= imports.usdc_mock_collateral.contracts.MintableToken.address %>",
            "oracleNodeId": "<%= imports.system.extras.const_one_oracle_id %>",
            "issuanceRatioD18": "<%= MaxUint256 %>",
            "liquidationRatioD18": "<%= parseEther('1.005') %>",
            "liquidationRewardD18": "<%= parseEther('1') %>",
            "minDelegationD18": "<%= parseEther('100') %>",
            "depositingEnabled": false
          }
        ]
      },
      "SpotMarketProxy_createSynth_stataUSDC": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createSynth",
        "args": [
          "Synthetic Static aUSDC",
          "sStataUSDC",
          "<%= settings.owner %>"
        ],
        "extra": {
          "synth_stata_usdc_market_id": {
            "event": "SynthRegistered",
            "arg": 0
          },
          "synth_stata_usdc_token_address": {
            "event": "SynthRegistered",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_updatePriceData_stataUSDC": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_stata_usdc_market_id %>"
          ]
        },
        "func": "updatePriceData",
        "args": [
          "<%= extras.synth_stata_usdc_market_id %>",
          "<%= extras.erc_4626_to_assets_ratio_oracle_id %>",
          "<%= extras.erc_4626_to_assets_ratio_oracle_id %>",
          "<%= settings.spotStrictStalenessTolerance %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_stataUSDC": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= extras.synth_stata_usdc_market_id %>",
          "<%= settings.stataBasUSDC_address %>",
          "<%= settings.synthStataUsdcMaxMarketCollateral %>"
        ]
      },
      "SpotMarketProxy_setWrapper_stataUSDC": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_stata_usdc_market_id %>"
          ]
        },
        "func": "setWrapper",
        "args": [
          "<%= extras.synth_stata_usdc_market_id %>",
          "<%= settings.stataBasUSDC_address %>",
          "<%= settings.synthStataUsdcMaxMarketCollateral %>"
        ]
      },
      "CoreProxy_configureCollateral_stataUSDC": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.stataBasUSDC_address %>",
            "oracleNodeId": "<%= extras.erc_4626_to_assets_ratio_oracle_id %>",
            "issuanceRatioD18": "<%= settings.statausdc_issuance_ratio %>",
            "liquidationRatioD18": "<%= settings.statausdc_liquidation_ratio %>",
            "liquidationRewardD18": "<%= settings.statausdc_liquidation_reward  %>",
            "minDelegationD18": "<%= settings.statausdc_min_delegation %>",
            "depositingEnabled": false
          }
        ]
      },
      "SpotMarketProxy_createSynth_cbbtc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createSynth",
        "args": [
          "Synthetic Coinbase Wrapped BTC",
          "scbBTC",
          "<%= settings.owner %>"
        ],
        "extra": {
          "synth_cbbtc_market_id": {
            "event": "SynthRegistered",
            "arg": 0
          },
          "synth_cbbtc_token_address": {
            "event": "SynthRegistered",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_updatePriceData_cbbtc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbbtc_market_id %>"
          ]
        },
        "func": "updatePriceData",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          "<%= extras.cbbtc_oracle_id %>",
          "<%= extras.cbbtc_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_cbbtc": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          "<%= settings.cbbtc_address %>",
          "<%= settings.synth_cbbtc_max_collateral_amount %>"
        ]
      },
      "SpotMarketProxy_setMarketSkewScale_cbbtc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbbtc_market_id %>"
          ]
        },
        "func": "setMarketSkewScale",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          "<%= settings.synth_cbbtc_skew_scale %>"
        ]
      },
      "SpotMarketProxy_setWrapper_cbbtc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbbtc_market_id %>"
          ]
        },
        "func": "setWrapper",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          "<%= settings.cbbtc_address %>",
          "<%= settings.synth_cbbtc_max_collateral_amount %>"
        ]
      },
      "SpotMarketProxy_addSettlementStrategy_cbbtc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbbtc_market_id %>"
          ]
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          {
            "strategyType": "1",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "url": "",
            "settlementReward": 0,
            "minimumUsdExchangeAmount": "0",
            "maxRoundingLoss": "1",
            "priceDeviationTolerance": "0",
            "disabled": false
          }
        ],
        "extra": {
          "synth_cbbtc_settlement_strategy_id": {
            "event": "SettlementStrategyAdded",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_setSettlementStrategy_cbbtc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbbtc_market_id %>"
          ]
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          "<%= extras.synth_cbbtc_settlement_strategy_id %>",
          {
            "strategyType": "1",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_cbbtc %>",
            "url": "<%= settings.pyth_feed_url %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "minimumUsdExchangeAmount": "<%= settings.settlement_minimum_usd_exchange_amount %>",
            "maxRoundingLoss": "<%= settings.settlement_max_rounding_loss %>",
            "priceDeviationTolerance": "<%= settings.price_deviation_tolerance %>",
            "disabled": true
          }
        ]
      },
      "SpotMarketProxy_setAtomicFixedFee_cbbtc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbbtc_market_id %>"
          ]
        },
        "func": "setAtomicFixedFee",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          "<%= parseEther(String(0.3)) %>"
        ]
      },
      "SpotMarketProxy_setCollateralLeverage_cbbtc": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbbtc_market_id %>"
          ]
        },
        "func": "setCollateralLeverage",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          "<%= parseEther('10') %>"
        ]
      },
      "SpotMarketProxy_createSynth_cbeth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createSynth",
        "args": [
          "Synthetic Coinbase Wrapped Staked ETH",
          "scbETH",
          "<%= settings.owner %>"
        ],
        "extra": {
          "synth_cbeth_market_id": {
            "event": "SynthRegistered",
            "arg": 0
          },
          "synth_cbeth_token_address": {
            "event": "SynthRegistered",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_updatePriceData_cbeth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbeth_market_id %>"
          ]
        },
        "func": "updatePriceData",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          "<%= extras.cbeth_oracle_id %>",
          "<%= extras.cbeth_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_cbeth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          "<%= settings.cbeth_address %>",
          "<%= settings.synth_cbeth_max_collateral_amount %>"
        ]
      },
      "SpotMarketProxy_setMarketSkewScale_cbeth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbeth_market_id %>"
          ]
        },
        "func": "setMarketSkewScale",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          "<%= settings.synth_cbeth_skew_scale %>"
        ]
      },
      "SpotMarketProxy_setWrapper_cbeth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbeth_market_id %>"
          ]
        },
        "func": "setWrapper",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          "<%= settings.cbeth_address %>",
          "<%= settings.synth_cbeth_max_collateral_amount %>"
        ]
      },
      "SpotMarketProxy_addSettlementStrategy_cbeth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbeth_market_id %>"
          ]
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          {
            "strategyType": "1",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "url": "",
            "settlementReward": 0,
            "minimumUsdExchangeAmount": "0",
            "maxRoundingLoss": "1",
            "priceDeviationTolerance": "0",
            "disabled": false
          }
        ],
        "extra": {
          "synth_cbeth_settlement_strategy_id": {
            "event": "SettlementStrategyAdded",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_setSettlementStrategy_cbeth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbeth_market_id %>"
          ]
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          "<%= extras.synth_cbeth_settlement_strategy_id %>",
          {
            "strategyType": "1",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_cbeth %>",
            "url": "<%= settings.pyth_feed_url %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "minimumUsdExchangeAmount": "<%= settings.settlement_minimum_usd_exchange_amount %>",
            "maxRoundingLoss": "<%= settings.settlement_max_rounding_loss %>",
            "priceDeviationTolerance": "<%= settings.price_deviation_tolerance %>",
            "disabled": true
          }
        ]
      },
      "SpotMarketProxy_setAtomicFixedFee_cbeth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbeth_market_id %>"
          ]
        },
        "func": "setAtomicFixedFee",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          "<%= parseEther(String(0.3)) %>"
        ]
      },
      "SpotMarketProxy_setCollateralLeverage_cbeth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_cbeth_market_id %>"
          ]
        },
        "func": "setCollateralLeverage",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          "<%= parseEther('10') %>"
        ]
      },
      "SpotMarketProxy_createSynth_wsteth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createSynth",
        "args": [
          "Synthetic Lido Wrapped Staked ETH",
          "swstETH",
          "<%= settings.owner %>"
        ],
        "extra": {
          "synth_wsteth_market_id": {
            "event": "SynthRegistered",
            "arg": 0
          },
          "synth_wsteth_token_address": {
            "event": "SynthRegistered",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_updatePriceData_wsteth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_wsteth_market_id %>"
          ]
        },
        "func": "updatePriceData",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          "<%= extras.wsteth_oracle_id %>",
          "<%= extras.wsteth_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_wsteth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          "<%= settings.wsteth_address %>",
          "<%= settings.synth_wsteth_max_collateral_amount %>"
        ]
      },
      "SpotMarketProxy_setMarketSkewScale_wsteth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_wsteth_market_id %>"
          ]
        },
        "func": "setMarketSkewScale",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          "<%= settings.synth_wsteth_skew_scale %>"
        ]
      },
      "SpotMarketProxy_setWrapper_wsteth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_wsteth_market_id %>"
          ]
        },
        "func": "setWrapper",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          "<%= settings.wsteth_address %>",
          "<%= settings.synth_wsteth_max_collateral_amount %>"
        ]
      },
      "SpotMarketProxy_addSettlementStrategy_wsteth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_wsteth_market_id %>"
          ]
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          {
            "strategyType": "1",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "url": "",
            "settlementReward": 0,
            "minimumUsdExchangeAmount": "0",
            "maxRoundingLoss": "1",
            "priceDeviationTolerance": "0",
            "disabled": false
          }
        ],
        "extra": {
          "synth_wsteth_settlement_strategy_id": {
            "event": "SettlementStrategyAdded",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_setSettlementStrategy_wsteth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_wsteth_market_id %>"
          ]
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          "<%= extras.synth_wsteth_settlement_strategy_id %>",
          {
            "strategyType": "1",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_wsteth %>",
            "url": "<%= settings.pyth_feed_url %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "minimumUsdExchangeAmount": "<%= settings.settlement_minimum_usd_exchange_amount %>",
            "maxRoundingLoss": "<%= settings.settlement_max_rounding_loss %>",
            "priceDeviationTolerance": "<%= settings.price_deviation_tolerance %>",
            "disabled": true
          }
        ]
      },
      "SpotMarketProxy_setAtomicFixedFee_wsteth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_wsteth_market_id %>"
          ]
        },
        "func": "setAtomicFixedFee",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          "<%= parseEther(String(0.3)) %>"
        ]
      },
      "SpotMarketProxy_setCollateralLeverage_wsteth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_wsteth_market_id %>"
          ]
        },
        "func": "setCollateralLeverage",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          "<%= parseEther('10') %>"
        ]
      },
      "SpotMarketProxy_createSynth_weth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createSynth",
        "args": [
          "Synthetic Wrapped ETH",
          "sWETH",
          "<%= settings.owner %>"
        ],
        "extra": {
          "synth_weth_market_id": {
            "event": "SynthRegistered",
            "arg": 0
          },
          "synth_weth_token_address": {
            "event": "SynthRegistered",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_updatePriceData_weth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_weth_market_id %>"
          ]
        },
        "func": "updatePriceData",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          "<%= extras.eth_oracle_id %>",
          "<%= extras.eth_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_weth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          "<%= settings.weth_address %>",
          "<%= settings.synth_weth_max_collateral_amount %>"
        ]
      },
      "SpotMarketProxy_setMarketSkewScale_weth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_weth_market_id %>"
          ]
        },
        "func": "setMarketSkewScale",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          "<%= settings.synth_weth_skew_scale %>"
        ]
      },
      "SpotMarketProxy_setWrapper_weth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_weth_market_id %>"
          ]
        },
        "func": "setWrapper",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          "<%= settings.weth_address %>",
          "<%= settings.synth_weth_max_collateral_amount %>"
        ]
      },
      "SpotMarketProxy_addSettlementStrategy_weth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_weth_market_id %>"
          ]
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          {
            "strategyType": "1",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "url": "",
            "settlementReward": 0,
            "minimumUsdExchangeAmount": "0",
            "maxRoundingLoss": "1",
            "priceDeviationTolerance": "0",
            "disabled": false
          }
        ],
        "extra": {
          "synth_weth_settlement_strategy_id": {
            "event": "SettlementStrategyAdded",
            "arg": 1
          }
        }
      },
      "SpotMarketProxy_setSettlementStrategy_weth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_weth_market_id %>"
          ]
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          "<%= extras.synth_weth_settlement_strategy_id %>",
          {
            "strategyType": "1",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_weth %>",
            "url": "<%= settings.pyth_feed_url %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "minimumUsdExchangeAmount": "<%= settings.settlement_minimum_usd_exchange_amount %>",
            "maxRoundingLoss": "<%= settings.settlement_max_rounding_loss %>",
            "priceDeviationTolerance": "<%= settings.price_deviation_tolerance %>",
            "disabled": true
          }
        ]
      },
      "SpotMarketProxy_setAtomicFixedFee_weth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_weth_market_id %>"
          ]
        },
        "func": "setAtomicFixedFee",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          "<%= parseEther(String(0.3)) %>"
        ]
      },
      "SpotMarketProxy_setCollateralLeverage_weth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_weth_market_id %>"
          ]
        },
        "func": "setCollateralLeverage",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          "<%= parseEther('10') %>"
        ]
      },
      "register_spartan_council_pool_rewards": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= extras.synth_usdc_token_address %>",
          "<%= imports.spartan_council_pool_rewards.contracts.RewardsDistributor.address %>"
        ]
      },
      "sccp_313_register_spartan_council_pool_usdc_rewards": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= extras.synth_usdc_token_address %>",
          "<%= imports.sccp_313_spartan_council_pool_usdc_rewards.contracts.RewardsDistributor.address %>"
        ]
      },
      "PerpsMarketProxy_registerDistributor_synth_cbbtc_liquidations": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "registerDistributor",
        "args": [
          "<%= extras.synth_cbbtc_token_address %>",
          "<%= imports.RewardsDistributor_scbbtc_liquidation_rewards.contracts.RewardsDistributorExternal.address %>",
          "<%= extras.synth_cbbtc_market_id %>",
          [
            "<%= extras.synth_usdc_token_address %>",
            "<%= settings.synth_stata_usdc_token_address %>"
          ]
        ]
      },
      "CoreProxy_registerRewardsDistributor_scbbtc_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= extras.synth_usdc_token_address %>",
          "<%= imports.RewardsDistributor_scbbtc_liquidation_rewards.contracts.RewardsDistributorExternal.address %>"
        ]
      },
      "CoreProxy_registerRewardsDistributor_scbbtc_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.synth_stata_usdc_token_address %>",
          "<%= imports.RewardsDistributor_scbbtc_liquidation_rewards.contracts.RewardsDistributorExternal.address %>"
        ]
      },
      "PerpsMarketProxy_registerDistributor_synth_cbeth_liquidations": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "registerDistributor",
        "args": [
          "<%= extras.synth_cbeth_token_address %>",
          "<%= imports.RewardsDistributor_scbeth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>",
          "<%= extras.synth_cbeth_market_id %>",
          [
            "<%= extras.synth_usdc_token_address %>",
            "<%= settings.synth_stata_usdc_token_address %>"
          ]
        ]
      },
      "CoreProxy_registerRewardsDistributor_scbeth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= extras.synth_usdc_token_address %>",
          "<%= imports.RewardsDistributor_scbeth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>"
        ]
      },
      "CoreProxy_registerRewardsDistributor_scbeth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.synth_stata_usdc_token_address %>",
          "<%= imports.RewardsDistributor_scbeth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>"
        ]
      },
      "PerpsMarketProxy_registerDistributor_synth_wsteth_liquidations": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "registerDistributor",
        "args": [
          "<%= extras.synth_wsteth_token_address %>",
          "<%= imports.RewardsDistributor_swsteth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>",
          "<%= extras.synth_wsteth_market_id %>",
          [
            "<%= extras.synth_usdc_token_address %>",
            "<%= settings.synth_stata_usdc_token_address %>"
          ]
        ]
      },
      "CoreProxy_registerRewardsDistributor_swsteth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= extras.synth_usdc_token_address %>",
          "<%= imports.RewardsDistributor_swsteth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>"
        ]
      },
      "CoreProxy_registerRewardsDistributor_swsteth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.synth_stata_usdc_token_address %>",
          "<%= imports.RewardsDistributor_swsteth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>"
        ]
      },
      "PerpsMarketProxy_registerDistributor_synth_weth_liquidations": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "registerDistributor",
        "args": [
          "<%= extras.synth_weth_token_address %>",
          "<%= imports.RewardsDistributor_sweth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>",
          "<%= extras.synth_weth_market_id %>",
          [
            "<%= extras.synth_usdc_token_address %>",
            "<%= settings.synth_stata_usdc_token_address %>"
          ]
        ]
      },
      "CoreProxy_registerRewardsDistributor_sweth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= extras.synth_usdc_token_address %>",
          "<%= imports.RewardsDistributor_sweth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>"
        ]
      },
      "CoreProxy_registerRewardsDistributor_sweth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "registerRewardsDistributor",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.synth_stata_usdc_token_address %>",
          "<%= imports.RewardsDistributor_sweth_liquidation_rewards.contracts.RewardsDistributorExternal.address %>"
        ]
      },
      "registerPythAaveOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_aave, false]) %>",
          []
        ],
        "extra": {
          "aave_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupAaveOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_aave, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "aave_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerAaveOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.aave_pyth_oracle_id %>",
            "<%= extras.aave_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "aave_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythAdaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ada, false]) %>",
          []
        ],
        "extra": {
          "ada_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupAdaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ada, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ada_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerAdaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ada_pyth_oracle_id %>",
            "<%= extras.ada_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ada_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythAlgoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_algo, false]) %>",
          []
        ],
        "extra": {
          "algo_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupAlgoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_algo, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "algo_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerAlgoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.algo_pyth_oracle_id %>",
            "<%= extras.algo_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "algo_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythAptOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_apt, false]) %>",
          []
        ],
        "extra": {
          "apt_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupAptOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_apt, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "apt_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerAptOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.apt_pyth_oracle_id %>",
            "<%= extras.apt_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "apt_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythArbOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_arb, false]) %>",
          []
        ],
        "extra": {
          "arb_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupArbOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_arb, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "arb_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerArbOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.arb_pyth_oracle_id %>",
            "<%= extras.arb_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "arb_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythArkmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_arkm, false]) %>",
          []
        ],
        "extra": {
          "arkm_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupArkmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_arkm, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "arkm_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerArkmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.arkm_pyth_oracle_id %>",
            "<%= extras.arkm_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "arkm_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythAtomOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_atom, false]) %>",
          []
        ],
        "extra": {
          "atom_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupAtomOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_atom, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "atom_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerAtomOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.atom_pyth_oracle_id %>",
            "<%= extras.atom_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "atom_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythAvaxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_avax, false]) %>",
          []
        ],
        "extra": {
          "avax_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupAvaxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_avax, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "avax_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerAvaxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.avax_pyth_oracle_id %>",
            "<%= extras.avax_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "avax_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythAxlOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_axl, false]) %>",
          []
        ],
        "extra": {
          "axl_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupAxlOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_axl, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "axl_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerAxlOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.axl_pyth_oracle_id %>",
            "<%= extras.axl_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "axl_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythAxsOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_axs, false]) %>",
          []
        ],
        "extra": {
          "axs_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupAxsOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_axs, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "axs_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerAxsOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.axs_pyth_oracle_id %>",
            "<%= extras.axs_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "axs_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythBalOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_bal, false]) %>",
          []
        ],
        "extra": {
          "bal_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupBalOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_bal, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "bal_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerBalOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.bal_pyth_oracle_id %>",
            "<%= extras.bal_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "bal_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythBchOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_bch, false]) %>",
          []
        ],
        "extra": {
          "bch_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupBchOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_bch, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "bch_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerBchOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.bch_pyth_oracle_id %>",
            "<%= extras.bch_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "bch_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythBlurOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_blur, false]) %>",
          []
        ],
        "extra": {
          "blur_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupBlurOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_blur, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "blur_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerBlurOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.blur_pyth_oracle_id %>",
            "<%= extras.blur_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "blur_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythBnbOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_bnb, false]) %>",
          []
        ],
        "extra": {
          "bnb_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupBnbOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_bnb, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "bnb_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerBnbOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.bnb_pyth_oracle_id %>",
            "<%= extras.bnb_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "bnb_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythBomeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_bome, false]) %>",
          []
        ],
        "extra": {
          "bome_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupBomeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_bome, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "bome_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerBomeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.bome_pyth_oracle_id %>",
            "<%= extras.bome_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "bome_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythBonkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_bonk, false]) %>",
          []
        ],
        "extra": {
          "bonk_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupBonkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_bonk, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "bonk_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerBonkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.bonk_pyth_oracle_id %>",
            "<%= extras.bonk_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "bonk_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythBtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_btc, false]) %>",
          []
        ],
        "extra": {
          "btc_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupBtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_btc, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "btc_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerBtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.btc_pyth_oracle_id %>",
            "<%= extras.btc_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "btc_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythCbbtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_cbbtc, false]) %>",
          []
        ],
        "extra": {
          "cbbtc_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupCbbtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_cbbtc, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "cbbtc_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerCbbtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.cbbtc_pyth_oracle_id %>",
            "<%= extras.cbbtc_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "cbbtc_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythCbethOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_cbeth, false]) %>",
          []
        ],
        "extra": {
          "cbeth_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupCbethOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_cbeth, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "cbeth_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerCbethOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.cbeth_pyth_oracle_id %>",
            "<%= extras.cbeth_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "cbeth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythCompOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_comp, false]) %>",
          []
        ],
        "extra": {
          "comp_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupCompOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_comp, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "comp_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerCompOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.comp_pyth_oracle_id %>",
            "<%= extras.comp_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "comp_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythCrvOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_crv, false]) %>",
          []
        ],
        "extra": {
          "crv_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupCrvOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_crv, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "crv_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerCrvOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.crv_pyth_oracle_id %>",
            "<%= extras.crv_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "crv_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythDogeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_doge, false]) %>",
          []
        ],
        "extra": {
          "doge_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupDogeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_doge, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "doge_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerDogeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.doge_pyth_oracle_id %>",
            "<%= extras.doge_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "doge_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythDotOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_dot, false]) %>",
          []
        ],
        "extra": {
          "dot_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupDotOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_dot, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "dot_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerDotOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.dot_pyth_oracle_id %>",
            "<%= extras.dot_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "dot_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythDydxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_dydx, false]) %>",
          []
        ],
        "extra": {
          "dydx_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupDydxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_dydx, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "dydx_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerDydxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.dydx_pyth_oracle_id %>",
            "<%= extras.dydx_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "dydx_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_eigen": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_eigen, false]) %>",
          []
        ],
        "extra": {
          "eigen_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_eigen": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_eigen, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "eigen_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_eigen": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.eigen_pyth_oracle_id %>",
            "<%= extras.eigen_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "eigen_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythEnaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ena, false]) %>",
          []
        ],
        "extra": {
          "ena_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupEnaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ena, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ena_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerEnaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ena_pyth_oracle_id %>",
            "<%= extras.ena_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ena_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythEosOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_eos, false]) %>",
          []
        ],
        "extra": {
          "eos_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupEosOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_eos, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "eos_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerEosOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.eos_pyth_oracle_id %>",
            "<%= extras.eos_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "eos_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythEtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_etc, false]) %>",
          []
        ],
        "extra": {
          "etc_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupEtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_etc, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "etc_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerEtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.etc_pyth_oracle_id %>",
            "<%= extras.etc_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "etc_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythEthOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_eth, false]) %>",
          []
        ],
        "extra": {
          "eth_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupEthOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_eth, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "eth_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerEthOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.eth_pyth_oracle_id %>",
            "<%= extras.eth_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "eth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythEthbtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ethbtc, false]) %>",
          []
        ],
        "extra": {
          "ethbtc_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupEthbtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ethbtc, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ethbtc_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerEthbtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ethbtc_pyth_oracle_id %>",
            "<%= extras.ethbtc_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ethbtc_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythEthfiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ethfi, false]) %>",
          []
        ],
        "extra": {
          "ethfi_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupEthfiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ethfi, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ethfi_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerEthfiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ethfi_pyth_oracle_id %>",
            "<%= extras.ethfi_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ethfi_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythFilOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_fil, false]) %>",
          []
        ],
        "extra": {
          "fil_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupFilOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_fil, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "fil_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerFilOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.fil_pyth_oracle_id %>",
            "<%= extras.fil_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "fil_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythFlowOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_flow, false]) %>",
          []
        ],
        "extra": {
          "flow_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupFlowOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_flow, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "flow_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerFlowOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.flow_pyth_oracle_id %>",
            "<%= extras.flow_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "flow_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythFtmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ftm, false]) %>",
          []
        ],
        "extra": {
          "ftm_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupFtmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ftm, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ftm_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerFtmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ftm_pyth_oracle_id %>",
            "<%= extras.ftm_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ftm_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythFxsOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_fxs, false]) %>",
          []
        ],
        "extra": {
          "fxs_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupFxsOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_fxs, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "fxs_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerFxsOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.fxs_pyth_oracle_id %>",
            "<%= extras.fxs_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "fxs_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythGalaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_gala, false]) %>",
          []
        ],
        "extra": {
          "gala_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupGalaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_gala, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "gala_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerGalaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.gala_pyth_oracle_id %>",
            "<%= extras.gala_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "gala_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythGmxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_gmx, false]) %>",
          []
        ],
        "extra": {
          "gmx_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupGmxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_gmx, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "gmx_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerGmxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.gmx_pyth_oracle_id %>",
            "<%= extras.gmx_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "gmx_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythGrtOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_grt, false]) %>",
          []
        ],
        "extra": {
          "grt_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupGrtOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_grt, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "grt_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerGrtOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.grt_pyth_oracle_id %>",
            "<%= extras.grt_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "grt_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythIcpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_icp, false]) %>",
          []
        ],
        "extra": {
          "icp_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupIcpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_icp, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "icp_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerIcpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.icp_pyth_oracle_id %>",
            "<%= extras.icp_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "icp_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythImxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_imx, false]) %>",
          []
        ],
        "extra": {
          "imx_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupImxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_imx, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "imx_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerImxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.imx_pyth_oracle_id %>",
            "<%= extras.imx_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "imx_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythInjOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_inj, false]) %>",
          []
        ],
        "extra": {
          "inj_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupInjOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_inj, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "inj_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerInjOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.inj_pyth_oracle_id %>",
            "<%= extras.inj_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "inj_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_io": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_io, false]) %>",
          []
        ],
        "extra": {
          "io_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_io": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_io, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "io_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_io": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.io_pyth_oracle_id %>",
            "<%= extras.io_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "io_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythJtoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_jto, false]) %>",
          []
        ],
        "extra": {
          "jto_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupJtoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_jto, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "jto_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerJtoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.jto_pyth_oracle_id %>",
            "<%= extras.jto_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "jto_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythJupOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_jup, false]) %>",
          []
        ],
        "extra": {
          "jup_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupJupOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_jup, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "jup_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerJupOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.jup_pyth_oracle_id %>",
            "<%= extras.jup_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "jup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythLdoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ldo, false]) %>",
          []
        ],
        "extra": {
          "ldo_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupLdoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ldo, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ldo_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLdoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ldo_pyth_oracle_id %>",
            "<%= extras.ldo_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ldo_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythLinkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_link, false]) %>",
          []
        ],
        "extra": {
          "link_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupLinkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_link, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "link_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLinkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.link_pyth_oracle_id %>",
            "<%= extras.link_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "link_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythLtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ltc, false]) %>",
          []
        ],
        "extra": {
          "ltc_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupLtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ltc, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ltc_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLtcOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ltc_pyth_oracle_id %>",
            "<%= extras.ltc_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ltc_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythMaticOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_pol, false]) %>",
          []
        ],
        "extra": {
          "matic_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupMaticOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_pol, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "matic_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerMaticOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.matic_pyth_oracle_id %>",
            "<%= extras.matic_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "matic_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythMemeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_meme, false]) %>",
          []
        ],
        "extra": {
          "meme_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupMemeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_meme, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "meme_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerMemeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.meme_pyth_oracle_id %>",
            "<%= extras.meme_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "meme_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_mew": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_mew, false]) %>",
          []
        ],
        "extra": {
          "mew_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_mew": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_mew, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "mew_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_mew": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.mew_pyth_oracle_id %>",
            "<%= extras.mew_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "mew_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_mkr": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_mkr, false]) %>",
          []
        ],
        "extra": {
          "mkr_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_mkr": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_mkr, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "mkr_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_mkr": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.mkr_pyth_oracle_id %>",
            "<%= extras.mkr_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "mkr_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythNearOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_near, false]) %>",
          []
        ],
        "extra": {
          "near_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupNearOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_near, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "near_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerNearOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.near_pyth_oracle_id %>",
            "<%= extras.near_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "near_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_not": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_not, false]) %>",
          []
        ],
        "extra": {
          "not_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_not": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_not, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "not_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_not": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.not_pyth_oracle_id %>",
            "<%= extras.not_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "not_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythOpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_op, false]) %>",
          []
        ],
        "extra": {
          "op_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupOpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_op, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "op_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerOpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.op_pyth_oracle_id %>",
            "<%= extras.op_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "op_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythOrdiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ordi, false]) %>",
          []
        ],
        "extra": {
          "ordi_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupOrdiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ordi, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ordi_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerOrdiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ordi_pyth_oracle_id %>",
            "<%= extras.ordi_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ordi_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythPendleOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_pendle, false]) %>",
          []
        ],
        "extra": {
          "pendle_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupPendleOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_pendle, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "pendle_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPendleOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.pendle_pyth_oracle_id %>",
            "<%= extras.pendle_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "pendle_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_people": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_people, false]) %>",
          []
        ],
        "extra": {
          "people_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_people": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_people, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "people_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_people": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.people_pyth_oracle_id %>",
            "<%= extras.people_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "people_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythPepeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_pepe, false]) %>",
          []
        ],
        "extra": {
          "pepe_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupPepeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_pepe, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "pepe_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPepeOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.pepe_pyth_oracle_id %>",
            "<%= extras.pepe_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "pepe_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_pol": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_pol, false]) %>",
          []
        ],
        "extra": {
          "pol_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_pol": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_pol, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "pol_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_pol": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.pol_pyth_oracle_id %>",
            "<%= extras.pol_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "pol_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_popcat": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_popcat, false]) %>",
          []
        ],
        "extra": {
          "popcat_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_popcat": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_popcat, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "popcat_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_popcat": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.popcat_pyth_oracle_id %>",
            "<%= extras.popcat_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "popcat_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythPythOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_pyth, false]) %>",
          []
        ],
        "extra": {
          "pyth_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupPythOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_pyth, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "pyth_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.pyth_pyth_oracle_id %>",
            "<%= extras.pyth_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_render": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_render, false]) %>",
          []
        ],
        "extra": {
          "render_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_render": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_render, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "render_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_render": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.render_pyth_oracle_id %>",
            "<%= extras.render_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "render_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythRndrOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_rndr, false]) %>",
          []
        ],
        "extra": {
          "rndr_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupRndrOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_rndr, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "rndr_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerRndrOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.rndr_pyth_oracle_id %>",
            "<%= extras.rndr_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "rndr_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythRuneOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_rune, false]) %>",
          []
        ],
        "extra": {
          "rune_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupRuneOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_rune, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "rune_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerRuneOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.rune_pyth_oracle_id %>",
            "<%= extras.rune_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "rune_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_sats": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_sats, false]) %>",
          []
        ],
        "extra": {
          "sats_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_sats": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_sats, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "sats_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_sats": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.sats_pyth_oracle_id %>",
            "<%= extras.sats_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "sats_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythSeiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_sei, false]) %>",
          []
        ],
        "extra": {
          "sei_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupSeiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_sei, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "sei_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerSeiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.sei_pyth_oracle_id %>",
            "<%= extras.sei_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "sei_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythShibOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_shib, false]) %>",
          []
        ],
        "extra": {
          "shib_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupShibOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_shib, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "shib_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerShibOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.shib_pyth_oracle_id %>",
            "<%= extras.shib_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "shib_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythSnxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_snx, false]) %>",
          []
        ],
        "extra": {
          "snx_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupSnxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_snx, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "snx_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerSnxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.snx_pyth_oracle_id %>",
            "<%= extras.snx_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "snx_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythSolOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_sol, false]) %>",
          []
        ],
        "extra": {
          "sol_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupSolOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_sol, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "sol_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerSolOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.sol_pyth_oracle_id %>",
            "<%= extras.sol_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "sol_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythStrkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_strk, false]) %>",
          []
        ],
        "extra": {
          "strk_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupStrkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_strk, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "strk_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerStrkOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.strk_pyth_oracle_id %>",
            "<%= extras.strk_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "strk_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythStxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_stx, false]) %>",
          []
        ],
        "extra": {
          "stx_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupStxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_stx, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "stx_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerStxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.stx_pyth_oracle_id %>",
            "<%= extras.stx_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "stx_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythSuiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_sui, false]) %>",
          []
        ],
        "extra": {
          "sui_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupSuiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_sui, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "sui_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerSuiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.sui_pyth_oracle_id %>",
            "<%= extras.sui_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "sui_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythSushiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_sushi, false]) %>",
          []
        ],
        "extra": {
          "sushi_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupSushiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_sushi, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "sushi_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerSushiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.sushi_pyth_oracle_id %>",
            "<%= extras.sushi_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "sushi_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythTaoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_tao, false]) %>",
          []
        ],
        "extra": {
          "tao_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupTaoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_tao, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "tao_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerTaoOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.tao_pyth_oracle_id %>",
            "<%= extras.tao_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "tao_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythTiaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_tia, false]) %>",
          []
        ],
        "extra": {
          "tia_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupTiaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_tia, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "tia_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerTiaOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.tia_pyth_oracle_id %>",
            "<%= extras.tia_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "tia_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythTonOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_ton, false]) %>",
          []
        ],
        "extra": {
          "ton_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupTonOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_ton, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "ton_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerTonOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.ton_pyth_oracle_id %>",
            "<%= extras.ton_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "ton_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythTrxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_trx, false]) %>",
          []
        ],
        "extra": {
          "trx_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupTrxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_trx, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "trx_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerTrxOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.trx_pyth_oracle_id %>",
            "<%= extras.trx_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "trx_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythUniOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_uni, false]) %>",
          []
        ],
        "extra": {
          "uni_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupUniOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_uni, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "uni_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerUniOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.uni_pyth_oracle_id %>",
            "<%= extras.uni_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "uni_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythWOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_w, false]) %>",
          []
        ],
        "extra": {
          "w_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupWOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_w, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "w_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerWOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.w_pyth_oracle_id %>",
            "<%= extras.w_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "w_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythWifOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_wif, false]) %>",
          []
        ],
        "extra": {
          "wif_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupWifOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_wif, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "wif_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerWifOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.wif_pyth_oracle_id %>",
            "<%= extras.wif_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "wif_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_wld": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_wld, false]) %>",
          []
        ],
        "extra": {
          "wld_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_wld": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_wld, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "wld_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_wld": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.wld_pyth_oracle_id %>",
            "<%= extras.wld_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "wld_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythWstEthOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_wsteth, false]) %>",
          []
        ],
        "extra": {
          "wsteth_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupWstEthOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_wsteth, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "wsteth_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerWstEthOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.wsteth_pyth_oracle_id %>",
            "<%= extras.wsteth_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "wsteth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythXlmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_xlm, false]) %>",
          []
        ],
        "extra": {
          "xlm_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupXlmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_xlm, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "xlm_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerXlmOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.xlm_pyth_oracle_id %>",
            "<%= extras.xlm_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "xlm_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythXrpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_xrp, false]) %>",
          []
        ],
        "extra": {
          "xrp_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupXrpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_xrp, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "xrp_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerXrpOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.xrp_pyth_oracle_id %>",
            "<%= extras.xrp_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "xrp_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerPythYfiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_yfi, false]) %>",
          []
        ],
        "extra": {
          "yfi_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerLookupYfiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_yfi, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "yfi_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "registerYfiOracleNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.yfi_pyth_oracle_id %>",
            "<%= extras.yfi_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "yfi_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_zro": {
        "description": "Latest Pyth Price. This registers a staleness node that looks to Pyth for a fresh enough price, or otherwise reverts with an ERC-7412 compatible error ",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          5,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'bool'], [settings.pyth_price_verification_address, settings.pyth_feed_id_zro, false]) %>",
          []
        ],
        "extra": {
          "zro_pyth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_pyth_offchain_lookup_zro": {
        "description": "Pyth Off-chain Lookup",
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          9,
          "<%= defaultAbiCoder.encode(['address', 'bytes32', 'uint256'], [imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address, settings.pyth_feed_id_zro, settings.default_staleness_tolerance]) %>",
          []
        ],
        "extra": {
          "zro_lookup_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_staleness_zro": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.default_staleness_tolerance]) %>",
          [
            "<%= extras.zro_pyth_oracle_id %>",
            "<%= extras.zro_lookup_oracle_id %>"
          ]
        ],
        "extra": {
          "zro_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "register_erc_4626_to_assets_ratio_oracle_node": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          2,
          "<%= defaultAbiCoder.encode(['address'], [imports.erc_4626_to_assets_ratio_oracle.contracts.ERC4626ToAssetsRatioOracle.address]) %>",
          []
        ],
        "extra": {
          "erc_4626_to_assets_ratio_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "clone.erc_4626_to_assets_ratio_oracle",
          "provision.system"
        ]
      },
      "PerpsMarketProxy_setCollateralConfiguration_USD": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setCollateralConfiguration",
        "args": [
          "0",
          "<%= settings.usd_max_collateral_amount %>",
          "<%= settings.usd_upper_limit_discount %>",
          "<%= settings.usd_lower_limit_discount %>",
          "<%= settings.usd_discount_scalar %>"
        ]
      },
      "PerpsMarketProxy_setCollateralConfiguration_synth_cbbtc": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setCollateralConfiguration",
        "args": [
          "<%= extras.synth_cbbtc_market_id %>",
          "<%= settings.synth_cbbtc_max_collateral_amount %>",
          "<%= settings.synth_cbbtc_upper_limit_discount %>",
          "<%= settings.synth_cbbtc_lower_limit_discount %>",
          "<%= settings.synth_cbbtc_discount_scalar %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_Perps_synth_cbbtc": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= imports.perpsFactory.extras.superMarketId %>",
          "<%= extras.synth_cbbtc_token_address %>",
          "<%= settings.synth_cbbtc_max_collateral_amount %>"
        ]
      },
      "OracleManagerProxy_registerNode_keeper_cost_ETH": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          2,
          "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint256', 'uint256', 'uint256', 'uint256', 'uint256', 'uint256', 'uint256', 'uint256'], [imports.perps_gas_oracle_node.contracts.OpGasPriceOracle.address, settings.perps_keeper_l1_cost_settle_gas_units, settings.perps_keeper_l2_cost_settle_gas_units, settings.perps_keeper_l1_cost_flag_gas_units, settings.perps_keeper_l2_cost_flag_gas_units, settings.perps_keeper_l1_cost_liquidate_gas_units, settings.perps_keeper_l2_cost_liquidate_gas_units, settings.perps_keeper_settle_tx_size, settings.perps_keeper_flag_tx_size, settings.perps_keeper_liquidate_tx_size]) %>",
          []
        ],
        "extra": {
          "perps_keeper_cost_eth_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "OracleManagerProxy_registerNode_keeper_cost_USD": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          1,
          "<%= defaultAbiCoder.encode(['uint256'], [7]) %>",
          [
            "<%= extras.perps_keeper_cost_eth_oracle_id %>",
            "<%= extras.eth_oracle_id %>"
          ]
        ],
        "extra": {
          "perps_keeper_cost_usd_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "PerpsMarketProxy_setKeeperRewardGuards": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setKeeperRewardGuards",
        "args": [
          "<%= settings.perps_liquidation_min_keeper_reward_usd %>",
          "<%= settings.perps_liquidation_min_keeper_profit_ratio_d18 %>",
          "<%= settings.perps_liquidation_max_keeper_reward_usd %>",
          "<%= settings.perps_liquidation_max_keeper_scaling_ratio_d18 %>"
        ]
      },
      "PerpsMarketProxy_setPerAccountCaps": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPerAccountCaps",
        "args": [
          "<%= settings.perps_max_positions_per_account %>",
          "<%= settings.perps_max_collaterals_per_account %>"
        ]
      },
      "PerpsMarketProxy_updateKeeperCostNodeId": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updateKeeperCostNodeId",
        "args": [
          "<%= extras.perps_keeper_cost_usd_oracle_id %>"
        ]
      },
      "PerpsMarketProxy_setInterestRateParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setInterestRateParameters",
        "args": [
          "<%= settings.perps_low_util_gradient %>",
          "<%= settings.perps_gradient_breakpoint %>",
          "<%= settings.perps_high_util_gradient %>"
        ]
      },
      "PerpsMarketProxy_setCollateralLiquidateRewardRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setCollateralLiquidateRewardRatio",
        "args": [
          "<%= settings.perps_collateral_liquidation_ratio %>"
        ]
      },
      "setPolynomialAsReferrerOnPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updateReferrerShare",
        "args": [
          "0x159c143eF9Be79d5672726150462C9EfA679b27c",
          "<%= settings.referrerFee %>"
        ]
      },
      "setKwentaAsReferrerOnPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updateReferrerShare",
        "args": [
          "0xFffe627790EF1B28E3b48000b8Ba964b55766fF8",
          "<%= settings.referrerFee %>"
        ]
      },
      "setInfinexAsReferrerOnPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updateReferrerShare",
        "args": [
          "0xa7DB9b0a95D253022068d43BD1d64756f92eF83C",
          "<%= settings.referrerFee %>"
        ]
      },
      "setPerpsMarketName": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPerpsMarketName",
        "args": [
          "<%= settings.perps_super_market_name %>"
        ]
      },
      "setLowCapPerpsMarketName": {
        "target": [
          "perpsLowCapFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPerpsMarketName",
        "args": [
          "<%= settings.perps_lowcap_super_market_name %>"
        ]
      },
      "allowAllPerpsSystem": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFeatureFlagAllowAll",
        "args": [
          "<%= formatBytes32String('perpsSystem') %>",
          true
        ]
      },
      "createAavePerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "Aave",
          "AAVE"
        ]
      },
      "setPerpsPriceAave": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= extras.aave_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsAaveSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "aave_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsAaveSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= extras.aave_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_aave %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsAaveFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= settings.aave_perps_market_skew_scale %>",
          "<%= settings.aave_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsAaveOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= settings.aave_perps_maker_fee_ratio %>",
          "<%= settings.aave_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsAaveMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= settings.aave_perps_max_market_size %>"
        ]
      },
      "setPerpsAaveMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= settings.aave_perps_max_market_value %>"
        ]
      },
      "setPerpsAaveMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= settings.aave_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.aave_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.aave_perps_max_liquidation_pd %>",
          "<%= settings.aave_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsAaveLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= settings.aave_perps_initial_margin_ratio %>",
          "<%= settings.aave_perps_minimum_initial_margin_ratio %>",
          "<%= settings.aave_perps_maintenance_margin_scalar %>",
          "<%= settings.aave_perps_flag_reward_ratio_d18 %>",
          "<%= settings.aave_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsAaveLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.aave_perps_market_id %>",
          "<%= settings.aave_perps_locked_oi_ratio %>"
        ]
      },
      "createAdaPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "Cardano",
          "ADA"
        ]
      },
      "setPerpsPriceAda": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= extras.ada_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsAdaSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ada_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsAdaSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= extras.ada_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ada %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsAdaFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= settings.ada_perps_market_skew_scale %>",
          "<%= settings.ada_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsAdaOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= settings.ada_perps_maker_fee_ratio %>",
          "<%= settings.ada_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsAdaMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= settings.ada_perps_max_market_size %>"
        ]
      },
      "setPerpsAdaMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= settings.ada_perps_max_market_value %>"
        ]
      },
      "setPerpsAdaMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= settings.ada_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ada_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ada_perps_max_liquidation_pd %>",
          "<%= settings.ada_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsAdaLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= settings.ada_perps_initial_margin_ratio %>",
          "<%= settings.ada_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ada_perps_maintenance_margin_scalar %>",
          "<%= settings.ada_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ada_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsAdaLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ada_perps_market_id %>",
          "<%= settings.ada_perps_locked_oi_ratio %>"
        ]
      },
      "createAlgoPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "Algorand",
          "ALGO"
        ]
      },
      "setPerpsPriceAlgo": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= extras.algo_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsAlgoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "algo_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsAlgoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= extras.algo_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_algo %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsAlgoFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= settings.algo_perps_market_skew_scale %>",
          "<%= settings.algo_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsAlgoOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= settings.algo_perps_maker_fee_ratio %>",
          "<%= settings.algo_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsAlgoMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= settings.algo_perps_max_market_size %>"
        ]
      },
      "setPerpsAlgoMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= settings.algo_perps_max_market_value %>"
        ]
      },
      "setPerpsAlgoMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= settings.algo_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.algo_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.algo_perps_max_liquidation_pd %>",
          "<%= settings.algo_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsAlgoLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= settings.algo_perps_initial_margin_ratio %>",
          "<%= settings.algo_perps_minimum_initial_margin_ratio %>",
          "<%= settings.algo_perps_maintenance_margin_scalar %>",
          "<%= settings.algo_perps_flag_reward_ratio_d18 %>",
          "<%= settings.algo_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsAlgoLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.algo_perps_market_id %>",
          "<%= settings.algo_perps_locked_oi_ratio %>"
        ]
      },
      "createAptPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "Aptos",
          "APT"
        ]
      },
      "setPerpsPriceApt": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= extras.apt_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsAptSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "apt_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsAptSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= extras.apt_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_apt %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsAptFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= settings.apt_perps_market_skew_scale %>",
          "<%= settings.apt_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsAptOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= settings.apt_perps_maker_fee_ratio %>",
          "<%= settings.apt_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsAptMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= settings.apt_perps_max_market_size %>"
        ]
      },
      "setPerpsAptMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= settings.apt_perps_max_market_value %>"
        ]
      },
      "setPerpsAptMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= settings.apt_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.apt_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.apt_perps_max_liquidation_pd %>",
          "<%= settings.apt_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsAptLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= settings.apt_perps_initial_margin_ratio %>",
          "<%= settings.apt_perps_minimum_initial_margin_ratio %>",
          "<%= settings.apt_perps_maintenance_margin_scalar %>",
          "<%= settings.apt_perps_flag_reward_ratio_d18 %>",
          "<%= settings.apt_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsAptLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.apt_perps_market_id %>",
          "<%= settings.apt_perps_locked_oi_ratio %>"
        ]
      },
      "createArbPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "Arbitrum",
          "ARB"
        ]
      },
      "setPerpsPriceArb": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= extras.arb_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsArbSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "arb_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsArbSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= extras.arb_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_arb %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsArbFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= settings.arb_perps_market_skew_scale %>",
          "<%= settings.arb_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsArbOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= settings.arb_perps_maker_fee_ratio %>",
          "<%= settings.arb_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsArbMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= settings.arb_perps_max_market_size %>"
        ]
      },
      "setPerpsArbMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= settings.arb_perps_max_market_value %>"
        ]
      },
      "setPerpsArbMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= settings.arb_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.arb_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.arb_perps_max_liquidation_pd %>",
          "<%= settings.arb_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsArbLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= settings.arb_perps_initial_margin_ratio %>",
          "<%= settings.arb_perps_minimum_initial_margin_ratio %>",
          "<%= settings.arb_perps_maintenance_margin_scalar %>",
          "<%= settings.arb_perps_flag_reward_ratio_d18 %>",
          "<%= settings.arb_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsArbLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.arb_perps_market_id %>",
          "<%= settings.arb_perps_locked_oi_ratio %>"
        ]
      },
      "createArkmPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "Arkham",
          "ARKM"
        ]
      },
      "setPerpsPriceArkm": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= extras.arkm_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsArkmSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "arkm_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsArkmSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= extras.arkm_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_arkm %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsArkmFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= settings.arkm_perps_market_skew_scale %>",
          "<%= settings.arkm_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsArkmOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= settings.arkm_perps_maker_fee_ratio %>",
          "<%= settings.arkm_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsArkmMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= settings.arkm_perps_max_market_size %>"
        ]
      },
      "setPerpsArkmMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= settings.arkm_perps_max_market_value %>"
        ]
      },
      "setPerpsArkmMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= settings.arkm_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.arkm_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.arkm_perps_max_liquidation_pd %>",
          "<%= settings.arkm_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsArkmLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= settings.arkm_perps_initial_margin_ratio %>",
          "<%= settings.arkm_perps_minimum_initial_margin_ratio %>",
          "<%= settings.arkm_perps_maintenance_margin_scalar %>",
          "<%= settings.arkm_perps_flag_reward_ratio_d18 %>",
          "<%= settings.arkm_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsArkmLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.arkm_perps_market_id %>",
          "<%= settings.arkm_perps_locked_oi_ratio %>"
        ]
      },
      "createAtomPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "Cosmos",
          "ATOM"
        ]
      },
      "setPerpsPriceAtom": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= extras.atom_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsAtomSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "atom_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsAtomSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= extras.atom_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_atom %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsAtomFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= settings.atom_perps_market_skew_scale %>",
          "<%= settings.atom_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsAtomOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= settings.atom_perps_maker_fee_ratio %>",
          "<%= settings.atom_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsAtomMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= settings.atom_perps_max_market_size %>"
        ]
      },
      "setPerpsAtomMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= settings.atom_perps_max_market_value %>"
        ]
      },
      "setPerpsAtomMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= settings.atom_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.atom_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.atom_perps_max_liquidation_pd %>",
          "<%= settings.atom_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsAtomLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= settings.atom_perps_initial_margin_ratio %>",
          "<%= settings.atom_perps_minimum_initial_margin_ratio %>",
          "<%= settings.atom_perps_maintenance_margin_scalar %>",
          "<%= settings.atom_perps_flag_reward_ratio_d18 %>",
          "<%= settings.atom_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsAtomLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.atom_perps_market_id %>",
          "<%= settings.atom_perps_locked_oi_ratio %>"
        ]
      },
      "createAvaxPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "Avalanche",
          "AVAX"
        ]
      },
      "setPerpsPriceAvax": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= extras.avax_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsAvaxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "avax_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsAvaxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= extras.avax_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_avax %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsAvaxFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= settings.avax_perps_market_skew_scale %>",
          "<%= settings.avax_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsAvaxOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= settings.avax_perps_maker_fee_ratio %>",
          "<%= settings.avax_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsAvaxMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= settings.avax_perps_max_market_size %>"
        ]
      },
      "setPerpsAvaxMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= settings.avax_perps_max_market_value %>"
        ]
      },
      "setPerpsAvaxMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= settings.avax_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.avax_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.avax_perps_max_liquidation_pd %>",
          "<%= settings.avax_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsAvaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= settings.avax_perps_initial_margin_ratio %>",
          "<%= settings.avax_perps_minimum_initial_margin_ratio %>",
          "<%= settings.avax_perps_maintenance_margin_scalar %>",
          "<%= settings.avax_perps_flag_reward_ratio_d18 %>",
          "<%= settings.avax_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsAvaxLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.avax_perps_market_id %>",
          "<%= settings.avax_perps_locked_oi_ratio %>"
        ]
      },
      "createAxlPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "Axelar",
          "AXL"
        ]
      },
      "setPerpsPriceAxl": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= extras.axl_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsAxlSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "axl_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsAxlSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= extras.axl_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_axl %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsAxlFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= settings.axl_perps_market_skew_scale %>",
          "<%= settings.axl_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsAxlOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= settings.axl_perps_maker_fee_ratio %>",
          "<%= settings.axl_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsAxlMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= settings.axl_perps_max_market_size %>"
        ]
      },
      "setPerpsAxlMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= settings.axl_perps_max_market_value %>"
        ]
      },
      "setPerpsAxlMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= settings.axl_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.axl_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.axl_perps_max_liquidation_pd %>",
          "<%= settings.axl_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsAxlLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= settings.axl_perps_initial_margin_ratio %>",
          "<%= settings.axl_perps_minimum_initial_margin_ratio %>",
          "<%= settings.axl_perps_maintenance_margin_scalar %>",
          "<%= settings.axl_perps_flag_reward_ratio_d18 %>",
          "<%= settings.axl_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsAxlLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.axl_perps_market_id %>",
          "<%= settings.axl_perps_locked_oi_ratio %>"
        ]
      },
      "createAxsPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "Axie Infinity",
          "AXS"
        ]
      },
      "setPerpsPriceAxs": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= extras.axs_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsAxsSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "axs_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsAxsSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= extras.axs_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_axs %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsAxsFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= settings.axs_perps_market_skew_scale %>",
          "<%= settings.axs_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsAxsOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= settings.axs_perps_maker_fee_ratio %>",
          "<%= settings.axs_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsAxsMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= settings.axs_perps_max_market_size %>"
        ]
      },
      "setPerpsAxsMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= settings.axs_perps_max_market_value %>"
        ]
      },
      "setPerpsAxsMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= settings.axs_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.axs_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.axs_perps_max_liquidation_pd %>",
          "<%= settings.axs_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsAxsLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= settings.axs_perps_initial_margin_ratio %>",
          "<%= settings.axs_perps_minimum_initial_margin_ratio %>",
          "<%= settings.axs_perps_maintenance_margin_scalar %>",
          "<%= settings.axs_perps_flag_reward_ratio_d18 %>",
          "<%= settings.axs_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsAxsLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.axs_perps_market_id %>",
          "<%= settings.axs_perps_locked_oi_ratio %>"
        ]
      },
      "createBalPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "Balancer",
          "BAL"
        ]
      },
      "setPerpsPriceBal": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= extras.bal_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsBalSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "bal_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsBalSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= extras.bal_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_bal %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsBalFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= settings.bal_perps_market_skew_scale %>",
          "<%= settings.bal_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsBalOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= settings.bal_perps_maker_fee_ratio %>",
          "<%= settings.bal_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsBalMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= settings.bal_perps_max_market_size %>"
        ]
      },
      "setPerpsBalMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= settings.bal_perps_max_market_value %>"
        ]
      },
      "setPerpsBalMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= settings.bal_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.bal_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.bal_perps_max_liquidation_pd %>",
          "<%= settings.bal_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsBalLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= settings.bal_perps_initial_margin_ratio %>",
          "<%= settings.bal_perps_minimum_initial_margin_ratio %>",
          "<%= settings.bal_perps_maintenance_margin_scalar %>",
          "<%= settings.bal_perps_flag_reward_ratio_d18 %>",
          "<%= settings.bal_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsBalLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.bal_perps_market_id %>",
          "<%= settings.bal_perps_locked_oi_ratio %>"
        ]
      },
      "createBchPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "Bitcoin Cash",
          "BCH"
        ]
      },
      "setPerpsPriceBch": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= extras.bch_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsBchSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "bch_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsBchSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= extras.bch_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_bch %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsBchFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= settings.bch_perps_market_skew_scale %>",
          "<%= settings.bch_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsBchOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= settings.bch_perps_maker_fee_ratio %>",
          "<%= settings.bch_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsBchMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= settings.bch_perps_max_market_size %>"
        ]
      },
      "setPerpsBchMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= settings.bch_perps_max_market_value %>"
        ]
      },
      "setPerpsBchMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= settings.bch_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.bch_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.bch_perps_max_liquidation_pd %>",
          "<%= settings.bch_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsBchLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= settings.bch_perps_initial_margin_ratio %>",
          "<%= settings.bch_perps_minimum_initial_margin_ratio %>",
          "<%= settings.bch_perps_maintenance_margin_scalar %>",
          "<%= settings.bch_perps_flag_reward_ratio_d18 %>",
          "<%= settings.bch_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsBchLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.bch_perps_market_id %>",
          "<%= settings.bch_perps_locked_oi_ratio %>"
        ]
      },
      "createBlurPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "Blur",
          "BLUR"
        ]
      },
      "setPerpsPriceBlur": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= extras.blur_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsBlurSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "blur_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsBlurSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= extras.blur_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_blur %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsBlurFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= settings.blur_perps_market_skew_scale %>",
          "<%= settings.blur_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsBlurOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= settings.blur_perps_maker_fee_ratio %>",
          "<%= settings.blur_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsBlurMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= settings.blur_perps_max_market_size %>"
        ]
      },
      "setPerpsBlurMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= settings.blur_perps_max_market_value %>"
        ]
      },
      "setPerpsBlurMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= settings.blur_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.blur_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.blur_perps_max_liquidation_pd %>",
          "<%= settings.blur_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsBlurLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= settings.blur_perps_initial_margin_ratio %>",
          "<%= settings.blur_perps_minimum_initial_margin_ratio %>",
          "<%= settings.blur_perps_maintenance_margin_scalar %>",
          "<%= settings.blur_perps_flag_reward_ratio_d18 %>",
          "<%= settings.blur_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsBlurLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.blur_perps_market_id %>",
          "<%= settings.blur_perps_locked_oi_ratio %>"
        ]
      },
      "createBnbPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "BNB",
          "BNB"
        ]
      },
      "setPerpsPriceBnb": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= extras.bnb_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsBnbSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "bnb_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsBnbSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= extras.bnb_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_bnb %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsBnbFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= settings.bnb_perps_market_skew_scale %>",
          "<%= settings.bnb_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsBnbOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= settings.bnb_perps_maker_fee_ratio %>",
          "<%= settings.bnb_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsBnbMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= settings.bnb_perps_max_market_size %>"
        ]
      },
      "setPerpsBnbMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= settings.bnb_perps_max_market_value %>"
        ]
      },
      "setPerpsBnbMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= settings.bnb_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.bnb_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.bnb_perps_max_liquidation_pd %>",
          "<%= settings.bnb_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsBnbLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= settings.bnb_perps_initial_margin_ratio %>",
          "<%= settings.bnb_perps_minimum_initial_margin_ratio %>",
          "<%= settings.bnb_perps_maintenance_margin_scalar %>",
          "<%= settings.bnb_perps_flag_reward_ratio_d18 %>",
          "<%= settings.bnb_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsBnbLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.bnb_perps_market_id %>",
          "<%= settings.bnb_perps_locked_oi_ratio %>"
        ]
      },
      "createBomePerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "BOOK OF MEME",
          "BOME"
        ]
      },
      "setPerpsPriceBome": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= extras.bome_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsBomeSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "bome_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsBomeSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= extras.bome_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_bome %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsBomeFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= settings.bome_perps_market_skew_scale %>",
          "<%= settings.bome_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsBomeOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= settings.bome_perps_maker_fee_ratio %>",
          "<%= settings.bome_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsBomeMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= settings.bome_perps_max_market_size %>"
        ]
      },
      "setPerpsBomeMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= settings.bome_perps_max_market_value %>"
        ]
      },
      "setPerpsBomeMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= settings.bome_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.bome_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.bome_perps_max_liquidation_pd %>",
          "<%= settings.bome_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsBomeLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= settings.bome_perps_initial_margin_ratio %>",
          "<%= settings.bome_perps_minimum_initial_margin_ratio %>",
          "<%= settings.bome_perps_maintenance_margin_scalar %>",
          "<%= settings.bome_perps_flag_reward_ratio_d18 %>",
          "<%= settings.bome_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsBomeLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.bome_perps_market_id %>",
          "<%= settings.bome_perps_locked_oi_ratio %>"
        ]
      },
      "createBonkPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "Bonk",
          "BONK"
        ]
      },
      "setPerpsPriceBonk": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= extras.bonk_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsBonkSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "bonk_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsBonkSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= extras.bonk_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_bonk %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsBonkFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= settings.bonk_perps_market_skew_scale %>",
          "<%= settings.bonk_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsBonkOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= settings.bonk_perps_maker_fee_ratio %>",
          "<%= settings.bonk_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsBonkMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= settings.bonk_perps_max_market_size %>"
        ]
      },
      "setPerpsBonkMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= settings.bonk_perps_max_market_value %>"
        ]
      },
      "setPerpsBonkMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= settings.bonk_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.bonk_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.bonk_perps_max_liquidation_pd %>",
          "<%= settings.bonk_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsBonkLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= settings.bonk_perps_initial_margin_ratio %>",
          "<%= settings.bonk_perps_minimum_initial_margin_ratio %>",
          "<%= settings.bonk_perps_maintenance_margin_scalar %>",
          "<%= settings.bonk_perps_flag_reward_ratio_d18 %>",
          "<%= settings.bonk_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsBonkLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.bonk_perps_market_id %>",
          "<%= settings.bonk_perps_locked_oi_ratio %>"
        ]
      },
      "createBtcPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "Bitcoin",
          "BTC"
        ]
      },
      "setPerpsPriceBtc": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= extras.btc_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsBtcSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "btc_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsBtcSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= extras.btc_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_btc %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsBtcFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= settings.btc_perps_market_skew_scale %>",
          "<%= settings.btc_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsBtcOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= settings.btc_perps_maker_fee_ratio %>",
          "<%= settings.btc_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsBtcMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= settings.btc_perps_max_market_size %>"
        ]
      },
      "setPerpsBtcMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= settings.btc_perps_max_market_value %>"
        ]
      },
      "setPerpsBtcMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= settings.btc_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.btc_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.btc_perps_max_liquidation_pd %>",
          "<%= settings.btc_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsBtcLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= settings.btc_perps_initial_margin_ratio %>",
          "<%= settings.btc_perps_minimum_initial_margin_ratio %>",
          "<%= settings.btc_perps_maintenance_margin_scalar %>",
          "<%= settings.btc_perps_flag_reward_ratio_d18 %>",
          "<%= settings.btc_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsBtcLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.btc_perps_market_id %>",
          "<%= settings.btc_perps_locked_oi_ratio %>"
        ]
      },
      "createCompPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "Compound",
          "COMP"
        ]
      },
      "setPerpsPriceComp": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= extras.comp_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsCompSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "comp_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsCompSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= extras.comp_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_comp %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsCompFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= settings.comp_perps_market_skew_scale %>",
          "<%= settings.comp_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsCompOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= settings.comp_perps_maker_fee_ratio %>",
          "<%= settings.comp_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsCompMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= settings.comp_perps_max_market_size %>"
        ]
      },
      "setPerpsCompMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= settings.comp_perps_max_market_value %>"
        ]
      },
      "setPerpsCompMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= settings.comp_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.comp_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.comp_perps_max_liquidation_pd %>",
          "<%= settings.comp_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsCompLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= settings.comp_perps_initial_margin_ratio %>",
          "<%= settings.comp_perps_minimum_initial_margin_ratio %>",
          "<%= settings.comp_perps_maintenance_margin_scalar %>",
          "<%= settings.comp_perps_flag_reward_ratio_d18 %>",
          "<%= settings.comp_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsCompLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.comp_perps_market_id %>",
          "<%= settings.comp_perps_locked_oi_ratio %>"
        ]
      },
      "createCrvPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "Curve Dao",
          "CRV"
        ]
      },
      "setPerpsPriceCrv": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= extras.crv_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsCrvSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "crv_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsCrvSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= extras.crv_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_crv %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsCrvFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= settings.crv_perps_market_skew_scale %>",
          "<%= settings.crv_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsCrvOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= settings.crv_perps_maker_fee_ratio %>",
          "<%= settings.crv_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsCrvMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= settings.crv_perps_max_market_size %>"
        ]
      },
      "setPerpsCrvMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= settings.crv_perps_max_market_value %>"
        ]
      },
      "setPerpsCrvMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= settings.crv_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.crv_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.crv_perps_max_liquidation_pd %>",
          "<%= settings.crv_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsCrvLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= settings.crv_perps_initial_margin_ratio %>",
          "<%= settings.crv_perps_minimum_initial_margin_ratio %>",
          "<%= settings.crv_perps_maintenance_margin_scalar %>",
          "<%= settings.crv_perps_flag_reward_ratio_d18 %>",
          "<%= settings.crv_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsCrvLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.crv_perps_market_id %>",
          "<%= settings.crv_perps_locked_oi_ratio %>"
        ]
      },
      "createDogePerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "Dogecoin",
          "DOGE"
        ]
      },
      "setPerpsPriceDoge": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= extras.doge_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsDogeSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "doge_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsDogeSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= extras.doge_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_doge %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsDogeFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= settings.doge_perps_market_skew_scale %>",
          "<%= settings.doge_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsDogeOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= settings.doge_perps_maker_fee_ratio %>",
          "<%= settings.doge_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsDogeMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= settings.doge_perps_max_market_size %>"
        ]
      },
      "setPerpsDogeMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= settings.doge_perps_max_market_value %>"
        ]
      },
      "setPerpsDogeMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= settings.doge_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.doge_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.doge_perps_max_liquidation_pd %>",
          "<%= settings.doge_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsDogeLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= settings.doge_perps_initial_margin_ratio %>",
          "<%= settings.doge_perps_minimum_initial_margin_ratio %>",
          "<%= settings.doge_perps_maintenance_margin_scalar %>",
          "<%= settings.doge_perps_flag_reward_ratio_d18 %>",
          "<%= settings.doge_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsDogeLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.doge_perps_market_id %>",
          "<%= settings.doge_perps_locked_oi_ratio %>"
        ]
      },
      "createDotPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "Polkadot",
          "DOT"
        ]
      },
      "setPerpsPriceDot": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= extras.dot_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsDotSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "dot_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsDotSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= extras.dot_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_dot %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsDotFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= settings.dot_perps_market_skew_scale %>",
          "<%= settings.dot_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsDotOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= settings.dot_perps_maker_fee_ratio %>",
          "<%= settings.dot_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsDotMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= settings.dot_perps_max_market_size %>"
        ]
      },
      "setPerpsDotMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= settings.dot_perps_max_market_value %>"
        ]
      },
      "setPerpsDotMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= settings.dot_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.dot_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.dot_perps_max_liquidation_pd %>",
          "<%= settings.dot_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsDotLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= settings.dot_perps_initial_margin_ratio %>",
          "<%= settings.dot_perps_minimum_initial_margin_ratio %>",
          "<%= settings.dot_perps_maintenance_margin_scalar %>",
          "<%= settings.dot_perps_flag_reward_ratio_d18 %>",
          "<%= settings.dot_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsDotLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.dot_perps_market_id %>",
          "<%= settings.dot_perps_locked_oi_ratio %>"
        ]
      },
      "createDydxPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "Dydx",
          "DYDX"
        ]
      },
      "setPerpsPriceDydx": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= extras.dydx_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsDydxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "dydx_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsDydxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= extras.dydx_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_dydx %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsDydxFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= settings.dydx_perps_market_skew_scale %>",
          "<%= settings.dydx_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsDydxOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= settings.dydx_perps_maker_fee_ratio %>",
          "<%= settings.dydx_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsDydxMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= settings.dydx_perps_max_market_size %>"
        ]
      },
      "setPerpsDydxMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= settings.dydx_perps_max_market_value %>"
        ]
      },
      "setPerpsDydxMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= settings.dydx_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.dydx_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.dydx_perps_max_liquidation_pd %>",
          "<%= settings.dydx_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsDydxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= settings.dydx_perps_initial_margin_ratio %>",
          "<%= settings.dydx_perps_minimum_initial_margin_ratio %>",
          "<%= settings.dydx_perps_maintenance_margin_scalar %>",
          "<%= settings.dydx_perps_flag_reward_ratio_d18 %>",
          "<%= settings.dydx_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsDydxLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.dydx_perps_market_id %>",
          "<%= settings.dydx_perps_locked_oi_ratio %>"
        ]
      },
      "createEigenPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "Eigenlayer",
          "EIGEN"
        ]
      },
      "setPerpsPriceEigen": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= extras.eigen_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsEigenSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "eigen_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsEigenSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= extras.eigen_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_eigen %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsEigenFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= settings.eigen_perps_market_skew_scale %>",
          "<%= settings.eigen_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsEigenOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= settings.eigen_perps_maker_fee_ratio %>",
          "<%= settings.eigen_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsEigenMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= settings.eigen_perps_max_market_size %>"
        ]
      },
      "setPerpsEigenMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= settings.eigen_perps_max_market_value %>"
        ]
      },
      "setPerpsEigenMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= settings.eigen_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.eigen_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.eigen_perps_max_liquidation_pd %>",
          "<%= settings.eigen_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsEigenLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= settings.eigen_perps_initial_margin_ratio %>",
          "<%= settings.eigen_perps_minimum_initial_margin_ratio %>",
          "<%= settings.eigen_perps_maintenance_margin_scalar %>",
          "<%= settings.eigen_perps_flag_reward_ratio_d18 %>",
          "<%= settings.eigen_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsEigenLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.eigen_perps_market_id %>",
          "<%= settings.eigen_perps_locked_oi_ratio %>"
        ]
      },
      "createEnaPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "Ethena",
          "ENA"
        ]
      },
      "setPerpsPriceEna": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= extras.ena_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsEnaSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ena_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsEnaSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= extras.ena_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ena %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsEnaFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= settings.ena_perps_market_skew_scale %>",
          "<%= settings.ena_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsEnaOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= settings.ena_perps_maker_fee_ratio %>",
          "<%= settings.ena_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsEnaMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= settings.ena_perps_max_market_size %>"
        ]
      },
      "setPerpsEnaMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= settings.ena_perps_max_market_value %>"
        ]
      },
      "setPerpsEnaMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= settings.ena_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ena_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ena_perps_max_liquidation_pd %>",
          "<%= settings.ena_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsEnaLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= settings.ena_perps_initial_margin_ratio %>",
          "<%= settings.ena_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ena_perps_maintenance_margin_scalar %>",
          "<%= settings.ena_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ena_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsEnaLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ena_perps_market_id %>",
          "<%= settings.ena_perps_locked_oi_ratio %>"
        ]
      },
      "createEosPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "Eos",
          "EOS"
        ]
      },
      "setPerpsPriceEos": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= extras.eos_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsEosSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "eos_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsEosSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= extras.eos_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_eos %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsEosFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= settings.eos_perps_market_skew_scale %>",
          "<%= settings.eos_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsEosOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= settings.eos_perps_maker_fee_ratio %>",
          "<%= settings.eos_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsEosMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= settings.eos_perps_max_market_size %>"
        ]
      },
      "setPerpsEosMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= settings.eos_perps_max_market_value %>"
        ]
      },
      "setPerpsEosMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= settings.eos_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.eos_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.eos_perps_max_liquidation_pd %>",
          "<%= settings.eos_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsEosLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= settings.eos_perps_initial_margin_ratio %>",
          "<%= settings.eos_perps_minimum_initial_margin_ratio %>",
          "<%= settings.eos_perps_maintenance_margin_scalar %>",
          "<%= settings.eos_perps_flag_reward_ratio_d18 %>",
          "<%= settings.eos_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsEosLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.eos_perps_market_id %>",
          "<%= settings.eos_perps_locked_oi_ratio %>"
        ]
      },
      "createEtcPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "Ethereum Classic",
          "ETC"
        ]
      },
      "setPerpsPriceEtc": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= extras.etc_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsEtcSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "etc_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsEtcSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= extras.etc_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_etc %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsEtcFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= settings.etc_perps_market_skew_scale %>",
          "<%= settings.etc_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsEtcOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= settings.etc_perps_maker_fee_ratio %>",
          "<%= settings.etc_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsEtcMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= settings.etc_perps_max_market_size %>"
        ]
      },
      "setPerpsEtcMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= settings.etc_perps_max_market_value %>"
        ]
      },
      "setPerpsEtcMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= settings.etc_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.etc_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.etc_perps_max_liquidation_pd %>",
          "<%= settings.etc_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsEtcLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= settings.etc_perps_initial_margin_ratio %>",
          "<%= settings.etc_perps_minimum_initial_margin_ratio %>",
          "<%= settings.etc_perps_maintenance_margin_scalar %>",
          "<%= settings.etc_perps_flag_reward_ratio_d18 %>",
          "<%= settings.etc_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsEtcLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.etc_perps_market_id %>",
          "<%= settings.etc_perps_locked_oi_ratio %>"
        ]
      },
      "createEthPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "Ethereum",
          "ETH"
        ]
      },
      "setPerpsPriceEth": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= extras.eth_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsEthSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "eth_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsEthSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= extras.eth_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_eth %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsEthFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= settings.eth_perps_market_skew_scale %>",
          "<%= settings.eth_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsEthOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= settings.eth_perps_maker_fee_ratio %>",
          "<%= settings.eth_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsEthMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= settings.eth_perps_max_market_size %>"
        ]
      },
      "setPerpsEthMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= settings.eth_perps_max_market_value %>"
        ]
      },
      "setPerpsEthMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= settings.eth_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.eth_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.eth_perps_max_liquidation_pd %>",
          "<%= settings.eth_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsEthLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= settings.eth_perps_initial_margin_ratio %>",
          "<%= settings.eth_perps_minimum_initial_margin_ratio %>",
          "<%= settings.eth_perps_maintenance_margin_scalar %>",
          "<%= settings.eth_perps_flag_reward_ratio_d18 %>",
          "<%= settings.eth_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsEthLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.eth_perps_market_id %>",
          "<%= settings.eth_perps_locked_oi_ratio %>"
        ]
      },
      "createEthbtcPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "Ether/Bitcoin Ratio",
          "ETHBTC"
        ]
      },
      "setPerpsPriceEthbtc": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= extras.ethbtc_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsEthbtcSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ethbtc_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsEthbtcSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= extras.ethbtc_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ethbtc %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsEthbtcFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= settings.ethbtc_perps_market_skew_scale %>",
          "<%= settings.ethbtc_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsEthbtcOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= settings.ethbtc_perps_maker_fee_ratio %>",
          "<%= settings.ethbtc_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsEthbtcMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= settings.ethbtc_perps_max_market_size %>"
        ]
      },
      "setPerpsEthbtcMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= settings.ethbtc_perps_max_market_value %>"
        ]
      },
      "setPerpsEthbtcMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= settings.ethbtc_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ethbtc_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ethbtc_perps_max_liquidation_pd %>",
          "<%= settings.ethbtc_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsEthbtcLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= settings.ethbtc_perps_initial_margin_ratio %>",
          "<%= settings.ethbtc_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ethbtc_perps_maintenance_margin_scalar %>",
          "<%= settings.ethbtc_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ethbtc_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsEthbtcLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ethbtc_perps_market_id %>",
          "<%= settings.ethbtc_perps_locked_oi_ratio %>"
        ]
      },
      "createEthfiPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "Ether.fi",
          "ETHFI"
        ]
      },
      "setPerpsPriceEthfi": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= extras.ethfi_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsEthfiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ethfi_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsEthfiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= extras.ethfi_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ethfi %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsEthfiFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= settings.ethfi_perps_market_skew_scale %>",
          "<%= settings.ethfi_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsEthfiOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= settings.ethfi_perps_maker_fee_ratio %>",
          "<%= settings.ethfi_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsEthfiMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= settings.ethfi_perps_max_market_size %>"
        ]
      },
      "setPerpsEthfiMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= settings.ethfi_perps_max_market_value %>"
        ]
      },
      "setPerpsEthfiMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= settings.ethfi_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ethfi_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ethfi_perps_max_liquidation_pd %>",
          "<%= settings.ethfi_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsEthfiLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= settings.ethfi_perps_initial_margin_ratio %>",
          "<%= settings.ethfi_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ethfi_perps_maintenance_margin_scalar %>",
          "<%= settings.ethfi_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ethfi_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsEthfiLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ethfi_perps_market_id %>",
          "<%= settings.ethfi_perps_locked_oi_ratio %>"
        ]
      },
      "createFilPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "Filecoin",
          "FIL"
        ]
      },
      "setPerpsPriceFil": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= extras.fil_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsFilSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "fil_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsFilSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= extras.fil_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_fil %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsFilFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= settings.fil_perps_market_skew_scale %>",
          "<%= settings.fil_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsFilOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= settings.fil_perps_maker_fee_ratio %>",
          "<%= settings.fil_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsFilMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= settings.fil_perps_max_market_size %>"
        ]
      },
      "setPerpsFilMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= settings.fil_perps_max_market_value %>"
        ]
      },
      "setPerpsFilMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= settings.fil_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.fil_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.fil_perps_max_liquidation_pd %>",
          "<%= settings.fil_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsFilLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= settings.fil_perps_initial_margin_ratio %>",
          "<%= settings.fil_perps_minimum_initial_margin_ratio %>",
          "<%= settings.fil_perps_maintenance_margin_scalar %>",
          "<%= settings.fil_perps_flag_reward_ratio_d18 %>",
          "<%= settings.fil_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsFilLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.fil_perps_market_id %>",
          "<%= settings.fil_perps_locked_oi_ratio %>"
        ]
      },
      "createFlowPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "Flow",
          "FLOW"
        ]
      },
      "setPerpsPriceFlow": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= extras.flow_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsFlowSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "flow_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsFlowSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= extras.flow_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_flow %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsFlowFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= settings.flow_perps_market_skew_scale %>",
          "<%= settings.flow_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsFlowOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= settings.flow_perps_maker_fee_ratio %>",
          "<%= settings.flow_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsFlowMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= settings.flow_perps_max_market_size %>"
        ]
      },
      "setPerpsFlowMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= settings.flow_perps_max_market_value %>"
        ]
      },
      "setPerpsFlowMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= settings.flow_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.flow_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.flow_perps_max_liquidation_pd %>",
          "<%= settings.flow_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsFlowLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= settings.flow_perps_initial_margin_ratio %>",
          "<%= settings.flow_perps_minimum_initial_margin_ratio %>",
          "<%= settings.flow_perps_maintenance_margin_scalar %>",
          "<%= settings.flow_perps_flag_reward_ratio_d18 %>",
          "<%= settings.flow_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsFlowLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.flow_perps_market_id %>",
          "<%= settings.flow_perps_locked_oi_ratio %>"
        ]
      },
      "createFtmPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "Fantom",
          "FTM"
        ]
      },
      "setPerpsPriceFtm": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= extras.ftm_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsFtmSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ftm_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsFtmSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= extras.ftm_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ftm %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsFtmFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= settings.ftm_perps_market_skew_scale %>",
          "<%= settings.ftm_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsFtmOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= settings.ftm_perps_maker_fee_ratio %>",
          "<%= settings.ftm_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsFtmMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= settings.ftm_perps_max_market_size %>"
        ]
      },
      "setPerpsFtmMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= settings.ftm_perps_max_market_value %>"
        ]
      },
      "setPerpsFtmMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= settings.ftm_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ftm_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ftm_perps_max_liquidation_pd %>",
          "<%= settings.ftm_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsFtmLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= settings.ftm_perps_initial_margin_ratio %>",
          "<%= settings.ftm_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ftm_perps_maintenance_margin_scalar %>",
          "<%= settings.ftm_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ftm_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsFtmLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ftm_perps_market_id %>",
          "<%= settings.ftm_perps_locked_oi_ratio %>"
        ]
      },
      "createFxsPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "Fraxshare",
          "FXS"
        ]
      },
      "setPerpsPriceFxs": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= extras.fxs_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsFxsSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "fxs_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsFxsSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= extras.fxs_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_fxs %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsFxsFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= settings.fxs_perps_market_skew_scale %>",
          "<%= settings.fxs_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsFxsOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= settings.fxs_perps_maker_fee_ratio %>",
          "<%= settings.fxs_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsFxsMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= settings.fxs_perps_max_market_size %>"
        ]
      },
      "setPerpsFxsMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= settings.fxs_perps_max_market_value %>"
        ]
      },
      "setPerpsFxsMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= settings.fxs_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.fxs_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.fxs_perps_max_liquidation_pd %>",
          "<%= settings.fxs_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsFxsLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= settings.fxs_perps_initial_margin_ratio %>",
          "<%= settings.fxs_perps_minimum_initial_margin_ratio %>",
          "<%= settings.fxs_perps_maintenance_margin_scalar %>",
          "<%= settings.fxs_perps_flag_reward_ratio_d18 %>",
          "<%= settings.fxs_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsFxsLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.fxs_perps_market_id %>",
          "<%= settings.fxs_perps_locked_oi_ratio %>"
        ]
      },
      "createGalaPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "GALA",
          "GALA"
        ]
      },
      "setPerpsPriceGala": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= extras.gala_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsGalaSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "gala_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsGalaSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= extras.gala_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_gala %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsGalaFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= settings.gala_perps_market_skew_scale %>",
          "<%= settings.gala_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsGalaOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= settings.gala_perps_maker_fee_ratio %>",
          "<%= settings.gala_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsGalaMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= settings.gala_perps_max_market_size %>"
        ]
      },
      "setPerpsGalaMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= settings.gala_perps_max_market_value %>"
        ]
      },
      "setPerpsGalaMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= settings.gala_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.gala_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.gala_perps_max_liquidation_pd %>",
          "<%= settings.gala_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsGalaLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= settings.gala_perps_initial_margin_ratio %>",
          "<%= settings.gala_perps_minimum_initial_margin_ratio %>",
          "<%= settings.gala_perps_maintenance_margin_scalar %>",
          "<%= settings.gala_perps_flag_reward_ratio_d18 %>",
          "<%= settings.gala_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsGalaLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.gala_perps_market_id %>",
          "<%= settings.gala_perps_locked_oi_ratio %>"
        ]
      },
      "createGmxPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "GMX",
          "GMX"
        ]
      },
      "setPerpsPriceGmx": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= extras.gmx_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsGmxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "gmx_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsGmxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= extras.gmx_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_gmx %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsGmxFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= settings.gmx_perps_market_skew_scale %>",
          "<%= settings.gmx_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsGmxOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= settings.gmx_perps_maker_fee_ratio %>",
          "<%= settings.gmx_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsGmxMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= settings.gmx_perps_max_market_size %>"
        ]
      },
      "setPerpsGmxMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= settings.gmx_perps_max_market_value %>"
        ]
      },
      "setPerpsGmxMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= settings.gmx_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.gmx_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.gmx_perps_max_liquidation_pd %>",
          "<%= settings.gmx_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsGmxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= settings.gmx_perps_initial_margin_ratio %>",
          "<%= settings.gmx_perps_minimum_initial_margin_ratio %>",
          "<%= settings.gmx_perps_maintenance_margin_scalar %>",
          "<%= settings.gmx_perps_flag_reward_ratio_d18 %>",
          "<%= settings.gmx_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsGmxLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.gmx_perps_market_id %>",
          "<%= settings.gmx_perps_locked_oi_ratio %>"
        ]
      },
      "createGrtPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "The Graph",
          "GRT"
        ]
      },
      "setPerpsPriceGrt": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= extras.grt_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsGrtSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "grt_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsGrtSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= extras.grt_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_grt %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsGrtFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= settings.grt_perps_market_skew_scale %>",
          "<%= settings.grt_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsGrtOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= settings.grt_perps_maker_fee_ratio %>",
          "<%= settings.grt_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsGrtMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= settings.grt_perps_max_market_size %>"
        ]
      },
      "setPerpsGrtMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= settings.grt_perps_max_market_value %>"
        ]
      },
      "setPerpsGrtMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= settings.grt_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.grt_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.grt_perps_max_liquidation_pd %>",
          "<%= settings.grt_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsGrtLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= settings.grt_perps_initial_margin_ratio %>",
          "<%= settings.grt_perps_minimum_initial_margin_ratio %>",
          "<%= settings.grt_perps_maintenance_margin_scalar %>",
          "<%= settings.grt_perps_flag_reward_ratio_d18 %>",
          "<%= settings.grt_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsGrtLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.grt_perps_market_id %>",
          "<%= settings.grt_perps_locked_oi_ratio %>"
        ]
      },
      "createIcpPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "Internet Computer",
          "ICP"
        ]
      },
      "setPerpsPriceIcp": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= extras.icp_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsIcpSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "icp_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsIcpSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= extras.icp_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_icp %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsIcpFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= settings.icp_perps_market_skew_scale %>",
          "<%= settings.icp_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsIcpOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= settings.icp_perps_maker_fee_ratio %>",
          "<%= settings.icp_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsIcpMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= settings.icp_perps_max_market_size %>"
        ]
      },
      "setPerpsIcpMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= settings.icp_perps_max_market_value %>"
        ]
      },
      "setPerpsIcpMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= settings.icp_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.icp_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.icp_perps_max_liquidation_pd %>",
          "<%= settings.icp_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsIcpLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= settings.icp_perps_initial_margin_ratio %>",
          "<%= settings.icp_perps_minimum_initial_margin_ratio %>",
          "<%= settings.icp_perps_maintenance_margin_scalar %>",
          "<%= settings.icp_perps_flag_reward_ratio_d18 %>",
          "<%= settings.icp_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsIcpLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.icp_perps_market_id %>",
          "<%= settings.icp_perps_locked_oi_ratio %>"
        ]
      },
      "createImxPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "Immutable",
          "IMX"
        ]
      },
      "setPerpsPriceImx": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= extras.imx_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsImxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "imx_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsImxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= extras.imx_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_imx %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsImxFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= settings.imx_perps_market_skew_scale %>",
          "<%= settings.imx_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsImxOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= settings.imx_perps_maker_fee_ratio %>",
          "<%= settings.imx_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsImxMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= settings.imx_perps_max_market_size %>"
        ]
      },
      "setPerpsImxMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= settings.imx_perps_max_market_value %>"
        ]
      },
      "setPerpsImxMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= settings.imx_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.imx_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.imx_perps_max_liquidation_pd %>",
          "<%= settings.imx_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsImxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= settings.imx_perps_initial_margin_ratio %>",
          "<%= settings.imx_perps_minimum_initial_margin_ratio %>",
          "<%= settings.imx_perps_maintenance_margin_scalar %>",
          "<%= settings.imx_perps_flag_reward_ratio_d18 %>",
          "<%= settings.imx_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsImxLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.imx_perps_market_id %>",
          "<%= settings.imx_perps_locked_oi_ratio %>"
        ]
      },
      "createInjPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "Injective",
          "INJ"
        ]
      },
      "setPerpsPriceInj": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= extras.inj_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsInjSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "inj_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsInjSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= extras.inj_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_inj %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsInjFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= settings.inj_perps_market_skew_scale %>",
          "<%= settings.inj_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsInjOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= settings.inj_perps_maker_fee_ratio %>",
          "<%= settings.inj_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsInjMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= settings.inj_perps_max_market_size %>"
        ]
      },
      "setPerpsInjMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= settings.inj_perps_max_market_value %>"
        ]
      },
      "setPerpsInjMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= settings.inj_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.inj_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.inj_perps_max_liquidation_pd %>",
          "<%= settings.inj_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsInjLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= settings.inj_perps_initial_margin_ratio %>",
          "<%= settings.inj_perps_minimum_initial_margin_ratio %>",
          "<%= settings.inj_perps_maintenance_margin_scalar %>",
          "<%= settings.inj_perps_flag_reward_ratio_d18 %>",
          "<%= settings.inj_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsInjLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.inj_perps_market_id %>",
          "<%= settings.inj_perps_locked_oi_ratio %>"
        ]
      },
      "createIoPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "io.net",
          "IO"
        ]
      },
      "setPerpsPriceIo": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= extras.io_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsIoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.io_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "io_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsIoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= extras.io_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_io %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsIoFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= settings.io_perps_market_skew_scale %>",
          "<%= settings.io_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsIoOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= settings.io_perps_maker_fee_ratio %>",
          "<%= settings.io_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsIoMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= settings.io_perps_max_market_size %>"
        ]
      },
      "setPerpsIoMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= settings.io_perps_max_market_value %>"
        ]
      },
      "setPerpsIoMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= settings.io_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.io_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.io_perps_max_liquidation_pd %>",
          "<%= settings.io_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsIoLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= settings.io_perps_initial_margin_ratio %>",
          "<%= settings.io_perps_minimum_initial_margin_ratio %>",
          "<%= settings.io_perps_maintenance_margin_scalar %>",
          "<%= settings.io_perps_flag_reward_ratio_d18 %>",
          "<%= settings.io_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsIoLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.io_perps_market_id %>",
          "<%= settings.io_perps_locked_oi_ratio %>"
        ]
      },
      "createJtoPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "Jito",
          "JTO"
        ]
      },
      "setPerpsPriceJto": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= extras.jto_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsJtoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "jto_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsJtoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= extras.jto_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_jto %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsJtoFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= settings.jto_perps_market_skew_scale %>",
          "<%= settings.jto_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsJtoOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= settings.jto_perps_maker_fee_ratio %>",
          "<%= settings.jto_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsJtoMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= settings.jto_perps_max_market_size %>"
        ]
      },
      "setPerpsJtoMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= settings.jto_perps_max_market_value %>"
        ]
      },
      "setPerpsJtoMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= settings.jto_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.jto_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.jto_perps_max_liquidation_pd %>",
          "<%= settings.jto_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsJtoLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= settings.jto_perps_initial_margin_ratio %>",
          "<%= settings.jto_perps_minimum_initial_margin_ratio %>",
          "<%= settings.jto_perps_maintenance_margin_scalar %>",
          "<%= settings.jto_perps_flag_reward_ratio_d18 %>",
          "<%= settings.jto_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsJtoLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.jto_perps_market_id %>",
          "<%= settings.jto_perps_locked_oi_ratio %>"
        ]
      },
      "createJupPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "Jupiter",
          "JUP"
        ]
      },
      "setPerpsPriceJup": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= extras.jup_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsJupSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "jup_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsJupSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= extras.jup_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_jup %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsJupFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= settings.jup_perps_market_skew_scale %>",
          "<%= settings.jup_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsJupOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= settings.jup_perps_maker_fee_ratio %>",
          "<%= settings.jup_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsJupMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= settings.jup_perps_max_market_size %>"
        ]
      },
      "setPerpsJupMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= settings.jup_perps_max_market_value %>"
        ]
      },
      "setPerpsJupMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= settings.jup_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.jup_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.jup_perps_max_liquidation_pd %>",
          "<%= settings.jup_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsJupLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= settings.jup_perps_initial_margin_ratio %>",
          "<%= settings.jup_perps_minimum_initial_margin_ratio %>",
          "<%= settings.jup_perps_maintenance_margin_scalar %>",
          "<%= settings.jup_perps_flag_reward_ratio_d18 %>",
          "<%= settings.jup_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsJupLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.jup_perps_market_id %>",
          "<%= settings.jup_perps_locked_oi_ratio %>"
        ]
      },
      "createLdoPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "Lido dao",
          "LDO"
        ]
      },
      "setPerpsPriceLdo": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= extras.ldo_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsLdoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ldo_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsLdoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= extras.ldo_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ldo %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsLdoFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= settings.ldo_perps_market_skew_scale %>",
          "<%= settings.ldo_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsLdoOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= settings.ldo_perps_maker_fee_ratio %>",
          "<%= settings.ldo_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsLdoMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= settings.ldo_perps_max_market_size %>"
        ]
      },
      "setPerpsLdoMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= settings.ldo_perps_max_market_value %>"
        ]
      },
      "setPerpsLdoMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= settings.ldo_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ldo_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ldo_perps_max_liquidation_pd %>",
          "<%= settings.ldo_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsLdoLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= settings.ldo_perps_initial_margin_ratio %>",
          "<%= settings.ldo_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ldo_perps_maintenance_margin_scalar %>",
          "<%= settings.ldo_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ldo_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsLdoLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ldo_perps_market_id %>",
          "<%= settings.ldo_perps_locked_oi_ratio %>"
        ]
      },
      "createLinkPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "Chainlink",
          "LINK"
        ]
      },
      "setPerpsPriceLink": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= extras.link_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsLinkSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.link_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "link_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsLinkSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= extras.link_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_link %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsLinkFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= settings.link_perps_market_skew_scale %>",
          "<%= settings.link_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsLinkOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= settings.link_perps_maker_fee_ratio %>",
          "<%= settings.link_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsLinkMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= settings.link_perps_max_market_size %>"
        ]
      },
      "setPerpsLinkMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= settings.link_perps_max_market_value %>"
        ]
      },
      "setPerpsLinkMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= settings.link_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.link_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.link_perps_max_liquidation_pd %>",
          "<%= settings.link_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsLinkLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= settings.link_perps_initial_margin_ratio %>",
          "<%= settings.link_perps_minimum_initial_margin_ratio %>",
          "<%= settings.link_perps_maintenance_margin_scalar %>",
          "<%= settings.link_perps_flag_reward_ratio_d18 %>",
          "<%= settings.link_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsLinkLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.link_perps_market_id %>",
          "<%= settings.link_perps_locked_oi_ratio %>"
        ]
      },
      "createLtcPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "Litecoin",
          "LTC"
        ]
      },
      "setPerpsPriceLtc": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= extras.ltc_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsLtcSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ltc_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsLtcSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= extras.ltc_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ltc %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsLtcFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= settings.ltc_perps_market_skew_scale %>",
          "<%= settings.ltc_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsLtcOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= settings.ltc_perps_maker_fee_ratio %>",
          "<%= settings.ltc_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsLtcMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= settings.ltc_perps_max_market_size %>"
        ]
      },
      "setPerpsLtcMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= settings.ltc_perps_max_market_value %>"
        ]
      },
      "setPerpsLtcMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= settings.ltc_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ltc_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ltc_perps_max_liquidation_pd %>",
          "<%= settings.ltc_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsLtcLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= settings.ltc_perps_initial_margin_ratio %>",
          "<%= settings.ltc_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ltc_perps_maintenance_margin_scalar %>",
          "<%= settings.ltc_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ltc_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsLtcLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ltc_perps_market_id %>",
          "<%= settings.ltc_perps_locked_oi_ratio %>"
        ]
      },
      "createMaticPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "Polygon",
          "MATIC"
        ]
      },
      "setPerpsPriceMatic": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= extras.matic_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsMaticSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "matic_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsMaticSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= extras.matic_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_pol %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsMaticFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= settings.matic_perps_market_skew_scale %>",
          "<%= settings.matic_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsMaticOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= settings.matic_perps_maker_fee_ratio %>",
          "<%= settings.matic_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsMaticMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= settings.matic_perps_max_market_size %>"
        ]
      },
      "setPerpsMaticMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= settings.matic_perps_max_market_value %>"
        ]
      },
      "setPerpsMaticMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= settings.matic_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.matic_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.matic_perps_max_liquidation_pd %>",
          "<%= settings.matic_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsMaticLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= settings.matic_perps_initial_margin_ratio %>",
          "<%= settings.matic_perps_minimum_initial_margin_ratio %>",
          "<%= settings.matic_perps_maintenance_margin_scalar %>",
          "<%= settings.matic_perps_flag_reward_ratio_d18 %>",
          "<%= settings.matic_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsMaticLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.matic_perps_market_id %>",
          "<%= settings.matic_perps_locked_oi_ratio %>"
        ]
      },
      "createMemePerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "Meme coin",
          "MEME"
        ]
      },
      "setPerpsPriceMeme": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= extras.meme_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsMemeSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "meme_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsMemeSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= extras.meme_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_meme %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsMemeFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= settings.meme_perps_market_skew_scale %>",
          "<%= settings.meme_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsMemeOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= settings.meme_perps_maker_fee_ratio %>",
          "<%= settings.meme_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsMemeMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= settings.meme_perps_max_market_size %>"
        ]
      },
      "setPerpsMemeMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= settings.meme_perps_max_market_value %>"
        ]
      },
      "setPerpsMemeMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= settings.meme_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.meme_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.meme_perps_max_liquidation_pd %>",
          "<%= settings.meme_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsMemeLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= settings.meme_perps_initial_margin_ratio %>",
          "<%= settings.meme_perps_minimum_initial_margin_ratio %>",
          "<%= settings.meme_perps_maintenance_margin_scalar %>",
          "<%= settings.meme_perps_flag_reward_ratio_d18 %>",
          "<%= settings.meme_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsMemeLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.meme_perps_market_id %>",
          "<%= settings.meme_perps_locked_oi_ratio %>"
        ]
      },
      "createMewPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "Cat in a dogs world",
          "MEW"
        ]
      },
      "setPerpsPriceMew": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= extras.mew_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsMewSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "mew_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsMewSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= extras.mew_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_mew %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsMewFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= settings.mew_perps_market_skew_scale %>",
          "<%= settings.mew_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsMewOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= settings.mew_perps_maker_fee_ratio %>",
          "<%= settings.mew_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsMewMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= settings.mew_perps_max_market_size %>"
        ]
      },
      "setPerpsMewMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= settings.mew_perps_max_market_value %>"
        ]
      },
      "setPerpsMewMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= settings.mew_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.mew_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.mew_perps_max_liquidation_pd %>",
          "<%= settings.mew_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsMewLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= settings.mew_perps_initial_margin_ratio %>",
          "<%= settings.mew_perps_minimum_initial_margin_ratio %>",
          "<%= settings.mew_perps_maintenance_margin_scalar %>",
          "<%= settings.mew_perps_flag_reward_ratio_d18 %>",
          "<%= settings.mew_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsMewLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.mew_perps_market_id %>",
          "<%= settings.mew_perps_locked_oi_ratio %>"
        ]
      },
      "createMkrPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "Maker",
          "MKR"
        ]
      },
      "setPerpsPriceMkr": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= extras.mkr_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsMkrSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "mkr_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsMkrSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= extras.mkr_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_mkr %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsMkrFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= settings.mkr_perps_market_skew_scale %>",
          "<%= settings.mkr_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsMkrOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= settings.mkr_perps_maker_fee_ratio %>",
          "<%= settings.mkr_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsMkrMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= settings.mkr_perps_max_market_size %>"
        ]
      },
      "setPerpsMkrMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= settings.mkr_perps_max_market_value %>"
        ]
      },
      "setPerpsMkrMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= settings.mkr_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.mkr_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.mkr_perps_max_liquidation_pd %>",
          "<%= settings.mkr_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsMkrLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= settings.mkr_perps_initial_margin_ratio %>",
          "<%= settings.mkr_perps_minimum_initial_margin_ratio %>",
          "<%= settings.mkr_perps_maintenance_margin_scalar %>",
          "<%= settings.mkr_perps_flag_reward_ratio_d18 %>",
          "<%= settings.mkr_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsMkrLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.mkr_perps_market_id %>",
          "<%= settings.mkr_perps_locked_oi_ratio %>"
        ]
      },
      "createNearPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "Near Protocol",
          "NEAR"
        ]
      },
      "setPerpsPriceNear": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= extras.near_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsNearSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.near_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "near_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsNearSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= extras.near_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_near %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsNearFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= settings.near_perps_market_skew_scale %>",
          "<%= settings.near_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsNearOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= settings.near_perps_maker_fee_ratio %>",
          "<%= settings.near_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsNearMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= settings.near_perps_max_market_size %>"
        ]
      },
      "setPerpsNearMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= settings.near_perps_max_market_value %>"
        ]
      },
      "setPerpsNearMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= settings.near_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.near_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.near_perps_max_liquidation_pd %>",
          "<%= settings.near_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsNearLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= settings.near_perps_initial_margin_ratio %>",
          "<%= settings.near_perps_minimum_initial_margin_ratio %>",
          "<%= settings.near_perps_maintenance_margin_scalar %>",
          "<%= settings.near_perps_flag_reward_ratio_d18 %>",
          "<%= settings.near_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsNearLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.near_perps_market_id %>",
          "<%= settings.near_perps_locked_oi_ratio %>"
        ]
      },
      "createNotPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "Notcoin",
          "NOT"
        ]
      },
      "setPerpsPriceNot": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= extras.not_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsNotSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.not_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "not_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsNotSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= extras.not_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_not %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsNotFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= settings.not_perps_market_skew_scale %>",
          "<%= settings.not_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsNotOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= settings.not_perps_maker_fee_ratio %>",
          "<%= settings.not_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsNotMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= settings.not_perps_max_market_size %>"
        ]
      },
      "setPerpsNotMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= settings.not_perps_max_market_value %>"
        ]
      },
      "setPerpsNotMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= settings.not_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.not_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.not_perps_max_liquidation_pd %>",
          "<%= settings.not_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsNotLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= settings.not_perps_initial_margin_ratio %>",
          "<%= settings.not_perps_minimum_initial_margin_ratio %>",
          "<%= settings.not_perps_maintenance_margin_scalar %>",
          "<%= settings.not_perps_flag_reward_ratio_d18 %>",
          "<%= settings.not_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsNotLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.not_perps_market_id %>",
          "<%= settings.not_perps_locked_oi_ratio %>"
        ]
      },
      "createOpPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "Optimism",
          "OP"
        ]
      },
      "setPerpsPriceOp": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= extras.op_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsOpSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.op_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "op_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsOpSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= extras.op_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_op %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsOpFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= settings.op_perps_market_skew_scale %>",
          "<%= settings.op_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsOpOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= settings.op_perps_maker_fee_ratio %>",
          "<%= settings.op_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsOpMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= settings.op_perps_max_market_size %>"
        ]
      },
      "setPerpsOpMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= settings.op_perps_max_market_value %>"
        ]
      },
      "setPerpsOpMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= settings.op_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.op_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.op_perps_max_liquidation_pd %>",
          "<%= settings.op_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsOpLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= settings.op_perps_initial_margin_ratio %>",
          "<%= settings.op_perps_minimum_initial_margin_ratio %>",
          "<%= settings.op_perps_maintenance_margin_scalar %>",
          "<%= settings.op_perps_flag_reward_ratio_d18 %>",
          "<%= settings.op_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsOpLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.op_perps_market_id %>",
          "<%= settings.op_perps_locked_oi_ratio %>"
        ]
      },
      "createOrdiPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "ORDI",
          "ORDI"
        ]
      },
      "setPerpsPriceOrdi": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= extras.ordi_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsOrdiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ordi_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsOrdiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= extras.ordi_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ordi %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsOrdiFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= settings.ordi_perps_market_skew_scale %>",
          "<%= settings.ordi_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsOrdiOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= settings.ordi_perps_maker_fee_ratio %>",
          "<%= settings.ordi_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsOrdiMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= settings.ordi_perps_max_market_size %>"
        ]
      },
      "setPerpsOrdiMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= settings.ordi_perps_max_market_value %>"
        ]
      },
      "setPerpsOrdiMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= settings.ordi_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ordi_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ordi_perps_max_liquidation_pd %>",
          "<%= settings.ordi_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsOrdiLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= settings.ordi_perps_initial_margin_ratio %>",
          "<%= settings.ordi_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ordi_perps_maintenance_margin_scalar %>",
          "<%= settings.ordi_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ordi_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsOrdiLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ordi_perps_market_id %>",
          "<%= settings.ordi_perps_locked_oi_ratio %>"
        ]
      },
      "createPendlePerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "Pendle",
          "PENDLE"
        ]
      },
      "setPerpsPricePendle": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= extras.pendle_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsPendleSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "pendle_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsPendleSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= extras.pendle_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_pendle %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsPendleFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= settings.pendle_perps_market_skew_scale %>",
          "<%= settings.pendle_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsPendleOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= settings.pendle_perps_maker_fee_ratio %>",
          "<%= settings.pendle_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsPendleMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= settings.pendle_perps_max_market_size %>"
        ]
      },
      "setPerpsPendleMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= settings.pendle_perps_max_market_value %>"
        ]
      },
      "setPerpsPendleMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= settings.pendle_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.pendle_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.pendle_perps_max_liquidation_pd %>",
          "<%= settings.pendle_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsPendleLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= settings.pendle_perps_initial_margin_ratio %>",
          "<%= settings.pendle_perps_minimum_initial_margin_ratio %>",
          "<%= settings.pendle_perps_maintenance_margin_scalar %>",
          "<%= settings.pendle_perps_flag_reward_ratio_d18 %>",
          "<%= settings.pendle_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsPendleLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.pendle_perps_market_id %>",
          "<%= settings.pendle_perps_locked_oi_ratio %>"
        ]
      },
      "createPeoplePerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "ConstitutionDAO",
          "PEOPLE"
        ]
      },
      "setPerpsPricePeople": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= extras.people_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsPeopleSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.people_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "people_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsPeopleSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= extras.people_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_people %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsPeopleFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= settings.people_perps_market_skew_scale %>",
          "<%= settings.people_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsPeopleOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= settings.people_perps_maker_fee_ratio %>",
          "<%= settings.people_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsPeopleMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= settings.people_perps_max_market_size %>"
        ]
      },
      "setPerpsPeopleMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= settings.people_perps_max_market_value %>"
        ]
      },
      "setPerpsPeopleMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= settings.people_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.people_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.people_perps_max_liquidation_pd %>",
          "<%= settings.people_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsPeopleLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= settings.people_perps_initial_margin_ratio %>",
          "<%= settings.people_perps_minimum_initial_margin_ratio %>",
          "<%= settings.people_perps_maintenance_margin_scalar %>",
          "<%= settings.people_perps_flag_reward_ratio_d18 %>",
          "<%= settings.people_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsPeopleLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.people_perps_market_id %>",
          "<%= settings.people_perps_locked_oi_ratio %>"
        ]
      },
      "createPepePerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "Pepe",
          "PEPE"
        ]
      },
      "setPerpsPricePepe": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= extras.pepe_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsPepeSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "pepe_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsPepeSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= extras.pepe_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_pepe %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsPepeFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= settings.pepe_perps_market_skew_scale %>",
          "<%= settings.pepe_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsPepeOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= settings.pepe_perps_maker_fee_ratio %>",
          "<%= settings.pepe_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsPepeMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= settings.pepe_perps_max_market_size %>"
        ]
      },
      "setPerpsPepeMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= settings.pepe_perps_max_market_value %>"
        ]
      },
      "setPerpsPepeMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= settings.pepe_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.pepe_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.pepe_perps_max_liquidation_pd %>",
          "<%= settings.pepe_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsPepeLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= settings.pepe_perps_initial_margin_ratio %>",
          "<%= settings.pepe_perps_minimum_initial_margin_ratio %>",
          "<%= settings.pepe_perps_maintenance_margin_scalar %>",
          "<%= settings.pepe_perps_flag_reward_ratio_d18 %>",
          "<%= settings.pepe_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsPepeLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.pepe_perps_market_id %>",
          "<%= settings.pepe_perps_locked_oi_ratio %>"
        ]
      },
      "createPolPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "Polygon",
          "POL"
        ]
      },
      "setPerpsPricePol": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= extras.pol_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsPolSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "pol_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsPolSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= extras.pol_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_pol %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsPolFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= settings.pol_perps_market_skew_scale %>",
          "<%= settings.pol_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsPolOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= settings.pol_perps_maker_fee_ratio %>",
          "<%= settings.pol_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsPolMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= settings.pol_perps_max_market_size %>"
        ]
      },
      "setPerpsPolMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= settings.pol_perps_max_market_value %>"
        ]
      },
      "setPerpsPolMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= settings.pol_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.pol_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.pol_perps_max_liquidation_pd %>",
          "<%= settings.pol_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsPolLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= settings.pol_perps_initial_margin_ratio %>",
          "<%= settings.pol_perps_minimum_initial_margin_ratio %>",
          "<%= settings.pol_perps_maintenance_margin_scalar %>",
          "<%= settings.pol_perps_flag_reward_ratio_d18 %>",
          "<%= settings.pol_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsPolLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.pol_perps_market_id %>",
          "<%= settings.pol_perps_locked_oi_ratio %>"
        ]
      },
      "createPopcatPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "Popcat",
          "POPCAT"
        ]
      },
      "setPerpsPricePopcat": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= extras.popcat_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsPopcatSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "popcat_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsPopcatSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= extras.popcat_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_popcat %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsPopcatFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= settings.popcat_perps_market_skew_scale %>",
          "<%= settings.popcat_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsPopcatOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= settings.popcat_perps_maker_fee_ratio %>",
          "<%= settings.popcat_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsPopcatMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= settings.popcat_perps_max_market_size %>"
        ]
      },
      "setPerpsPopcatMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= settings.popcat_perps_max_market_value %>"
        ]
      },
      "setPerpsPopcatMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= settings.popcat_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.popcat_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.popcat_perps_max_liquidation_pd %>",
          "<%= settings.popcat_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsPopcatLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= settings.popcat_perps_initial_margin_ratio %>",
          "<%= settings.popcat_perps_minimum_initial_margin_ratio %>",
          "<%= settings.popcat_perps_maintenance_margin_scalar %>",
          "<%= settings.popcat_perps_flag_reward_ratio_d18 %>",
          "<%= settings.popcat_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsPopcatLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.popcat_perps_market_id %>",
          "<%= settings.popcat_perps_locked_oi_ratio %>"
        ]
      },
      "createPythPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "Pyth Network",
          "PYTH"
        ]
      },
      "setPerpsPricePyth": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= extras.pyth_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsPythSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "pyth_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsPythSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= extras.pyth_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_pyth %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsPythFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= settings.pyth_perps_market_skew_scale %>",
          "<%= settings.pyth_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsPythOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= settings.pyth_perps_maker_fee_ratio %>",
          "<%= settings.pyth_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsPythMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= settings.pyth_perps_max_market_size %>"
        ]
      },
      "setPerpsPythMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= settings.pyth_perps_max_market_value %>"
        ]
      },
      "setPerpsPythMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= settings.pyth_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.pyth_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.pyth_perps_max_liquidation_pd %>",
          "<%= settings.pyth_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsPythLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= settings.pyth_perps_initial_margin_ratio %>",
          "<%= settings.pyth_perps_minimum_initial_margin_ratio %>",
          "<%= settings.pyth_perps_maintenance_margin_scalar %>",
          "<%= settings.pyth_perps_flag_reward_ratio_d18 %>",
          "<%= settings.pyth_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsPythLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.pyth_perps_market_id %>",
          "<%= settings.pyth_perps_locked_oi_ratio %>"
        ]
      },
      "createRenderPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "Render",
          "RENDER"
        ]
      },
      "setPerpsPriceRender": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= extras.render_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsRenderSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.render_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "render_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsRenderSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= extras.render_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_render %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsRenderFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= settings.render_perps_market_skew_scale %>",
          "<%= settings.render_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsRenderOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= settings.render_perps_maker_fee_ratio %>",
          "<%= settings.render_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsRenderMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= settings.render_perps_max_market_size %>"
        ]
      },
      "setPerpsRenderMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= settings.render_perps_max_market_value %>"
        ]
      },
      "setPerpsRenderMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= settings.render_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.render_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.render_perps_max_liquidation_pd %>",
          "<%= settings.render_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsRenderLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= settings.render_perps_initial_margin_ratio %>",
          "<%= settings.render_perps_minimum_initial_margin_ratio %>",
          "<%= settings.render_perps_maintenance_margin_scalar %>",
          "<%= settings.render_perps_flag_reward_ratio_d18 %>",
          "<%= settings.render_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsRenderLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.render_perps_market_id %>",
          "<%= settings.render_perps_locked_oi_ratio %>"
        ]
      },
      "createRndrPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "Render",
          "RNDR"
        ]
      },
      "setPerpsPriceRndr": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= extras.rndr_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsRndrSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "rndr_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsRndrSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= extras.rndr_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_rndr %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsRndrFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= settings.rndr_perps_market_skew_scale %>",
          "<%= settings.rndr_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsRndrOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= settings.rndr_perps_maker_fee_ratio %>",
          "<%= settings.rndr_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsRndrMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= settings.rndr_perps_max_market_size %>"
        ]
      },
      "setPerpsRndrMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= settings.rndr_perps_max_market_value %>"
        ]
      },
      "setPerpsRndrMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= settings.rndr_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.rndr_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.rndr_perps_max_liquidation_pd %>",
          "<%= settings.rndr_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsRndrLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= settings.rndr_perps_initial_margin_ratio %>",
          "<%= settings.rndr_perps_minimum_initial_margin_ratio %>",
          "<%= settings.rndr_perps_maintenance_margin_scalar %>",
          "<%= settings.rndr_perps_flag_reward_ratio_d18 %>",
          "<%= settings.rndr_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsRndrLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.rndr_perps_market_id %>",
          "<%= settings.rndr_perps_locked_oi_ratio %>"
        ]
      },
      "createRunePerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "THORChain",
          "RUNE"
        ]
      },
      "setPerpsPriceRune": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= extras.rune_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsRuneSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "rune_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsRuneSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= extras.rune_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_rune %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsRuneFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= settings.rune_perps_market_skew_scale %>",
          "<%= settings.rune_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsRuneOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= settings.rune_perps_maker_fee_ratio %>",
          "<%= settings.rune_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsRuneMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= settings.rune_perps_max_market_size %>"
        ]
      },
      "setPerpsRuneMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= settings.rune_perps_max_market_value %>"
        ]
      },
      "setPerpsRuneMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= settings.rune_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.rune_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.rune_perps_max_liquidation_pd %>",
          "<%= settings.rune_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsRuneLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= settings.rune_perps_initial_margin_ratio %>",
          "<%= settings.rune_perps_minimum_initial_margin_ratio %>",
          "<%= settings.rune_perps_maintenance_margin_scalar %>",
          "<%= settings.rune_perps_flag_reward_ratio_d18 %>",
          "<%= settings.rune_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsRuneLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.rune_perps_market_id %>",
          "<%= settings.rune_perps_locked_oi_ratio %>"
        ]
      },
      "createSatsPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "Ordinals",
          "SATS"
        ]
      },
      "setPerpsPriceSats": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= extras.sats_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsSatsSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "sats_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsSatsSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= extras.sats_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_sats %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsSatsFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= settings.sats_perps_market_skew_scale %>",
          "<%= settings.sats_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsSatsOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= settings.sats_perps_maker_fee_ratio %>",
          "<%= settings.sats_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsSatsMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= settings.sats_perps_max_market_size %>"
        ]
      },
      "setPerpsSatsMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= settings.sats_perps_max_market_value %>"
        ]
      },
      "setPerpsSatsMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= settings.sats_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.sats_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.sats_perps_max_liquidation_pd %>",
          "<%= settings.sats_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsSatsLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= settings.sats_perps_initial_margin_ratio %>",
          "<%= settings.sats_perps_minimum_initial_margin_ratio %>",
          "<%= settings.sats_perps_maintenance_margin_scalar %>",
          "<%= settings.sats_perps_flag_reward_ratio_d18 %>",
          "<%= settings.sats_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsSatsLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.sats_perps_market_id %>",
          "<%= settings.sats_perps_locked_oi_ratio %>"
        ]
      },
      "createSeiPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "Sei",
          "SEI"
        ]
      },
      "setPerpsPriceSei": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= extras.sei_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsSeiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "sei_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsSeiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= extras.sei_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_sei %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsSeiFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= settings.sei_perps_market_skew_scale %>",
          "<%= settings.sei_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsSeiOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= settings.sei_perps_maker_fee_ratio %>",
          "<%= settings.sei_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsSeiMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= settings.sei_perps_max_market_size %>"
        ]
      },
      "setPerpsSeiMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= settings.sei_perps_max_market_value %>"
        ]
      },
      "setPerpsSeiMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= settings.sei_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.sei_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.sei_perps_max_liquidation_pd %>",
          "<%= settings.sei_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsSeiLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= settings.sei_perps_initial_margin_ratio %>",
          "<%= settings.sei_perps_minimum_initial_margin_ratio %>",
          "<%= settings.sei_perps_maintenance_margin_scalar %>",
          "<%= settings.sei_perps_flag_reward_ratio_d18 %>",
          "<%= settings.sei_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsSeiLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.sei_perps_market_id %>",
          "<%= settings.sei_perps_locked_oi_ratio %>"
        ]
      },
      "createShibPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "Shiba Inu",
          "SHIB"
        ]
      },
      "setPerpsPriceShib": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= extras.shib_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsShibSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "shib_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsShibSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= extras.shib_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_shib %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsShibFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= settings.shib_perps_market_skew_scale %>",
          "<%= settings.shib_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsShibOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= settings.shib_perps_maker_fee_ratio %>",
          "<%= settings.shib_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsShibMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= settings.shib_perps_max_market_size %>"
        ]
      },
      "setPerpsShibMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= settings.shib_perps_max_market_value %>"
        ]
      },
      "setPerpsShibMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= settings.shib_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.shib_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.shib_perps_max_liquidation_pd %>",
          "<%= settings.shib_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsShibLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= settings.shib_perps_initial_margin_ratio %>",
          "<%= settings.shib_perps_minimum_initial_margin_ratio %>",
          "<%= settings.shib_perps_maintenance_margin_scalar %>",
          "<%= settings.shib_perps_flag_reward_ratio_d18 %>",
          "<%= settings.shib_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsShibLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.shib_perps_market_id %>",
          "<%= settings.shib_perps_locked_oi_ratio %>"
        ]
      },
      "createSnxPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "Synthetix",
          "SNX"
        ]
      },
      "setPerpsPriceSnx": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= extras.snx_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsSnxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "snx_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsSnxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= extras.snx_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_snx %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsSnxFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= settings.snx_perps_market_skew_scale %>",
          "<%= settings.snx_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsSnxOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= settings.snx_perps_maker_fee_ratio %>",
          "<%= settings.snx_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsSnxMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= settings.snx_perps_max_market_size %>"
        ]
      },
      "setPerpsSnxMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= settings.snx_perps_max_market_value %>"
        ]
      },
      "setPerpsSnxMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= settings.snx_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.snx_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.snx_perps_max_liquidation_pd %>",
          "<%= settings.snx_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsSnxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= settings.snx_perps_initial_margin_ratio %>",
          "<%= settings.snx_perps_minimum_initial_margin_ratio %>",
          "<%= settings.snx_perps_maintenance_margin_scalar %>",
          "<%= settings.snx_perps_flag_reward_ratio_d18 %>",
          "<%= settings.snx_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsSnxLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.snx_perps_market_id %>",
          "<%= settings.snx_perps_locked_oi_ratio %>"
        ]
      },
      "createSolPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "Solana",
          "SOL"
        ]
      },
      "setPerpsPriceSol": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= extras.sol_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsSolSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "sol_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsSolSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= extras.sol_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_sol %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsSolFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= settings.sol_perps_market_skew_scale %>",
          "<%= settings.sol_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsSolOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= settings.sol_perps_maker_fee_ratio %>",
          "<%= settings.sol_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsSolMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= settings.sol_perps_max_market_size %>"
        ]
      },
      "setPerpsSolMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= settings.sol_perps_max_market_value %>"
        ]
      },
      "setPerpsSolMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= settings.sol_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.sol_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.sol_perps_max_liquidation_pd %>",
          "<%= settings.sol_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsSolLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= settings.sol_perps_initial_margin_ratio %>",
          "<%= settings.sol_perps_minimum_initial_margin_ratio %>",
          "<%= settings.sol_perps_maintenance_margin_scalar %>",
          "<%= settings.sol_perps_flag_reward_ratio_d18 %>",
          "<%= settings.sol_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsSolLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.sol_perps_market_id %>",
          "<%= settings.sol_perps_locked_oi_ratio %>"
        ]
      },
      "createStrkPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "Starknet",
          "STRK"
        ]
      },
      "setPerpsPriceStrk": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= extras.strk_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsStrkSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "strk_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsStrkSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= extras.strk_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_strk %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsStrkFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= settings.strk_perps_market_skew_scale %>",
          "<%= settings.strk_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsStrkOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= settings.strk_perps_maker_fee_ratio %>",
          "<%= settings.strk_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsStrkMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= settings.strk_perps_max_market_size %>"
        ]
      },
      "setPerpsStrkMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= settings.strk_perps_max_market_value %>"
        ]
      },
      "setPerpsStrkMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= settings.strk_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.strk_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.strk_perps_max_liquidation_pd %>",
          "<%= settings.strk_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsStrkLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= settings.strk_perps_initial_margin_ratio %>",
          "<%= settings.strk_perps_minimum_initial_margin_ratio %>",
          "<%= settings.strk_perps_maintenance_margin_scalar %>",
          "<%= settings.strk_perps_flag_reward_ratio_d18 %>",
          "<%= settings.strk_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsStrkLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.strk_perps_market_id %>",
          "<%= settings.strk_perps_locked_oi_ratio %>"
        ]
      },
      "createStxPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "Stacks",
          "STX"
        ]
      },
      "setPerpsPriceStx": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= extras.stx_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsStxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "stx_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsStxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= extras.stx_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_stx %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsStxFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= settings.stx_perps_market_skew_scale %>",
          "<%= settings.stx_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsStxOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= settings.stx_perps_maker_fee_ratio %>",
          "<%= settings.stx_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsStxMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= settings.stx_perps_max_market_size %>"
        ]
      },
      "setPerpsStxMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= settings.stx_perps_max_market_value %>"
        ]
      },
      "setPerpsStxMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= settings.stx_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.stx_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.stx_perps_max_liquidation_pd %>",
          "<%= settings.stx_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsStxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= settings.stx_perps_initial_margin_ratio %>",
          "<%= settings.stx_perps_minimum_initial_margin_ratio %>",
          "<%= settings.stx_perps_maintenance_margin_scalar %>",
          "<%= settings.stx_perps_flag_reward_ratio_d18 %>",
          "<%= settings.stx_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsStxLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.stx_perps_market_id %>",
          "<%= settings.stx_perps_locked_oi_ratio %>"
        ]
      },
      "createSuiPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "Sui",
          "SUI"
        ]
      },
      "setPerpsPriceSui": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= extras.sui_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsSuiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "sui_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsSuiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= extras.sui_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_sui %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsSuiFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= settings.sui_perps_market_skew_scale %>",
          "<%= settings.sui_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsSuiOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= settings.sui_perps_maker_fee_ratio %>",
          "<%= settings.sui_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsSuiMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= settings.sui_perps_max_market_size %>"
        ]
      },
      "setPerpsSuiMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= settings.sui_perps_max_market_value %>"
        ]
      },
      "setPerpsSuiMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= settings.sui_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.sui_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.sui_perps_max_liquidation_pd %>",
          "<%= settings.sui_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsSuiLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= settings.sui_perps_initial_margin_ratio %>",
          "<%= settings.sui_perps_minimum_initial_margin_ratio %>",
          "<%= settings.sui_perps_maintenance_margin_scalar %>",
          "<%= settings.sui_perps_flag_reward_ratio_d18 %>",
          "<%= settings.sui_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsSuiLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.sui_perps_market_id %>",
          "<%= settings.sui_perps_locked_oi_ratio %>"
        ]
      },
      "createSushiPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "Sushiswap",
          "SUSHI"
        ]
      },
      "setPerpsPriceSushi": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= extras.sushi_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsSushiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "sushi_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsSushiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= extras.sushi_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_sushi %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsSushiFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= settings.sushi_perps_market_skew_scale %>",
          "<%= settings.sushi_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsSushiOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= settings.sushi_perps_maker_fee_ratio %>",
          "<%= settings.sushi_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsSushiMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= settings.sushi_perps_max_market_size %>"
        ]
      },
      "setPerpsSushiMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= settings.sushi_perps_max_market_value %>"
        ]
      },
      "setPerpsSushiMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= settings.sushi_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.sushi_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.sushi_perps_max_liquidation_pd %>",
          "<%= settings.sushi_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsSushiLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= settings.sushi_perps_initial_margin_ratio %>",
          "<%= settings.sushi_perps_minimum_initial_margin_ratio %>",
          "<%= settings.sushi_perps_maintenance_margin_scalar %>",
          "<%= settings.sushi_perps_flag_reward_ratio_d18 %>",
          "<%= settings.sushi_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsSushiLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.sushi_perps_market_id %>",
          "<%= settings.sushi_perps_locked_oi_ratio %>"
        ]
      },
      "createTaoPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "Bittensor",
          "TAO"
        ]
      },
      "setPerpsPriceTao": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= extras.tao_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsTaoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "tao_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsTaoSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= extras.tao_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_tao %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsTaoFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= settings.tao_perps_market_skew_scale %>",
          "<%= settings.tao_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsTaoOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= settings.tao_perps_maker_fee_ratio %>",
          "<%= settings.tao_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsTaoMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= settings.tao_perps_max_market_size %>"
        ]
      },
      "setPerpsTaoMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= settings.tao_perps_max_market_value %>"
        ]
      },
      "setPerpsTaoMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= settings.tao_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.tao_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.tao_perps_max_liquidation_pd %>",
          "<%= settings.tao_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsTaoLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= settings.tao_perps_initial_margin_ratio %>",
          "<%= settings.tao_perps_minimum_initial_margin_ratio %>",
          "<%= settings.tao_perps_maintenance_margin_scalar %>",
          "<%= settings.tao_perps_flag_reward_ratio_d18 %>",
          "<%= settings.tao_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsTaoLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.tao_perps_market_id %>",
          "<%= settings.tao_perps_locked_oi_ratio %>"
        ]
      },
      "createTiaPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "Celestia",
          "TIA"
        ]
      },
      "setPerpsPriceTia": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= extras.tia_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsTiaSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "tia_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsTiaSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= extras.tia_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_tia %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsTiaFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= settings.tia_perps_market_skew_scale %>",
          "<%= settings.tia_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsTiaOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= settings.tia_perps_maker_fee_ratio %>",
          "<%= settings.tia_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsTiaMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= settings.tia_perps_max_market_size %>"
        ]
      },
      "setPerpsTiaMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= settings.tia_perps_max_market_value %>"
        ]
      },
      "setPerpsTiaMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= settings.tia_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.tia_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.tia_perps_max_liquidation_pd %>",
          "<%= settings.tia_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsTiaLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= settings.tia_perps_initial_margin_ratio %>",
          "<%= settings.tia_perps_minimum_initial_margin_ratio %>",
          "<%= settings.tia_perps_maintenance_margin_scalar %>",
          "<%= settings.tia_perps_flag_reward_ratio_d18 %>",
          "<%= settings.tia_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsTiaLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.tia_perps_market_id %>",
          "<%= settings.tia_perps_locked_oi_ratio %>"
        ]
      },
      "createTonPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "Toncoin",
          "TON"
        ]
      },
      "setPerpsPriceTon": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= extras.ton_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsTonSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "ton_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsTonSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= extras.ton_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_ton %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsTonFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= settings.ton_perps_market_skew_scale %>",
          "<%= settings.ton_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsTonOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= settings.ton_perps_maker_fee_ratio %>",
          "<%= settings.ton_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsTonMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= settings.ton_perps_max_market_size %>"
        ]
      },
      "setPerpsTonMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= settings.ton_perps_max_market_value %>"
        ]
      },
      "setPerpsTonMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= settings.ton_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.ton_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.ton_perps_max_liquidation_pd %>",
          "<%= settings.ton_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsTonLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= settings.ton_perps_initial_margin_ratio %>",
          "<%= settings.ton_perps_minimum_initial_margin_ratio %>",
          "<%= settings.ton_perps_maintenance_margin_scalar %>",
          "<%= settings.ton_perps_flag_reward_ratio_d18 %>",
          "<%= settings.ton_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsTonLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.ton_perps_market_id %>",
          "<%= settings.ton_perps_locked_oi_ratio %>"
        ]
      },
      "createTrxPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "Tron",
          "TRX"
        ]
      },
      "setPerpsPriceTrx": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= extras.trx_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsTrxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "trx_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsTrxSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= extras.trx_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_trx %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsTrxFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= settings.trx_perps_market_skew_scale %>",
          "<%= settings.trx_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsTrxOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= settings.trx_perps_maker_fee_ratio %>",
          "<%= settings.trx_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsTrxMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= settings.trx_perps_max_market_size %>"
        ]
      },
      "setPerpsTrxMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= settings.trx_perps_max_market_value %>"
        ]
      },
      "setPerpsTrxMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= settings.trx_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.trx_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.trx_perps_max_liquidation_pd %>",
          "<%= settings.trx_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsTrxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= settings.trx_perps_initial_margin_ratio %>",
          "<%= settings.trx_perps_minimum_initial_margin_ratio %>",
          "<%= settings.trx_perps_maintenance_margin_scalar %>",
          "<%= settings.trx_perps_flag_reward_ratio_d18 %>",
          "<%= settings.trx_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsTrxLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.trx_perps_market_id %>",
          "<%= settings.trx_perps_locked_oi_ratio %>"
        ]
      },
      "createUniPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "Uniswap",
          "UNI"
        ]
      },
      "setPerpsPriceUni": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= extras.uni_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsUniSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "uni_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsUniSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= extras.uni_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_uni %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsUniFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= settings.uni_perps_market_skew_scale %>",
          "<%= settings.uni_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsUniOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= settings.uni_perps_maker_fee_ratio %>",
          "<%= settings.uni_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsUniMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= settings.uni_perps_max_market_size %>"
        ]
      },
      "setPerpsUniMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= settings.uni_perps_max_market_value %>"
        ]
      },
      "setPerpsUniMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= settings.uni_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.uni_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.uni_perps_max_liquidation_pd %>",
          "<%= settings.uni_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsUniLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= settings.uni_perps_initial_margin_ratio %>",
          "<%= settings.uni_perps_minimum_initial_margin_ratio %>",
          "<%= settings.uni_perps_maintenance_margin_scalar %>",
          "<%= settings.uni_perps_flag_reward_ratio_d18 %>",
          "<%= settings.uni_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsUniLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.uni_perps_market_id %>",
          "<%= settings.uni_perps_locked_oi_ratio %>"
        ]
      },
      "createWPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "Wormhole",
          "W"
        ]
      },
      "setPerpsPriceW": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= extras.w_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsWSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.w_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "w_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsWSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= extras.w_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_w %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsWFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= settings.w_perps_market_skew_scale %>",
          "<%= settings.w_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsWOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= settings.w_perps_maker_fee_ratio %>",
          "<%= settings.w_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsWMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= settings.w_perps_max_market_size %>"
        ]
      },
      "setPerpsWMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= settings.w_perps_max_market_value %>"
        ]
      },
      "setPerpsWMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= settings.w_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.w_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.w_perps_max_liquidation_pd %>",
          "<%= settings.w_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsWLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= settings.w_perps_initial_margin_ratio %>",
          "<%= settings.w_perps_minimum_initial_margin_ratio %>",
          "<%= settings.w_perps_maintenance_margin_scalar %>",
          "<%= settings.w_perps_flag_reward_ratio_d18 %>",
          "<%= settings.w_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsWLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.w_perps_market_id %>",
          "<%= settings.w_perps_locked_oi_ratio %>"
        ]
      },
      "createWifPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "Wif",
          "WIF"
        ]
      },
      "setPerpsPriceWif": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= extras.wif_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsWifSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "wif_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsWifSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= extras.wif_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_wif %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsWifFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= settings.wif_perps_market_skew_scale %>",
          "<%= settings.wif_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsWifOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= settings.wif_perps_maker_fee_ratio %>",
          "<%= settings.wif_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsWifMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= settings.wif_perps_max_market_size %>"
        ]
      },
      "setPerpsWifMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= settings.wif_perps_max_market_value %>"
        ]
      },
      "setPerpsWifMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= settings.wif_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.wif_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.wif_perps_max_liquidation_pd %>",
          "<%= settings.wif_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsWifLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= settings.wif_perps_initial_margin_ratio %>",
          "<%= settings.wif_perps_minimum_initial_margin_ratio %>",
          "<%= settings.wif_perps_maintenance_margin_scalar %>",
          "<%= settings.wif_perps_flag_reward_ratio_d18 %>",
          "<%= settings.wif_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsWifLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.wif_perps_market_id %>",
          "<%= settings.wif_perps_locked_oi_ratio %>"
        ]
      },
      "createWldPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "Worldcoin",
          "WLD"
        ]
      },
      "setPerpsPriceWld": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= extras.wld_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsWldSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "wld_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsWldSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= extras.wld_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_wld %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsWldFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= settings.wld_perps_market_skew_scale %>",
          "<%= settings.wld_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsWldOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= settings.wld_perps_maker_fee_ratio %>",
          "<%= settings.wld_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsWldMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= settings.wld_perps_max_market_size %>"
        ]
      },
      "setPerpsWldMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= settings.wld_perps_max_market_value %>"
        ]
      },
      "setPerpsWldMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= settings.wld_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.wld_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.wld_perps_max_liquidation_pd %>",
          "<%= settings.wld_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsWldLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= settings.wld_perps_initial_margin_ratio %>",
          "<%= settings.wld_perps_minimum_initial_margin_ratio %>",
          "<%= settings.wld_perps_maintenance_margin_scalar %>",
          "<%= settings.wld_perps_flag_reward_ratio_d18 %>",
          "<%= settings.wld_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsWldLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.wld_perps_market_id %>",
          "<%= settings.wld_perps_locked_oi_ratio %>"
        ]
      },
      "createXlmPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "Stellar",
          "XLM"
        ]
      },
      "setPerpsPriceXlm": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= extras.xlm_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsXlmSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "xlm_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsXlmSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= extras.xlm_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_xlm %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsXlmFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= settings.xlm_perps_market_skew_scale %>",
          "<%= settings.xlm_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsXlmOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= settings.xlm_perps_maker_fee_ratio %>",
          "<%= settings.xlm_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsXlmMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= settings.xlm_perps_max_market_size %>"
        ]
      },
      "setPerpsXlmMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= settings.xlm_perps_max_market_value %>"
        ]
      },
      "setPerpsXlmMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= settings.xlm_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.xlm_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.xlm_perps_max_liquidation_pd %>",
          "<%= settings.xlm_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsXlmLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= settings.xlm_perps_initial_margin_ratio %>",
          "<%= settings.xlm_perps_minimum_initial_margin_ratio %>",
          "<%= settings.xlm_perps_maintenance_margin_scalar %>",
          "<%= settings.xlm_perps_flag_reward_ratio_d18 %>",
          "<%= settings.xlm_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsXlmLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.xlm_perps_market_id %>",
          "<%= settings.xlm_perps_locked_oi_ratio %>"
        ]
      },
      "createXrpPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "Ripple",
          "XRP"
        ]
      },
      "setPerpsPriceXrp": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= extras.xrp_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsXrpSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "xrp_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsXrpSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= extras.xrp_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_xrp %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsXrpFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= settings.xrp_perps_market_skew_scale %>",
          "<%= settings.xrp_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsXrpOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= settings.xrp_perps_maker_fee_ratio %>",
          "<%= settings.xrp_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsXrpMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= settings.xrp_perps_max_market_size %>"
        ]
      },
      "setPerpsXrpMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= settings.xrp_perps_max_market_value %>"
        ]
      },
      "setPerpsXrpMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= settings.xrp_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.xrp_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.xrp_perps_max_liquidation_pd %>",
          "<%= settings.xrp_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsXrpLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= settings.xrp_perps_initial_margin_ratio %>",
          "<%= settings.xrp_perps_minimum_initial_margin_ratio %>",
          "<%= settings.xrp_perps_maintenance_margin_scalar %>",
          "<%= settings.xrp_perps_flag_reward_ratio_d18 %>",
          "<%= settings.xrp_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsXrpLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.xrp_perps_market_id %>",
          "<%= settings.xrp_perps_locked_oi_ratio %>"
        ]
      },
      "createYfiPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "Yearn Finance",
          "YFI"
        ]
      },
      "setPerpsPriceYfi": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= extras.yfi_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsYfiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "yfi_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsYfiSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= extras.yfi_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_yfi %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsYfiFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= settings.yfi_perps_market_skew_scale %>",
          "<%= settings.yfi_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsYfiOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= settings.yfi_perps_maker_fee_ratio %>",
          "<%= settings.yfi_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsYfiMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= settings.yfi_perps_max_market_size %>"
        ]
      },
      "setPerpsYfiMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= settings.yfi_perps_max_market_value %>"
        ]
      },
      "setPerpsYfiMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= settings.yfi_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.yfi_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.yfi_perps_max_liquidation_pd %>",
          "<%= settings.yfi_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsYfiLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= settings.yfi_perps_initial_margin_ratio %>",
          "<%= settings.yfi_perps_minimum_initial_margin_ratio %>",
          "<%= settings.yfi_perps_maintenance_margin_scalar %>",
          "<%= settings.yfi_perps_flag_reward_ratio_d18 %>",
          "<%= settings.yfi_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsYfiLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.yfi_perps_market_id %>",
          "<%= settings.yfi_perps_locked_oi_ratio %>"
        ]
      },
      "createZroPerpsMarket": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createMarket",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "LayerZero",
          "ZRO"
        ]
      },
      "setPerpsPriceZro": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "updatePriceData",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= extras.zro_oracle_id %>",
          "<%= settings.strict_staleness_tolerance %>"
        ]
      },
      "addPerpsZroSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addSettlementStrategy",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          {
            "strategyType": "0",
            "settlementDelay": "0",
            "settlementWindowDuration": "1",
            "priceVerificationContract": "0x0000000000000000000000000000000000000000",
            "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "settlementReward": "0",
            "disabled": false,
            "commitmentPriceDelay": "0"
          }
        ],
        "extra": {
          "zro_pyth_settlement_strategy": {
            "event": "SettlementStrategyAdded",
            "arg": 2
          }
        }
      },
      "setPerpsZroSettlementStrategy": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSettlementStrategy",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= extras.zro_pyth_settlement_strategy %>",
          {
            "strategyType": "0",
            "settlementDelay": "<%= settings.settlement_delay %>",
            "settlementWindowDuration": "<%= settings.settlement_window_duration %>",
            "priceVerificationContract": "<%= imports.pyth_erc7412_wrapper.contracts.PythERC7412Wrapper.address %>",
            "feedId": "<%= settings.pyth_feed_id_zro %>",
            "settlementReward": "<%= settings.settlement_reward %>",
            "disabled": false,
            "commitmentPriceDelay": "<%= settings.commitment_price_delay %>"
          }
        ]
      },
      "setPerpsZroFundingParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFundingParameters",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= settings.zro_perps_market_skew_scale %>",
          "<%= settings.zro_perps_market_max_funding_velocity %>"
        ]
      },
      "setPerpsZroOrderFees": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setOrderFees",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= settings.zro_perps_maker_fee_ratio %>",
          "<%= settings.zro_perps_taker_fee_ratio %>"
        ]
      },
      "setPerpsZroMaxMarketSize": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketSize",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= settings.zro_perps_max_market_size %>"
        ]
      },
      "setPerpsZroMaxMarketValue": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxMarketValue",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= settings.zro_perps_max_market_value %>"
        ]
      },
      "setPerpsZroMaxLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMaxLiquidationParameters",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= settings.zro_perps_max_liquidation_limit_accumulation_multiplier %>",
          "<%= settings.zro_perps_max_seconds_in_liquidation_window %>",
          "<%= settings.zro_perps_max_liquidation_pd %>",
          "<%= settings.zro_perps_endorsed_liquidator %>"
        ]
      },
      "setPerpsZroLiquidationParameters": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLiquidationParameters",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= settings.zro_perps_initial_margin_ratio %>",
          "<%= settings.zro_perps_minimum_initial_margin_ratio %>",
          "<%= settings.zro_perps_maintenance_margin_scalar %>",
          "<%= settings.zro_perps_flag_reward_ratio_d18 %>",
          "<%= settings.zro_perps_minimum_position_margin %>"
        ]
      },
      "setPerpsZroLockedOiRatio": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setLockedOiRatio",
        "args": [
          "<%= settings.zro_perps_market_id %>",
          "<%= settings.zro_perps_locked_oi_ratio %>"
        ]
      },
      "PerpsMarketProxy_setCollateralConfiguration_synth_cbeth": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setCollateralConfiguration",
        "args": [
          "<%= extras.synth_cbeth_market_id %>",
          "<%= settings.synth_cbeth_max_collateral_amount %>",
          "<%= settings.synth_cbeth_upper_limit_discount %>",
          "<%= settings.synth_cbeth_lower_limit_discount %>",
          "<%= settings.synth_cbeth_discount_scalar %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_Perps_synth_cbeth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= imports.perpsFactory.extras.superMarketId %>",
          "<%= extras.synth_cbeth_token_address %>",
          "<%= settings.synth_cbeth_max_collateral_amount %>"
        ]
      },
      "PerpsMarketProxy_setCollateralConfiguration_synth_wsteth": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setCollateralConfiguration",
        "args": [
          "<%= extras.synth_wsteth_market_id %>",
          "<%= settings.synth_wsteth_max_collateral_amount %>",
          "<%= settings.synth_wsteth_upper_limit_discount %>",
          "<%= settings.synth_wsteth_lower_limit_discount %>",
          "<%= settings.synth_wsteth_discount_scalar %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_Perps_synth_wsteth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= imports.perpsFactory.extras.superMarketId %>",
          "<%= extras.synth_wsteth_token_address %>",
          "<%= settings.synth_wsteth_max_collateral_amount %>"
        ]
      },
      "PerpsMarketProxy_setCollateralConfiguration_synth_weth": {
        "target": [
          "perpsFactory.PerpsMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setCollateralConfiguration",
        "args": [
          "<%= extras.synth_weth_market_id %>",
          "<%= settings.synth_weth_max_collateral_amount %>",
          "<%= settings.synth_weth_upper_limit_discount %>",
          "<%= settings.synth_weth_lower_limit_discount %>",
          "<%= settings.synth_weth_discount_scalar %>"
        ]
      },
      "CoreProxy_configureMaximumMarketCollateral_Perps_synth_weth": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner",
          "args": []
        },
        "func": "configureMaximumMarketCollateral",
        "args": [
          "<%= imports.perpsFactory.extras.superMarketId %>",
          "<%= extras.synth_weth_token_address %>",
          "<%= settings.synth_weth_max_collateral_amount %>"
        ]
      },
      "setMinimumLiquidityRatio": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMinLiquidityRatio(uint256)",
        "args": [
          "<%= settings.minimum_liquidity_ratio %>"
        ]
      },
      "setAccountTimeoutWithdraw": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= formatBytes32String('accountTimeoutWithdraw') %>",
          "<%= hexZeroPad(hexlify(parseInt(settings.account_timeout_withdraw)), 32) %>"
        ],
        "depends": [
          "provision.system",
          "setting.account_timeout_withdraw"
        ]
      }
    },
    "var": {
      "cbbtc_synth_config": {
        "cbbtc_issuance_ratio": "<%= parseEther('10') %>",
        "cbbtc_liquidation_ratio": "<%= parseEther('1.5') %>",
        "cbbtc_liquidation_reward": "<%= parseEther('0.0001') %>",
        "cbbtc_min_delegation": "<%= parseEther('0.1') %>",
        "cbbtc_max_collateral_limit": "<%= parseEther('100') %>"
      },
      "cbeth_synth_config": {
        "cbeth_issuance_ratio": "<%= parseEther('2') %>",
        "cbeth_liquidation_ratio": "<%= parseEther('1.1') %>",
        "cbeth_liquidation_reward": "<%= parseEther('0.0001') %>",
        "cbeth_min_delegation": "<%= parseEther('0.1') %>",
        "cbeth_max_collateral_limit": "<%= parseEther('1750') %>"
      },
      "wsteth_synth_config": {
        "wsteth_issuance_ratio": "<%= parseEther('2') %>",
        "wsteth_liquidation_ratio": "<%= parseEther('1.1') %>",
        "wsteth_liquidation_reward": "<%= parseEther('0.0001') %>",
        "wsteth_min_delegation": "<%= parseEther('0.1') %>",
        "wsteth_max_collateral_limit": "<%= parseEther('1750') %>"
      },
      "weth_synth_config": {
        "weth_issuance_ratio": "<%= parseEther('2') %>",
        "weth_liquidation_ratio": "<%= parseEther('1.1') %>",
        "weth_liquidation_reward": "<%= parseEther('0.0001') %>",
        "weth_min_delegation": "<%= parseEther('0.1') %>",
        "weth_max_collateral_limit": "<%= parseEther('1750') %>"
      },
      "susdc_synth_config": {
        "susdc_issuance_ratio": "<%= MaxUint256 %>",
        "susdc_liquidation_ratio": "<%= parseEther('1.005') %>",
        "susdc_liquidation_reward": "<%= parseEther('1') %>",
        "susdc_min_delegation": "<%= parseEther('100') %>"
      },
      "sstatausdc_synth_config": {
        "sstatausdc_issuance_ratio": "<%= MaxUint256 %>",
        "sstatausdc_liquidation_ratio": "<%= parseEther('1.1') %>",
        "sstatausdc_liquidation_reward": "<%= parseEther('1') %>",
        "sstatausdc_min_delegation": "<%= parseEther('100') %>"
      },
      "scbbtc_synth_config": {
        "scbbtc_issuance_ratio": "<%= parseEther('2') %>",
        "scbbtc_liquidation_ratio": "<%= parseEther('1.1') %>",
        "scbbtc_liquidation_reward": "<%= parseEther('0.0001') %>",
        "scbbtc_min_delegation": "<%= parseEther('0.1') %>"
      },
      "scbeth_synth_config": {
        "scbeth_issuance_ratio": "<%= parseEther('2') %>",
        "scbeth_liquidation_ratio": "<%= parseEther('1.1') %>",
        "scbeth_liquidation_reward": "<%= parseEther('0.0001') %>",
        "scbeth_min_delegation": "<%= parseEther('0.1') %>"
      },
      "swsteth_synth_config": {
        "swsteth_issuance_ratio": "<%= parseEther('2') %>",
        "swsteth_liquidation_ratio": "<%= parseEther('1.1') %>",
        "swsteth_liquidation_reward": "<%= parseEther('0.0001') %>",
        "swsteth_min_delegation": "<%= parseEther('0.1') %>"
      },
      "sweth_synth_config": {
        "sweth_issuance_ratio": "<%= parseEther('2') %>",
        "sweth_liquidation_ratio": "<%= parseEther('1.1') %>",
        "sweth_liquidation_reward": "<%= parseEther('0.0001') %>",
        "sweth_min_delegation": "<%= parseEther('0.1') %>"
      },
      "cbbtc_spot_settings": {
        "synth_cbbtc_max_collateral_amount": "<%= parseEther(String(100)) %>",
        "synth_cbbtc_skew_scale": "<%= parseEther(String(35_000)) %>"
      },
      "cbeth_spot_settings": {
        "synth_cbeth_max_collateral_amount": "<%= parseEther(String(1_750)) %>",
        "synth_cbeth_skew_scale": "<%= parseEther(String(350_000)) %>"
      },
      "wsteth_spot_settings": {
        "synth_wsteth_max_collateral_amount": "<%= parseEther(String(1_750)) %>",
        "synth_wsteth_skew_scale": "<%= parseEther(String(350_000)) %>"
      },
      "weth_spot_settings": {
        "synth_weth_max_collateral_amount": "<%= parseEther(String(1_750)) %>",
        "synth_weth_skew_scale": "<%= parseEther(String(350_000)) %>"
      },
      "perps_collateral_USD_settings": {
        "usd_max_collateral_amount": "<%= MaxUint256 %>",
        "usd_upper_limit_discount": "0",
        "usd_lower_limit_discount": "0",
        "usd_discount_scalar": "0"
      },
      "perps_collateral_synth_cbbtc_settings": {
        "synth_cbbtc_upper_limit_discount": "<%= parseEther('0.075') %>",
        "synth_cbbtc_lower_limit_discount": "<%= parseEther('0.010') %>",
        "synth_cbbtc_discount_scalar": "<%= parseEther('1') %>"
      },
      "perps_keeper_settings": {
        "perps_keeper_l1_cost_settle_gas_units": "<%= String(23_000) %>",
        "perps_keeper_l2_cost_settle_gas_units": "<%= String(5_500_000) %>",
        "perps_keeper_settle_tx_size": "<%= String(5_000) %>",
        "perps_keeper_l1_cost_flag_gas_units": "<%= String(4_500) %>",
        "perps_keeper_l2_cost_flag_gas_units": "<%= String(450_000) %>",
        "perps_keeper_flag_tx_size": "<%= String(3_000) %>",
        "perps_keeper_l1_cost_liquidate_gas_units": "<%= String(26_600) %>",
        "perps_keeper_l2_cost_liquidate_gas_units": "<%= String(2_300_000) %>",
        "perps_keeper_liquidate_tx_size": "<%= String(5_050) %>"
      },
      "perps_global_settings": {
        "perps_liquidation_min_keeper_reward_usd": "<%= parseEther('1') %>",
        "perps_liquidation_min_keeper_profit_ratio_d18": "<%= parseEther('0.30') %>",
        "perps_liquidation_max_keeper_reward_usd": "<%= parseEther('30') %>",
        "perps_liquidation_max_keeper_scaling_ratio_d18": "<%= parseEther('0.3') %>",
        "perps_low_util_gradient": "<%= parseEther('0.000025') %>",
        "perps_gradient_breakpoint": "<%= parseEther('0.80') %>",
        "perps_high_util_gradient": "<%= parseEther('0.01') %>",
        "perps_collateral_liquidation_ratio": "<%= parseEther('0.0003') %>",
        "perps_max_positions_per_account": "10",
        "perps_max_collaterals_per_account": "3"
      },
      "perps_aave_market_settings": {
        "aave_perps_market_id": "3300",
        "aave_perps_market_skew_scale": "<%= parseEther(String(360_000)) %>",
        "aave_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "aave_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "aave_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "aave_perps_max_market_size": "<%= parseEther(String(20_600)) %>",
        "aave_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "aave_perps_initial_margin_ratio": "<%= parseEther('3.38') %>",
        "aave_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "aave_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "aave_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "aave_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "aave_perps_max_seconds_in_liquidation_window": "30",
        "aave_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "aave_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "aave_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "aave_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ada_market_settings": {
        "ada_perps_market_id": "3400",
        "ada_perps_market_skew_scale": "<%= parseEther(String(300_000_000)) %>",
        "ada_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "ada_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "ada_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "ada_perps_max_market_size": "<%= parseEther(String(8_476_200)) %>",
        "ada_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "ada_perps_initial_margin_ratio": "<%= parseEther('4.35') %>",
        "ada_perps_maintenance_margin_scalar": "<%= parseEther('0.33') %>",
        "ada_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "ada_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ada_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ada_perps_max_seconds_in_liquidation_window": "30",
        "ada_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ada_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ada_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ada_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_algo_market_settings": {
        "algo_perps_market_id": "3500",
        "algo_perps_market_skew_scale": "<%= parseEther(String(103_875_000)) %>",
        "algo_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "algo_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "algo_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "algo_perps_max_market_size": "<%= parseEther(String(5_953_850)) %>",
        "algo_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "algo_perps_initial_margin_ratio": "<%= parseEther('5.19') %>",
        "algo_perps_maintenance_margin_scalar": "<%= parseEther('0.36') %>",
        "algo_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "algo_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "algo_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "algo_perps_max_seconds_in_liquidation_window": "30",
        "algo_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "algo_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "algo_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "algo_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_apt_market_settings": {
        "apt_perps_market_id": "3600",
        "apt_perps_market_skew_scale": "<%= parseEther(String(6_075_000)) %>",
        "apt_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "apt_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "apt_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "apt_perps_max_market_size": "<%= parseEther(String(352_300)) %>",
        "apt_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "apt_perps_initial_margin_ratio": "<%= parseEther('1.0') %>",
        "apt_perps_maintenance_margin_scalar": "<%= parseEther('0.31') %>",
        "apt_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "apt_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "apt_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "apt_perps_max_seconds_in_liquidation_window": "30",
        "apt_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "apt_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "apt_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "apt_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_arb_market_settings": {
        "arb_perps_market_id": "1600",
        "arb_perps_market_skew_scale": "<%= parseEther(String(82_000_000)) %>",
        "arb_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "arb_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "arb_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "arb_perps_max_market_size": "<%= parseEther(String(2_000_000)) %>",
        "arb_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "arb_perps_initial_margin_ratio": "<%= parseEther('4.16') %>",
        "arb_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "arb_perps_minimum_initial_margin_ratio": "<%= parseEther('0.033333') %>",
        "arb_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "arb_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "arb_perps_max_seconds_in_liquidation_window": "30",
        "arb_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "arb_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "arb_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "arb_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_arkm_market_settings": {
        "arkm_perps_market_id": "2600",
        "arkm_perps_market_skew_scale": "<%= parseEther(String(11_000_000)) %>",
        "arkm_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "arkm_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "arkm_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "arkm_perps_max_market_size": "<%= parseEther(String(400_000)) %>",
        "arkm_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "arkm_perps_initial_margin_ratio": "<%= parseEther('4.43') %>",
        "arkm_perps_maintenance_margin_scalar": "<%= parseEther('0.44') %>",
        "arkm_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "arkm_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "arkm_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "arkm_perps_max_seconds_in_liquidation_window": "30",
        "arkm_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "arkm_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "arkm_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "arkm_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_atom_market_settings": {
        "atom_perps_market_id": "3700",
        "atom_perps_market_skew_scale": "<%= parseEther(String(11_250_000)) %>",
        "atom_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "atom_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "atom_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "atom_perps_max_market_size": "<%= parseEther(String(329_300)) %>",
        "atom_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "atom_perps_initial_margin_ratio": "<%= parseEther('2.49') %>",
        "atom_perps_maintenance_margin_scalar": "<%= parseEther('0.31') %>",
        "atom_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "atom_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "atom_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "atom_perps_max_seconds_in_liquidation_window": "30",
        "atom_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "atom_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "atom_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "atom_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_avax_market_settings": {
        "avax_perps_market_id": "900",
        "avax_perps_market_skew_scale": "<%= parseEther(String(2_500_000)) %>",
        "avax_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "avax_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "avax_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "avax_perps_max_market_size": "<%= parseEther(String(100_000)) %>",
        "avax_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "avax_perps_initial_margin_ratio": "<%= parseEther('9.08') %>",
        "avax_perps_maintenance_margin_scalar": "<%= parseEther('0.36') %>",
        "avax_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "avax_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "avax_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "avax_perps_max_seconds_in_liquidation_window": "30",
        "avax_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "avax_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "avax_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "avax_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_axl_market_settings": {
        "axl_perps_market_id": "3200",
        "axl_perps_market_skew_scale": "<%= parseEther(String(10_125_000)) %>",
        "axl_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "axl_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "axl_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "axl_perps_max_market_size": "<%= parseEther(String(1_000_000)) %>",
        "axl_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "axl_perps_initial_margin_ratio": "<%= parseEther('2.85') %>",
        "axl_perps_maintenance_margin_scalar": "<%= parseEther('0.34') %>",
        "axl_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "axl_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "axl_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "axl_perps_max_seconds_in_liquidation_window": "30",
        "axl_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "axl_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "axl_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "axl_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_axs_market_settings": {
        "axs_perps_market_id": "3800",
        "axs_perps_market_skew_scale": "<%= parseEther(String(4_218_750)) %>",
        "axs_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "axs_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "axs_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "axs_perps_max_market_size": "<%= parseEther(String(162_000)) %>",
        "axs_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "axs_perps_initial_margin_ratio": "<%= parseEther('0.88') %>",
        "axs_perps_maintenance_margin_scalar": "<%= parseEther('0.31') %>",
        "axs_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "axs_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "axs_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "axs_perps_max_seconds_in_liquidation_window": "30",
        "axs_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "axs_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "axs_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "axs_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_bal_market_settings": {
        "bal_perps_market_id": "3900",
        "bal_perps_market_skew_scale": "<%= parseEther(String(1_125_000)) %>",
        "bal_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "bal_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "bal_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "bal_perps_max_market_size": "<%= parseEther(String(377_600)) %>",
        "bal_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "bal_perps_initial_margin_ratio": "<%= parseEther('3.94') %>",
        "bal_perps_maintenance_margin_scalar": "<%= parseEther('0.35') %>",
        "bal_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "bal_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "bal_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "bal_perps_max_seconds_in_liquidation_window": "30",
        "bal_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "bal_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "bal_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "bal_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_bch_market_settings": {
        "bch_perps_market_id": "4000",
        "bch_perps_market_skew_scale": "<%= parseEther(String(168_750)) %>",
        "bch_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "bch_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "bch_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "bch_perps_max_market_size": "<%= parseEther(String(9_350)) %>",
        "bch_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "bch_perps_initial_margin_ratio": "<%= parseEther('1.6') %>",
        "bch_perps_maintenance_margin_scalar": "<%= parseEther('0.32') %>",
        "bch_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "bch_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "bch_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "bch_perps_max_seconds_in_liquidation_window": "30",
        "bch_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "bch_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "bch_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "bch_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_blur_market_settings": {
        "blur_perps_market_id": "4100",
        "blur_perps_market_skew_scale": "<%= parseEther(String(100_000_000)) %>",
        "blur_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "blur_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "blur_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "blur_perps_max_market_size": "<%= parseEther(String(3_329_150)) %>",
        "blur_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "blur_perps_initial_margin_ratio": "<%= parseEther('1.49') %>",
        "blur_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "blur_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "blur_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "blur_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "blur_perps_max_seconds_in_liquidation_window": "30",
        "blur_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "blur_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "blur_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "blur_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_bnb_market_settings": {
        "bnb_perps_market_id": "1800",
        "bnb_perps_market_skew_scale": "<%= parseEther(String(375_000)) %>",
        "bnb_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "bnb_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "bnb_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "bnb_perps_max_market_size": "<%= parseEther(String(7_000)) %>",
        "bnb_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "bnb_perps_initial_margin_ratio": "<%= parseEther('10.72') %>",
        "bnb_perps_maintenance_margin_scalar": "<%= parseEther('0.35') %>",
        "bnb_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "bnb_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "bnb_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "bnb_perps_max_seconds_in_liquidation_window": "30",
        "bnb_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "bnb_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "bnb_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "bnb_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_bome_market_settings": {
        "bome_perps_market_id": "2900",
        "bome_perps_market_skew_scale": "<%= parseEther(String(3_750_000_000)) %>",
        "bome_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "bome_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "bome_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "bome_perps_max_market_size": "<%= parseEther(String(229_513_950)) %>",
        "bome_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "bome_perps_initial_margin_ratio": "<%= parseEther('1.44') %>",
        "bome_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "bome_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "bome_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "bome_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "bome_perps_max_seconds_in_liquidation_window": "30",
        "bome_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "bome_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "bome_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "bome_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_bonk_market_settings": {
        "bonk_perps_market_id": "1400",
        "bonk_perps_market_skew_scale": "<%= parseEther(String(1_600_000_000_000)) %>",
        "bonk_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "bonk_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "bonk_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "bonk_perps_max_market_size": "<%= parseEther(String(135_525_228_000)) %>",
        "bonk_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "bonk_perps_initial_margin_ratio": "<%= parseEther('2.55') %>",
        "bonk_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "bonk_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "bonk_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "bonk_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "bonk_perps_max_seconds_in_liquidation_window": "30",
        "bonk_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "bonk_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "bonk_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "bonk_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_btc_market_settings": {
        "btc_perps_market_id": "200",
        "btc_perps_market_skew_scale": "<%= parseEther(String(35_000)) %>",
        "btc_perps_market_max_funding_velocity": "<%= parseEther('4') %>",
        "btc_perps_maker_fee_ratio": "<%= parseEther('0.000001') %>",
        "btc_perps_taker_fee_ratio": "<%= parseEther('0.000500') %>",
        "btc_perps_max_market_size": "<%= parseEther(String(1_200)) %>",
        "btc_perps_max_market_value": "<%= parseEther(String(50_000_000)) %>",
        "btc_perps_initial_margin_ratio": "<%= parseEther('1.54') %>",
        "btc_perps_maintenance_margin_scalar": "<%= parseEther('0.28') %>",
        "btc_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "btc_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "btc_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "btc_perps_max_seconds_in_liquidation_window": "30",
        "btc_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "btc_perps_locked_oi_ratio": "<%= parseEther('0.25') %>",
        "btc_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "btc_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_comp_market_settings": {
        "comp_perps_market_id": "4200",
        "comp_perps_market_skew_scale": "<%= parseEther(String(241_876)) %>",
        "comp_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "comp_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "comp_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "comp_perps_max_market_size": "<%= parseEther(String(17_000)) %>",
        "comp_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "comp_perps_initial_margin_ratio": "<%= parseEther('1.8') %>",
        "comp_perps_maintenance_margin_scalar": "<%= parseEther('0.41') %>",
        "comp_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "comp_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "comp_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "comp_perps_max_seconds_in_liquidation_window": "30",
        "comp_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "comp_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "comp_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "comp_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_crv_market_settings": {
        "crv_perps_market_id": "4300",
        "crv_perps_market_skew_scale": "<%= parseEther(String(240_000_000)) %>",
        "crv_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "crv_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "crv_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "crv_perps_max_market_size": "<%= parseEther(String(5_814_100)) %>",
        "crv_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "crv_perps_initial_margin_ratio": "<%= parseEther('4.56') %>",
        "crv_perps_maintenance_margin_scalar": "<%= parseEther('0.39') %>",
        "crv_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "crv_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "crv_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "crv_perps_max_seconds_in_liquidation_window": "30",
        "crv_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "crv_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "crv_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "crv_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_doge_market_settings": {
        "doge_perps_market_id": "800",
        "doge_perps_market_skew_scale": "<%= parseEther(String(1_578_000_000)) %>",
        "doge_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "doge_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "doge_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "doge_perps_max_market_size": "<%= parseEther(String(25_000_000)) %>",
        "doge_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "doge_perps_initial_margin_ratio": "<%= parseEther('6.9') %>",
        "doge_perps_maintenance_margin_scalar": "<%= parseEther('0.3') %>",
        "doge_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "doge_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "doge_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "doge_perps_max_seconds_in_liquidation_window": "30",
        "doge_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "doge_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "doge_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "doge_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_dot_market_settings": {
        "dot_perps_market_id": "4400",
        "dot_perps_market_skew_scale": "<%= parseEther(String(15_000_000)) %>",
        "dot_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "dot_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "dot_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "dot_perps_max_market_size": "<%= parseEther(String(724_950)) %>",
        "dot_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "dot_perps_initial_margin_ratio": "<%= parseEther('2.09') %>",
        "dot_perps_maintenance_margin_scalar": "<%= parseEther('0.32') %>",
        "dot_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "dot_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "dot_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "dot_perps_max_seconds_in_liquidation_window": "30",
        "dot_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "dot_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "dot_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "dot_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_dydx_market_settings": {
        "dydx_perps_market_id": "4500",
        "dydx_perps_market_skew_scale": "<%= parseEther(String(45_000_000)) %>",
        "dydx_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "dydx_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "dydx_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "dydx_perps_max_market_size": "<%= parseEther(String(1_703_200)) %>",
        "dydx_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "dydx_perps_initial_margin_ratio": "<%= parseEther('1.45') %>",
        "dydx_perps_maintenance_margin_scalar": "<%= parseEther('0.34') %>",
        "dydx_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "dydx_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "dydx_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "dydx_perps_max_seconds_in_liquidation_window": "30",
        "dydx_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "dydx_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "dydx_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "dydx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_eigen_market_settings": {
        "eigen_perps_market_id": "7300",
        "eigen_perps_market_skew_scale": "<%= parseEther(String(4_000_000)) %>",
        "eigen_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "eigen_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "eigen_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "eigen_perps_max_market_size": "<%= parseEther(String(268_820)) %>",
        "eigen_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "eigen_perps_initial_margin_ratio": "<%= parseEther('0.91') %>",
        "eigen_perps_maintenance_margin_scalar": "<%= parseEther('0.334') %>",
        "eigen_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "eigen_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "eigen_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "eigen_perps_max_seconds_in_liquidation_window": "30",
        "eigen_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "eigen_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "eigen_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "eigen_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ena_market_settings": {
        "ena_perps_market_id": "700",
        "ena_perps_market_skew_scale": "<%= parseEther(String(102_000_000)) %>",
        "ena_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "ena_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "ena_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "ena_perps_max_market_size": "<%= parseEther(String(3_000_000)) %>",
        "ena_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "ena_perps_initial_margin_ratio": "<%= parseEther('3.46') %>",
        "ena_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "ena_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "ena_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ena_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ena_perps_max_seconds_in_liquidation_window": "30",
        "ena_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ena_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ena_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ena_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_eos_market_settings": {
        "eos_perps_market_id": "4600",
        "eos_perps_market_skew_scale": "<%= parseEther(String(72_000_000)) %>",
        "eos_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "eos_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "eos_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "eos_perps_max_market_size": "<%= parseEther(String(3_182_150)) %>",
        "eos_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "eos_perps_initial_margin_ratio": "<%= parseEther('2.47') %>",
        "eos_perps_maintenance_margin_scalar": "<%= parseEther('0.33') %>",
        "eos_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "eos_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "eos_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "eos_perps_max_seconds_in_liquidation_window": "30",
        "eos_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "eos_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "eos_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "eos_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_etc_market_settings": {
        "etc_perps_market_id": "4700",
        "etc_perps_market_skew_scale": "<%= parseEther(String(3_375_000)) %>",
        "etc_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "etc_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "etc_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "etc_perps_max_market_size": "<%= parseEther(String(80_750)) %>",
        "etc_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "etc_perps_initial_margin_ratio": "<%= parseEther('2.71') %>",
        "etc_perps_maintenance_margin_scalar": "<%= parseEther('0.33') %>",
        "etc_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "etc_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "etc_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "etc_perps_max_seconds_in_liquidation_window": "30",
        "etc_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "etc_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "etc_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "etc_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_eth_market_settings": {
        "eth_perps_market_id": "100",
        "eth_perps_market_skew_scale": "<%= parseEther(String(350_000)) %>",
        "eth_perps_market_max_funding_velocity": "<%= parseEther('4') %>",
        "eth_perps_maker_fee_ratio": "<%= parseEther('0.000001') %>",
        "eth_perps_taker_fee_ratio": "<%= parseEther('0.000500') %>",
        "eth_perps_max_market_size": "<%= parseEther(String(30_700)) %>",
        "eth_perps_max_market_value": "<%= parseEther(String(50_000_000)) %>",
        "eth_perps_initial_margin_ratio": "<%= parseEther('1.16') %>",
        "eth_perps_maintenance_margin_scalar": "<%= parseEther('0.28') %>",
        "eth_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "eth_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "eth_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "eth_perps_max_seconds_in_liquidation_window": "30",
        "eth_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "eth_perps_locked_oi_ratio": "<%= parseEther('0.25') %>",
        "eth_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "eth_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ethbtc_market_settings": {
        "ethbtc_perps_market_id": "4800",
        "ethbtc_perps_market_skew_scale": "<%= parseEther(String(3_400_000_000)) %>",
        "ethbtc_perps_market_max_funding_velocity": "<%= parseEther('4') %>",
        "ethbtc_perps_maker_fee_ratio": "<%= parseEther('0.000001') %>",
        "ethbtc_perps_taker_fee_ratio": "<%= parseEther('0.000500') %>",
        "ethbtc_perps_max_market_size": "<%= parseEther(String(72_226_506)) %>",
        "ethbtc_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "ethbtc_perps_initial_margin_ratio": "<%= parseEther('1.39') %>",
        "ethbtc_perps_maintenance_margin_scalar": "<%= parseEther('0.26') %>",
        "ethbtc_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "ethbtc_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ethbtc_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ethbtc_perps_max_seconds_in_liquidation_window": "30",
        "ethbtc_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ethbtc_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ethbtc_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ethbtc_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ethfi_market_settings": {
        "ethfi_perps_market_id": "3000",
        "ethfi_perps_market_skew_scale": "<%= parseEther(String(16_500_000)) %>",
        "ethfi_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "ethfi_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "ethfi_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "ethfi_perps_max_market_size": "<%= parseEther(String(300_000)) %>",
        "ethfi_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "ethfi_perps_initial_margin_ratio": "<%= parseEther('2.12') %>",
        "ethfi_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "ethfi_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "ethfi_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ethfi_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ethfi_perps_max_seconds_in_liquidation_window": "30",
        "ethfi_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ethfi_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ethfi_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ethfi_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_fil_market_settings": {
        "fil_perps_market_id": "4900",
        "fil_perps_market_skew_scale": "<%= parseEther(String(12_750_000)) %>",
        "fil_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "fil_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "fil_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "fil_perps_max_market_size": "<%= parseEther(String(812_100)) %>",
        "fil_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "fil_perps_initial_margin_ratio": "<%= parseEther('1.81') %>",
        "fil_perps_maintenance_margin_scalar": "<%= parseEther('0.26') %>",
        "fil_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "fil_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "fil_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "fil_perps_max_seconds_in_liquidation_window": "30",
        "fil_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "fil_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "fil_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "fil_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_flow_market_settings": {
        "flow_perps_market_id": "5000",
        "flow_perps_market_skew_scale": "<%= parseEther(String(15_000_000)) %>",
        "flow_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "flow_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "flow_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "flow_perps_max_market_size": "<%= parseEther(String(1_380_350)) %>",
        "flow_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "flow_perps_initial_margin_ratio": "<%= parseEther('9.28') %>",
        "flow_perps_maintenance_margin_scalar": "<%= parseEther('0.28') %>",
        "flow_perps_minimum_initial_margin_ratio": "<%= parseEther('0.1') %>",
        "flow_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "flow_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "flow_perps_max_seconds_in_liquidation_window": "30",
        "flow_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "flow_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "flow_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "flow_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ftm_market_settings": {
        "ftm_perps_market_id": "1500",
        "ftm_perps_market_skew_scale": "<%= parseEther(String(118_000_000)) %>",
        "ftm_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "ftm_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "ftm_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "ftm_perps_max_market_size": "<%= parseEther(String(4_655_350)) %>",
        "ftm_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "ftm_perps_initial_margin_ratio": "<%= parseEther('5.58') %>",
        "ftm_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "ftm_perps_minimum_initial_margin_ratio": "<%= parseEther('0.033333') %>",
        "ftm_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ftm_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ftm_perps_max_seconds_in_liquidation_window": "30",
        "ftm_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ftm_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ftm_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ftm_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_fxs_market_settings": {
        "fxs_perps_market_id": "5100",
        "fxs_perps_market_skew_scale": "<%= parseEther(String(2_104_687)) %>",
        "fxs_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "fxs_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "fxs_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "fxs_perps_max_market_size": "<%= parseEther(String(371_700)) %>",
        "fxs_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "fxs_perps_initial_margin_ratio": "<%= parseEther('2.59') %>",
        "fxs_perps_maintenance_margin_scalar": "<%= parseEther('0.34') %>",
        "fxs_perps_minimum_initial_margin_ratio": "<%= parseEther('0.06666') %>",
        "fxs_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "fxs_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "fxs_perps_max_seconds_in_liquidation_window": "30",
        "fxs_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "fxs_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "fxs_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "fxs_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_gala_market_settings": {
        "gala_perps_market_id": "2700",
        "gala_perps_market_skew_scale": "<%= parseEther(String(1_125_000_000)) %>",
        "gala_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "gala_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "gala_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "gala_perps_max_market_size": "<%= parseEther(String(36_165_750)) %>",
        "gala_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "gala_perps_initial_margin_ratio": "<%= parseEther('1.29') %>",
        "gala_perps_maintenance_margin_scalar": "<%= parseEther('0.35') %>",
        "gala_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "gala_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "gala_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "gala_perps_max_seconds_in_liquidation_window": "30",
        "gala_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "gala_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "gala_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "gala_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_gmx_market_settings": {
        "gmx_perps_market_id": "2200",
        "gmx_perps_market_skew_scale": "<%= parseEther(String(250_000)) %>",
        "gmx_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "gmx_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "gmx_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "gmx_perps_max_market_size": "<%= parseEther(String(35_000)) %>",
        "gmx_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "gmx_perps_initial_margin_ratio": "<%= parseEther('1.27') %>",
        "gmx_perps_maintenance_margin_scalar": "<%= parseEther('0.44') %>",
        "gmx_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "gmx_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "gmx_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "gmx_perps_max_seconds_in_liquidation_window": "30",
        "gmx_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "gmx_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "gmx_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "gmx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_grt_market_settings": {
        "grt_perps_market_id": "5200",
        "grt_perps_market_skew_scale": "<%= parseEther(String(112_500_000)) %>",
        "grt_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "grt_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "grt_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "grt_perps_max_market_size": "<%= parseEther(String(4_516_800)) %>",
        "grt_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "grt_perps_initial_margin_ratio": "<%= parseEther('4.22') %>",
        "grt_perps_maintenance_margin_scalar": "<%= parseEther('0.39') %>",
        "grt_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "grt_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "grt_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "grt_perps_max_seconds_in_liquidation_window": "30",
        "grt_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "grt_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "grt_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "grt_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_icp_market_settings": {
        "icp_perps_market_id": "5300",
        "icp_perps_market_skew_scale": "<%= parseEther(String(3_000_000)) %>",
        "icp_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "icp_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "icp_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "icp_perps_max_market_size": "<%= parseEther(String(91_100)) %>",
        "icp_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "icp_perps_initial_margin_ratio": "<%= parseEther('1.86') %>",
        "icp_perps_maintenance_margin_scalar": "<%= parseEther('0.44') %>",
        "icp_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "icp_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "icp_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "icp_perps_max_seconds_in_liquidation_window": "30",
        "icp_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "icp_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "icp_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "icp_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_imx_market_settings": {
        "imx_perps_market_id": "5400",
        "imx_perps_market_skew_scale": "<%= parseEther(String(8_400_000)) %>",
        "imx_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "imx_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "imx_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "imx_perps_max_market_size": "<%= parseEther(String(508_750)) %>",
        "imx_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "imx_perps_initial_margin_ratio": "<%= parseEther('1.95') %>",
        "imx_perps_maintenance_margin_scalar": "<%= parseEther('0.4') %>",
        "imx_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "imx_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "imx_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "imx_perps_max_seconds_in_liquidation_window": "30",
        "imx_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "imx_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "imx_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "imx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_inj_market_settings": {
        "inj_perps_market_id": "2100",
        "inj_perps_market_skew_scale": "<%= parseEther(String(2_250_000)) %>",
        "inj_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "inj_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "inj_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "inj_perps_max_market_size": "<%= parseEther(String(73_500)) %>",
        "inj_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "inj_perps_initial_margin_ratio": "<%= parseEther('1.31') %>",
        "inj_perps_maintenance_margin_scalar": "<%= parseEther('0.46') %>",
        "inj_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "inj_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "inj_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "inj_perps_max_seconds_in_liquidation_window": "30",
        "inj_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "inj_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "inj_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "inj_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_io_market_settings": {
        "io_perps_market_id": "7400",
        "io_perps_market_skew_scale": "<%= parseEther(String(6_000_000)) %>",
        "io_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "io_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "io_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "io_perps_max_market_size": "<%= parseEther(String(477_550)) %>",
        "io_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "io_perps_initial_margin_ratio": "<%= parseEther('0.694') %>",
        "io_perps_maintenance_margin_scalar": "<%= parseEther('0.334') %>",
        "io_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "io_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "io_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "io_perps_max_seconds_in_liquidation_window": "30",
        "io_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "io_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "io_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "io_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_jto_market_settings": {
        "jto_perps_market_id": "5500",
        "jto_perps_market_skew_scale": "<%= parseEther(String(8_000_000)) %>",
        "jto_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "jto_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "jto_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "jto_perps_max_market_size": "<%= parseEther(String(369_800)) %>",
        "jto_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "jto_perps_initial_margin_ratio": "<%= parseEther('1.49') %>",
        "jto_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "jto_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "jto_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "jto_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "jto_perps_max_seconds_in_liquidation_window": "30",
        "jto_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "jto_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "jto_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "jto_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_jup_market_settings": {
        "jup_perps_market_id": "5600",
        "jup_perps_market_skew_scale": "<%= parseEther(String(33_750_000)) %>",
        "jup_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "jup_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "jup_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "jup_perps_max_market_size": "<%= parseEther(String(967_850)) %>",
        "jup_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "jup_perps_initial_margin_ratio": "<%= parseEther('3.35') %>",
        "jup_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "jup_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "jup_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "jup_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "jup_perps_max_seconds_in_liquidation_window": "30",
        "jup_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "jup_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "jup_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "jup_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ldo_market_settings": {
        "ldo_perps_market_id": "5700",
        "ldo_perps_market_skew_scale": "<%= parseEther(String(21_000_000)) %>",
        "ldo_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "ldo_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "ldo_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "ldo_perps_max_market_size": "<%= parseEther(String(695_300)) %>",
        "ldo_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "ldo_perps_initial_margin_ratio": "<%= parseEther('1.25') %>",
        "ldo_perps_maintenance_margin_scalar": "<%= parseEther('0.34') %>",
        "ldo_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "ldo_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ldo_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ldo_perps_max_seconds_in_liquidation_window": "30",
        "ldo_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ldo_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ldo_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ldo_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_link_market_settings": {
        "link_perps_market_id": "1900",
        "link_perps_market_skew_scale": "<%= parseEther(String(5_625_000)) %>",
        "link_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "link_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "link_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "link_perps_max_market_size": "<%= parseEther(String(265_650)) %>",
        "link_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "link_perps_initial_margin_ratio": "<%= parseEther('6.73') %>",
        "link_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "link_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "link_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "link_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "link_perps_max_seconds_in_liquidation_window": "30",
        "link_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "link_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "link_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "link_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ltc_market_settings": {
        "ltc_perps_market_id": "5800",
        "ltc_perps_market_skew_scale": "<%= parseEther(String(1_687_500)) %>",
        "ltc_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "ltc_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "ltc_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "ltc_perps_max_market_size": "<%= parseEther(String(45_400)) %>",
        "ltc_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "ltc_perps_initial_margin_ratio": "<%= parseEther('0.005') %>",
        "ltc_perps_maintenance_margin_scalar": "<%= parseEther('0.4') %>",
        "ltc_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "ltc_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ltc_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ltc_perps_max_seconds_in_liquidation_window": "30",
        "ltc_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ltc_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ltc_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ltc_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_matic_market_settings": {
        "matic_perps_market_id": "1700",
        "matic_perps_market_skew_scale": "<%= parseEther(String(84_000_000)) %>",
        "matic_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "matic_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "matic_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "matic_perps_max_market_size": "<%= parseEther(String(0)) %>",
        "matic_perps_max_market_value": "<%= parseEther(String(0)) %>",
        "matic_perps_initial_margin_ratio": "<%= parseEther('4.41') %>",
        "matic_perps_maintenance_margin_scalar": "<%= parseEther('0.26') %>",
        "matic_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "matic_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "matic_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "matic_perps_max_seconds_in_liquidation_window": "30",
        "matic_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "matic_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "matic_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "matic_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_meme_market_settings": {
        "meme_perps_market_id": "6000",
        "meme_perps_market_skew_scale": "<%= parseEther(String(1_300_000_000)) %>",
        "meme_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "meme_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "meme_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "meme_perps_max_market_size": "<%= parseEther(String(73_846_350)) %>",
        "meme_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "meme_perps_initial_margin_ratio": "<%= parseEther('1.32') %>",
        "meme_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "meme_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "meme_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "meme_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "meme_perps_max_seconds_in_liquidation_window": "30",
        "meme_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "meme_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "meme_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "meme_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_mew_market_settings": {
        "mew_perps_market_id": "7500",
        "mew_perps_market_skew_scale": "<%= parseEther(String(2_500_000_000)) %>",
        "mew_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "mew_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "mew_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "mew_perps_max_market_size": "<%= parseEther(String(123_319_770)) %>",
        "mew_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "mew_perps_initial_margin_ratio": "<%= parseEther('1.597') %>",
        "mew_perps_maintenance_margin_scalar": "<%= parseEther('0.328') %>",
        "mew_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "mew_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "mew_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "mew_perps_max_seconds_in_liquidation_window": "30",
        "mew_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "mew_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "mew_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "mew_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_mkr_market_settings": {
        "mkr_perps_market_id": "7600",
        "mkr_perps_market_skew_scale": "<%= parseEther(String(9_000)) %>",
        "mkr_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "mkr_perps_maker_fee_ratio": "<%= parseEther('0') %>",
        "mkr_perps_taker_fee_ratio": "<%= parseEther('0.0010') %>",
        "mkr_perps_max_market_size": "<%= parseEther(String(1_200)) %>",
        "mkr_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "mkr_perps_initial_margin_ratio": "<%= parseEther('1.2') %>",
        "mkr_perps_maintenance_margin_scalar": "<%= parseEther('0.33') %>",
        "mkr_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "mkr_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "mkr_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "mkr_perps_max_seconds_in_liquidation_window": "30",
        "mkr_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "mkr_perps_locked_oi_ratio": "<%= parseEther('0.50') %>",
        "mkr_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "mkr_perps_endorsed_liquidator": "0x95A61Fa7454CA5f6A3CE01724e306Cd14a22D306"
      },
      "perps_near_market_settings": {
        "near_perps_market_id": "6100",
        "near_perps_market_skew_scale": "<%= parseEther(String(11_718_750)) %>",
        "near_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "near_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "near_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "near_perps_max_market_size": "<%= parseEther(String(596_400)) %>",
        "near_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "near_perps_initial_margin_ratio": "<%= parseEther('3.35') %>",
        "near_perps_maintenance_margin_scalar": "<%= parseEther('0.36') %>",
        "near_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "near_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "near_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "near_perps_max_seconds_in_liquidation_window": "30",
        "near_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "near_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "near_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "near_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_not_market_settings": {
        "not_perps_market_id": "7700",
        "not_perps_market_skew_scale": "<%= parseEther(String(5_000_000_000)) %>",
        "not_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "not_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "not_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "not_perps_max_market_size": "<%= parseEther(String(118_077_700)) %>",
        "not_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "not_perps_initial_margin_ratio": "<%= parseEther('1.14') %>",
        "not_perps_maintenance_margin_scalar": "<%= parseEther('0.345') %>",
        "not_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "not_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "not_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "not_perps_max_seconds_in_liquidation_window": "30",
        "not_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "not_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "not_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "not_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_op_market_settings": {
        "op_perps_market_id": "1000",
        "op_perps_market_skew_scale": "<%= parseEther(String(24_000_000)) %>",
        "op_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "op_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "op_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "op_perps_max_market_size": "<%= parseEther(String(750_000)) %>",
        "op_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "op_perps_initial_margin_ratio": "<%= parseEther('2.27') %>",
        "op_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "op_perps_minimum_initial_margin_ratio": "<%= parseEther('0.04') %>",
        "op_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "op_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "op_perps_max_seconds_in_liquidation_window": "30",
        "op_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "op_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "op_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "op_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ordi_market_settings": {
        "ordi_perps_market_id": "1100",
        "ordi_perps_market_skew_scale": "<%= parseEther(String(1_305_000)) %>",
        "ordi_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "ordi_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "ordi_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "ordi_perps_max_market_size": "<%= parseEther(String(82_100)) %>",
        "ordi_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "ordi_perps_initial_margin_ratio": "<%= parseEther('3.02') %>",
        "ordi_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "ordi_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "ordi_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ordi_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ordi_perps_max_seconds_in_liquidation_window": "30",
        "ordi_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ordi_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ordi_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ordi_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_pendle_market_settings": {
        "pendle_perps_market_id": "2000",
        "pendle_perps_market_skew_scale": "<%= parseEther(String(6_000_000)) %>",
        "pendle_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "pendle_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "pendle_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "pendle_perps_max_market_size": "<%= parseEther(String(200_000)) %>",
        "pendle_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "pendle_perps_initial_margin_ratio": "<%= parseEther('2.45') %>",
        "pendle_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "pendle_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "pendle_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "pendle_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "pendle_perps_max_seconds_in_liquidation_window": "30",
        "pendle_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "pendle_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "pendle_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "pendle_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_people_market_settings": {
        "people_perps_market_id": "7800",
        "people_perps_market_skew_scale": "<%= parseEther(String(500_000_000)) %>",
        "people_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "people_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "people_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "people_perps_max_market_size": "<%= parseEther(String(11_341_730)) %>",
        "people_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "people_perps_initial_margin_ratio": "<%= parseEther('2.403') %>",
        "people_perps_maintenance_margin_scalar": "<%= parseEther('0.334') %>",
        "people_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "people_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "people_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "people_perps_max_seconds_in_liquidation_window": "30",
        "people_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "people_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "people_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "people_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_pepe_market_settings": {
        "pepe_perps_market_id": "1200",
        "pepe_perps_market_skew_scale": "<%= parseEther(String(12_600_000_000_000)) %>",
        "pepe_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "pepe_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "pepe_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "pepe_perps_max_market_size": "<%= parseEther(String(360_000_000_000)) %>",
        "pepe_perps_max_market_value": "<%= parseEther(String(1_500_000)) %>",
        "pepe_perps_initial_margin_ratio": "<%= parseEther('4.88') %>",
        "pepe_perps_maintenance_margin_scalar": "<%= parseEther('0.43') %>",
        "pepe_perps_minimum_initial_margin_ratio": "<%= parseEther('0.04') %>",
        "pepe_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "pepe_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "pepe_perps_max_seconds_in_liquidation_window": "30",
        "pepe_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "pepe_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "pepe_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "pepe_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_pol_market_settings": {
        "pol_perps_market_id": "7900",
        "pol_perps_market_skew_scale": "<%= parseEther(String(75_000_000)) %>",
        "pol_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "pol_perps_maker_fee_ratio": "<%= parseEther('0') %>",
        "pol_perps_taker_fee_ratio": "<%= parseEther('0.0010') %>",
        "pol_perps_max_market_size": "<%= parseEther(String(7_500_000)) %>",
        "pol_perps_max_market_value": "<%= parseEther(String(3_000_000)) %>",
        "pol_perps_initial_margin_ratio": "<%= parseEther('1.8') %>",
        "pol_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "pol_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "pol_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "pol_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "pol_perps_max_seconds_in_liquidation_window": "30",
        "pol_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "pol_perps_locked_oi_ratio": "<%= parseEther('0.50') %>",
        "pol_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "pol_perps_endorsed_liquidator": "0x95A61Fa7454CA5f6A3CE01724e306Cd14a22D306"
      },
      "perps_popcat_market_settings": {
        "popcat_perps_market_id": "8000",
        "popcat_perps_market_skew_scale": "<%= parseEther(String(20_250_000)) %>",
        "popcat_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "popcat_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "popcat_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "popcat_perps_max_market_size": "<%= parseEther(String(711_490)) %>",
        "popcat_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "popcat_perps_initial_margin_ratio": "<%= parseEther('2.808') %>",
        "popcat_perps_maintenance_margin_scalar": "<%= parseEther('0.328') %>",
        "popcat_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "popcat_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "popcat_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "popcat_perps_max_seconds_in_liquidation_window": "30",
        "popcat_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "popcat_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "popcat_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "popcat_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_pyth_market_settings": {
        "pyth_perps_market_id": "6200",
        "pyth_perps_market_skew_scale": "<%= parseEther(String(60_000_000)) %>",
        "pyth_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "pyth_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "pyth_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "pyth_perps_max_market_size": "<%= parseEther(String(2_277_900)) %>",
        "pyth_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "pyth_perps_initial_margin_ratio": "<%= parseEther('0.84') %>",
        "pyth_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "pyth_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "pyth_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "pyth_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "pyth_perps_max_seconds_in_liquidation_window": "30",
        "pyth_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "pyth_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "pyth_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "pyth_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_render_market_settings": {
        "render_perps_market_id": "8100",
        "render_perps_market_skew_scale": "<%= parseEther(String(2_250_000)) %>",
        "render_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "render_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "render_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "render_perps_max_market_size": "<%= parseEther(String(179_630)) %>",
        "render_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "render_perps_initial_margin_ratio": "<%= parseEther('1.467') %>",
        "render_perps_maintenance_margin_scalar": "<%= parseEther('0.325') %>",
        "render_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "render_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "render_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "render_perps_max_seconds_in_liquidation_window": "30",
        "render_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "render_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "render_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "render_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_rndr_market_settings": {
        "rndr_perps_market_id": "6300",
        "rndr_perps_market_skew_scale": "<%= parseEther(String(3_750_000)) %>",
        "rndr_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "rndr_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "rndr_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "rndr_perps_max_market_size": "<%= parseEther(String(0)) %>",
        "rndr_perps_max_market_value": "<%= parseEther(String(0)) %>",
        "rndr_perps_initial_margin_ratio": "<%= parseEther('5.09') %>",
        "rndr_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "rndr_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "rndr_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "rndr_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "rndr_perps_max_seconds_in_liquidation_window": "30",
        "rndr_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "rndr_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "rndr_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "rndr_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_rune_market_settings": {
        "rune_perps_market_id": "1300",
        "rune_perps_market_skew_scale": "<%= parseEther(String(6_000_000)) %>",
        "rune_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "rune_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "rune_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "rune_perps_max_market_size": "<%= parseEther(String(300_000)) %>",
        "rune_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "rune_perps_initial_margin_ratio": "<%= parseEther('5.39') %>",
        "rune_perps_maintenance_margin_scalar": "<%= parseEther('0.36') %>",
        "rune_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "rune_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "rune_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "rune_perps_max_seconds_in_liquidation_window": "30",
        "rune_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "rune_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "rune_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "rune_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_sats_market_settings": {
        "sats_perps_market_id": "8200",
        "sats_perps_market_skew_scale": "<%= parseEther(String(100_000_000_000_000)) %>",
        "sats_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "sats_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "sats_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "sats_perps_max_market_size": "<%= parseEther(String(3_332_222_592_470)) %>",
        "sats_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "sats_perps_initial_margin_ratio": "<%= parseEther('0.907') %>",
        "sats_perps_maintenance_margin_scalar": "<%= parseEther('0.345') %>",
        "sats_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "sats_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "sats_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "sats_perps_max_seconds_in_liquidation_window": "30",
        "sats_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "sats_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "sats_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "sats_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_sei_market_settings": {
        "sei_perps_market_id": "6400",
        "sei_perps_market_skew_scale": "<%= parseEther(String(71_000_000)) %>",
        "sei_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "sei_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "sei_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "sei_perps_max_market_size": "<%= parseEther(String(3_496_500)) %>",
        "sei_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "sei_perps_initial_margin_ratio": "<%= parseEther('5.13') %>",
        "sei_perps_maintenance_margin_scalar": "<%= parseEther('0.39') %>",
        "sei_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "sei_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "sei_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "sei_perps_max_seconds_in_liquidation_window": "30",
        "sei_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "sei_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "sei_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "sei_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_shib_market_settings": {
        "shib_perps_market_id": "6500",
        "shib_perps_market_skew_scale": "<%= parseEther(String(3_750_000_000_000)) %>",
        "shib_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "shib_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "shib_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "shib_perps_max_market_size": "<%= parseEther(String(168_208_578_650)) %>",
        "shib_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "shib_perps_initial_margin_ratio": "<%= parseEther('2.2') %>",
        "shib_perps_maintenance_margin_scalar": "<%= parseEther('0.32') %>",
        "shib_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "shib_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "shib_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "shib_perps_max_seconds_in_liquidation_window": "30",
        "shib_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "shib_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "shib_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "shib_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_snx_market_settings": {
        "snx_perps_market_id": "300",
        "snx_perps_market_skew_scale": "<%= parseEther(String(10_200_000)) %>",
        "snx_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "snx_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "snx_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "snx_perps_max_market_size": "<%= parseEther(String(500_000)) %>",
        "snx_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "snx_perps_initial_margin_ratio": "<%= parseEther('2.82') %>",
        "snx_perps_maintenance_margin_scalar": "<%= parseEther('0.39') %>",
        "snx_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "snx_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "snx_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "snx_perps_max_seconds_in_liquidation_window": "30",
        "snx_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "snx_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "snx_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "snx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_sol_market_settings": {
        "sol_perps_market_id": "400",
        "sol_perps_market_skew_scale": "<%= parseEther(String(2_812_500)) %>",
        "sol_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "sol_perps_maker_fee_ratio": "<%= parseEther('0.000001') %>",
        "sol_perps_taker_fee_ratio": "<%= parseEther('0.000800') %>",
        "sol_perps_max_market_size": "<%= parseEther(String(205_550)) %>",
        "sol_perps_max_market_value": "<%= parseEther(String(20_000_000)) %>",
        "sol_perps_initial_margin_ratio": "<%= parseEther('4.9') %>",
        "sol_perps_maintenance_margin_scalar": "<%= parseEther('0.33') %>",
        "sol_perps_minimum_initial_margin_ratio": "<%= parseEther('0.02') %>",
        "sol_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "sol_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "sol_perps_max_seconds_in_liquidation_window": "30",
        "sol_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "sol_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "sol_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "sol_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_strk_market_settings": {
        "strk_perps_market_id": "6600",
        "strk_perps_market_skew_scale": "<%= parseEther(String(40_000_000)) %>",
        "strk_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "strk_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "strk_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "strk_perps_max_market_size": "<%= parseEther(String(1_904_850)) %>",
        "strk_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "strk_perps_initial_margin_ratio": "<%= parseEther('0.89') %>",
        "strk_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "strk_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "strk_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "strk_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "strk_perps_max_seconds_in_liquidation_window": "30",
        "strk_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "strk_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "strk_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "strk_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_stx_market_settings": {
        "stx_perps_market_id": "3100",
        "stx_perps_market_skew_scale": "<%= parseEther(String(22_500_000)) %>",
        "stx_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "stx_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "stx_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "stx_perps_max_market_size": "<%= parseEther(String(849_150)) %>",
        "stx_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "stx_perps_initial_margin_ratio": "<%= parseEther('2.61') %>",
        "stx_perps_maintenance_margin_scalar": "<%= parseEther('0.43') %>",
        "stx_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "stx_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "stx_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "stx_perps_max_seconds_in_liquidation_window": "30",
        "stx_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "stx_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "stx_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "stx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_sui_market_settings": {
        "sui_perps_market_id": "2400",
        "sui_perps_market_skew_scale": "<%= parseEther(String(55_000_000)) %>",
        "sui_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "sui_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "sui_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "sui_perps_max_market_size": "<%= parseEther(String(1_559_950)) %>",
        "sui_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "sui_perps_initial_margin_ratio": "<%= parseEther('1.96') %>",
        "sui_perps_maintenance_margin_scalar": "<%= parseEther('0.34') %>",
        "sui_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "sui_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "sui_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "sui_perps_max_seconds_in_liquidation_window": "30",
        "sui_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "sui_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "sui_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "sui_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_sushi_market_settings": {
        "sushi_perps_market_id": "6700",
        "sushi_perps_market_skew_scale": "<%= parseEther(String(16_000_000)) %>",
        "sushi_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "sushi_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "sushi_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "sushi_perps_max_market_size": "<%= parseEther(String(1_018_050)) %>",
        "sushi_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "sushi_perps_initial_margin_ratio": "<%= parseEther('1.37') %>",
        "sushi_perps_maintenance_margin_scalar": "<%= parseEther('0.4') %>",
        "sushi_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "sushi_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "sushi_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "sushi_perps_max_seconds_in_liquidation_window": "30",
        "sushi_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "sushi_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "sushi_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "sushi_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_tao_market_settings": {
        "tao_perps_market_id": "2800",
        "tao_perps_market_skew_scale": "<%= parseEther(String(32_500)) %>",
        "tao_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "tao_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "tao_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "tao_perps_max_market_size": "<%= parseEther(String(2_450)) %>",
        "tao_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "tao_perps_initial_margin_ratio": "<%= parseEther('2.89') %>",
        "tao_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "tao_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "tao_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "tao_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "tao_perps_max_seconds_in_liquidation_window": "30",
        "tao_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "tao_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "tao_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "tao_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_tia_market_settings": {
        "tia_perps_market_id": "2300",
        "tia_perps_market_skew_scale": "<%= parseEther(String(6_000_000)) %>",
        "tia_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "tia_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "tia_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "tia_perps_max_market_size": "<%= parseEther(String(279_500)) %>",
        "tia_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "tia_perps_initial_margin_ratio": "<%= parseEther('2.24') %>",
        "tia_perps_maintenance_margin_scalar": "<%= parseEther('0.38') %>",
        "tia_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "tia_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "tia_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "tia_perps_max_seconds_in_liquidation_window": "30",
        "tia_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "tia_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "tia_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "tia_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_ton_market_settings": {
        "ton_perps_market_id": "2500",
        "ton_perps_market_skew_scale": "<%= parseEther(String(12_000_000)) %>",
        "ton_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "ton_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "ton_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "ton_perps_max_market_size": "<%= parseEther(String(576_800)) %>",
        "ton_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "ton_perps_initial_margin_ratio": "<%= parseEther('2.89') %>",
        "ton_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "ton_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "ton_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "ton_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "ton_perps_max_seconds_in_liquidation_window": "30",
        "ton_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "ton_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "ton_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "ton_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_trx_market_settings": {
        "trx_perps_market_id": "6800",
        "trx_perps_market_skew_scale": "<%= parseEther(String(806_250_000)) %>",
        "trx_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "trx_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "trx_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "trx_perps_max_market_size": "<%= parseEther(String(19_348_600)) %>",
        "trx_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "trx_perps_initial_margin_ratio": "<%= parseEther('1.88') %>",
        "trx_perps_maintenance_margin_scalar": "<%= parseEther('0.28') %>",
        "trx_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "trx_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "trx_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "trx_perps_max_seconds_in_liquidation_window": "30",
        "trx_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "trx_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "trx_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "trx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_uni_market_settings": {
        "uni_perps_market_id": "6900",
        "uni_perps_market_skew_scale": "<%= parseEther(String(4_500_000)) %>",
        "uni_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "uni_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "uni_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "uni_perps_max_market_size": "<%= parseEther(String(209_100)) %>",
        "uni_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "uni_perps_initial_margin_ratio": "<%= parseEther('0.77') %>",
        "uni_perps_maintenance_margin_scalar": "<%= parseEther('0.31') %>",
        "uni_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "uni_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "uni_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "uni_perps_max_seconds_in_liquidation_window": "30",
        "uni_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "uni_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "uni_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "uni_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_w_market_settings": {
        "w_perps_market_id": "600",
        "w_perps_market_skew_scale": "<%= parseEther(String(59_062_500)) %>",
        "w_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "w_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "w_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "w_perps_max_market_size": "<%= parseEther(String(2_000_000)) %>",
        "w_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "w_perps_initial_margin_ratio": "<%= parseEther('3.87') %>",
        "w_perps_maintenance_margin_scalar": "<%= parseEther('0.35') %>",
        "w_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "w_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "w_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "w_perps_max_seconds_in_liquidation_window": "30",
        "w_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "w_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "w_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "w_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_wif_market_settings": {
        "wif_perps_market_id": "500",
        "wif_perps_market_skew_scale": "<%= parseEther(String(30_000_000)) %>",
        "wif_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "wif_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "wif_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "wif_perps_max_market_size": "<%= parseEther(String(1_500_000)) %>",
        "wif_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "wif_perps_initial_margin_ratio": "<%= parseEther('5.99') %>",
        "wif_perps_maintenance_margin_scalar": "<%= parseEther('0.4') %>",
        "wif_perps_minimum_initial_margin_ratio": "<%= parseEther('0.04') %>",
        "wif_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "wif_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "wif_perps_max_seconds_in_liquidation_window": "30",
        "wif_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "wif_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "wif_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "wif_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_wld_market_settings": {
        "wld_perps_market_id": "8300",
        "wld_perps_market_skew_scale": "<%= parseEther(String(20_000_000)) %>",
        "wld_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "wld_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "wld_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "wld_perps_max_market_size": "<%= parseEther(String(428_600)) %>",
        "wld_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "wld_perps_initial_margin_ratio": "<%= parseEther('1.168') %>",
        "wld_perps_maintenance_margin_scalar": "<%= parseEther('0.335') %>",
        "wld_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "wld_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "wld_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "wld_perps_max_seconds_in_liquidation_window": "30",
        "wld_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "wld_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "wld_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "wld_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_xlm_market_settings": {
        "xlm_perps_market_id": "7000",
        "xlm_perps_market_skew_scale": "<%= parseEther(String(333_000_000)) %>",
        "xlm_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "xlm_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "xlm_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "xlm_perps_max_market_size": "<%= parseEther(String(16_384_500)) %>",
        "xlm_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "xlm_perps_initial_margin_ratio": "<%= parseEther('1.4') %>",
        "xlm_perps_maintenance_margin_scalar": "<%= parseEther('0.37') %>",
        "xlm_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "xlm_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "xlm_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "xlm_perps_max_seconds_in_liquidation_window": "30",
        "xlm_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "xlm_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "xlm_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "xlm_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_xrp_market_settings": {
        "xrp_perps_market_id": "7100",
        "xrp_perps_market_skew_scale": "<%= parseEther(String(400_000_000)) %>",
        "xrp_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "xrp_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "xrp_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "xrp_perps_max_market_size": "<%= parseEther(String(5_646_550)) %>",
        "xrp_perps_max_market_value": "<%= parseEther(String(2_000_000)) %>",
        "xrp_perps_initial_margin_ratio": "<%= parseEther('2.57') %>",
        "xrp_perps_maintenance_margin_scalar": "<%= parseEther('0.33') %>",
        "xrp_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "xrp_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "xrp_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "xrp_perps_max_seconds_in_liquidation_window": "30",
        "xrp_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "xrp_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "xrp_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "xrp_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_yfi_market_settings": {
        "yfi_perps_market_id": "7200",
        "yfi_perps_market_skew_scale": "<%= parseEther(String(2_125)) %>",
        "yfi_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "yfi_perps_maker_fee_ratio": "<%= parseEther('0.000200') %>",
        "yfi_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "yfi_perps_max_market_size": "<%= parseEther(String(150)) %>",
        "yfi_perps_max_market_value": "<%= parseEther(String(500_000)) %>",
        "yfi_perps_initial_margin_ratio": "<%= parseEther('1.49') %>",
        "yfi_perps_maintenance_margin_scalar": "<%= parseEther('0.39') %>",
        "yfi_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "yfi_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "yfi_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "yfi_perps_max_seconds_in_liquidation_window": "30",
        "yfi_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "yfi_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "yfi_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "yfi_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_zro_market_settings": {
        "zro_perps_market_id": "8400",
        "zro_perps_market_skew_scale": "<%= parseEther(String(4_250_000)) %>",
        "zro_perps_market_max_funding_velocity": "<%= parseEther('9') %>",
        "zro_perps_maker_fee_ratio": "<%= parseEther('0.000000') %>",
        "zro_perps_taker_fee_ratio": "<%= parseEther('0.001000') %>",
        "zro_perps_max_market_size": "<%= parseEther(String(237_850)) %>",
        "zro_perps_max_market_value": "<%= parseEther(String(1_000_000)) %>",
        "zro_perps_initial_margin_ratio": "<%= parseEther('1.037') %>",
        "zro_perps_maintenance_margin_scalar": "<%= parseEther('0.334') %>",
        "zro_perps_minimum_initial_margin_ratio": "<%= parseEther('0.05') %>",
        "zro_perps_flag_reward_ratio_d18": "<%= parseEther('0.0003') %>",
        "zro_perps_max_liquidation_limit_accumulation_multiplier": "<%= parseEther('1.5') %>",
        "zro_perps_max_seconds_in_liquidation_window": "30",
        "zro_perps_minimum_position_margin": "<%= parseEther('50') %>",
        "zro_perps_locked_oi_ratio": "<%= parseEther('0.5') %>",
        "zro_perps_max_liquidation_pd": "<%= parseEther('0.0005') %>",
        "zro_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
      },
      "perps_collateral_synth_cbeth_settings": {
        "synth_cbeth_upper_limit_discount": "<%= parseEther('0.10') %>",
        "synth_cbeth_lower_limit_discount": "<%= parseEther('0.010') %>",
        "synth_cbeth_discount_scalar": "<%= parseEther('1') %>"
      },
      "perps_collateral_synth_wsteth_settings": {
        "synth_wsteth_upper_limit_discount": "<%= parseEther('0.10') %>",
        "synth_wsteth_lower_limit_discount": "<%= parseEther('0.010') %>",
        "synth_wsteth_discount_scalar": "<%= parseEther('1') %>"
      },
      "perps_collateral_synth_weth_settings": {
        "synth_weth_upper_limit_discount": "<%= parseEther('0.10') %>",
        "synth_weth_lower_limit_discount": "<%= parseEther('0.010') %>",
        "synth_weth_discount_scalar": "<%= parseEther('1') %>"
      },
      "token_addresses": {
        "cbbtc_address": "<%= imports.cbbtc_mock_collateral.contracts.MintableToken.address %>",
        "cbeth_address": "<%= imports.cbeth_mock_collateral.contracts.MintableToken.address %>",
        "wsteth_address": "<%= imports.wsteth_mock_collateral.contracts.MintableToken.address %>",
        "weth_address": "0x4200000000000000000000000000000000000006"
      },
      "pyth_feeds": {
        "description": "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet",
        "pyth_feed_id_aave": "0x2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e47445",
        "pyth_feed_id_ada": "0x2a01deaec9e51a579277b34b122399984d0bbf57e2458a7e42fecd2829867a0d",
        "pyth_feed_id_algo": "0xfa17ceaf30d19ba51112fdcc750cc83454776f47fb0112e4af07f15f4bb1ebc0",
        "pyth_feed_id_apt": "0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5",
        "pyth_feed_id_arb": "0x3fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf5",
        "pyth_feed_id_arkm": "0x7677dd124dee46cfcd46ff03cf405fb0ed94b1f49efbea3444aadbda939a7ad3",
        "pyth_feed_id_atom": "0xb00b60f88b03a6a625a8d1c048c3f66653edf217439983d037e7222c4e612819",
        "pyth_feed_id_avax": "0x93da3352f9f1d105fdfe4971cfa80e9dd777bfc5d0f683ebb6e1294b92137bb7",
        "pyth_feed_id_axl": "0x60144b1d5c9e9851732ad1d9760e3485ef80be39b984f6bf60f82b28a2b7f126",
        "pyth_feed_id_axs": "0xb7e3904c08ddd9c0c10c6d207d390fd19e87eb6aab96304f571ed94caebdefa0",
        "pyth_feed_id_bal": "0x07ad7b4a7662d19a6bc675f6b467172d2f3947fa653ca97555a9b20236406628",
        "pyth_feed_id_bch": "0x3dd2b63686a450ec7290df3a1e0b583c0481f651351edfa7636f39aed55cf8a3",
        "pyth_feed_id_blur": "0x856aac602516addee497edf6f50d39e8c95ae5fb0da1ed434a8c2ab9c3e877e9",
        "pyth_feed_id_bnb": "0x2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f",
        "pyth_feed_id_bome": "0x30e4780570973e438fdb3f1b7ad22618b2fc7333b65c7853a7ca144c39052f7a",
        "pyth_feed_id_bonk": "0x72b021217ca3fe68922a19aaf990109cb9d84e9ad004b4d2025ad6f529314419",
        "pyth_feed_id_btc": "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
        "pyth_feed_id_cbbtc": "0x2817d7bfe5c64b8ea956e9a26f573ef64e72e4d7891f2d6af9bcc93f7aff9a97",
        "pyth_feed_id_cbeth": "0x15ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce5717",
        "pyth_feed_id_comp": "0x4a8e42861cabc5ecb50996f92e7cfa2bce3fd0a2423b0c44c9b423fb2bd25478",
        "pyth_feed_id_crv": "0xa19d04ac696c7a6616d291c7e5d1377cc8be437c327b75adb5dc1bad745fcae8",
        "pyth_feed_id_doge": "0xdcef50dd0a4cd2dcc17e45df1676dcb336a11a61c69df7a0299b0150c672d25c",
        "pyth_feed_id_dot": "0xca3eed9b267293f6595901c734c7525ce8ef49adafe8284606ceb307afa2ca5b",
        "pyth_feed_id_dydx": "0x6489800bb8974169adfe35937bf6736507097d13c190d760c557108c7e93a81b",
        "pyth_feed_id_eigen": "0xc65db025687356496e8653d0d6608eec64ce2d96e2e28c530e574f0e4f712380",
        "pyth_feed_id_ena": "0xb7910ba7322db020416fcac28b48c01212fd9cc8fbcbaf7d30477ed8605f6bd4",
        "pyth_feed_id_eos": "0x06ade621dbc31ed0fc9255caaab984a468abe84164fb2ccc76f02a4636d97e31",
        "pyth_feed_id_etc": "0x7f5cc8d963fc5b3d2ae41fe5685ada89fd4f14b435f8050f28c7fd409f40c2d8",
        "pyth_feed_id_eth": "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
        "pyth_feed_id_ethbtc": "0xc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a",
        "pyth_feed_id_ethfi": "0xb27578a9654246cb0a2950842b92330e9ace141c52b63829cc72d5c45a5a595a",
        "pyth_feed_id_fil": "0x150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e",
        "pyth_feed_id_flow": "0x2fb245b9a84554a0f15aa123cbb5f64cd263b59e9a87d80148cbffab50c69f30",
        "pyth_feed_id_ftm": "0x5c6c0d2386e3352356c3ab84434fafb5ea067ac2678a38a338c4a69ddc4bdb0c",
        "pyth_feed_id_fxs": "0x735f591e4fed988cd38df74d8fcedecf2fe8d9111664e0fd500db9aa78b316b1",
        "pyth_feed_id_gala": "0x0781209c28fda797616212b7f94d77af3a01f3e94a5d421760aef020cf2bcb51",
        "pyth_feed_id_gmx": "0xb962539d0fcb272a494d65ea56f94851c2bcf8823935da05bd628916e2e9edbf",
        "pyth_feed_id_grt": "0x4d1f8dae0d96236fb98e8f47471a366ec3b1732b47041781934ca3a9bb2f35e7",
        "pyth_feed_id_icp": "0xc9907d786c5821547777780a1e4f89484f3417cb14dd244f2b0a34ea7a554d67",
        "pyth_feed_id_imx": "0x941320a8989414874de5aa2fc340a75d5ed91fdff1613dd55f83844d52ea63a2",
        "pyth_feed_id_inj": "0x7a5bc1d2b56ad029048cd63964b3ad2776eadf812edc1a43a31406cb54bff592",
        "pyth_feed_id_io": "0x82595d1509b770fa52681e260af4dda9752b87316d7c048535d8ead3fa856eb1",
        "pyth_feed_id_jto": "0xb43660a5f790c69354b0729a5ef9d50d68f1df92107540210b9cccba1f947cc2",
        "pyth_feed_id_jup": "0x0a0408d619e9380abad35060f9192039ed5042fa6f82301d0e48bb52be830996",
        "pyth_feed_id_ldo": "0xc63e2a7f37a04e5e614c07238bedb25dcc38927fba8fe890597a593c0b2fa4ad",
        "pyth_feed_id_link": "0x8ac0c70fff57e9aefdf5edf44b51d62c2d433653cbb2cf5cc06bb115af04d221",
        "pyth_feed_id_ltc": "0x6e3f3fa8253588df9326580180233eb791e03b443a3ba7a1d892e73874e19a54",
        "pyth_feed_id_meme": "0xcd2cee36951a571e035db0dfad138e6ecdb06b517cc3373cd7db5d3609b7927c",
        "pyth_feed_id_mew": "0x514aed52ca5294177f20187ae883cec4a018619772ddce41efcc36a6448f5d5d",
        "pyth_feed_id_mkr": "0x9375299e31c0deb9c6bc378e6329aab44cb48ec655552a70d4b9050346a30378",
        "pyth_feed_id_near": "0xc415de8d2eba7db216527dff4b60e8f3a5311c740dadb233e13e12547e226750",
        "pyth_feed_id_not": "0x75ec6f04d4bded6afdc1440689be4402dd1e23d2ff2c21e081871eb2739ceb36",
        "pyth_feed_id_op": "0x385f64d993f7b77d8182ed5003d97c60aa3361f3cecfe711544d2d59165e9bdf",
        "pyth_feed_id_ordi": "0x193c739db502aadcef37c2589738b1e37bdb257d58cf1ab3c7ebc8e6df4e3ec0",
        "pyth_feed_id_pendle": "0x9a4df90b25497f66b1afb012467e316e801ca3d839456db028892fe8c70c8016",
        "pyth_feed_id_people": "0xb7fe919d83815ca6074c82a3286b1cd6ffb7d3136e323cd2b1ef706cfc7e5945",
        "pyth_feed_id_pepe": "0xd69731a2e74ac1ce884fc3890f7ee324b6deb66147055249568869ed700882e4",
        "pyth_feed_id_pol": "0xffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd70472",
        "pyth_feed_id_popcat": "0xb9312a7ee50e189ef045aa3c7842e099b061bd9bdc99ac645956c3b660dc8cce",
        "pyth_feed_id_pyth": "0x0bbf28e9a841a1cc788f6a361b17ca072d0ea3098a1e5df1c3922d06719579ff",
        "pyth_feed_id_render": "0x3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d",
        "pyth_feed_id_rndr": "0x3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d",
        "pyth_feed_id_rune": "0x5fcf71143bb70d41af4fa9aa1287e2efd3c5911cee59f909f915c9f61baacb1e",
        "pyth_feed_id_sats": "0x40440d18fb5ad809e2825ce7dfc035cfa57135c13062a04addafe0c7f54425e0",
        "pyth_feed_id_sei": "0x53614f1cb0c031d4af66c04cb9c756234adad0e1cee85303795091499a4084eb",
        "pyth_feed_id_shib": "0xf0d57deca57b3da2fe63a493f4c25925fdfd8edf834b20f93e1f84dbd1504d4a",
        "pyth_feed_id_snx": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3",
        "pyth_feed_id_sol": "0xef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d",
        "pyth_feed_id_strk": "0x6a182399ff70ccf3e06024898942028204125a819e519a335ffa4579e66cd870",
        "pyth_feed_id_stx": "0xec7a775f46379b5e943c3526b1c8d54cd49749176b0b98e02dde68d1bd335c17",
        "pyth_feed_id_sui": "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744",
        "pyth_feed_id_sushi": "0x26e4f737fde0263a9eea10ae63ac36dcedab2aaf629261a994e1eeb6ee0afe53",
        "pyth_feed_id_tao": "0x410f41de235f2db824e562ea7ab2d3d3d4ff048316c61d629c0b93f58584e1af",
        "pyth_feed_id_tia": "0x09f7c1d7dfbb7df2b8fe3d3d87ee94a2259d212da4f30c1f0540d066dfa44723",
        "pyth_feed_id_ton": "0x8963217838ab4cf5cadc172203c1f0b763fbaa45f346d8ee50ba994bbcac3026",
        "pyth_feed_id_trx": "0x67aed5a24fdad045475e7195c98a98aea119c763f272d4523f5bac93a4f33c2b",
        "pyth_feed_id_uni": "0x78d185a741d07edb3412b09008b7c5cfb9bbbd7d568bf00ba737b456ba171501",
        "pyth_feed_id_w": "0xeff7446475e218517566ea99e72a4abec2e1bd8498b43b7d8331e29dcb059389",
        "pyth_feed_id_weth": "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
        "pyth_feed_id_wif": "0x4ca4beeca86f0d164160323817a4e42b10010a724c2217c6ee41b54cd4cc61fc",
        "pyth_feed_id_wld": "0xd6835ad1f773de4a378115eb6824bd0c0e42d84d1c84d9750e853fb6b6c7794a",
        "pyth_feed_id_wsteth": "0x6df640f3b8963d8f8358f791f352b8364513f6ab1cca5ed3f1f7b5448980e784",
        "pyth_feed_id_xlm": "0xb7a8eba68a997cd0210c2e1e4ee811ad2d174b3611c22d9ebf16f4cb7e9ba850",
        "pyth_feed_id_xrp": "0xec5d399846a9209f3fe5881d70aae9268c94339ff9817e8d18ff19fa05eea1c8",
        "pyth_feed_id_yfi": "0x425f4b198ab2504936886c1e93511bb6720fbcf2045a4f3c0723bb213846022f",
        "pyth_feed_id_zro": "0x3bd860bea28bf982fa06bcf358118064bb114086cc03993bd76197eaab0b8018"
      }
    },
    "name": "synthetix-omnibus",
    "version": "58",
    "description": "Andromeda dev deployment",
    "preset": "andromeda"
  },
  "state": {
    "provision.perps_gas_oracle_node": {
      "artifacts": {
        "imports": {
          "perps_gas_oracle_node": {
            "url": "ipfs://QmcRRswVqq6Vqgm6a4iNbABxubTTQwbVEYfnnK1khrWVz6",
            "tags": [
              "latest"
            ],
            "target": "op-gas-price-oracle:3.4.0@andromeda",
            "preset": "andromeda",
            "settings": {
              "ovmGasPriceOracleAddress": "0x420000000000000000000000000000000000000F"
            },
            "contracts": {
              "OpGasPriceOracle": {
                "address": "0x9930Cd712D6Ad27Ef8e8992664B183892b499dF0",
                "abi": [
                  "constructor(address _ovmGasPriceOracleAddress)",
                  "error OverflowUint256ToInt256()",
                  "function KIND_FLAG() view returns (uint256)",
                  "function KIND_LIQUIDATE() view returns (uint256)",
                  "function KIND_SETTLEMENT() view returns (uint256)",
                  "function isValid(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeDefinition) view returns (bool valid)",
                  "function ovmGasPriceOracleAddress() view returns (address)",
                  "function process(tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[], bytes parameters, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) nodeOutput)",
                  "function supportsInterface(bytes4 interfaceId) pure returns (bool)"
                ],
                "constructorArgs": [
                  "0x420000000000000000000000000000000000000F"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xf0775932f530448ccaad641b6e2bd2b5db5b6410962f790438063a475b973849",
                "deployTxnBlockNumber": "12339831",
                "deployTimestamp": "1720447950",
                "sourceName": "contracts/OpGasPriceOracle.sol",
                "contractName": "OpGasPriceOracle",
                "deployedOn": "contract.OpGasPriceOracle",
                "gasUsed": 1184361,
                "gasCost": "1000362"
              }
            },
            "extras": {
              "ovmGasPriceOracleAddress": "0x420000000000000000000000000000000000000F"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.pyth_erc7412_wrapper": {
      "artifacts": {
        "imports": {
          "pyth_erc7412_wrapper": {
            "url": "ipfs://QmUm3PZPqxoFZV6bJZXXiMvfJu1C7ANtDhKT5mLeiC1a5s",
            "tags": [
              "latest"
            ],
            "preset": "andromeda",
            "settings": {
              "pythAddress": "0x420000000000000000000000000000000000000F"
            },
            "contracts": {
              "PythERC7412Wrapper": {
                "address": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                "abi": [
                  "constructor(address _pythAddress)",
                  "error FeeRequired(uint256 amount)",
                  "error NotSupported(uint8 updateType)",
                  "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "function fulfillOracleQuery(bytes signedOffchainData) payable",
                  "function getBenchmarkPrice(bytes32 priceId, uint64 requestedTime) view returns (int256)",
                  "function getLatestPrice(bytes32 priceId, uint256 stalenessTolerance) view returns (int256)",
                  "function oracleId() pure returns (bytes32)",
                  "function pythAddress() view returns (address)"
                ],
                "constructorArgs": [
                  "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/PythERC7412Wrapper.sol",
                "contractName": "PythERC7412Wrapper",
                "deployedOn": "contract.PythERC7412Wrapper",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "extras": {
              "pythAddress": "0x420000000000000000000000000000000000000F"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.snx_mock_collateral": {
      "artifacts": {
        "imports": {
          "snx_mock_collateral": {
            "url": "ipfs://QmRn3QsqJ44qKocb1gq9vcCUiPzo1gG2BvMHqhjBj5E7nx",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "settings": {
              "decimals": "18",
              "name": "Token",
              "salt": "andromeda-dev-2",
              "symbol": "TKN"
            },
            "contracts": {
              "MintableToken": {
                "address": "0x8F4b425597A70001E255d067626e4860E2543f22",
                "abi": [
                  "constructor(string name, string symbol, uint8 tokenDecimals) payable",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function mint(uint256 amount, address to)",
                  "function name() view returns (string)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)"
                ],
                "constructorArgs": [
                  "Fake Wrapped SNX",
                  "fwSNX",
                  "18"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x3f7422e34e9d30a6a8b2503794110dc1af816dd46f74dc13f7f1e9d330d9cfd4",
                "sourceName": "src/MintableTokenPermissionlessMint.sol",
                "contractName": "MintableTokenPermissionlessMint",
                "deployedOn": "contract.MintableToken",
                "highlight": true,
                "gasUsed": 639992,
                "gasCost": "1000290"
              }
            },
            "extras": {
              "decimals": "18",
              "name": "Token",
              "salt": "andromeda-dev-2",
              "symbol": "TKN"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.system": {
      "artifacts": {
        "imports": {
          "system": {
            "url": "ipfs://QmaoPV7jyHQF6ViTqPMvRFqGS3HWrXwr6Y1wCBtkai1Fbw",
            "tags": [
              "latest"
            ],
            "target": "synthetix:3.8.1@andromeda",
            "preset": "andromeda",
            "contracts": {
              "AccountModule": {
                "address": "0xd4DFE8F3b91007ec187f8b74A3cEEDBA7A0873f7",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x734f5d976bbfa5c0ec21808b4ff1b1b0532bdaaf2a07db1d08bde28c202bca66",
                "deployTxnBlockNumber": "16649339",
                "deployTimestamp": "1729066966",
                "sourceName": "contracts/modules/core/AccountModule.sol",
                "contractName": "AccountModule",
                "deployedOn": "contract.AccountModule",
                "gasUsed": 1225809,
                "gasCost": "936592307"
              },
              "AccountTokenModule": {
                "address": "0x6d448d821cbd5AA1A52dD3854ed0AEc2d1BF8832",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xd2af7a26d94f40173e1efabe174b03163cfb551b29fa45c909b70878f3b292b4",
                "deployTxnBlockNumber": "16649341",
                "deployTimestamp": "1729066970",
                "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                "contractName": "AccountTokenModule",
                "deployedOn": "contract.AccountTokenModule",
                "gasUsed": 1787668,
                "gasCost": "932975250"
              },
              "AssociateDebtModule": {
                "address": "0xEe047Ca39AE1EF562f3D5F23c1B8A5b074955331",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x2cdc64893f97d21159360a5096ad3abe14df13349fee8361324c43c10f10e694",
                "deployTxnBlockNumber": "16649344",
                "deployTimestamp": "1729066976",
                "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                "contractName": "AssociateDebtModule",
                "deployedOn": "contract.AssociateDebtModule",
                "gasUsed": 2603996,
                "gasCost": "933120208"
              },
              "AssociatedSystemsModule": {
                "address": "0xC8440d8e46D3C06beD106C6f2F918F30182bEb06",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbdad45d38a1b1de1a6d9518ac7192e5bf5cf0c338a9f8c41fdbd33a30d9c6610",
                "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877153,
                "gasCost": "1000305"
              },
              "CcipReceiverModule": {
                "address": "0x290052592c38b55f827ec377B2a8023e734B815C",
                "abi": [
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x0a1ac64516ad97aca7fe23966c6050476f7c839b286cf64a5e2338d8a9e7e7b2",
                "deployTxnBlockNumber": "16649346",
                "deployTimestamp": "1729066980",
                "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                "contractName": "CcipReceiverModule",
                "deployedOn": "contract.CcipReceiverModule",
                "gasUsed": 469476,
                "gasCost": "936917569"
              },
              "CollateralConfigurationModule": {
                "address": "0x98A58c2A364f5C9dA829a8738Ba8b192E7B706db",
                "abi": [
                  "error EmptyRevertReason()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x3050067c8dad45ed319ffc5d018760acea5008c4bcdab87d645144b585beb212",
                "deployTxnBlockNumber": "16649348",
                "deployTimestamp": "1729066984",
                "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                "contractName": "CollateralConfigurationModule",
                "deployedOn": "contract.CollateralConfigurationModule",
                "gasUsed": 872728,
                "gasCost": "937172209"
              },
              "CollateralModule": {
                "address": "0xE8Ae6cAC1aBbC0Eef81D85f8f5f4402f164300FD",
                "abi": [
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error AccountNotFound(uint128 accountId)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error EmptyRevertReason()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x9135ef7a5060b7e3b30af8aaf4cbea2747784ce00a8f74d3498f66fab944981d",
                "deployTxnBlockNumber": "16649350",
                "deployTimestamp": "1729066988",
                "sourceName": "contracts/modules/core/CollateralModule.sol",
                "contractName": "CollateralModule",
                "deployedOn": "contract.CollateralModule",
                "gasUsed": 1878022,
                "gasCost": "937764119"
              },
              "CrossChainUSDModule": {
                "address": "0x0Db649f56b99B15c70198C925CD374b95B6Df5E8",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xd57eddd8ebbaaffdda7d1ccdedd8345b8cb7e1dba787af550943cc10b7be4830",
                "deployTxnBlockNumber": "16649352",
                "deployTimestamp": "1729066992",
                "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                "contractName": "CrossChainUSDModule",
                "deployedOn": "contract.CrossChainUSDModule",
                "gasUsed": 595289,
                "gasCost": "934748763"
              },
              "FeatureFlagModule": {
                "address": "0x57a24eafBCeDF9CEFD242b259517C84b9d72e3Ae",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xb8ed47b80ee3a4301f24b809cb8376373e4d68fea596a8c4c7ab5a89228c5a68",
                "deployTxnBlockNumber": "16649354",
                "deployTimestamp": "1729066996",
                "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule",
                "gasUsed": 777054,
                "gasCost": "935496418"
              },
              "IssueUSDModule": {
                "address": "0x8C9126A0dD9e2B60a69a4957669C507ff1c07C69",
                "abi": [
                  "error CollateralDepositDisabled(address collateralType)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PoolNotFound(uint128 poolId)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x1c864f9da23ddbe73a793494ef991044b6588ae73c290a6e79b4535649f698d9",
                "deployTxnBlockNumber": "16649356",
                "deployTimestamp": "1729067000",
                "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                "contractName": "IssueUSDModule",
                "deployedOn": "contract.IssueUSDModule",
                "gasUsed": 2940922,
                "gasCost": "937306460"
              },
              "LiquidationModule": {
                "address": "0xC090A806CC37c4C6CA9fc8eb7b7098d78eE72b60",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error CannotScaleEmptyMapping()",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint256ToUint64()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PositionOutOfBounds()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x3f4c10c3063b131da4b40f91d2fef5bc8294293ea31a63c606131902ecc314d0",
                "deployTxnBlockNumber": "16649358",
                "deployTimestamp": "1729067004",
                "sourceName": "contracts/modules/core/LiquidationModule.sol",
                "contractName": "LiquidationModule",
                "deployedOn": "contract.LiquidationModule",
                "gasUsed": 4289682,
                "gasCost": "935586433"
              },
              "MarketCollateralModule": {
                "address": "0xD88de2Ee855f145ab1eCFfF8273661C3d59fc8ad",
                "abi": [
                  "error CollateralNotFound()",
                  "error EmptyRevertReason()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "error Unauthorized(address addr)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xc5c4642d703fe51a5736f64cd0b91f641d0b0b14d582596313c350ac2b529f9e",
                "deployTxnBlockNumber": "16649360",
                "deployTimestamp": "1729067008",
                "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                "contractName": "MarketCollateralModule",
                "deployedOn": "contract.MarketCollateralModule",
                "gasUsed": 1298300,
                "gasCost": "938598453"
              },
              "MarketManagerModule": {
                "address": "0x35B79eD956064338d3DF10abc215Ab128C6265BE",
                "abi": [
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error IncorrectMarketInterface(address market)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xe7d5907e9bc6931cfd5d6ec2ee85fd04e32746281b79230ec9d301536c5e90ae",
                "deployTxnBlockNumber": "16649362",
                "deployTimestamp": "1729067012",
                "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                "contractName": "MarketManagerModule",
                "deployedOn": "contract.MarketManagerModule",
                "gasUsed": 2730455,
                "gasCost": "938162086"
              },
              "PoolConfigurationModule": {
                "address": "0x39fBdCBa20E57BC672DDD9f5756Dc8b5Fabe526a",
                "abi": [
                  "error PoolNotFound(uint128 poolId)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xfe15402ad6fe9cfd54a4da2874d181a8c516c025d984b5ec4740f2910cea30ec",
                "deployTxnBlockNumber": "16649364",
                "deployTimestamp": "1729067016",
                "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                "contractName": "PoolConfigurationModule",
                "deployedOn": "contract.PoolConfigurationModule",
                "gasUsed": 446271,
                "gasCost": "938194121"
              },
              "PoolModule": {
                "address": "0x65a62Dc05B66FD007d05f2E34085348A45c6a424",
                "abi": [
                  "error CapacityLocked(uint256 marketId)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "error PoolNotFound(uint128 poolId)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x4a9563128d503b59b74d159ed8b1745ec4d75645cb505f1a53f4990267c38886",
                "deployTxnBlockNumber": "16649366",
                "deployTimestamp": "1729067020",
                "sourceName": "contracts/modules/core/PoolModule.sol",
                "contractName": "PoolModule",
                "deployedOn": "contract.PoolModule",
                "gasUsed": 3986001,
                "gasCost": "941481539"
              },
              "RewardsManagerModule": {
                "address": "0x4A3979b6dc29B311e8c27D4E2cdF1E35f89913b0",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error RewardUnavailable(address distributor)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbbc9ba761efa021f34153e39acaf3c8123e8d7a81f928be226b312cd978c2e16",
                "deployTxnBlockNumber": "16649368",
                "deployTimestamp": "1729067024",
                "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                "contractName": "RewardsManagerModule",
                "deployedOn": "contract.RewardsManagerModule",
                "gasUsed": 2642251,
                "gasCost": "942593115"
              },
              "USDTokenModule": {
                "address": "0x2F0f4304676B1399D970bac6488053F7014A80a6",
                "abi": [
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xca0f2c066651896de5930e5ee954bd0c03b025fa2c2a32eb8395c335a6d6905a",
                "deployTxnBlockNumber": "16649371",
                "deployTimestamp": "1729067030",
                "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                "contractName": "USDTokenModule",
                "deployedOn": "contract.USDTokenModule",
                "gasUsed": 1110294,
                "gasCost": "939871566"
              },
              "UtilsModule": {
                "address": "0xa76f3067888222b37a667814f696038b658B7368",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x1e9d8122afd7dc158660bf1f9bb8ea629ed274203f628129ae91b5f54fe5753e",
                "deployTxnBlockNumber": "16649373",
                "deployTimestamp": "1729067034",
                "sourceName": "contracts/modules/core/UtilsModule.sol",
                "contractName": "UtilsModule",
                "deployedOn": "contract.UtilsModule",
                "gasUsed": 759697,
                "gasCost": "944385460"
              },
              "VaultModule": {
                "address": "0xA24ECBF86E4cD4763084cF1f1E7709400cE8d3BC",
                "abi": [
                  "error CapacityLocked(uint256 marketId)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "error PoolNotFound(uint128 poolId)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x939f10bb60d2dba483fa7c5c900ca69760fe55dad1191ecf1e26c9ea9e83a50a",
                "deployTxnBlockNumber": "16649375",
                "deployTimestamp": "1729067038",
                "sourceName": "contracts/modules/core/VaultModule.sol",
                "contractName": "VaultModule",
                "deployedOn": "contract.VaultModule",
                "gasUsed": 4244908,
                "gasCost": "941449312"
              },
              "InitialModuleBundle": {
                "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/modules/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "InitialCoreProxy": {
                "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x828EED723cAF0A8F822249231266E38dF614923C",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x5913f591061763378a9209c9ea168efbfd1de19af4440dbfcf5a73004f091491",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialCoreProxy",
                "gasUsed": 185358,
                "gasCost": "1000317"
              },
              "AccountRouter": {
                "address": "0x768f77f75c7c4b6b81758bf56ce0ab70762b37e6",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployedOn": "router.AccountRouter",
                "deployTxnHash": "0xbac818a079f296ffb1759aaecef641f5471ebed0cf6829aba98ea826cbb07a0b",
                "deployTxnBlockNumber": "16649378",
                "deployTimestamp": "1729067044",
                "contractName": "AccountRouter",
                "sourceName": "AccountRouter.sol",
                "gasUsed": 406486,
                "gasCost": "949929423"
              },
              "CoreRouter": {
                "address": "0xad3553dc909d1d72a290ae14a530a46c57bb4d3d",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error PoolNotFound(uint128 poolId)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "error CannotScaleEmptyMapping()",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "error IncorrectMarketInterface(address market)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)",
                  "error CapacityLocked(uint256 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)",
                  "error RewardUnavailable(address distributor)",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "0x7a059a46a4b514a360ccf2260f8bc8baa33bf74f309a7ba1c0fa2952e8b30f6a",
                "deployTxnBlockNumber": "16649380",
                "deployTimestamp": "1729067048",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 1318142,
                "gasCost": "945143807"
              },
              "USDRouter": {
                "address": "0x44d4a4796a7604419e4051d4ab1e060759db99fb",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployedOn": "router.USDRouter",
                "deployTxnHash": "0xade8ab8e92554c274e7b22ab353c4fe32ed2754195a0dcce871f2f73f21dc611",
                "deployTxnBlockNumber": "16649382",
                "deployTimestamp": "1729067052",
                "contractName": "USDRouter",
                "sourceName": "USDRouter.sol",
                "gasUsed": 398033,
                "gasCost": "945780250"
              },
              "CoreProxy": {
                "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error PoolNotFound(uint128 poolId)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "error CannotScaleEmptyMapping()",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "error IncorrectMarketInterface(address market)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)",
                  "error CapacityLocked(uint256 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)",
                  "error RewardUnavailable(address distributor)",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "AccountProxy": {
                "address": "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                "contractName": "UUPSProxyWithOwner",
                "deployedOn": "invoke.init_account",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "USDProxy": {
                "address": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                "contractName": "UUPSProxyWithOwner",
                "deployedOn": "invoke.init_usd",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmYi3NuhRQQVwHZLQd9KBCsg2HKeFP769mR6Yi2g2mA9cE",
                "tags": [
                  "latest"
                ],
                "preset": "with-synthetix",
                "settings": {
                  "salt": "salt"
                },
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                },
                "extras": {
                  "salt": "salt"
                }
              },
              "oracle_manager": {
                "url": "ipfs://QmaSYrc3XvdZ2LhUDQ2njMCkHsfNT3nDLDDLJWwE8UaVkr",
                "contracts": {
                  "NodeModule": {
                    "address": "0xE1681e5aC826043Ae6575ee1fD5E7064751c2fc5",
                    "abi": [
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error Errors(bytes[] revertReasons)",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x1ca8b07aa6e171c4948031b71bfa2a8f9ffc7bbbbea847313177653956f58c31",
                    "deployTxnBlockNumber": "16649324",
                    "deployTimestamp": "1729066936",
                    "sourceName": "contracts/modules/NodeModule.sol",
                    "contractName": "NodeModule",
                    "deployedOn": "contract.NodeModule",
                    "gasUsed": 4820634,
                    "gasCost": "930730936"
                  },
                  "CoreModule": {
                    "address": "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1729066942",
                    "sourceName": "contracts/modules/CoreModule.sol",
                    "contractName": "CoreModule",
                    "deployedOn": "contract.CoreModule",
                    "gasUsed": 0,
                    "gasCost": "0"
                  },
                  "InitialProxy": {
                    "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                      "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1729066944",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialProxy",
                    "gasUsed": 0,
                    "gasCost": "0"
                  },
                  "OracleRouter": {
                    "address": "0x0a6a3a1553351a2a3e71f90e1b892794f2a2e64c",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error Errors(bytes[] revertReasons)",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "deployedOn": "router.OracleRouter",
                    "deployTxnHash": "0xea0d86ad6ff5608eab445f132f01d2f905f7396ce6517efaafa91bea4f3b64e4",
                    "deployTxnBlockNumber": "16649330",
                    "deployTimestamp": "1729066948",
                    "contractName": "OracleRouter",
                    "sourceName": "OracleRouter.sol",
                    "gasUsed": 262878,
                    "gasCost": "933131741"
                  },
                  "Proxy": {
                    "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error Errors(bytes[] revertReasons)",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgrade_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "imports": {
                  "trusted_multicall_forwarder": {
                    "url": "ipfs://QmQdXmwU7gK9cPRt3opFcf55yFfNjbLCHmea7LStWnsH6b",
                    "tags": [
                      "latest"
                    ],
                    "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                    "preset": "with-oracle-manager",
                    "settings": {
                      "salt": "salt"
                    },
                    "contracts": {
                      "TrustedMulticallForwarder": {
                        "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                        "abi": [
                          "constructor()",
                          "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                          "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                          "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                          "function getBasefee() view returns (uint256 basefee)",
                          "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                          "function getBlockNumber() view returns (uint256 blockNumber)",
                          "function getChainId() view returns (uint256 chainid)",
                          "function getCurrentBlockCoinbase() view returns (address coinbase)",
                          "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                          "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                          "function getEthBalance(address addr) view returns (uint256 balance)",
                          "function getLastBlockHash() view returns (bytes32 blockHash)",
                          "function getPrevRandao() view returns (uint256 prevrandao)",
                          "function nonces(address owner) view returns (uint256)",
                          "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                          "event EIP712DomainChanged()",
                          "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                          "error AddressInsufficientBalance(address account)",
                          "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                          "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                          "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                          "error ERC2771UntrustfulTarget(address target, address forwarder)",
                          "error FailedInnerCall()",
                          "error InvalidAccountNonce(address account, uint256 currentNonce)",
                          "error InvalidShortString()",
                          "error StringTooLong(string str)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1729066940",
                        "sourceName": "src/TrustedMulticallForwarder.sol",
                        "contractName": "TrustedMulticallForwarder",
                        "deployedOn": "contract.TrustedMulticallForwarder",
                        "gasUsed": 0,
                        "gasCost": "0"
                      }
                    },
                    "extras": {
                      "salt": "salt"
                    }
                  }
                },
                "settings": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "oracle-manager-official"
                },
                "txns": {
                  "upgrade_proxy": {
                    "hash": "0x202d083402f6ee504921fa463b2dbb2fd506d047cc95e73904a675fcda5a0603",
                    "blockNumber": "16649332",
                    "timestamp": "1729066952",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                            "0x0a6a3a1553351A2A3e71F90e1B892794F2A2e64C"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_proxy",
                    "gasUsed": 55368,
                    "gasCost": "936076092",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  }
                },
                "extras": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "oracle-manager-official"
                }
              }
            },
            "settings": {
              "account_token_name": "Synthetix Account",
              "account_token_symbol": "SACCT",
              "bundleSalt": "main",
              "oracle_manager_package": "oracle-manager",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "main",
              "usd_token_name": "Synthetic USD Token v3",
              "usd_token_symbol": "sUSD"
            },
            "txns": {
              "register_const_one_oracle": {
                "hash": "0x2baa0591174c004d4cf5f6ecce14a0d357d558ea242b7dd9f489a88103e1143b",
                "events": {
                  "NodeRegistered": [
                    {
                      "name": "NodeRegistered",
                      "args": [
                        "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                        8,
                        "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                        []
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.register_const_one_oracle",
                "gasUsed": 108489,
                "gasCost": "1000318",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "upgrade_core_proxy": {
                "hash": "0x3267b8dd6102327a45f96ff36a84e61e82adb5200b444d083c5daa87f27be03a",
                "blockNumber": "16649385",
                "timestamp": "1729067058",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                        "0xAd3553dc909D1D72A290ae14a530A46C57bb4D3d"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51203,
                "gasCost": "945601052",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_burnUsd": {
                "hash": "0x7087b881678eb12e6f6863f6ea29870a42433c72616bbdcba6e5a46c73313a3b",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6275726e55736400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_burnUsd",
                "gasUsed": 56959,
                "gasCost": "1000323",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_claimRewards": {
                "hash": "0x20bd61d41b1be63384c93217591d71142f1bd15099d2827c27f54dd9768ac4d3",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x636c61696d526577617264730000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_claimRewards",
                "gasUsed": 57019,
                "gasCost": "1000322",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_createAccount": {
                "hash": "0x8f2bd10b10a82848836679f365118b10813db0fc60e99e8ff7eb792f0a1854dd",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_createAccount",
                "gasUsed": 57031,
                "gasCost": "1000322",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_delegateCollateral": {
                "hash": "0x5e9d60081eea0c6ad048d34640dba307a518c3b7b2cc7d9745a732219b6e403c",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_delegateCollateral",
                "gasUsed": 57091,
                "gasCost": "1000321",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_deposit": {
                "hash": "0x0513e0e724ed24f32dc7a1a9b0b0b3cd42e5eb4e961f7e9006d691e65070806e",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f73697400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_deposit",
                "gasUsed": 56959,
                "gasCost": "1000321",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_depositMarketCollateral": {
                "hash": "0xcab8c6233dd9fe48e21b3ffa2c747e4224aa40cc2d71d627395bd416f7d05bec",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                "gasUsed": 57151,
                "gasCost": "1000321",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_depositMarketUsd": {
                "hash": "0xed336b2c8be6acab9d4056f47fc368e220f5e3cab3316c95a2412f02dd53444b",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_depositMarketUsd",
                "gasUsed": 57067,
                "gasCost": "1000321",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_liquidate": {
                "hash": "0x775cea26782e06292cd0f5d15463437a9efa9a19f81c7d5b486dd3ad0b607eb1",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c69717569646174650000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_liquidate",
                "gasUsed": 56983,
                "gasCost": "1000321",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_liquidateVault": {
                "hash": "0x6795708a5819e8ad9d54ab5ca382b90d8fbec48895738ec5fc84c3d477f0853d",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_liquidateVault",
                "gasUsed": 57043,
                "gasCost": "1000321",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_mintUsd": {
                "hash": "0x1aa28aa9444a30ed09728dbed1a86c4ecb2cc37140e209abbaa62ce3e67879b7",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_mintUsd",
                "gasUsed": 56959,
                "gasCost": "1000324",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_withdraw": {
                "hash": "0x76745b191844c7843b1e49d6a42d889e4dd7d9fdfac8308c90ec1ccde11baf0b",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x7769746864726177000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdraw",
                "gasUsed": 56971,
                "gasCost": "1000323",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_withdrawMarketCollateral": {
                "hash": "0x38ef18c9a665af7164e3951e392b51f679c1e8fd2fe1479c567ad2d20031e701",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                "gasUsed": 57163,
                "gasCost": "1000322",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enable_feature_withdrawMarketUsd": {
                "hash": "0x543ca887549b2eadefd10046a56fccbfea6d28e7601d1ad5b9f5b66e76262696",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                "gasUsed": 57079,
                "gasCost": "1000322",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_account": {
                "hash": "0xc77f2d5b29d94e33e6fe2c485bbea010c30f2be170dd4a6073e9bd7ce8b39537",
                "blockNumber": "16649389",
                "timestamp": "1729067066",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                        "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                      ]
                    }
                  ],
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                        "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                        "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_account",
                "gasUsed": 80750,
                "gasCost": "941134834",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_usd": {
                "hash": "0x20f2eeac2a57f555e34d11b45eb88da7ec04144fc1a4893f35e00b91358530ce",
                "blockNumber": "16649392",
                "timestamp": "1729067072",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                        "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                      ]
                    }
                  ],
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633230000000000000000000000000000000000000000000000000000000",
                        "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                        "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                        "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_usd",
                "gasUsed": 96850,
                "gasCost": "941615446",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "set_oracle_manager": {
                "hash": "0xeb4c8bbf4df4f31f7e6470d8a05ab93d2fd8c934dceb6e1f8ea6125b240e0cb9",
                "events": {},
                "deployedOn": "invoke.set_oracle_manager",
                "gasUsed": 54820,
                "gasCost": "1000325",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "configure_usd_collateral": {
                "hash": "0x2604376b5f5bf98e8d9c59562480ca3305b7b4b419df622ca7ab80008935f347",
                "events": {
                  "CollateralConfigured": [
                    {
                      "name": "CollateralConfigured",
                      "args": [
                        "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                        {
                          "depositingEnabled": true,
                          "issuanceRatioD18": "10000000000000000000",
                          "liquidationRatioD18": "10000000000000000000",
                          "liquidationRewardD18": "0",
                          "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                          "tokenAddress": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                          "minDelegationD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                        }
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.configure_usd_collateral",
                "gasUsed": 240637,
                "gasCost": "1000324",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {
              "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
              "account_token_name": "Synthetix Account",
              "account_token_symbol": "SACCT",
              "bundleSalt": "main",
              "oracle_manager_package": "oracle-manager",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "main",
              "usd_token_name": "Synthetic USD Token v3",
              "usd_token_symbol": "sUSD"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.usdc_mock_collateral": {
      "artifacts": {
        "imports": {
          "usdc_mock_collateral": {
            "url": "ipfs://QmetGA46qQQAjArg6Ks6REXV56HKN12RMknyMELwhShRMS",
            "tags": [
              "latest"
            ],
            "preset": "with-synthetix-omnibus",
            "settings": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
              "salt": "andromeda-dev-2",
              "symbol": "TKN"
            },
            "contracts": {
              "MintableToken": {
                "address": "0xc43708f8987Df3f3681801e5e640667D86Ce3C30",
                "abi": [
                  "constructor(address owner, string name, string symbol, uint8 tokenDecimals, uint256 initialSupply) payable",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function mint(uint256 amount, address to)",
                  "function name() view returns (string)",
                  "function owner() view returns (address)",
                  "function renounceOwnership()",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                  "function transferOwnership(address newOwner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)"
                ],
                "constructorArgs": [
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                  "Fake USD Coin",
                  "fUSDC",
                  "6",
                  "0"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x0cc8970d5bc56b2196fd8bc2008fe8c2c1bf3d23ba0b4d818dc85df201914141",
                "sourceName": "src/MintableToken.sol",
                "contractName": "MintableToken",
                "deployedOn": "contract.MintableToken",
                "highlight": true,
                "gasUsed": 774845,
                "gasCost": "1000291"
              }
            },
            "extras": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
              "salt": "andromeda-dev-2",
              "symbol": "TKN"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.registerLookupBtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupBtcOracleNode": {
            "hash": "0xabe15aabd33cf5e6806c4807385933b0399bcecad558a8ef962463bf82dee0bd",
            "blockNumber": "17174221",
            "timestamp": "1730116730",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x727bd77deff43c37e4d138b3619fc2a37475c7669e0ce421a1af758faad0e984",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56de62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupBtcOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "btc_lookup_oracle_id": "0x727bd77deff43c37e4d138b3619fc2a37475c7669e0ce421a1af758faad0e984"
        }
      },
      "hash": "bcea8fff4f5a33b202545071748400f2",
      "version": 7
    },
    "invoke.registerLookupEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupEthOracleNode": {
            "hash": "0x20c4cac5f36e1adf70105b4094e99c08e1a9366d0dfaf46eb7fc602ee8ba0508",
            "blockNumber": "17174245",
            "timestamp": "1730116778",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9cf72768f7df508211cd3c9a565e9a5f84c80cf3dac560e3034720ec31d6e493",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupEthOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eth_lookup_oracle_id": "0x9cf72768f7df508211cd3c9a565e9a5f84c80cf3dac560e3034720ec31d6e493"
        }
      },
      "hash": "ec08416e29c10f8eb49f676a2aae5bf4",
      "version": 7
    },
    "invoke.registerLookupSnxOracleNodeBuyback": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupSnxOracleNodeBuyback": {
            "hash": "0x9424942f666b82d5aff00a097710554a88682845ecfc187785b48475b9781ed8",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4704c6e6aaf31027b9d98029a648faebc1bf205f96a5329d9b5db86151ba5567",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3000000000000000000000000000000000000000000000000000000000000001e",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupSnxOracleNodeBuyback",
            "gasUsed": 154749,
            "gasCost": "1000318",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "snx_lookup_oracle_id_buyback": "0x4704c6e6aaf31027b9d98029a648faebc1bf205f96a5329d9b5db86151ba5567"
        }
      },
      "hash": "ffcb96a5603fc8c95f6db63549d9515c",
      "version": 6
    },
    "invoke.registerPerps_KeeperCostEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPerps_KeeperCostEthOracleNode": {
            "hash": "0x36f1025ef3b65aee51308f9635645a6f89834bf91f3df512a810d4eabf767777",
            "blockNumber": "16432723",
            "timestamp": "1728633734",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x88e7ea7b862b6f90aacf9b0f868277d85b78828b65f8bd13f5be71e114b6f1f5",
                    2,
                    "0x0000000000000000000000009930cd712d6ad27ef8e8992664b183892b499df000000000000000000000000000000000000000000000000000000000000059d8000000000000000000000000000000000000000000000000000000000053ec600000000000000000000000000000000000000000000000000000000000001194000000000000000000000000000000000000000000000000000000000006ddd000000000000000000000000000000000000000000000000000000000000067e8000000000000000000000000000000000000000000000000000000000023186000000000000000000000000000000000000000000000000000000000000013880000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000013ba",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPerps_KeeperCostEthOracleNode",
            "gasUsed": 341884,
            "gasCost": "317418273",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "perps_keeper_cost_eth_oracle_id": "0x88e7ea7b862b6f90aacf9b0f868277d85b78828b65f8bd13f5be71e114b6f1f5"
        }
      },
      "hash": "7d329d843cad8cb5fa6a01b10d1dee26",
      "version": 7
    },
    "invoke.registerPythBtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythBtcOracleNode": {
            "hash": "0x3adaca93c0a765e1d59ce7e8708f44caf54c305869e96bc2b4179953a3fb5273",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x6b3d5740c322ca7156fc97cfa75c47f5545674a53b445af1a28d7ea2747f456f",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b430000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythBtcOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000316",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "btc_pyth_oracle_id": "0x6b3d5740c322ca7156fc97cfa75c47f5545674a53b445af1a28d7ea2747f456f"
        }
      },
      "hash": "e29988353d8813410d35d6c25684977f",
      "version": 6
    },
    "invoke.registerPythEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythEthOracleNode": {
            "hash": "0xbad16eafa4d058327db50187eb0d8dc1991407d99a6477b79008b2054176d6ea",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xf9f568ca05c3704f53007de271375428f55008907fdde1d9210f3ee4b6129237",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythEthOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000316",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "eth_pyth_oracle_id": "0xf9f568ca05c3704f53007de271375428f55008907fdde1d9210f3ee4b6129237"
        }
      },
      "hash": "8a8b3d2e29622d45dd0c0b50178b1335",
      "version": 6
    },
    "invoke.registerPythSnxOracleNodeBuyback": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythSnxOracleNodeBuyback": {
            "hash": "0x7269a7d13c4d06a38e017238355f4badae7913315daace8b8e20d11e3b31a7fe",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa9ee0a0bba4228d600518530e4f8ff871b70096b9d185318fac16fbc6ac55d9a",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572939d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da30000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythSnxOracleNodeBuyback",
            "gasUsed": 146116,
            "gasCost": "1000318",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "snx_pyth_oracle_id_buyback": "0xa9ee0a0bba4228d600518530e4f8ff871b70096b9d185318fac16fbc6ac55d9a"
        }
      },
      "hash": "fc2895f9ca7bc85b2e73bffc40bd67f4",
      "version": 6
    },
    "provision.spotFactory": {
      "artifacts": {
        "imports": {
          "spotFactory": {
            "url": "ipfs://QmR9p2GKEV4APcUBZYCsaKuvSN6SXQkvTy6WN4tc89fNaa",
            "tags": [
              "latest"
            ],
            "target": "synthetix-spot-market:3.8.1@andromeda",
            "preset": "andromeda",
            "contracts": {
              "AsyncOrderConfigurationModule": {
                "address": "0x8b4bf6A29d3390C28A0A521241122Fc4B06099bd",
                "abi": [
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x92fbcb3ee357637cbbd1a4ab9cce98121e61a6e308bba93f0c42e47e9de487b5",
                "deployTxnBlockNumber": "16649403",
                "deployTimestamp": "1729067094",
                "sourceName": "contracts/modules/AsyncOrderConfigurationModule.sol",
                "contractName": "AsyncOrderConfigurationModule",
                "deployedOn": "contract.AsyncOrderConfigurationModule",
                "gasUsed": 896430,
                "gasCost": "947973424"
              },
              "AsyncOrderModule": {
                "address": "0x6b2B267Dd0bC45AFDe2143c29f7688c69fd1283e",
                "abi": [
                  "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                  "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                  "error InvalidAsyncTransactionType(uint8 transactionType)",
                  "error InvalidClaim(uint256 asyncOrderId)",
                  "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                  "error OverflowInt256ToUint256()",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                  "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                  "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                  "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x693315980e8a68341fef8077340aa882a01fbaeb714c20e615935f6ec62cc66e",
                "deployTxnBlockNumber": "16649405",
                "deployTimestamp": "1729067098",
                "sourceName": "contracts/modules/AsyncOrderModule.sol",
                "contractName": "AsyncOrderModule",
                "deployedOn": "contract.AsyncOrderModule",
                "gasUsed": 1317242,
                "gasCost": "949022906"
              },
              "AsyncOrderSettlementModule": {
                "address": "0xc62f57336B2aF1129655A08c172Eb1748A08a7Ce",
                "abi": [
                  "error InvalidClaim(uint256 asyncOrderId)",
                  "error InvalidSettlementStrategy(uint8 strategyType)",
                  "error InvalidVerificationResponse()",
                  "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                  "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                  "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                  "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xffed0d260707d687b6a97124edb9b3e134a28dadac1c6d9c3165d572c03afc4c",
                "deployTxnBlockNumber": "16649407",
                "deployTimestamp": "1729067102",
                "sourceName": "contracts/modules/AsyncOrderSettlementModule.sol",
                "contractName": "AsyncOrderSettlementModule",
                "deployedOn": "contract.AsyncOrderSettlementModule",
                "gasUsed": 1963714,
                "gasCost": "949054714"
              },
              "AtomicOrderModule": {
                "address": "0x5807777F854cA7418dB57E9475dB4BE10073f0EA",
                "abi": [
                  "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                  "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                  "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidPrices()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                  "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x941bdf0a92cee462ad27cefa72bf024e975813211dd4fd824e28fe157a6f49a9",
                "deployTxnBlockNumber": "16649409",
                "deployTimestamp": "1729067106",
                "sourceName": "contracts/modules/AtomicOrderModule.sol",
                "contractName": "AtomicOrderModule",
                "deployedOn": "contract.AtomicOrderModule",
                "gasUsed": 2090754,
                "gasCost": "950583162"
              },
              "CoreModule": {
                "address": "0xC04a9239DC38A6AED425f5FF0fEc6Ac6266A27A7",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x80a640acf82e5583e3ff431f0704e7520b644d4e5ff5b962f7461c3e0d8d2de2",
                "sourceName": "contracts/modules/CoreModule.sol",
                "contractName": "CoreModule",
                "deployedOn": "contract.CoreModule",
                "gasUsed": 940287,
                "gasCost": "1000316"
              },
              "FeatureFlagModule": {
                "address": "0x6fb72afDeD3139Ae63e5b06BBabf402d9bFb1D89",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x65e12ab64e45a9a2464fa063a2df94de323812496596d35c1c03ca05c336786d",
                "deployTxnBlockNumber": "16649411",
                "deployTimestamp": "1729067110",
                "sourceName": "contracts/modules/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule",
                "gasUsed": 765166,
                "gasCost": "954140088"
              },
              "MarketConfigurationModule": {
                "address": "0x0773232F3C996723278177d6Bd6918F5a5F6aDCb",
                "abi": [
                  "error InvalidCollateralLeverage(uint256)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidWrapperFees()",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                  "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                  "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                  "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                  "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                  "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                  "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                  "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                  "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                  "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                  "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                  "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                  "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                  "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                  "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                  "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                  "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                  "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                  "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                  "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                  "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x7eed3b8bef4ca685c8bf50ead5c83a4322ec5253687e5476f400c9b3ec83e856",
                "deployTxnBlockNumber": "16649413",
                "deployTimestamp": "1729067114",
                "sourceName": "contracts/modules/MarketConfigurationModule.sol",
                "contractName": "MarketConfigurationModule",
                "deployedOn": "contract.MarketConfigurationModule",
                "gasUsed": 720683,
                "gasCost": "950191939"
              },
              "SpotMarketFactoryModule": {
                "address": "0xdF262B2b9b7a08c38748F04Ecce7658Ad0620567",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidMarketOwner()",
                  "error InvalidSynthImplementation(uint256 synthImplementation)",
                  "error InvalidTransactionTypeIndex(uint128 txnType)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error NotNominated(address addr)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "error OverflowInt256ToUint256()",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                  "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                  "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                  "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                  "event SynthImplementationSet(address synthImplementation)",
                  "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                  "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                  "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                  "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                  "function acceptMarketOwnership(uint128 synthMarketId)",
                  "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function getSynth(uint128 marketId) view returns (address synthAddress)",
                  "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                  "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                  "function name(uint128 marketId) view returns (string marketName)",
                  "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "function renounceMarketNomination(uint128 synthMarketId)",
                  "function renounceMarketOwnership(uint128 synthMarketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                  "function setDecayRate(uint128 marketId, uint256 rate)",
                  "function setSynthImplementation(address synthImplementation)",
                  "function setSynthetix(address synthetix)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                  "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function upgradeSynthImpl(uint128 marketId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x798365a74e71d5faf99af057b2c31f23be38523422352ede70151554c589f4e6",
                "deployTxnBlockNumber": "16649416",
                "deployTimestamp": "1729067120",
                "sourceName": "contracts/modules/SpotMarketFactoryModule.sol",
                "contractName": "SpotMarketFactoryModule",
                "deployedOn": "contract.SpotMarketFactoryModule",
                "gasUsed": 2327426,
                "gasCost": "952365226"
              },
              "SynthTokenModule": {
                "address": "0x06511E19F5299eFc2075aD67f786A606b114811E",
                "abi": [
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidDecayRate()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function advanceEpoch() returns (uint256)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address user) view returns (uint256)",
                  "function burn(address from, uint256 amount)",
                  "function decayRate() view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function setDecayRate(uint256 _rate)",
                  "function symbol() view returns (string)",
                  "function totalShares() view returns (uint256)",
                  "function totalSupply() view returns (uint256 supply)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x0b3938128ee6b4d587ee7554ff7e39b203b7ff14eedd04b92b0be442c723813a",
                "deployTxnBlockNumber": "16649418",
                "deployTimestamp": "1729067124",
                "sourceName": "contracts/modules/token/SynthTokenModule.sol",
                "contractName": "SynthTokenModule",
                "deployedOn": "contract.SynthTokenModule",
                "gasUsed": 1207447,
                "gasCost": "951461249"
              },
              "WrapperModule": {
                "address": "0xb2d84d5b0b8E6d5f2937A564f4cB7fb213BE51A2",
                "abi": [
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                  "error InvalidCollateralType(address configuredCollateralType)",
                  "error InvalidMarket(uint128 marketId)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                  "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                  "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xea43330db33c49ed9c85af64203f2a42b3b9af2f7ab46ca2baf683c295a2fd62",
                "deployTxnBlockNumber": "16649420",
                "deployTimestamp": "1729067128",
                "sourceName": "contracts/modules/WrapperModule.sol",
                "contractName": "WrapperModule",
                "deployedOn": "contract.WrapperModule",
                "gasUsed": 1684906,
                "gasCost": "952952392"
              },
              "InitialSpotMarketProxy": {
                "address": "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0xC04a9239DC38A6AED425f5FF0fEc6Ac6266A27A7",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x0dabacb46c3b33b04c0709cfa33322c5f5af6898dcac1660c1cfcd8fd7276497",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialSpotMarketProxy",
                "gasUsed": 248149,
                "gasCost": "1000318"
              },
              "SpotMarketRouter": {
                "address": "0x07463c0c2ba77a6b6a69170fb8c0e50cc5f588a4",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidMarketOwner()",
                  "error InvalidSynthImplementation(uint256 synthImplementation)",
                  "error InvalidTransactionTypeIndex(uint128 txnType)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "error OverflowInt256ToUint256()",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                  "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                  "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                  "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                  "event SynthImplementationSet(address synthImplementation)",
                  "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                  "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                  "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                  "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                  "function acceptMarketOwnership(uint128 synthMarketId)",
                  "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function getSynth(uint128 marketId) view returns (address synthAddress)",
                  "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                  "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                  "function name(uint128 marketId) view returns (string marketName)",
                  "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "function renounceMarketNomination(uint128 synthMarketId)",
                  "function renounceMarketOwnership(uint128 synthMarketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                  "function setDecayRate(uint128 marketId, uint256 rate)",
                  "function setSynthImplementation(address synthImplementation)",
                  "function setSynthetix(address synthetix)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                  "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function upgradeSynthImpl(uint128 marketId)",
                  "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                  "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                  "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidPrices()",
                  "error OverflowUint256ToInt256()",
                  "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                  "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                  "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                  "error InvalidAsyncTransactionType(uint8 transactionType)",
                  "error InvalidClaim(uint256 asyncOrderId)",
                  "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                  "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                  "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                  "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "error InvalidSettlementStrategy(uint8 strategyType)",
                  "error InvalidVerificationResponse()",
                  "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                  "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                  "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidCollateralType(address configuredCollateralType)",
                  "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                  "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                  "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error InvalidCollateralLeverage(uint256)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidWrapperFees()",
                  "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                  "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                  "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                  "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                  "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                  "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                  "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                  "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                  "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                  "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                  "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                  "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                  "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                  "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                  "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                  "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                  "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                  "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                  "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                  "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                  "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "deployedOn": "router.SpotMarketRouter",
                "deployTxnHash": "0xce42253cb002d071b3322781fbdfe72c88ed8d2457d9d415ddb7f7aa654346a0",
                "deployTxnBlockNumber": "16649422",
                "deployTimestamp": "1729067132",
                "contractName": "SpotMarketRouter",
                "sourceName": "SpotMarketRouter.sol",
                "gasUsed": 879925,
                "gasCost": "953679229"
              },
              "SynthRouter": {
                "address": "0xcdfce502963a101d544e0b0c9641a53fd6cfdc80",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidDecayRate()",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function advanceEpoch() returns (uint256)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address user) view returns (uint256)",
                  "function burn(address from, uint256 amount)",
                  "function decayRate() view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function setDecayRate(uint256 _rate)",
                  "function symbol() view returns (string)",
                  "function totalShares() view returns (uint256)",
                  "function totalSupply() view returns (uint256 supply)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployedOn": "router.SynthRouter",
                "deployTxnHash": "0x1a842e8522d479fd05851136ab9e86540e57a8c8e8e9758c4b3eb5dd4fa4c006",
                "deployTxnBlockNumber": "16649424",
                "deployTimestamp": "1729067136",
                "contractName": "SynthRouter",
                "sourceName": "SynthRouter.sol",
                "gasUsed": 381169,
                "gasCost": "949559076"
              },
              "SpotMarketProxy": {
                "address": "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidMarketOwner()",
                  "error InvalidSynthImplementation(uint256 synthImplementation)",
                  "error InvalidTransactionTypeIndex(uint128 txnType)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "error OverflowInt256ToUint256()",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                  "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                  "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                  "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                  "event SynthImplementationSet(address synthImplementation)",
                  "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                  "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                  "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                  "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                  "function acceptMarketOwnership(uint128 synthMarketId)",
                  "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function getSynth(uint128 marketId) view returns (address synthAddress)",
                  "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                  "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                  "function name(uint128 marketId) view returns (string marketName)",
                  "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "function renounceMarketNomination(uint128 synthMarketId)",
                  "function renounceMarketOwnership(uint128 synthMarketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                  "function setDecayRate(uint128 marketId, uint256 rate)",
                  "function setSynthImplementation(address synthImplementation)",
                  "function setSynthetix(address synthetix)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                  "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function upgradeSynthImpl(uint128 marketId)",
                  "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                  "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                  "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidPrices()",
                  "error OverflowUint256ToInt256()",
                  "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                  "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                  "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                  "error InvalidAsyncTransactionType(uint8 transactionType)",
                  "error InvalidClaim(uint256 asyncOrderId)",
                  "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                  "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                  "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                  "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "error InvalidSettlementStrategy(uint8 strategyType)",
                  "error InvalidVerificationResponse()",
                  "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                  "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                  "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidCollateralType(address configuredCollateralType)",
                  "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                  "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                  "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error InvalidCollateralLeverage(uint256)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidWrapperFees()",
                  "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                  "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                  "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                  "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                  "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                  "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                  "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                  "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                  "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                  "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                  "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                  "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                  "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                  "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                  "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                  "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                  "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                  "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                  "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                  "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                  "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "invoke.upgradeSpotMarketProxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "settings": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "synthetixPackage": "synthetix",
              "synthetixPreset": "main"
            },
            "imports": {
              "synthetix": {
                "url": "ipfs://QmaoPV7jyHQF6ViTqPMvRFqGS3HWrXwr6Y1wCBtkai1Fbw",
                "contracts": {
                  "AccountModule": {
                    "address": "0xd4DFE8F3b91007ec187f8b74A3cEEDBA7A0873f7",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "error ZeroAddress()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x734f5d976bbfa5c0ec21808b4ff1b1b0532bdaaf2a07db1d08bde28c202bca66",
                    "deployTxnBlockNumber": "16649339",
                    "deployTimestamp": "1729066966",
                    "sourceName": "contracts/modules/core/AccountModule.sol",
                    "contractName": "AccountModule",
                    "deployedOn": "contract.AccountModule",
                    "gasUsed": 1225809,
                    "gasCost": "936592307"
                  },
                  "AccountTokenModule": {
                    "address": "0x6d448d821cbd5AA1A52dD3854ed0AEc2d1BF8832",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xd2af7a26d94f40173e1efabe174b03163cfb551b29fa45c909b70878f3b292b4",
                    "deployTxnBlockNumber": "16649341",
                    "deployTimestamp": "1729066970",
                    "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                    "contractName": "AccountTokenModule",
                    "deployedOn": "contract.AccountTokenModule",
                    "gasUsed": 1787668,
                    "gasCost": "932975250"
                  },
                  "AssociateDebtModule": {
                    "address": "0xEe047Ca39AE1EF562f3D5F23c1B8A5b074955331",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x2cdc64893f97d21159360a5096ad3abe14df13349fee8361324c43c10f10e694",
                    "deployTxnBlockNumber": "16649344",
                    "deployTimestamp": "1729066976",
                    "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                    "contractName": "AssociateDebtModule",
                    "deployedOn": "contract.AssociateDebtModule",
                    "gasUsed": 2603996,
                    "gasCost": "933120208"
                  },
                  "AssociatedSystemsModule": {
                    "address": "0xC8440d8e46D3C06beD106C6f2F918F30182bEb06",
                    "abi": [
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error Unauthorized(address addr)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xbdad45d38a1b1de1a6d9518ac7192e5bf5cf0c338a9f8c41fdbd33a30d9c6610",
                    "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                    "contractName": "AssociatedSystemsModule",
                    "deployedOn": "contract.AssociatedSystemsModule",
                    "gasUsed": 877153,
                    "gasCost": "1000305"
                  },
                  "CcipReceiverModule": {
                    "address": "0x290052592c38b55f827ec377B2a8023e734B815C",
                    "abi": [
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error Unauthorized(address addr)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x0a1ac64516ad97aca7fe23966c6050476f7c839b286cf64a5e2338d8a9e7e7b2",
                    "deployTxnBlockNumber": "16649346",
                    "deployTimestamp": "1729066980",
                    "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                    "contractName": "CcipReceiverModule",
                    "deployedOn": "contract.CcipReceiverModule",
                    "gasUsed": 469476,
                    "gasCost": "936917569"
                  },
                  "CollateralConfigurationModule": {
                    "address": "0x98A58c2A364f5C9dA829a8738Ba8b192E7B706db",
                    "abi": [
                      "error EmptyRevertReason()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error PositionOutOfBounds()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x3050067c8dad45ed319ffc5d018760acea5008c4bcdab87d645144b585beb212",
                    "deployTxnBlockNumber": "16649348",
                    "deployTimestamp": "1729066984",
                    "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                    "contractName": "CollateralConfigurationModule",
                    "deployedOn": "contract.CollateralConfigurationModule",
                    "gasUsed": 872728,
                    "gasCost": "937172209"
                  },
                  "CollateralModule": {
                    "address": "0xE8Ae6cAC1aBbC0Eef81D85f8f5f4402f164300FD",
                    "abi": [
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error AccountNotFound(uint128 accountId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x9135ef7a5060b7e3b30af8aaf4cbea2747784ce00a8f74d3498f66fab944981d",
                    "deployTxnBlockNumber": "16649350",
                    "deployTimestamp": "1729066988",
                    "sourceName": "contracts/modules/core/CollateralModule.sol",
                    "contractName": "CollateralModule",
                    "deployedOn": "contract.CollateralModule",
                    "gasUsed": 1878022,
                    "gasCost": "937764119"
                  },
                  "CrossChainUSDModule": {
                    "address": "0x0Db649f56b99B15c70198C925CD374b95B6Df5E8",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xd57eddd8ebbaaffdda7d1ccdedd8345b8cb7e1dba787af550943cc10b7be4830",
                    "deployTxnBlockNumber": "16649352",
                    "deployTimestamp": "1729066992",
                    "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                    "contractName": "CrossChainUSDModule",
                    "deployedOn": "contract.CrossChainUSDModule",
                    "gasUsed": 595289,
                    "gasCost": "934748763"
                  },
                  "FeatureFlagModule": {
                    "address": "0x57a24eafBCeDF9CEFD242b259517C84b9d72e3Ae",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xb8ed47b80ee3a4301f24b809cb8376373e4d68fea596a8c4c7ab5a89228c5a68",
                    "deployTxnBlockNumber": "16649354",
                    "deployTimestamp": "1729066996",
                    "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 777054,
                    "gasCost": "935496418"
                  },
                  "IssueUSDModule": {
                    "address": "0x8C9126A0dD9e2B60a69a4957669C507ff1c07C69",
                    "abi": [
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x1c864f9da23ddbe73a793494ef991044b6588ae73c290a6e79b4535649f698d9",
                    "deployTxnBlockNumber": "16649356",
                    "deployTimestamp": "1729067000",
                    "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                    "contractName": "IssueUSDModule",
                    "deployedOn": "contract.IssueUSDModule",
                    "gasUsed": 2940922,
                    "gasCost": "937306460"
                  },
                  "LiquidationModule": {
                    "address": "0xC090A806CC37c4C6CA9fc8eb7b7098d78eE72b60",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error CannotScaleEmptyMapping()",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint256ToUint64()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PositionOutOfBounds()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x3f4c10c3063b131da4b40f91d2fef5bc8294293ea31a63c606131902ecc314d0",
                    "deployTxnBlockNumber": "16649358",
                    "deployTimestamp": "1729067004",
                    "sourceName": "contracts/modules/core/LiquidationModule.sol",
                    "contractName": "LiquidationModule",
                    "deployedOn": "contract.LiquidationModule",
                    "gasUsed": 4289682,
                    "gasCost": "935586433"
                  },
                  "MarketCollateralModule": {
                    "address": "0xD88de2Ee855f145ab1eCFfF8273661C3d59fc8ad",
                    "abi": [
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "error Unauthorized(address addr)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xc5c4642d703fe51a5736f64cd0b91f641d0b0b14d582596313c350ac2b529f9e",
                    "deployTxnBlockNumber": "16649360",
                    "deployTimestamp": "1729067008",
                    "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                    "contractName": "MarketCollateralModule",
                    "deployedOn": "contract.MarketCollateralModule",
                    "gasUsed": 1298300,
                    "gasCost": "938598453"
                  },
                  "MarketManagerModule": {
                    "address": "0x35B79eD956064338d3DF10abc215Ab128C6265BE",
                    "abi": [
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IncorrectMarketInterface(address market)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xe7d5907e9bc6931cfd5d6ec2ee85fd04e32746281b79230ec9d301536c5e90ae",
                    "deployTxnBlockNumber": "16649362",
                    "deployTimestamp": "1729067012",
                    "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                    "contractName": "MarketManagerModule",
                    "deployedOn": "contract.MarketManagerModule",
                    "gasUsed": 2730455,
                    "gasCost": "938162086"
                  },
                  "PoolConfigurationModule": {
                    "address": "0x39fBdCBa20E57BC672DDD9f5756Dc8b5Fabe526a",
                    "abi": [
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xfe15402ad6fe9cfd54a4da2874d181a8c516c025d984b5ec4740f2910cea30ec",
                    "deployTxnBlockNumber": "16649364",
                    "deployTimestamp": "1729067016",
                    "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                    "contractName": "PoolConfigurationModule",
                    "deployedOn": "contract.PoolConfigurationModule",
                    "gasUsed": 446271,
                    "gasCost": "938194121"
                  },
                  "PoolModule": {
                    "address": "0x65a62Dc05B66FD007d05f2E34085348A45c6a424",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x4a9563128d503b59b74d159ed8b1745ec4d75645cb505f1a53f4990267c38886",
                    "deployTxnBlockNumber": "16649366",
                    "deployTimestamp": "1729067020",
                    "sourceName": "contracts/modules/core/PoolModule.sol",
                    "contractName": "PoolModule",
                    "deployedOn": "contract.PoolModule",
                    "gasUsed": 3986001,
                    "gasCost": "941481539"
                  },
                  "RewardsManagerModule": {
                    "address": "0x4A3979b6dc29B311e8c27D4E2cdF1E35f89913b0",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error RewardUnavailable(address distributor)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xbbc9ba761efa021f34153e39acaf3c8123e8d7a81f928be226b312cd978c2e16",
                    "deployTxnBlockNumber": "16649368",
                    "deployTimestamp": "1729067024",
                    "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                    "contractName": "RewardsManagerModule",
                    "deployedOn": "contract.RewardsManagerModule",
                    "gasUsed": 2642251,
                    "gasCost": "942593115"
                  },
                  "USDTokenModule": {
                    "address": "0x2F0f4304676B1399D970bac6488053F7014A80a6",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xca0f2c066651896de5930e5ee954bd0c03b025fa2c2a32eb8395c335a6d6905a",
                    "deployTxnBlockNumber": "16649371",
                    "deployTimestamp": "1729067030",
                    "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                    "contractName": "USDTokenModule",
                    "deployedOn": "contract.USDTokenModule",
                    "gasUsed": 1110294,
                    "gasCost": "939871566"
                  },
                  "UtilsModule": {
                    "address": "0xa76f3067888222b37a667814f696038b658B7368",
                    "abi": [
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x1e9d8122afd7dc158660bf1f9bb8ea629ed274203f628129ae91b5f54fe5753e",
                    "deployTxnBlockNumber": "16649373",
                    "deployTimestamp": "1729067034",
                    "sourceName": "contracts/modules/core/UtilsModule.sol",
                    "contractName": "UtilsModule",
                    "deployedOn": "contract.UtilsModule",
                    "gasUsed": 759697,
                    "gasCost": "944385460"
                  },
                  "VaultModule": {
                    "address": "0xA24ECBF86E4cD4763084cF1f1E7709400cE8d3BC",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "error PoolNotFound(uint128 poolId)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x939f10bb60d2dba483fa7c5c900ca69760fe55dad1191ecf1e26c9ea9e83a50a",
                    "deployTxnBlockNumber": "16649375",
                    "deployTimestamp": "1729067038",
                    "sourceName": "contracts/modules/core/VaultModule.sol",
                    "contractName": "VaultModule",
                    "deployedOn": "contract.VaultModule",
                    "gasUsed": 4244908,
                    "gasCost": "941449312"
                  },
                  "InitialModuleBundle": {
                    "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/modules/InitialModuleBundle.sol",
                    "contractName": "InitialModuleBundle",
                    "deployedOn": "contract.InitialModuleBundle",
                    "gasUsed": 0,
                    "gasCost": "0"
                  },
                  "InitialCoreProxy": {
                    "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x828EED723cAF0A8F822249231266E38dF614923C",
                      "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x5913f591061763378a9209c9ea168efbfd1de19af4440dbfcf5a73004f091491",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialCoreProxy",
                    "gasUsed": 185358,
                    "gasCost": "1000317"
                  },
                  "AccountRouter": {
                    "address": "0x768f77f75c7c4b6b81758bf56ce0ab70762b37e6",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployedOn": "router.AccountRouter",
                    "deployTxnHash": "0xbac818a079f296ffb1759aaecef641f5471ebed0cf6829aba98ea826cbb07a0b",
                    "deployTxnBlockNumber": "16649378",
                    "deployTimestamp": "1729067044",
                    "contractName": "AccountRouter",
                    "sourceName": "AccountRouter.sol",
                    "gasUsed": 406486,
                    "gasCost": "949929423"
                  },
                  "CoreRouter": {
                    "address": "0xad3553dc909d1d72a290ae14a530a46c57bb4d3d",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "deployedOn": "router.CoreRouter",
                    "deployTxnHash": "0x7a059a46a4b514a360ccf2260f8bc8baa33bf74f309a7ba1c0fa2952e8b30f6a",
                    "deployTxnBlockNumber": "16649380",
                    "deployTimestamp": "1729067048",
                    "contractName": "CoreRouter",
                    "sourceName": "CoreRouter.sol",
                    "gasUsed": 1318142,
                    "gasCost": "945143807"
                  },
                  "USDRouter": {
                    "address": "0x44d4a4796a7604419e4051d4ab1e060759db99fb",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.USDRouter",
                    "deployTxnHash": "0xade8ab8e92554c274e7b22ab353c4fe32ed2754195a0dcce871f2f73f21dc611",
                    "deployTxnBlockNumber": "16649382",
                    "deployTimestamp": "1729067052",
                    "contractName": "USDRouter",
                    "sourceName": "USDRouter.sol",
                    "gasUsed": 398033,
                    "gasCost": "945780250"
                  },
                  "CoreProxy": {
                    "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "AccountProxy": {
                    "address": "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "USDProxy": {
                    "address": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "imports": {
                  "trusted_multicall_forwarder": {
                    "url": "ipfs://QmYi3NuhRQQVwHZLQd9KBCsg2HKeFP769mR6Yi2g2mA9cE",
                    "tags": [
                      "latest"
                    ],
                    "preset": "with-synthetix",
                    "settings": {
                      "salt": "salt"
                    },
                    "contracts": {
                      "TrustedMulticallForwarder": {
                        "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                        "abi": [
                          "constructor()",
                          "error AddressInsufficientBalance(address account)",
                          "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                          "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                          "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                          "error ERC2771UntrustfulTarget(address target, address forwarder)",
                          "error FailedInnerCall()",
                          "error InvalidAccountNonce(address account, uint256 currentNonce)",
                          "error InvalidShortString()",
                          "error StringTooLong(string str)",
                          "event EIP712DomainChanged()",
                          "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                          "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                          "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                          "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                          "function getBasefee() view returns (uint256 basefee)",
                          "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                          "function getBlockNumber() view returns (uint256 blockNumber)",
                          "function getChainId() view returns (uint256 chainid)",
                          "function getCurrentBlockCoinbase() view returns (address coinbase)",
                          "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                          "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                          "function getEthBalance(address addr) view returns (uint256 balance)",
                          "function getLastBlockHash() view returns (bytes32 blockHash)",
                          "function getPrevRandao() view returns (uint256 prevrandao)",
                          "function nonces(address owner) view returns (uint256)",
                          "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "sourceName": "src/TrustedMulticallForwarder.sol",
                        "contractName": "TrustedMulticallForwarder",
                        "deployedOn": "contract.TrustedMulticallForwarder",
                        "gasUsed": 0,
                        "gasCost": "0"
                      }
                    },
                    "extras": {
                      "salt": "salt"
                    }
                  },
                  "oracle_manager": {
                    "url": "ipfs://QmaSYrc3XvdZ2LhUDQ2njMCkHsfNT3nDLDDLJWwE8UaVkr",
                    "contracts": {
                      "NodeModule": {
                        "address": "0xE1681e5aC826043Ae6575ee1fD5E7064751c2fc5",
                        "abi": [
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x1ca8b07aa6e171c4948031b71bfa2a8f9ffc7bbbbea847313177653956f58c31",
                        "deployTxnBlockNumber": "16649324",
                        "deployTimestamp": "1729066936",
                        "sourceName": "contracts/modules/NodeModule.sol",
                        "contractName": "NodeModule",
                        "deployedOn": "contract.NodeModule",
                        "gasUsed": 4820634,
                        "gasCost": "930730936"
                      },
                      "CoreModule": {
                        "address": "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1729066942",
                        "sourceName": "contracts/modules/CoreModule.sol",
                        "contractName": "CoreModule",
                        "deployedOn": "contract.CoreModule",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "InitialProxy": {
                        "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                          "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1729066944",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialProxy",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "OracleRouter": {
                        "address": "0x0a6a3a1553351a2a3e71f90e1b892794f2a2e64c",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployedOn": "router.OracleRouter",
                        "deployTxnHash": "0xea0d86ad6ff5608eab445f132f01d2f905f7396ce6517efaafa91bea4f3b64e4",
                        "deployTxnBlockNumber": "16649330",
                        "deployTimestamp": "1729066948",
                        "contractName": "OracleRouter",
                        "sourceName": "OracleRouter.sol",
                        "gasUsed": 262878,
                        "gasCost": "933131741"
                      },
                      "Proxy": {
                        "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmQdXmwU7gK9cPRt3opFcf55yFfNjbLCHmea7LStWnsH6b",
                        "tags": [
                          "latest"
                        ],
                        "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                        "preset": "with-oracle-manager",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1729066940",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      }
                    },
                    "settings": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    },
                    "txns": {
                      "upgrade_proxy": {
                        "hash": "0x202d083402f6ee504921fa463b2dbb2fd506d047cc95e73904a675fcda5a0603",
                        "blockNumber": "16649332",
                        "timestamp": "1729066952",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                                "0x0a6a3a1553351A2A3e71F90e1B892794F2A2e64C"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 55368,
                        "gasCost": "936076092",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      }
                    },
                    "extras": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    }
                  }
                },
                "settings": {
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                },
                "txns": {
                  "register_const_one_oracle": {
                    "hash": "0x2baa0591174c004d4cf5f6ecce14a0d357d558ea242b7dd9f489a88103e1143b",
                    "events": {
                      "NodeRegistered": [
                        {
                          "name": "NodeRegistered",
                          "args": [
                            "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                            8,
                            "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                            []
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.register_const_one_oracle",
                    "gasUsed": 108489,
                    "gasCost": "1000318",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "upgrade_core_proxy": {
                    "hash": "0x3267b8dd6102327a45f96ff36a84e61e82adb5200b444d083c5daa87f27be03a",
                    "blockNumber": "16649385",
                    "timestamp": "1729067058",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                            "0xAd3553dc909D1D72A290ae14a530A46C57bb4D3d"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 51203,
                    "gasCost": "945601052",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_burnUsd": {
                    "hash": "0x7087b881678eb12e6f6863f6ea29870a42433c72616bbdcba6e5a46c73313a3b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6275726e55736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_burnUsd",
                    "gasUsed": 56959,
                    "gasCost": "1000323",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_claimRewards": {
                    "hash": "0x20bd61d41b1be63384c93217591d71142f1bd15099d2827c27f54dd9768ac4d3",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x636c61696d526577617264730000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_claimRewards",
                    "gasUsed": 57019,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_createAccount": {
                    "hash": "0x8f2bd10b10a82848836679f365118b10813db0fc60e99e8ff7eb792f0a1854dd",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_createAccount",
                    "gasUsed": 57031,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_delegateCollateral": {
                    "hash": "0x5e9d60081eea0c6ad048d34640dba307a518c3b7b2cc7d9745a732219b6e403c",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_delegateCollateral",
                    "gasUsed": 57091,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_deposit": {
                    "hash": "0x0513e0e724ed24f32dc7a1a9b0b0b3cd42e5eb4e961f7e9006d691e65070806e",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f73697400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_deposit",
                    "gasUsed": 56959,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_depositMarketCollateral": {
                    "hash": "0xcab8c6233dd9fe48e21b3ffa2c747e4224aa40cc2d71d627395bd416f7d05bec",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                    "gasUsed": 57151,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_depositMarketUsd": {
                    "hash": "0xed336b2c8be6acab9d4056f47fc368e220f5e3cab3316c95a2412f02dd53444b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketUsd",
                    "gasUsed": 57067,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_liquidate": {
                    "hash": "0x775cea26782e06292cd0f5d15463437a9efa9a19f81c7d5b486dd3ad0b607eb1",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174650000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidate",
                    "gasUsed": 56983,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_liquidateVault": {
                    "hash": "0x6795708a5819e8ad9d54ab5ca382b90d8fbec48895738ec5fc84c3d477f0853d",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateVault",
                    "gasUsed": 57043,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_mintUsd": {
                    "hash": "0x1aa28aa9444a30ed09728dbed1a86c4ecb2cc37140e209abbaa62ce3e67879b7",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_mintUsd",
                    "gasUsed": 56959,
                    "gasCost": "1000324",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdraw": {
                    "hash": "0x76745b191844c7843b1e49d6a42d889e4dd7d9fdfac8308c90ec1ccde11baf0b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x7769746864726177000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdraw",
                    "gasUsed": 56971,
                    "gasCost": "1000323",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdrawMarketCollateral": {
                    "hash": "0x38ef18c9a665af7164e3951e392b51f679c1e8fd2fe1479c567ad2d20031e701",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                    "gasUsed": 57163,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdrawMarketUsd": {
                    "hash": "0x543ca887549b2eadefd10046a56fccbfea6d28e7601d1ad5b9f5b66e76262696",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                    "gasUsed": 57079,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "init_account": {
                    "hash": "0xc77f2d5b29d94e33e6fe2c485bbea010c30f2be170dd4a6073e9bd7ce8b39537",
                    "blockNumber": "16649389",
                    "timestamp": "1729067066",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                            "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633732310000000000000000000000000000000000000000000000000000",
                            "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                            "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                            "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 80750,
                    "gasCost": "941134834",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "init_usd": {
                    "hash": "0x20f2eeac2a57f555e34d11b45eb88da7ec04144fc1a4893f35e00b91358530ce",
                    "blockNumber": "16649392",
                    "timestamp": "1729067072",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633230000000000000000000000000000000000000000000000000000000",
                            "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 96850,
                    "gasCost": "941615446",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "set_oracle_manager": {
                    "hash": "0xeb4c8bbf4df4f31f7e6470d8a05ab93d2fd8c934dceb6e1f8ea6125b240e0cb9",
                    "events": {},
                    "deployedOn": "invoke.set_oracle_manager",
                    "gasUsed": 54820,
                    "gasCost": "1000325",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "configure_usd_collateral": {
                    "hash": "0x2604376b5f5bf98e8d9c59562480ca3305b7b4b419df622ca7ab80008935f347",
                    "events": {
                      "CollateralConfigured": [
                        {
                          "name": "CollateralConfigured",
                          "args": [
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            {
                              "depositingEnabled": true,
                              "issuanceRatioD18": "10000000000000000000",
                              "liquidationRatioD18": "10000000000000000000",
                              "liquidationRewardD18": "0",
                              "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                              "tokenAddress": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                              "minDelegationD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                            }
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.configure_usd_collateral",
                    "gasUsed": 240637,
                    "gasCost": "1000324",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  }
                },
                "extras": {
                  "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                }
              }
            },
            "txns": {
              "upgradeSpotMarketProxy": {
                "hash": "0x8c25e4a5c99e0e998e9da0470092a0e3c97bd93a96329208588f192212ceb546",
                "blockNumber": "16649426",
                "timestamp": "1729067140",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                        "0x07463c0c2ba77A6B6a69170Fb8c0E50CC5F588A4"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgradeSpotMarketProxy",
                "gasUsed": 55585,
                "gasCost": "950724163",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "addCreateSynthToFeatureFlag": {
                "hash": "0x82a8c86f5a0e14670416819828d30d9e0774df83b023dee86b932ca5537c9964",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x63726561746553796e7468000000000000000000000000000000000000000000",
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.addCreateSynthToFeatureFlag",
                "gasUsed": 101751,
                "gasCost": "1000316",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "addSpotMarketToFeatureFlag": {
                "hash": "0x8485a13d2e27ef8d944e5e113a885e6060b70ee830465607e86d7b85d425600e",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                        "0xaD2fE7cd224c58871f541DAE01202F93928FEF72"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.addSpotMarketToFeatureFlag",
                "gasUsed": 101643,
                "gasCost": "1000325",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "setSynthImplementation": {
                "hash": "0xfcaa7615223c60f845418265f66cf40a75458b69cd55e84638499ba899dd1093",
                "blockNumber": "16649428",
                "timestamp": "1729067144",
                "events": {
                  "SynthImplementationSet": [
                    {
                      "name": "SynthImplementationSet",
                      "args": [
                        "0xcdfcE502963A101D544E0b0c9641a53fd6cfdC80"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setSynthImplementation",
                "gasUsed": 39108,
                "gasCost": "954496463",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "setSynthetixSystem": {
                "hash": "0x069c049a5441049a39db88371887cbfbe67c3d27e3098d90b2332fa640cbe22c",
                "events": {
                  "SynthetixSystemSet": [
                    {
                      "name": "SynthetixSystemSet",
                      "args": [
                        "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                        "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                        "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setSynthetixSystem",
                "gasUsed": 124285,
                "gasCost": "1000324",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "synthetixPackage": "synthetix",
              "synthetixPreset": "main"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.registerBtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerBtcOracleNode": {
            "hash": "0xe03a6b616b3b70fde8982b4e898189a4a311976d8a2d41b2a3d40d7d763cb068",
            "blockNumber": "17174401",
            "timestamp": "1730117090",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xaa10a255f2ff0320684513b5cc225976d0d26e9dbbb7a338dedcdc5c94f31c06",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x6b3d5740c322ca7156fc97cfa75c47f5545674a53b445af1a28d7ea2747f456f",
                      "0x727bd77deff43c37e4d138b3619fc2a37475c7669e0ce421a1af758faad0e984"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerBtcOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "btc_oracle_id": "0xaa10a255f2ff0320684513b5cc225976d0d26e9dbbb7a338dedcdc5c94f31c06"
        }
      },
      "hash": "5521ecc5219b398f7c69ae67aeeec4c2",
      "version": 7
    },
    "invoke.registerEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEthOracleNode": {
            "hash": "0x3a8d9ebb9c2a31a25fb17323d34403d538688d60c4e02269297edba3079403a6",
            "blockNumber": "17174424",
            "timestamp": "1730117136",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb4df545da972b990d9fb142d975545f5a21371c842495d2d95057e2b44ba56e3",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xf9f568ca05c3704f53007de271375428f55008907fdde1d9210f3ee4b6129237",
                      "0x9cf72768f7df508211cd3c9a565e9a5f84c80cf3dac560e3034720ec31d6e493"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEthOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000376",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eth_oracle_id": "0xb4df545da972b990d9fb142d975545f5a21371c842495d2d95057e2b44ba56e3"
        }
      },
      "hash": "f0baa743c0a765433ff70e877e66be88",
      "version": 7
    },
    "invoke.registerSnxOracleNodeBuyback": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSnxOracleNodeBuyback": {
            "hash": "0xa071de2a6002837d5bf258311ed3fe3eb9635a0eb902ca4b7181cbf21be9b0c6",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x32520a34b3e069c7c900a345f81436d79585ec1f3d9e402e904e79e829f7b2b9",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000001e",
                    [
                      "0xa9ee0a0bba4228d600518530e4f8ff871b70096b9d185318fac16fbc6ac55d9a",
                      "0x4704c6e6aaf31027b9d98029a648faebc1bf205f96a5329d9b5db86151ba5567"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSnxOracleNodeBuyback",
            "gasUsed": 220605,
            "gasCost": "1000318",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "snx_oracle_id_buyback": "0x32520a34b3e069c7c900a345f81436d79585ec1f3d9e402e904e79e829f7b2b9"
        }
      },
      "hash": "9d137049203707311edc6b7b485550fb",
      "version": 6
    },
    "provision.perpsFactory": {
      "artifacts": {
        "imports": {
          "perpsFactory": {
            "url": "ipfs://QmRKm9Ns36DbgCNr4yVuEJzmpaMkSjo1igk3qmcnJMMffi",
            "tags": [
              "latest"
            ],
            "target": "synthetix-perps-market:3.9.0@andromeda",
            "preset": "andromeda",
            "contracts": {
              "AsyncOrderCancelModule": {
                "address": "0x8aD2EB521a9d185eEc1dee6b78d01E7c2907Cc33",
                "abi": [
                  "error AcceptablePriceNotExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "error AccountLiquidatable(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error OrderNotValid()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error SettlementWindowExpired(uint256 timestamp, uint256 settlementTime, uint256 settlementExpiration)",
                  "error SettlementWindowNotOpen(uint256 timestamp, uint256 settlementTime)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event AccountCharged(uint128 accountId, int256 amount, uint256 accountDebt)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed accountId, uint256 desiredPrice, uint256 fillPrice, int128 sizeDelta, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function cancelOrder(uint128 accountId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xe34430833aa867587c74f67ddd4ceb86cdf988604cf19397df298ed5c5ace139",
                "deployTxnBlockNumber": "17158733",
                "deployTimestamp": "1730085754",
                "sourceName": "contracts/modules/AsyncOrderCancelModule.sol",
                "contractName": "AsyncOrderCancelModule",
                "deployedOn": "contract.AsyncOrderCancelModule",
                "gasUsed": 2093128,
                "gasCost": "1000268"
              },
              "AsyncOrderModule": {
                "address": "0x861B552aEefbf43b78f42F84EA932b32b2f48089",
                "abi": [
                  "error AccountLiquidatable(uint128 accountId)",
                  "error AccountNotFound(uint128 accountId)",
                  "error ExceedsMarketCreditCapacity(int256 delegatedCollateral, int256 newLockedCredit)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMargin(int256 availableMargin, uint256 minMargin)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error KeeperCostsNotSet()",
                  "error MaxOpenInterestReached(uint128 marketId, uint256 maxMarketSize, int256 newSideSize)",
                  "error MaxPositionsPerAccountReached(uint128 maxPositionsPerAccount)",
                  "error MaxUSDOpenInterestReached(uint128 marketId, uint256 maxMarketValue, int256 newSideSize, uint256 price)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PendingOrderExists()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error ZeroSizeOrder()",
                  "event OrderCommitted(uint128 indexed marketId, uint128 indexed accountId, uint8 orderType, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, uint256 expectedPriceTime, uint256 settlementTime, uint256 expirationTime, bytes32 indexed trackingCode, address sender)",
                  "event PreviousOrderExpired(uint128 indexed marketId, uint128 indexed accountId, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, bytes32 indexed trackingCode)",
                  "function commitOrder(tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) commitment) returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) retOrder, uint256 fees)",
                  "function computeOrderFees(uint128 marketId, int128 sizeDelta) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function computeOrderFeesWithPrice(uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function getOrder(uint128 accountId) view returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) order)",
                  "function getSettlementRewardCost(uint128 marketId, uint128 settlementStrategyId) view returns (uint256)",
                  "function requiredMarginForOrder(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 requiredMargin)",
                  "function requiredMarginForOrderWithPrice(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 requiredMargin)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x672c288ba3fb7e20a056b27902a6017870bfeafa268e9df1128bc2accf1035e4",
                "deployTxnBlockNumber": "17158735",
                "deployTimestamp": "1730085758",
                "sourceName": "contracts/modules/AsyncOrderModule.sol",
                "contractName": "AsyncOrderModule",
                "deployedOn": "contract.AsyncOrderModule",
                "gasUsed": 3576529,
                "gasCost": "1000268"
              },
              "AsyncOrderSettlementPythModule": {
                "address": "0x49f0bb77d461E464FE3c8eA62B0BCAB847470A3f",
                "abi": [
                  "error AcceptablePriceExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "error AccountLiquidatable(uint128 accountId)",
                  "error ExceedsMarketCreditCapacity(int256 delegatedCollateral, int256 newLockedCredit)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMargin(int256 availableMargin, uint256 minMargin)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error KeeperCostsNotSet()",
                  "error MaxOpenInterestReached(uint128 marketId, uint256 maxMarketSize, int256 newSideSize)",
                  "error MaxUSDOpenInterestReached(uint128 marketId, uint256 maxMarketValue, int256 newSideSize, uint256 price)",
                  "error OrderNotValid()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error SettlementWindowExpired(uint256 timestamp, uint256 settlementTime, uint256 settlementExpiration)",
                  "error SettlementWindowNotOpen(uint256 timestamp, uint256 settlementTime)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroSizeOrder()",
                  "event AccountCharged(uint128 accountId, int256 amount, uint256 accountDebt)",
                  "event InterestCharged(uint128 indexed accountId, uint256 interest)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed accountId, uint256 fillPrice, int256 pnl, int256 accruedFunding, int128 sizeDelta, int128 newSize, uint256 totalFees, uint256 referralFees, uint256 collectedFees, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function settleOrder(uint128 accountId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xaab53b8ad17e54ccbfa38617055ade8cf6ad6cac02aabe91fc1d4d469c010924",
                "deployTxnBlockNumber": "17158737",
                "deployTimestamp": "1730085762",
                "sourceName": "contracts/modules/AsyncOrderSettlementPythModule.sol",
                "contractName": "AsyncOrderSettlementPythModule",
                "deployedOn": "contract.AsyncOrderSettlementPythModule",
                "gasUsed": 4057970,
                "gasCost": "1000268"
              },
              "CollateralConfigurationModule": {
                "address": "0x78cdbFe231CCCB8534aBf2736008Eb7d937b31e6",
                "abi": [
                  "error InvalidDistributor(uint128 id, address distributor)",
                  "error InvalidDistributorContract(address distributor)",
                  "error InvalidId(uint128 id)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event CollateralConfigurationSet(uint128 indexed collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "event CollateralLiquidateRewardRatioSet(uint128 collateralLiquidateRewardRatioD18)",
                  "event RewardDistributorRegistered(address distributor)",
                  "function getCollateralConfiguration(uint128 collateralId) view returns (uint256 maxCollateralAmount)",
                  "function getCollateralConfigurationFull(uint128 collateralId) view returns (uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function getCollateralLiquidateRewardRatio() view returns (uint128 collateralLiquidateRewardRatioD18)",
                  "function getRegisteredDistributor(uint128 collateralId) view returns (address distributor, address[] poolDelegatedCollateralTypes)",
                  "function isRegistered(address distributor) view returns (bool)",
                  "function registerDistributor(address token, address distributor, uint128 collateralId, address[] poolDelegatedCollateralTypes)",
                  "function setCollateralConfiguration(uint128 collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function setCollateralLiquidateRewardRatio(uint128 collateralLiquidateRewardRatioD18)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xf079043ff52f8a0f6bb638a55c1204e83333c833d22bc696b781aa9567292fc8",
                "deployTxnBlockNumber": "17158739",
                "deployTimestamp": "1730085766",
                "sourceName": "contracts/modules/CollateralConfigurationModule.sol",
                "contractName": "CollateralConfigurationModule",
                "deployedOn": "contract.CollateralConfigurationModule",
                "gasUsed": 904043,
                "gasCost": "1000268"
              },
              "CoreModule": {
                "address": "0x0c487767e6e0d598f48fc43150D2159aA84EA66e",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x6bb0b0d6231a6448cd54a6496254cae19d995be2d64585b2fc4207143353faa3",
                "sourceName": "contracts/modules/CoreModule.sol",
                "contractName": "CoreModule",
                "deployedOn": "contract.CoreModule",
                "gasUsed": 940299,
                "gasCost": "1000327"
              },
              "FeatureFlagModule": {
                "address": "0x0bED2590Ea0611Fe60BDED5A8a871D8a3c8e1a37",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xbf7593058d36ca07bcd61645d86b3e13e80fcb3f21deca0f71dd9c5497c36af9",
                "deployTxnBlockNumber": "15788462",
                "deployTimestamp": "1727345212",
                "sourceName": "contracts/modules/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule",
                "gasUsed": 765166,
                "gasCost": "1000256"
              },
              "GlobalPerpsMarketModule": {
                "address": "0xBDca028d868804307670955FcFF76965Ff19A7A7",
                "abi": [
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 highUtilizationInterestRateGradient)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidReferrerShareRatio(uint256 shareRatioD18)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event FeeCollectorSet(address feeCollector)",
                  "event InterestRateParametersSet(uint256 lowUtilizationInterestRateGradient, uint256 interestRateGradientBreakpoint, uint256 highUtilizationInterestRateGradient)",
                  "event InterestRateUpdated(uint128 indexed superMarketId, uint128 interestRate)",
                  "event KeeperCostNodeIdUpdated(bytes32 keeperCostNodeId)",
                  "event KeeperRewardGuardsSet(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "event PerAccountCapsSet(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "event ReferrerShareUpdated(address referrer, uint256 shareRatioD18)",
                  "function getFeeCollector() view returns (address feeCollector)",
                  "function getInterestRateParameters() view returns (uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function getKeeperCostNodeId() view returns (bytes32 keeperCostNodeId)",
                  "function getKeeperRewardGuards() view returns (uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function getMarkets() view returns (uint256[] marketIds)",
                  "function getPerAccountCaps() view returns (uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function getReferrerShare(address referrer) view returns (uint256 shareRatioD18)",
                  "function getSupportedCollaterals() view returns (uint256[] supportedCollaterals)",
                  "function globalCollateralValue(uint128 collateralId) view returns (uint256 collateralValue)",
                  "function setFeeCollector(address feeCollector)",
                  "function setInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function setKeeperRewardGuards(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function setPerAccountCaps(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function totalGlobalCollateralValue() view returns (uint256 totalCollateralValue)",
                  "function updateInterestRate()",
                  "function updateKeeperCostNodeId(bytes32 keeperCostNodeId)",
                  "function updateReferrerShare(address referrer, uint256 shareRatioD18)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x8aadf6ccf578a3c845cebc78c330a407073abd6fa2afbafddf9da20b9c803d70",
                "deployTxnBlockNumber": "17158741",
                "deployTimestamp": "1730085770",
                "sourceName": "contracts/modules/GlobalPerpsMarketModule.sol",
                "contractName": "GlobalPerpsMarketModule",
                "deployedOn": "contract.GlobalPerpsMarketModule",
                "gasUsed": 1867756,
                "gasCost": "1000268"
              },
              "LiquidationModule": {
                "address": "0x22B0f4FE715EC3DDDED6Cd27B2aE095519383718",
                "abi": [
                  "error AccountHasOpenPositions(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidDistributor(uint128 id, address distributor)",
                  "error InvalidId(uint128 id)",
                  "error NotEligibleForLiquidation(uint128 accountId)",
                  "error NotEligibleForMarginLiquidation(uint128 accountId)",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PositionOutOfBounds()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event AccountFlaggedForLiquidation(uint128 indexed accountId, int256 availableMargin, uint256 requiredMaintenanceMargin, uint256 liquidationReward, uint256 flagReward)",
                  "event AccountLiquidationAttempt(uint128 indexed accountId, uint256 reward, bool fullLiquidation)",
                  "event AccountMarginLiquidation(uint128 indexed accountId, uint256 seizedMarginValue, uint256 liquidationReward)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 amountLiquidated, int128 currentPositionSize)",
                  "function canLiquidate(uint128 accountId) view returns (bool isEligible)",
                  "function canLiquidateMarginOnly(uint128 accountId) view returns (bool isEligible)",
                  "function flaggedAccounts() view returns (uint256[] accountIds)",
                  "function liquidate(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidateFlagged(uint256 maxNumberOfAccounts) returns (uint256 liquidationReward)",
                  "function liquidateFlaggedAccounts(uint128[] accountIds) returns (uint256 liquidationReward)",
                  "function liquidateMarginOnly(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidationCapacity(uint128 marketId) view returns (uint256 capacity, uint256 maxLiquidationInWindow, uint256 latestLiquidationTimestamp)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x526bb890610f4db462ad3edc06ab8cdd60ba5c8a0a962aad776798e1fea0bfdb",
                "deployTxnBlockNumber": "17158743",
                "deployTimestamp": "1730085774",
                "sourceName": "contracts/modules/LiquidationModule.sol",
                "contractName": "LiquidationModule",
                "deployedOn": "contract.LiquidationModule",
                "gasUsed": 4065636,
                "gasCost": "1000268"
              },
              "MarketConfigurationModule": {
                "address": "0xBBBe91f92fdcF60CaEB7531cdEf12841E7fD9862",
                "abi": [
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "error Unauthorized(address addr)",
                  "event FundingParametersSet(uint128 indexed marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "event LiquidationParametersSet(uint128 indexed marketId, uint256 initialMarginRatioD18, uint256 maintenanceMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "event LockedOiRatioSet(uint128 indexed marketId, uint256 lockedOiRatioD18)",
                  "event MarketPriceDataUpdated(uint128 indexed marketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "event MaxLiquidationParametersSet(uint128 indexed marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "event MaxMarketSizeSet(uint128 indexed marketId, uint256 maxMarketSize)",
                  "event MaxMarketValueSet(uint128 indexed marketId, uint256 maxMarketValue)",
                  "event OrderFeesSet(uint128 indexed marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "event SettlementStrategyAdded(uint128 indexed marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed marketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy) returns (uint256 strategyId)",
                  "function getFundingParameters(uint128 marketId) view returns (uint256 skewScale, uint256 maxFundingVelocity)",
                  "function getLiquidationParameters(uint128 marketId) view returns (uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function getLockedOiRatio(uint128 marketId) view returns (uint256)",
                  "function getMaxLiquidationParameters(uint128 marketId) view returns (uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function getMaxMarketSize(uint128 marketId) view returns (uint256 maxMarketSize)",
                  "function getMaxMarketValue(uint128 marketId) view returns (uint256 maxMarketValue)",
                  "function getOrderFees(uint128 marketId) view returns (uint256 makerFee, uint256 takerFee)",
                  "function getPriceData(uint128 perpsMarketId) view returns (bytes32 feedId, uint256 strictStalenessTolerance)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) settlementStrategy)",
                  "function setFundingParameters(uint128 marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "function setLiquidationParameters(uint128 marketId, uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function setLockedOiRatio(uint128 marketId, uint256 lockedOiRatioD18)",
                  "function setMaxLiquidationParameters(uint128 marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function setMaxMarketSize(uint128 marketId, uint256 maxMarketSize)",
                  "function setMaxMarketValue(uint128 marketId, uint256 maxMarketValue)",
                  "function setOrderFees(uint128 marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "function updatePriceData(uint128 perpsMarketId, bytes32 feedId, uint256 strictStalenessTolerance)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x3151d6223dc19a9677abb281149a7fd751f4c9936e973997cc681372feecbd08",
                "deployTxnBlockNumber": "17158746",
                "deployTimestamp": "1730085780",
                "sourceName": "contracts/modules/MarketConfigurationModule.sol",
                "contractName": "MarketConfigurationModule",
                "deployedOn": "contract.MarketConfigurationModule",
                "gasUsed": 1064187,
                "gasCost": "1000268"
              },
              "PerpsAccountModule": {
                "address": "0x4679ca29595052c1D9C62bb85417C0924e68D02f",
                "abi": [
                  "error AccountLiquidatable(uint128 accountId)",
                  "error AccountNotFound(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InsufficientCollateralAvailableForWithdraw(int256 withdrawableMarginUsd, uint256 requestedMarginUsd)",
                  "error InsufficientSynthCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InvalidAmountDelta(int256 amountDelta)",
                  "error InvalidDistributor(uint128 collateralId)",
                  "error InvalidId(uint128 id)",
                  "error InvalidMarket(uint128 marketId)",
                  "error KeeperCostsNotSet()",
                  "error MaxCollateralExceeded(uint128 collateralId, uint256 maxAmount, uint256 collateralAmount, uint256 depositAmount)",
                  "error MaxCollateralsPerAccountReached(uint128 maxCollateralsPerAccount)",
                  "error NonexistentDebt(uint128 accountId)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PendingOrderExists()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error SynthNotEnabledForCollateral(uint128 collateralId)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CollateralModified(uint128 indexed accountId, uint128 indexed collateralId, int256 amountDelta, address indexed sender)",
                  "event DebtPaid(uint128 indexed accountId, uint256 amount, address indexed sender)",
                  "event InterestRateUpdated(uint128 indexed superMarketId, uint128 interestRate)",
                  "function debt(uint128 accountId) view returns (uint256 accountDebt)",
                  "function getAccountCollateralIds(uint128 accountId) view returns (uint256[])",
                  "function getAccountOpenPositions(uint128 accountId) view returns (uint256[])",
                  "function getAvailableMargin(uint128 accountId) view returns (int256 availableMargin)",
                  "function getCollateralAmount(uint128 accountId, uint128 collateralId) view returns (uint256)",
                  "function getOpenPosition(uint128 accountId, uint128 marketId) view returns (int256 totalPnl, int256 accruedFunding, int128 positionSize, uint256 owedInterest)",
                  "function getOpenPositionSize(uint128 accountId, uint128 marketId) view returns (int128 positionSize)",
                  "function getRequiredMargins(uint128 accountId) view returns (uint256 requiredInitialMargin, uint256 requiredMaintenanceMargin, uint256 maxLiquidationReward)",
                  "function getWithdrawableMargin(uint128 accountId) view returns (int256 withdrawableMargin)",
                  "function modifyCollateral(uint128 accountId, uint128 collateralId, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint256 amount)",
                  "function totalAccountOpenInterest(uint128 accountId) view returns (uint256)",
                  "function totalCollateralValue(uint128 accountId) view returns (uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x4e08b8850a1ef6d270f0f1122f5382d387f9865150a106239db4cd6d34a61269",
                "deployTxnBlockNumber": "17158765",
                "deployTimestamp": "1730085818",
                "sourceName": "contracts/modules/PerpsAccountModule.sol",
                "contractName": "PerpsAccountModule",
                "deployedOn": "contract.PerpsAccountModule",
                "gasUsed": 3677383,
                "gasCost": "1000252"
              },
              "PerpsMarketFactoryModule": {
                "address": "0x53DbEe32E9c2640B30dEf487767b3F156FaFBFd8",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PerpsMarketAlreadyInitialized()",
                  "error PerpsMarketNotInitialized()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event FactoryInitialized(uint128 globalPerpsMarketId)",
                  "event MarketCreated(uint128 indexed perpsMarketId, string marketName, string marketSymbol)",
                  "function createMarket(uint128 requestedMarketId, string marketName, string marketSymbol) returns (uint128)",
                  "function initializeFactory(address synthetix, address spotMarket) returns (uint128)",
                  "function interestRate() view returns (uint128)",
                  "function minimumCredit(uint128 perpsMarketId) view returns (uint256)",
                  "function name(uint128 perpsMarketId) view returns (string)",
                  "function reportedDebt(uint128 perpsMarketId) view returns (uint256)",
                  "function setPerpsMarketName(string marketName)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function utilizationRate() view returns (uint256 rate, uint256 delegatedCollateral, uint256 lockedCredit)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x20e4495d9c90f3e437d368114bcc708790e3af8eca7fe6ba0242d8aed51797b6",
                "deployTxnBlockNumber": "17158770",
                "deployTimestamp": "1730085828",
                "sourceName": "contracts/modules/PerpsMarketFactoryModule.sol",
                "contractName": "PerpsMarketFactoryModule",
                "deployedOn": "contract.PerpsMarketFactoryModule",
                "gasUsed": 2055633,
                "gasCost": "1000255"
              },
              "PerpsMarketModule": {
                "address": "0xA6937201c6Bf73B7BdDd6e4241720e00Fb61C4bA",
                "abi": [
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "function currentFundingRate(uint128 marketId) view returns (int256)",
                  "function currentFundingVelocity(uint128 marketId) view returns (int256)",
                  "function fillPrice(uint128 marketId, int128 orderSize, uint256 price) view returns (uint256)",
                  "function getMarketSummary(uint128 marketId) view returns (tuple(int256 skew, uint256 size, uint256 maxOpenInterest, int256 currentFundingRate, int256 currentFundingVelocity, uint256 indexPrice) summary)",
                  "function indexPrice(uint128 marketId) view returns (uint256)",
                  "function maxOpenInterest(uint128 marketId) view returns (uint256)",
                  "function metadata(uint128 marketId) view returns (string name, string symbol)",
                  "function size(uint128 marketId) view returns (uint256)",
                  "function skew(uint128 marketId) view returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x6316259346be2585c099b7e60f62655533868bae76f6565671bba20bb07c8ec0",
                "deployTxnBlockNumber": "17158773",
                "deployTimestamp": "1730085834",
                "sourceName": "contracts/modules/PerpsMarketModule.sol",
                "contractName": "PerpsMarketModule",
                "deployedOn": "contract.PerpsMarketModule",
                "gasUsed": 896870,
                "gasCost": "1000255"
              },
              "InitialProxy": {
                "address": "0xf53Ca60F031FAf0E347D44FbaA4870da68250c8d",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x0c487767e6e0d598f48fc43150D2159aA84EA66e",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xacc55dc29a418859922f447c8db1bdd72d181a91ce0fafb33d6d1a6a01ebbf08",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 248149,
                "gasCost": "1000326"
              },
              "PerpsMarketRouter": {
                "address": "0xaf77b0f116c31985ab22632bc0e5e2d70086cec2",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PerpsMarketAlreadyInitialized()",
                  "error PerpsMarketNotInitialized()",
                  "event FactoryInitialized(uint128 globalPerpsMarketId)",
                  "event MarketCreated(uint128 indexed perpsMarketId, string marketName, string marketSymbol)",
                  "function createMarket(uint128 requestedMarketId, string marketName, string marketSymbol) returns (uint128)",
                  "function initializeFactory(address synthetix, address spotMarket) returns (uint128)",
                  "function interestRate() view returns (uint128)",
                  "function minimumCredit(uint128 perpsMarketId) view returns (uint256)",
                  "function name(uint128 perpsMarketId) view returns (string)",
                  "function reportedDebt(uint128 perpsMarketId) view returns (uint256)",
                  "function setPerpsMarketName(string marketName)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function utilizationRate() view returns (uint256 rate, uint256 delegatedCollateral, uint256 lockedCredit)",
                  "error AccountLiquidatable(uint128 accountId)",
                  "error AccountNotFound(uint128 accountId)",
                  "error InsufficientCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InsufficientCollateralAvailableForWithdraw(int256 withdrawableMarginUsd, uint256 requestedMarginUsd)",
                  "error InsufficientSynthCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InvalidAmountDelta(int256 amountDelta)",
                  "error InvalidDistributor(uint128 collateralId)",
                  "error InvalidId(uint128 id)",
                  "error KeeperCostsNotSet()",
                  "error MaxCollateralExceeded(uint128 collateralId, uint256 maxAmount, uint256 collateralAmount, uint256 depositAmount)",
                  "error MaxCollateralsPerAccountReached(uint128 maxCollateralsPerAccount)",
                  "error NonexistentDebt(uint128 accountId)",
                  "error OverflowUint128ToInt128()",
                  "error PendingOrderExists()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error SynthNotEnabledForCollateral(uint128 collateralId)",
                  "event CollateralModified(uint128 indexed accountId, uint128 indexed collateralId, int256 amountDelta, address indexed sender)",
                  "event DebtPaid(uint128 indexed accountId, uint256 amount, address indexed sender)",
                  "event InterestRateUpdated(uint128 indexed superMarketId, uint128 interestRate)",
                  "function debt(uint128 accountId) view returns (uint256 accountDebt)",
                  "function getAccountCollateralIds(uint128 accountId) view returns (uint256[])",
                  "function getAccountOpenPositions(uint128 accountId) view returns (uint256[])",
                  "function getAvailableMargin(uint128 accountId) view returns (int256 availableMargin)",
                  "function getCollateralAmount(uint128 accountId, uint128 collateralId) view returns (uint256)",
                  "function getOpenPosition(uint128 accountId, uint128 marketId) view returns (int256 totalPnl, int256 accruedFunding, int128 positionSize, uint256 owedInterest)",
                  "function getOpenPositionSize(uint128 accountId, uint128 marketId) view returns (int128 positionSize)",
                  "function getRequiredMargins(uint128 accountId) view returns (uint256 requiredInitialMargin, uint256 requiredMaintenanceMargin, uint256 maxLiquidationReward)",
                  "function getWithdrawableMargin(uint128 accountId) view returns (int256 withdrawableMargin)",
                  "function modifyCollateral(uint128 accountId, uint128 collateralId, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint256 amount)",
                  "function totalAccountOpenInterest(uint128 accountId) view returns (uint256)",
                  "function totalCollateralValue(uint128 accountId) view returns (uint256)",
                  "function currentFundingRate(uint128 marketId) view returns (int256)",
                  "function currentFundingVelocity(uint128 marketId) view returns (int256)",
                  "function fillPrice(uint128 marketId, int128 orderSize, uint256 price) view returns (uint256)",
                  "function getMarketSummary(uint128 marketId) view returns (tuple(int256 skew, uint256 size, uint256 maxOpenInterest, int256 currentFundingRate, int256 currentFundingVelocity, uint256 indexPrice) summary)",
                  "function indexPrice(uint128 marketId) view returns (uint256)",
                  "function maxOpenInterest(uint128 marketId) view returns (uint256)",
                  "function metadata(uint128 marketId) view returns (string name, string symbol)",
                  "function size(uint128 marketId) view returns (uint256)",
                  "function skew(uint128 marketId) view returns (int256)",
                  "error ExceedsMarketCreditCapacity(int256 delegatedCollateral, int256 newLockedCredit)",
                  "error InsufficientMargin(int256 availableMargin, uint256 minMargin)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error MaxOpenInterestReached(uint128 marketId, uint256 maxMarketSize, int256 newSideSize)",
                  "error MaxPositionsPerAccountReached(uint128 maxPositionsPerAccount)",
                  "error MaxUSDOpenInterestReached(uint128 marketId, uint256 maxMarketValue, int256 newSideSize, uint256 price)",
                  "error OverflowInt256ToInt128()",
                  "error ZeroSizeOrder()",
                  "event OrderCommitted(uint128 indexed marketId, uint128 indexed accountId, uint8 orderType, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, uint256 expectedPriceTime, uint256 settlementTime, uint256 expirationTime, bytes32 indexed trackingCode, address sender)",
                  "event PreviousOrderExpired(uint128 indexed marketId, uint128 indexed accountId, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, bytes32 indexed trackingCode)",
                  "function commitOrder(tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) commitment) returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) retOrder, uint256 fees)",
                  "function computeOrderFees(uint128 marketId, int128 sizeDelta) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function computeOrderFeesWithPrice(uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function getOrder(uint128 accountId) view returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) order)",
                  "function getSettlementRewardCost(uint128 marketId, uint128 settlementStrategyId) view returns (uint256)",
                  "function requiredMarginForOrder(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 requiredMargin)",
                  "function requiredMarginForOrderWithPrice(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 requiredMargin)",
                  "error AcceptablePriceExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "error OrderNotValid()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error SettlementWindowExpired(uint256 timestamp, uint256 settlementTime, uint256 settlementExpiration)",
                  "error SettlementWindowNotOpen(uint256 timestamp, uint256 settlementTime)",
                  "event AccountCharged(uint128 accountId, int256 amount, uint256 accountDebt)",
                  "event InterestCharged(uint128 indexed accountId, uint256 interest)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed accountId, uint256 fillPrice, int256 pnl, int256 accruedFunding, int128 sizeDelta, int128 newSize, uint256 totalFees, uint256 referralFees, uint256 collectedFees, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function settleOrder(uint128 accountId)",
                  "error AcceptablePriceNotExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed accountId, uint256 desiredPrice, uint256 fillPrice, int128 sizeDelta, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function cancelOrder(uint128 accountId)",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error AccountHasOpenPositions(uint128 accountId)",
                  "error InvalidDistributor(uint128 id, address distributor)",
                  "error NotEligibleForLiquidation(uint128 accountId)",
                  "error NotEligibleForMarginLiquidation(uint128 accountId)",
                  "event AccountFlaggedForLiquidation(uint128 indexed accountId, int256 availableMargin, uint256 requiredMaintenanceMargin, uint256 liquidationReward, uint256 flagReward)",
                  "event AccountLiquidationAttempt(uint128 indexed accountId, uint256 reward, bool fullLiquidation)",
                  "event AccountMarginLiquidation(uint128 indexed accountId, uint256 seizedMarginValue, uint256 liquidationReward)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 amountLiquidated, int128 currentPositionSize)",
                  "function canLiquidate(uint128 accountId) view returns (bool isEligible)",
                  "function canLiquidateMarginOnly(uint128 accountId) view returns (bool isEligible)",
                  "function flaggedAccounts() view returns (uint256[] accountIds)",
                  "function liquidate(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidateFlagged(uint256 maxNumberOfAccounts) returns (uint256 liquidationReward)",
                  "function liquidateFlaggedAccounts(uint128[] accountIds) returns (uint256 liquidationReward)",
                  "function liquidateMarginOnly(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidationCapacity(uint128 marketId) view returns (uint256 capacity, uint256 maxLiquidationInWindow, uint256 latestLiquidationTimestamp)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "event FundingParametersSet(uint128 indexed marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "event LiquidationParametersSet(uint128 indexed marketId, uint256 initialMarginRatioD18, uint256 maintenanceMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "event LockedOiRatioSet(uint128 indexed marketId, uint256 lockedOiRatioD18)",
                  "event MarketPriceDataUpdated(uint128 indexed marketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "event MaxLiquidationParametersSet(uint128 indexed marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "event MaxMarketSizeSet(uint128 indexed marketId, uint256 maxMarketSize)",
                  "event MaxMarketValueSet(uint128 indexed marketId, uint256 maxMarketValue)",
                  "event OrderFeesSet(uint128 indexed marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "event SettlementStrategyAdded(uint128 indexed marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed marketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy) returns (uint256 strategyId)",
                  "function getFundingParameters(uint128 marketId) view returns (uint256 skewScale, uint256 maxFundingVelocity)",
                  "function getLiquidationParameters(uint128 marketId) view returns (uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function getLockedOiRatio(uint128 marketId) view returns (uint256)",
                  "function getMaxLiquidationParameters(uint128 marketId) view returns (uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function getMaxMarketSize(uint128 marketId) view returns (uint256 maxMarketSize)",
                  "function getMaxMarketValue(uint128 marketId) view returns (uint256 maxMarketValue)",
                  "function getOrderFees(uint128 marketId) view returns (uint256 makerFee, uint256 takerFee)",
                  "function getPriceData(uint128 perpsMarketId) view returns (bytes32 feedId, uint256 strictStalenessTolerance)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) settlementStrategy)",
                  "function setFundingParameters(uint128 marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "function setLiquidationParameters(uint128 marketId, uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function setLockedOiRatio(uint128 marketId, uint256 lockedOiRatioD18)",
                  "function setMaxLiquidationParameters(uint128 marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function setMaxMarketSize(uint128 marketId, uint256 maxMarketSize)",
                  "function setMaxMarketValue(uint128 marketId, uint256 maxMarketValue)",
                  "function setOrderFees(uint128 marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "function updatePriceData(uint128 perpsMarketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "error InvalidDistributorContract(address distributor)",
                  "event CollateralConfigurationSet(uint128 indexed collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "event CollateralLiquidateRewardRatioSet(uint128 collateralLiquidateRewardRatioD18)",
                  "event RewardDistributorRegistered(address distributor)",
                  "function getCollateralConfiguration(uint128 collateralId) view returns (uint256 maxCollateralAmount)",
                  "function getCollateralConfigurationFull(uint128 collateralId) view returns (uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function getCollateralLiquidateRewardRatio() view returns (uint128 collateralLiquidateRewardRatioD18)",
                  "function getRegisteredDistributor(uint128 collateralId) view returns (address distributor, address[] poolDelegatedCollateralTypes)",
                  "function isRegistered(address distributor) view returns (bool)",
                  "function registerDistributor(address token, address distributor, uint128 collateralId, address[] poolDelegatedCollateralTypes)",
                  "function setCollateralConfiguration(uint128 collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function setCollateralLiquidateRewardRatio(uint128 collateralLiquidateRewardRatioD18)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 highUtilizationInterestRateGradient)",
                  "error InvalidReferrerShareRatio(uint256 shareRatioD18)",
                  "event FeeCollectorSet(address feeCollector)",
                  "event InterestRateParametersSet(uint256 lowUtilizationInterestRateGradient, uint256 interestRateGradientBreakpoint, uint256 highUtilizationInterestRateGradient)",
                  "event KeeperCostNodeIdUpdated(bytes32 keeperCostNodeId)",
                  "event KeeperRewardGuardsSet(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "event PerAccountCapsSet(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "event ReferrerShareUpdated(address referrer, uint256 shareRatioD18)",
                  "function getFeeCollector() view returns (address feeCollector)",
                  "function getInterestRateParameters() view returns (uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function getKeeperCostNodeId() view returns (bytes32 keeperCostNodeId)",
                  "function getKeeperRewardGuards() view returns (uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function getMarkets() view returns (uint256[] marketIds)",
                  "function getPerAccountCaps() view returns (uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function getReferrerShare(address referrer) view returns (uint256 shareRatioD18)",
                  "function getSupportedCollaterals() view returns (uint256[] supportedCollaterals)",
                  "function globalCollateralValue(uint128 collateralId) view returns (uint256 collateralValue)",
                  "function setFeeCollector(address feeCollector)",
                  "function setInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function setKeeperRewardGuards(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function setPerAccountCaps(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function totalGlobalCollateralValue() view returns (uint256 totalCollateralValue)",
                  "function updateInterestRate()",
                  "function updateKeeperCostNodeId(bytes32 keeperCostNodeId)",
                  "function updateReferrerShare(address referrer, uint256 shareRatioD18)"
                ],
                "deployedOn": "router.PerpsMarketRouter",
                "deployTxnHash": "0xe4afbf4fd096c6a36d3bdecc8d6c6eadb3db5f93f0c1c07500d4f66b076d295a",
                "deployTxnBlockNumber": "17158777",
                "deployTimestamp": "1730085842",
                "contractName": "PerpsMarketRouter",
                "sourceName": "PerpsMarketRouter.sol",
                "gasUsed": 1267725,
                "gasCost": "1000255"
              },
              "PerpsMarketProxy": {
                "address": "0xf53Ca60F031FAf0E347D44FbaA4870da68250c8d",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PerpsMarketAlreadyInitialized()",
                  "error PerpsMarketNotInitialized()",
                  "event FactoryInitialized(uint128 globalPerpsMarketId)",
                  "event MarketCreated(uint128 indexed perpsMarketId, string marketName, string marketSymbol)",
                  "function createMarket(uint128 requestedMarketId, string marketName, string marketSymbol) returns (uint128)",
                  "function initializeFactory(address synthetix, address spotMarket) returns (uint128)",
                  "function interestRate() view returns (uint128)",
                  "function minimumCredit(uint128 perpsMarketId) view returns (uint256)",
                  "function name(uint128 perpsMarketId) view returns (string)",
                  "function reportedDebt(uint128 perpsMarketId) view returns (uint256)",
                  "function setPerpsMarketName(string marketName)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function utilizationRate() view returns (uint256 rate, uint256 delegatedCollateral, uint256 lockedCredit)",
                  "error AccountLiquidatable(uint128 accountId)",
                  "error AccountNotFound(uint128 accountId)",
                  "error InsufficientCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InsufficientCollateralAvailableForWithdraw(int256 withdrawableMarginUsd, uint256 requestedMarginUsd)",
                  "error InsufficientSynthCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InvalidAmountDelta(int256 amountDelta)",
                  "error InvalidDistributor(uint128 collateralId)",
                  "error InvalidId(uint128 id)",
                  "error KeeperCostsNotSet()",
                  "error MaxCollateralExceeded(uint128 collateralId, uint256 maxAmount, uint256 collateralAmount, uint256 depositAmount)",
                  "error MaxCollateralsPerAccountReached(uint128 maxCollateralsPerAccount)",
                  "error NonexistentDebt(uint128 accountId)",
                  "error OverflowUint128ToInt128()",
                  "error PendingOrderExists()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error SynthNotEnabledForCollateral(uint128 collateralId)",
                  "event CollateralModified(uint128 indexed accountId, uint128 indexed collateralId, int256 amountDelta, address indexed sender)",
                  "event DebtPaid(uint128 indexed accountId, uint256 amount, address indexed sender)",
                  "event InterestRateUpdated(uint128 indexed superMarketId, uint128 interestRate)",
                  "function debt(uint128 accountId) view returns (uint256 accountDebt)",
                  "function getAccountCollateralIds(uint128 accountId) view returns (uint256[])",
                  "function getAccountOpenPositions(uint128 accountId) view returns (uint256[])",
                  "function getAvailableMargin(uint128 accountId) view returns (int256 availableMargin)",
                  "function getCollateralAmount(uint128 accountId, uint128 collateralId) view returns (uint256)",
                  "function getOpenPosition(uint128 accountId, uint128 marketId) view returns (int256 totalPnl, int256 accruedFunding, int128 positionSize, uint256 owedInterest)",
                  "function getOpenPositionSize(uint128 accountId, uint128 marketId) view returns (int128 positionSize)",
                  "function getRequiredMargins(uint128 accountId) view returns (uint256 requiredInitialMargin, uint256 requiredMaintenanceMargin, uint256 maxLiquidationReward)",
                  "function getWithdrawableMargin(uint128 accountId) view returns (int256 withdrawableMargin)",
                  "function modifyCollateral(uint128 accountId, uint128 collateralId, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint256 amount)",
                  "function totalAccountOpenInterest(uint128 accountId) view returns (uint256)",
                  "function totalCollateralValue(uint128 accountId) view returns (uint256)",
                  "function currentFundingRate(uint128 marketId) view returns (int256)",
                  "function currentFundingVelocity(uint128 marketId) view returns (int256)",
                  "function fillPrice(uint128 marketId, int128 orderSize, uint256 price) view returns (uint256)",
                  "function getMarketSummary(uint128 marketId) view returns (tuple(int256 skew, uint256 size, uint256 maxOpenInterest, int256 currentFundingRate, int256 currentFundingVelocity, uint256 indexPrice) summary)",
                  "function indexPrice(uint128 marketId) view returns (uint256)",
                  "function maxOpenInterest(uint128 marketId) view returns (uint256)",
                  "function metadata(uint128 marketId) view returns (string name, string symbol)",
                  "function size(uint128 marketId) view returns (uint256)",
                  "function skew(uint128 marketId) view returns (int256)",
                  "error ExceedsMarketCreditCapacity(int256 delegatedCollateral, int256 newLockedCredit)",
                  "error InsufficientMargin(int256 availableMargin, uint256 minMargin)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error MaxOpenInterestReached(uint128 marketId, uint256 maxMarketSize, int256 newSideSize)",
                  "error MaxPositionsPerAccountReached(uint128 maxPositionsPerAccount)",
                  "error MaxUSDOpenInterestReached(uint128 marketId, uint256 maxMarketValue, int256 newSideSize, uint256 price)",
                  "error OverflowInt256ToInt128()",
                  "error ZeroSizeOrder()",
                  "event OrderCommitted(uint128 indexed marketId, uint128 indexed accountId, uint8 orderType, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, uint256 expectedPriceTime, uint256 settlementTime, uint256 expirationTime, bytes32 indexed trackingCode, address sender)",
                  "event PreviousOrderExpired(uint128 indexed marketId, uint128 indexed accountId, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, bytes32 indexed trackingCode)",
                  "function commitOrder(tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) commitment) returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) retOrder, uint256 fees)",
                  "function computeOrderFees(uint128 marketId, int128 sizeDelta) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function computeOrderFeesWithPrice(uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function getOrder(uint128 accountId) view returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) order)",
                  "function getSettlementRewardCost(uint128 marketId, uint128 settlementStrategyId) view returns (uint256)",
                  "function requiredMarginForOrder(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 requiredMargin)",
                  "function requiredMarginForOrderWithPrice(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 requiredMargin)",
                  "error AcceptablePriceExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "error OrderNotValid()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error SettlementWindowExpired(uint256 timestamp, uint256 settlementTime, uint256 settlementExpiration)",
                  "error SettlementWindowNotOpen(uint256 timestamp, uint256 settlementTime)",
                  "event AccountCharged(uint128 accountId, int256 amount, uint256 accountDebt)",
                  "event InterestCharged(uint128 indexed accountId, uint256 interest)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed accountId, uint256 fillPrice, int256 pnl, int256 accruedFunding, int128 sizeDelta, int128 newSize, uint256 totalFees, uint256 referralFees, uint256 collectedFees, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function settleOrder(uint128 accountId)",
                  "error AcceptablePriceNotExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed accountId, uint256 desiredPrice, uint256 fillPrice, int128 sizeDelta, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function cancelOrder(uint128 accountId)",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error AccountHasOpenPositions(uint128 accountId)",
                  "error InvalidDistributor(uint128 id, address distributor)",
                  "error NotEligibleForLiquidation(uint128 accountId)",
                  "error NotEligibleForMarginLiquidation(uint128 accountId)",
                  "event AccountFlaggedForLiquidation(uint128 indexed accountId, int256 availableMargin, uint256 requiredMaintenanceMargin, uint256 liquidationReward, uint256 flagReward)",
                  "event AccountLiquidationAttempt(uint128 indexed accountId, uint256 reward, bool fullLiquidation)",
                  "event AccountMarginLiquidation(uint128 indexed accountId, uint256 seizedMarginValue, uint256 liquidationReward)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 amountLiquidated, int128 currentPositionSize)",
                  "function canLiquidate(uint128 accountId) view returns (bool isEligible)",
                  "function canLiquidateMarginOnly(uint128 accountId) view returns (bool isEligible)",
                  "function flaggedAccounts() view returns (uint256[] accountIds)",
                  "function liquidate(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidateFlagged(uint256 maxNumberOfAccounts) returns (uint256 liquidationReward)",
                  "function liquidateFlaggedAccounts(uint128[] accountIds) returns (uint256 liquidationReward)",
                  "function liquidateMarginOnly(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidationCapacity(uint128 marketId) view returns (uint256 capacity, uint256 maxLiquidationInWindow, uint256 latestLiquidationTimestamp)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "event FundingParametersSet(uint128 indexed marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "event LiquidationParametersSet(uint128 indexed marketId, uint256 initialMarginRatioD18, uint256 maintenanceMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "event LockedOiRatioSet(uint128 indexed marketId, uint256 lockedOiRatioD18)",
                  "event MarketPriceDataUpdated(uint128 indexed marketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "event MaxLiquidationParametersSet(uint128 indexed marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "event MaxMarketSizeSet(uint128 indexed marketId, uint256 maxMarketSize)",
                  "event MaxMarketValueSet(uint128 indexed marketId, uint256 maxMarketValue)",
                  "event OrderFeesSet(uint128 indexed marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "event SettlementStrategyAdded(uint128 indexed marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed marketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy) returns (uint256 strategyId)",
                  "function getFundingParameters(uint128 marketId) view returns (uint256 skewScale, uint256 maxFundingVelocity)",
                  "function getLiquidationParameters(uint128 marketId) view returns (uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function getLockedOiRatio(uint128 marketId) view returns (uint256)",
                  "function getMaxLiquidationParameters(uint128 marketId) view returns (uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function getMaxMarketSize(uint128 marketId) view returns (uint256 maxMarketSize)",
                  "function getMaxMarketValue(uint128 marketId) view returns (uint256 maxMarketValue)",
                  "function getOrderFees(uint128 marketId) view returns (uint256 makerFee, uint256 takerFee)",
                  "function getPriceData(uint128 perpsMarketId) view returns (bytes32 feedId, uint256 strictStalenessTolerance)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) settlementStrategy)",
                  "function setFundingParameters(uint128 marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "function setLiquidationParameters(uint128 marketId, uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function setLockedOiRatio(uint128 marketId, uint256 lockedOiRatioD18)",
                  "function setMaxLiquidationParameters(uint128 marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function setMaxMarketSize(uint128 marketId, uint256 maxMarketSize)",
                  "function setMaxMarketValue(uint128 marketId, uint256 maxMarketValue)",
                  "function setOrderFees(uint128 marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "function updatePriceData(uint128 perpsMarketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "error InvalidDistributorContract(address distributor)",
                  "event CollateralConfigurationSet(uint128 indexed collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "event CollateralLiquidateRewardRatioSet(uint128 collateralLiquidateRewardRatioD18)",
                  "event RewardDistributorRegistered(address distributor)",
                  "function getCollateralConfiguration(uint128 collateralId) view returns (uint256 maxCollateralAmount)",
                  "function getCollateralConfigurationFull(uint128 collateralId) view returns (uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function getCollateralLiquidateRewardRatio() view returns (uint128 collateralLiquidateRewardRatioD18)",
                  "function getRegisteredDistributor(uint128 collateralId) view returns (address distributor, address[] poolDelegatedCollateralTypes)",
                  "function isRegistered(address distributor) view returns (bool)",
                  "function registerDistributor(address token, address distributor, uint128 collateralId, address[] poolDelegatedCollateralTypes)",
                  "function setCollateralConfiguration(uint128 collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function setCollateralLiquidateRewardRatio(uint128 collateralLiquidateRewardRatioD18)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 highUtilizationInterestRateGradient)",
                  "error InvalidReferrerShareRatio(uint256 shareRatioD18)",
                  "event FeeCollectorSet(address feeCollector)",
                  "event InterestRateParametersSet(uint256 lowUtilizationInterestRateGradient, uint256 interestRateGradientBreakpoint, uint256 highUtilizationInterestRateGradient)",
                  "event KeeperCostNodeIdUpdated(bytes32 keeperCostNodeId)",
                  "event KeeperRewardGuardsSet(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "event PerAccountCapsSet(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "event ReferrerShareUpdated(address referrer, uint256 shareRatioD18)",
                  "function getFeeCollector() view returns (address feeCollector)",
                  "function getInterestRateParameters() view returns (uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function getKeeperCostNodeId() view returns (bytes32 keeperCostNodeId)",
                  "function getKeeperRewardGuards() view returns (uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function getMarkets() view returns (uint256[] marketIds)",
                  "function getPerAccountCaps() view returns (uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function getReferrerShare(address referrer) view returns (uint256 shareRatioD18)",
                  "function getSupportedCollaterals() view returns (uint256[] supportedCollaterals)",
                  "function globalCollateralValue(uint128 collateralId) view returns (uint256 collateralValue)",
                  "function setFeeCollector(address feeCollector)",
                  "function setInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function setKeeperRewardGuards(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function setPerAccountCaps(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function totalGlobalCollateralValue() view returns (uint256 totalCollateralValue)",
                  "function updateInterestRate()",
                  "function updateKeeperCostNodeId(bytes32 keeperCostNodeId)",
                  "function updateReferrerShare(address referrer, uint256 shareRatioD18)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "PerpsAccountProxy": {
                "address": "0xc8eE218577545D5b38443C0eB5d7B9E4140085F2",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_account",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "settings": {
              "coreProxyOwner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "spotMarketPackage": "synthetix-spot-market:latest",
              "spotMarketPreset": "main",
              "synthetixPackage": "synthetix:latest",
              "synthetixPreset": "main"
            },
            "imports": {
              "spotMarket": {
                "url": "ipfs://QmR9p2GKEV4APcUBZYCsaKuvSN6SXQkvTy6WN4tc89fNaa",
                "contracts": {
                  "AsyncOrderConfigurationModule": {
                    "address": "0x8b4bf6A29d3390C28A0A521241122Fc4B06099bd",
                    "abi": [
                      "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                      "error InvalidSettlementWindowDuration(uint256 duration)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                      "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                      "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                      "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x92fbcb3ee357637cbbd1a4ab9cce98121e61a6e308bba93f0c42e47e9de487b5",
                    "deployTxnBlockNumber": "16649403",
                    "deployTimestamp": "1729067094",
                    "sourceName": "contracts/modules/AsyncOrderConfigurationModule.sol",
                    "contractName": "AsyncOrderConfigurationModule",
                    "deployedOn": "contract.AsyncOrderConfigurationModule",
                    "gasUsed": 896430,
                    "gasCost": "947973424"
                  },
                  "AsyncOrderModule": {
                    "address": "0x6b2B267Dd0bC45AFDe2143c29f7688c69fd1283e",
                    "abi": [
                      "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                      "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                      "error InvalidAsyncTransactionType(uint8 transactionType)",
                      "error InvalidClaim(uint256 asyncOrderId)",
                      "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                      "error InvalidMarket(uint128 marketId)",
                      "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                      "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                      "error OverflowInt256ToUint256()",
                      "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                      "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                      "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                      "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x693315980e8a68341fef8077340aa882a01fbaeb714c20e615935f6ec62cc66e",
                    "deployTxnBlockNumber": "16649405",
                    "deployTimestamp": "1729067098",
                    "sourceName": "contracts/modules/AsyncOrderModule.sol",
                    "contractName": "AsyncOrderModule",
                    "deployedOn": "contract.AsyncOrderModule",
                    "gasUsed": 1317242,
                    "gasCost": "949022906"
                  },
                  "AsyncOrderSettlementModule": {
                    "address": "0xc62f57336B2aF1129655A08c172Eb1748A08a7Ce",
                    "abi": [
                      "error InvalidClaim(uint256 asyncOrderId)",
                      "error InvalidSettlementStrategy(uint8 strategyType)",
                      "error InvalidVerificationResponse()",
                      "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                      "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                      "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint64()",
                      "error SettlementStrategyNotFound(uint8 strategyType)",
                      "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                      "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xffed0d260707d687b6a97124edb9b3e134a28dadac1c6d9c3165d572c03afc4c",
                    "deployTxnBlockNumber": "16649407",
                    "deployTimestamp": "1729067102",
                    "sourceName": "contracts/modules/AsyncOrderSettlementModule.sol",
                    "contractName": "AsyncOrderSettlementModule",
                    "deployedOn": "contract.AsyncOrderSettlementModule",
                    "gasUsed": 1963714,
                    "gasCost": "949054714"
                  },
                  "AtomicOrderModule": {
                    "address": "0x5807777F854cA7418dB57E9475dB4BE10073f0EA",
                    "abi": [
                      "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                      "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                      "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                      "error InvalidMarket(uint128 marketId)",
                      "error InvalidPrices()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                      "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x941bdf0a92cee462ad27cefa72bf024e975813211dd4fd824e28fe157a6f49a9",
                    "deployTxnBlockNumber": "16649409",
                    "deployTimestamp": "1729067106",
                    "sourceName": "contracts/modules/AtomicOrderModule.sol",
                    "contractName": "AtomicOrderModule",
                    "deployedOn": "contract.AtomicOrderModule",
                    "gasUsed": 2090754,
                    "gasCost": "950583162"
                  },
                  "CoreModule": {
                    "address": "0xC04a9239DC38A6AED425f5FF0fEc6Ac6266A27A7",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x80a640acf82e5583e3ff431f0704e7520b644d4e5ff5b962f7461c3e0d8d2de2",
                    "sourceName": "contracts/modules/CoreModule.sol",
                    "contractName": "CoreModule",
                    "deployedOn": "contract.CoreModule",
                    "gasUsed": 940287,
                    "gasCost": "1000316"
                  },
                  "FeatureFlagModule": {
                    "address": "0x6fb72afDeD3139Ae63e5b06BBabf402d9bFb1D89",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x65e12ab64e45a9a2464fa063a2df94de323812496596d35c1c03ca05c336786d",
                    "deployTxnBlockNumber": "16649411",
                    "deployTimestamp": "1729067110",
                    "sourceName": "contracts/modules/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 765166,
                    "gasCost": "954140088"
                  },
                  "MarketConfigurationModule": {
                    "address": "0x0773232F3C996723278177d6Bd6918F5a5F6aDCb",
                    "abi": [
                      "error InvalidCollateralLeverage(uint256)",
                      "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                      "error InvalidWrapperFees()",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                      "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                      "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                      "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                      "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                      "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                      "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                      "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                      "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                      "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                      "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                      "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                      "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                      "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                      "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                      "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                      "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                      "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                      "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                      "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                      "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x7eed3b8bef4ca685c8bf50ead5c83a4322ec5253687e5476f400c9b3ec83e856",
                    "deployTxnBlockNumber": "16649413",
                    "deployTimestamp": "1729067114",
                    "sourceName": "contracts/modules/MarketConfigurationModule.sol",
                    "contractName": "MarketConfigurationModule",
                    "deployedOn": "contract.MarketConfigurationModule",
                    "gasUsed": 720683,
                    "gasCost": "950191939"
                  },
                  "SpotMarketFactoryModule": {
                    "address": "0xdF262B2b9b7a08c38748F04Ecce7658Ad0620567",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidMarketOwner()",
                      "error InvalidSynthImplementation(uint256 synthImplementation)",
                      "error InvalidTransactionTypeIndex(uint128 txnType)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error NotNominated(address addr)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "error OverflowInt256ToUint256()",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                      "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                      "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                      "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                      "event SynthImplementationSet(address synthImplementation)",
                      "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                      "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                      "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                      "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                      "function acceptMarketOwnership(uint128 synthMarketId)",
                      "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function getSynth(uint128 marketId) view returns (address synthAddress)",
                      "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                      "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                      "function name(uint128 marketId) view returns (string marketName)",
                      "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "function renounceMarketNomination(uint128 synthMarketId)",
                      "function renounceMarketOwnership(uint128 synthMarketId)",
                      "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                      "function setDecayRate(uint128 marketId, uint256 rate)",
                      "function setSynthImplementation(address synthImplementation)",
                      "function setSynthetix(address synthetix)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                      "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function upgradeSynthImpl(uint128 marketId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x798365a74e71d5faf99af057b2c31f23be38523422352ede70151554c589f4e6",
                    "deployTxnBlockNumber": "16649416",
                    "deployTimestamp": "1729067120",
                    "sourceName": "contracts/modules/SpotMarketFactoryModule.sol",
                    "contractName": "SpotMarketFactoryModule",
                    "deployedOn": "contract.SpotMarketFactoryModule",
                    "gasUsed": 2327426,
                    "gasCost": "952365226"
                  },
                  "SynthTokenModule": {
                    "address": "0x06511E19F5299eFc2075aD67f786A606b114811E",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidDecayRate()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function advanceEpoch() returns (uint256)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address user) view returns (uint256)",
                      "function burn(address from, uint256 amount)",
                      "function decayRate() view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function setDecayRate(uint256 _rate)",
                      "function symbol() view returns (string)",
                      "function totalShares() view returns (uint256)",
                      "function totalSupply() view returns (uint256 supply)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x0b3938128ee6b4d587ee7554ff7e39b203b7ff14eedd04b92b0be442c723813a",
                    "deployTxnBlockNumber": "16649418",
                    "deployTimestamp": "1729067124",
                    "sourceName": "contracts/modules/token/SynthTokenModule.sol",
                    "contractName": "SynthTokenModule",
                    "deployedOn": "contract.SynthTokenModule",
                    "gasUsed": 1207447,
                    "gasCost": "951461249"
                  },
                  "WrapperModule": {
                    "address": "0xb2d84d5b0b8E6d5f2937A564f4cB7fb213BE51A2",
                    "abi": [
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                      "error InvalidCollateralType(address configuredCollateralType)",
                      "error InvalidMarket(uint128 marketId)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                      "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                      "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xea43330db33c49ed9c85af64203f2a42b3b9af2f7ab46ca2baf683c295a2fd62",
                    "deployTxnBlockNumber": "16649420",
                    "deployTimestamp": "1729067128",
                    "sourceName": "contracts/modules/WrapperModule.sol",
                    "contractName": "WrapperModule",
                    "deployedOn": "contract.WrapperModule",
                    "gasUsed": 1684906,
                    "gasCost": "952952392"
                  },
                  "InitialSpotMarketProxy": {
                    "address": "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0xC04a9239DC38A6AED425f5FF0fEc6Ac6266A27A7",
                      "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x0dabacb46c3b33b04c0709cfa33322c5f5af6898dcac1660c1cfcd8fd7276497",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialSpotMarketProxy",
                    "gasUsed": 248149,
                    "gasCost": "1000318"
                  },
                  "SpotMarketRouter": {
                    "address": "0x07463c0c2ba77a6b6a69170fb8c0e50cc5f588a4",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidMarketOwner()",
                      "error InvalidSynthImplementation(uint256 synthImplementation)",
                      "error InvalidTransactionTypeIndex(uint128 txnType)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "error OverflowInt256ToUint256()",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                      "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                      "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                      "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                      "event SynthImplementationSet(address synthImplementation)",
                      "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                      "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                      "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                      "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                      "function acceptMarketOwnership(uint128 synthMarketId)",
                      "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function getSynth(uint128 marketId) view returns (address synthAddress)",
                      "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                      "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                      "function name(uint128 marketId) view returns (string marketName)",
                      "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "function renounceMarketNomination(uint128 synthMarketId)",
                      "function renounceMarketOwnership(uint128 synthMarketId)",
                      "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                      "function setDecayRate(uint128 marketId, uint256 rate)",
                      "function setSynthImplementation(address synthImplementation)",
                      "function setSynthetix(address synthetix)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                      "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function upgradeSynthImpl(uint128 marketId)",
                      "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                      "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                      "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                      "error InvalidMarket(uint128 marketId)",
                      "error InvalidPrices()",
                      "error OverflowUint256ToInt256()",
                      "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                      "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                      "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                      "error InvalidAsyncTransactionType(uint8 transactionType)",
                      "error InvalidClaim(uint256 asyncOrderId)",
                      "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                      "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                      "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                      "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                      "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                      "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                      "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "error InvalidSettlementStrategy(uint8 strategyType)",
                      "error InvalidVerificationResponse()",
                      "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                      "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                      "error OverflowUint256ToUint64()",
                      "error SettlementStrategyNotFound(uint8 strategyType)",
                      "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                      "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error InvalidSettlementWindowDuration(uint256 duration)",
                      "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                      "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                      "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                      "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InvalidCollateralType(address configuredCollateralType)",
                      "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                      "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                      "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error InvalidCollateralLeverage(uint256)",
                      "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                      "error InvalidWrapperFees()",
                      "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                      "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                      "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                      "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                      "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                      "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                      "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                      "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                      "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                      "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                      "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                      "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                      "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                      "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                      "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                      "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                      "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                      "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                      "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                      "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                      "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "deployedOn": "router.SpotMarketRouter",
                    "deployTxnHash": "0xce42253cb002d071b3322781fbdfe72c88ed8d2457d9d415ddb7f7aa654346a0",
                    "deployTxnBlockNumber": "16649422",
                    "deployTimestamp": "1729067132",
                    "contractName": "SpotMarketRouter",
                    "sourceName": "SpotMarketRouter.sol",
                    "gasUsed": 879925,
                    "gasCost": "953679229"
                  },
                  "SynthRouter": {
                    "address": "0xcdfce502963a101d544e0b0c9641a53fd6cfdc80",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidDecayRate()",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function advanceEpoch() returns (uint256)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address user) view returns (uint256)",
                      "function burn(address from, uint256 amount)",
                      "function decayRate() view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function setDecayRate(uint256 _rate)",
                      "function symbol() view returns (string)",
                      "function totalShares() view returns (uint256)",
                      "function totalSupply() view returns (uint256 supply)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.SynthRouter",
                    "deployTxnHash": "0x1a842e8522d479fd05851136ab9e86540e57a8c8e8e9758c4b3eb5dd4fa4c006",
                    "deployTxnBlockNumber": "16649424",
                    "deployTimestamp": "1729067136",
                    "contractName": "SynthRouter",
                    "sourceName": "SynthRouter.sol",
                    "gasUsed": 381169,
                    "gasCost": "949559076"
                  },
                  "SpotMarketProxy": {
                    "address": "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidMarketOwner()",
                      "error InvalidSynthImplementation(uint256 synthImplementation)",
                      "error InvalidTransactionTypeIndex(uint128 txnType)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "error OverflowInt256ToUint256()",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                      "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                      "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                      "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                      "event SynthImplementationSet(address synthImplementation)",
                      "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                      "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                      "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                      "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                      "function acceptMarketOwnership(uint128 synthMarketId)",
                      "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function getSynth(uint128 marketId) view returns (address synthAddress)",
                      "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                      "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                      "function name(uint128 marketId) view returns (string marketName)",
                      "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "function renounceMarketNomination(uint128 synthMarketId)",
                      "function renounceMarketOwnership(uint128 synthMarketId)",
                      "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                      "function setDecayRate(uint128 marketId, uint256 rate)",
                      "function setSynthImplementation(address synthImplementation)",
                      "function setSynthetix(address synthetix)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                      "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function upgradeSynthImpl(uint128 marketId)",
                      "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                      "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                      "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                      "error InvalidMarket(uint128 marketId)",
                      "error InvalidPrices()",
                      "error OverflowUint256ToInt256()",
                      "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                      "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                      "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                      "error InvalidAsyncTransactionType(uint8 transactionType)",
                      "error InvalidClaim(uint256 asyncOrderId)",
                      "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                      "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                      "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                      "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                      "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                      "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                      "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "error InvalidSettlementStrategy(uint8 strategyType)",
                      "error InvalidVerificationResponse()",
                      "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                      "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                      "error OverflowUint256ToUint64()",
                      "error SettlementStrategyNotFound(uint8 strategyType)",
                      "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                      "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error InvalidSettlementWindowDuration(uint256 duration)",
                      "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                      "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                      "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                      "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InvalidCollateralType(address configuredCollateralType)",
                      "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                      "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                      "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error InvalidCollateralLeverage(uint256)",
                      "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                      "error InvalidWrapperFees()",
                      "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                      "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                      "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                      "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                      "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                      "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                      "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                      "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                      "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                      "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                      "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                      "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                      "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                      "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                      "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                      "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                      "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                      "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                      "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                      "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                      "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgradeSpotMarketProxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "settings": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "snax",
                  "synthetixPackage": "synthetix",
                  "synthetixPreset": "main"
                },
                "imports": {
                  "synthetix": {
                    "url": "ipfs://QmaoPV7jyHQF6ViTqPMvRFqGS3HWrXwr6Y1wCBtkai1Fbw",
                    "contracts": {
                      "AccountModule": {
                        "address": "0xd4DFE8F3b91007ec187f8b74A3cEEDBA7A0873f7",
                        "abi": [
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidAccountId(uint128 accountId)",
                          "error InvalidPermission(bytes32 permission)",
                          "error OnlyAccountTokenProxy(address origin)",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                          "error PositionOutOfBounds()",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "error ZeroAddress()",
                          "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                          "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "function createAccount() returns (uint128 accountId)",
                          "function createAccount(uint128 requestedAccountId)",
                          "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                          "function getAccountOwner(uint128 accountId) view returns (address)",
                          "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                          "function getAccountTokenAddress() view returns (address)",
                          "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                          "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function notifyAccountTransfer(address to, uint128 accountId)",
                          "function renouncePermission(uint128 accountId, bytes32 permission)",
                          "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x734f5d976bbfa5c0ec21808b4ff1b1b0532bdaaf2a07db1d08bde28c202bca66",
                        "deployTxnBlockNumber": "16649339",
                        "deployTimestamp": "1729066966",
                        "sourceName": "contracts/modules/core/AccountModule.sol",
                        "contractName": "AccountModule",
                        "deployedOn": "contract.AccountModule",
                        "gasUsed": 1225809,
                        "gasCost": "936592307"
                      },
                      "AccountTokenModule": {
                        "address": "0x6d448d821cbd5AA1A52dD3854ed0AEc2d1BF8832",
                        "abi": [
                          "error AlreadyInitialized()",
                          "error CannotSelfApprove(address addr)",
                          "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                          "error InvalidOwner(address addr)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidTransferRecipient(address addr)",
                          "error OverflowUint256ToUint128()",
                          "error TokenAlreadyMinted(uint256 id)",
                          "error TokenDoesNotExist(uint256 id)",
                          "error Unauthorized(address addr)",
                          "error ZeroAddress()",
                          "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                          "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                          "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                          "function approve(address to, uint256 tokenId)",
                          "function balanceOf(address holder) view returns (uint256 balance)",
                          "function burn(uint256 tokenId)",
                          "function getApproved(uint256 tokenId) view returns (address operator)",
                          "function initialize(string tokenName, string tokenSymbol, string uri)",
                          "function isApprovedForAll(address holder, address operator) view returns (bool)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address to, uint256 tokenId)",
                          "function name() view returns (string)",
                          "function ownerOf(uint256 tokenId) view returns (address)",
                          "function safeMint(address to, uint256 tokenId, bytes data)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                          "function setAllowance(uint256 tokenId, address spender)",
                          "function setApprovalForAll(address operator, bool approved)",
                          "function setBaseTokenURI(string uri)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "function symbol() view returns (string)",
                          "function tokenByIndex(uint256 index) view returns (uint256)",
                          "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                          "function tokenURI(uint256 tokenId) view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transferFrom(address from, address to, uint256 tokenId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xd2af7a26d94f40173e1efabe174b03163cfb551b29fa45c909b70878f3b292b4",
                        "deployTxnBlockNumber": "16649341",
                        "deployTimestamp": "1729066970",
                        "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                        "contractName": "AccountTokenModule",
                        "deployedOn": "contract.AccountTokenModule",
                        "gasUsed": 1787668,
                        "gasCost": "932975250"
                      },
                      "AssociateDebtModule": {
                        "address": "0xEe047Ca39AE1EF562f3D5F23c1B8A5b074955331",
                        "abi": [
                          "error AccountNotFound(uint128 accountId)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error MarketNotFound(uint128 marketId)",
                          "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error Unauthorized(address addr)",
                          "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                          "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x2cdc64893f97d21159360a5096ad3abe14df13349fee8361324c43c10f10e694",
                        "deployTxnBlockNumber": "16649344",
                        "deployTimestamp": "1729066976",
                        "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                        "contractName": "AssociateDebtModule",
                        "deployedOn": "contract.AssociateDebtModule",
                        "gasUsed": 2603996,
                        "gasCost": "933120208"
                      },
                      "AssociatedSystemsModule": {
                        "address": "0xC8440d8e46D3C06beD106C6f2F918F30182bEb06",
                        "abi": [
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "error Unauthorized(address addr)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xbdad45d38a1b1de1a6d9518ac7192e5bf5cf0c338a9f8c41fdbd33a30d9c6610",
                        "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                        "contractName": "AssociatedSystemsModule",
                        "deployedOn": "contract.AssociatedSystemsModule",
                        "gasUsed": 877153,
                        "gasCost": "1000305"
                      },
                      "CcipReceiverModule": {
                        "address": "0x290052592c38b55f827ec377B2a8023e734B815C",
                        "abi": [
                          "error InvalidMessage()",
                          "error NotCcipRouter(address)",
                          "error Unauthorized(address addr)",
                          "error UnsupportedNetwork(uint64)",
                          "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x0a1ac64516ad97aca7fe23966c6050476f7c839b286cf64a5e2338d8a9e7e7b2",
                        "deployTxnBlockNumber": "16649346",
                        "deployTimestamp": "1729066980",
                        "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                        "contractName": "CcipReceiverModule",
                        "deployedOn": "contract.CcipReceiverModule",
                        "gasUsed": 469476,
                        "gasCost": "936917569"
                      },
                      "CollateralConfigurationModule": {
                        "address": "0x98A58c2A364f5C9dA829a8738Ba8b192E7B706db",
                        "abi": [
                          "error EmptyRevertReason()",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowInt256ToUint256()",
                          "error PositionOutOfBounds()",
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                          "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                          "function getCollateralPrice(address collateralType) view returns (uint256)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x3050067c8dad45ed319ffc5d018760acea5008c4bcdab87d645144b585beb212",
                        "deployTxnBlockNumber": "16649348",
                        "deployTimestamp": "1729066984",
                        "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                        "contractName": "CollateralConfigurationModule",
                        "deployedOn": "contract.CollateralConfigurationModule",
                        "gasUsed": 872728,
                        "gasCost": "937172209"
                      },
                      "CollateralModule": {
                        "address": "0xE8Ae6cAC1aBbC0Eef81D85f8f5f4402f164300FD",
                        "abi": [
                          "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                          "error AccountNotFound(uint128 accountId)",
                          "error CollateralDepositDisabled(address collateralType)",
                          "error CollateralNotFound()",
                          "error EmptyRevertReason()",
                          "error FailedTransfer(address from, address to, uint256 value)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientAccountCollateral(uint256 amount)",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint256ToUint128()",
                          "error OverflowUint256ToUint64()",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PositionOutOfBounds()",
                          "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                          "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                          "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                          "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                          "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                          "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                          "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                          "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                          "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x9135ef7a5060b7e3b30af8aaf4cbea2747784ce00a8f74d3498f66fab944981d",
                        "deployTxnBlockNumber": "16649350",
                        "deployTimestamp": "1729066988",
                        "sourceName": "contracts/modules/core/CollateralModule.sol",
                        "contractName": "CollateralModule",
                        "deployedOn": "contract.CollateralModule",
                        "gasUsed": 1878022,
                        "gasCost": "937764119"
                      },
                      "CrossChainUSDModule": {
                        "address": "0x0Db649f56b99B15c70198C925CD374b95B6Df5E8",
                        "abi": [
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                          "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xd57eddd8ebbaaffdda7d1ccdedd8345b8cb7e1dba787af550943cc10b7be4830",
                        "deployTxnBlockNumber": "16649352",
                        "deployTimestamp": "1729066992",
                        "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                        "contractName": "CrossChainUSDModule",
                        "deployedOn": "contract.CrossChainUSDModule",
                        "gasUsed": 595289,
                        "gasCost": "934748763"
                      },
                      "FeatureFlagModule": {
                        "address": "0x57a24eafBCeDF9CEFD242b259517C84b9d72e3Ae",
                        "abi": [
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                          "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                          "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                          "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                          "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                          "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function getDeniers(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                          "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                          "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                          "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function setDeniers(bytes32 feature, address[] deniers)",
                          "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                          "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xb8ed47b80ee3a4301f24b809cb8376373e4d68fea596a8c4c7ab5a89228c5a68",
                        "deployTxnBlockNumber": "16649354",
                        "deployTimestamp": "1729066996",
                        "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                        "contractName": "FeatureFlagModule",
                        "deployedOn": "contract.FeatureFlagModule",
                        "gasUsed": 777054,
                        "gasCost": "935496418"
                      },
                      "IssueUSDModule": {
                        "address": "0x8C9126A0dD9e2B60a69a4957669C507ff1c07C69",
                        "abi": [
                          "error CollateralDepositDisabled(address collateralType)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error InsufficientDebt(int256 currentDebt)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error MarketNotFound(uint128 marketId)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PoolNotFound(uint128 poolId)",
                          "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x1c864f9da23ddbe73a793494ef991044b6588ae73c290a6e79b4535649f698d9",
                        "deployTxnBlockNumber": "16649356",
                        "deployTimestamp": "1729067000",
                        "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                        "contractName": "IssueUSDModule",
                        "deployedOn": "contract.IssueUSDModule",
                        "gasUsed": 2940922,
                        "gasCost": "937306460"
                      },
                      "LiquidationModule": {
                        "address": "0xC090A806CC37c4C6CA9fc8eb7b7098d78eE72b60",
                        "abi": [
                          "error AccountNotFound(uint128 accountId)",
                          "error CannotScaleEmptyMapping()",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                          "error InsufficientMappedAmount()",
                          "error InvalidParameter(string parameter, string reason)",
                          "error MarketNotFound(uint128 marketId)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MustBeVaultLiquidated()",
                          "error OverflowInt128ToUint128()",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint256ToUint64()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "error PositionOutOfBounds()",
                          "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                          "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                          "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x3f4c10c3063b131da4b40f91d2fef5bc8294293ea31a63c606131902ecc314d0",
                        "deployTxnBlockNumber": "16649358",
                        "deployTimestamp": "1729067004",
                        "sourceName": "contracts/modules/core/LiquidationModule.sol",
                        "contractName": "LiquidationModule",
                        "deployedOn": "contract.LiquidationModule",
                        "gasUsed": 4289682,
                        "gasCost": "935586433"
                      },
                      "MarketCollateralModule": {
                        "address": "0xD88de2Ee855f145ab1eCFfF8273661C3d59fc8ad",
                        "abi": [
                          "error CollateralNotFound()",
                          "error EmptyRevertReason()",
                          "error FailedTransfer(address from, address to, uint256 value)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                          "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint256ToInt256()",
                          "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                          "error Unauthorized(address addr)",
                          "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                          "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                          "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                          "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                          "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                          "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xc5c4642d703fe51a5736f64cd0b91f641d0b0b14d582596313c350ac2b529f9e",
                        "deployTxnBlockNumber": "16649360",
                        "deployTimestamp": "1729067008",
                        "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                        "contractName": "MarketCollateralModule",
                        "deployedOn": "contract.MarketCollateralModule",
                        "gasUsed": 1298300,
                        "gasCost": "938598453"
                      },
                      "MarketManagerModule": {
                        "address": "0x35B79eD956064338d3DF10abc215Ab128C6265BE",
                        "abi": [
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error FeatureUnavailable(bytes32 which)",
                          "error IncorrectMarketInterface(address market)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error Unauthorized(address addr)",
                          "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                          "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                          "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                          "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                          "function getMarketAddress(uint128 marketId) view returns (address)",
                          "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                          "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                          "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                          "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                          "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                          "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                          "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                          "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                          "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                          "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                          "function getOracleManager() view returns (address)",
                          "function getUsdToken() view returns (address)",
                          "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                          "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                          "function registerMarket(address market) returns (uint128 marketId)",
                          "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                          "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                          "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xe7d5907e9bc6931cfd5d6ec2ee85fd04e32746281b79230ec9d301536c5e90ae",
                        "deployTxnBlockNumber": "16649362",
                        "deployTimestamp": "1729067012",
                        "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                        "contractName": "MarketManagerModule",
                        "deployedOn": "contract.MarketManagerModule",
                        "gasUsed": 2730455,
                        "gasCost": "938162086"
                      },
                      "PoolConfigurationModule": {
                        "address": "0x39fBdCBa20E57BC672DDD9f5756Dc8b5Fabe526a",
                        "abi": [
                          "error PoolNotFound(uint128 poolId)",
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event PoolApprovedAdded(uint256 poolId)",
                          "event PoolApprovedRemoved(uint256 poolId)",
                          "event PreferredPoolSet(uint256 poolId)",
                          "function addApprovedPool(uint128 poolId)",
                          "function getApprovedPools() view returns (uint256[])",
                          "function getPreferredPool() view returns (uint128)",
                          "function removeApprovedPool(uint128 poolId)",
                          "function setPreferredPool(uint128 poolId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xfe15402ad6fe9cfd54a4da2874d181a8c516c025d984b5ec4740f2910cea30ec",
                        "deployTxnBlockNumber": "16649364",
                        "deployTimestamp": "1729067016",
                        "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                        "contractName": "PoolConfigurationModule",
                        "deployedOn": "contract.PoolConfigurationModule",
                        "gasUsed": 446271,
                        "gasCost": "938194121"
                      },
                      "PoolModule": {
                        "address": "0x65a62Dc05B66FD007d05f2E34085348A45c6a424",
                        "abi": [
                          "error CapacityLocked(uint256 marketId)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error MarketNotFound(uint128 marketId)",
                          "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error PoolAlreadyExists(uint128 poolId)",
                          "error PoolNotFound(uint128 poolId)",
                          "error Unauthorized(address addr)",
                          "error ZeroAddress()",
                          "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                          "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                          "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                          "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                          "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                          "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                          "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                          "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function acceptPoolOwnership(uint128 poolId)",
                          "function createPool(uint128 requestedPoolId, address owner)",
                          "function getMinLiquidityRatio() view returns (uint256)",
                          "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                          "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                          "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                          "function getPoolName(uint128 poolId) view returns (string poolName)",
                          "function getPoolOwner(uint128 poolId) view returns (address)",
                          "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                          "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                          "function renouncePoolNomination(uint128 poolId)",
                          "function renouncePoolOwnership(uint128 poolId)",
                          "function revokePoolNomination(uint128 poolId)",
                          "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                          "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                          "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                          "function setPoolName(uint128 poolId, string name)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x4a9563128d503b59b74d159ed8b1745ec4d75645cb505f1a53f4990267c38886",
                        "deployTxnBlockNumber": "16649366",
                        "deployTimestamp": "1729067020",
                        "sourceName": "contracts/modules/core/PoolModule.sol",
                        "contractName": "PoolModule",
                        "deployedOn": "contract.PoolModule",
                        "gasUsed": 3986001,
                        "gasCost": "941481539"
                      },
                      "RewardsManagerModule": {
                        "address": "0x4A3979b6dc29B311e8c27D4E2cdF1E35f89913b0",
                        "abi": [
                          "error AccountNotFound(uint128 accountId)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PositionOutOfBounds()",
                          "error RewardUnavailable(address distributor)",
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                          "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                          "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                          "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xbbc9ba761efa021f34153e39acaf3c8123e8d7a81f928be226b312cd978c2e16",
                        "deployTxnBlockNumber": "16649368",
                        "deployTimestamp": "1729067024",
                        "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                        "contractName": "RewardsManagerModule",
                        "deployedOn": "contract.RewardsManagerModule",
                        "gasUsed": 2642251,
                        "gasCost": "942593115"
                      },
                      "USDTokenModule": {
                        "address": "0x2F0f4304676B1399D970bac6488053F7014A80a6",
                        "abi": [
                          "error AlreadyInitialized()",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InsufficientBalance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error Unauthorized(address addr)",
                          "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                          "event Transfer(address indexed from, address indexed to, uint256 amount)",
                          "function allowance(address owner, address spender) view returns (uint256)",
                          "function approve(address spender, uint256 amount) returns (bool)",
                          "function balanceOf(address owner) view returns (uint256)",
                          "function burn(uint256 amount)",
                          "function burn(address target, uint256 amount)",
                          "function burnWithAllowance(address from, address spender, uint256 amount)",
                          "function decimals() view returns (uint8)",
                          "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                          "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                          "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address target, uint256 amount)",
                          "function name() view returns (string)",
                          "function setAllowance(address from, address spender, uint256 amount)",
                          "function symbol() view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transfer(address to, uint256 amount) returns (bool)",
                          "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xca0f2c066651896de5930e5ee954bd0c03b025fa2c2a32eb8395c335a6d6905a",
                        "deployTxnBlockNumber": "16649371",
                        "deployTimestamp": "1729067030",
                        "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                        "contractName": "USDTokenModule",
                        "deployedOn": "contract.USDTokenModule",
                        "gasUsed": 1110294,
                        "gasCost": "939871566"
                      },
                      "UtilsModule": {
                        "address": "0xa76f3067888222b37a667814f696038b658B7368",
                        "abi": [
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowUint256ToUint64()",
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                          "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                          "function configureOracleManager(address oracleManagerAddress)",
                          "function getConfig(bytes32 k) view returns (bytes32 v)",
                          "function getConfigAddress(bytes32 k) view returns (address v)",
                          "function getConfigUint(bytes32 k) view returns (uint256 v)",
                          "function getTrustedForwarder() pure returns (address)",
                          "function isTrustedForwarder(address forwarder) pure returns (bool)",
                          "function setConfig(bytes32 k, bytes32 v)",
                          "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x1e9d8122afd7dc158660bf1f9bb8ea629ed274203f628129ae91b5f54fe5753e",
                        "deployTxnBlockNumber": "16649373",
                        "deployTimestamp": "1729067034",
                        "sourceName": "contracts/modules/core/UtilsModule.sol",
                        "contractName": "UtilsModule",
                        "deployedOn": "contract.UtilsModule",
                        "gasUsed": 759697,
                        "gasCost": "944385460"
                      },
                      "VaultModule": {
                        "address": "0xA24ECBF86E4cD4763084cF1f1E7709400cE8d3BC",
                        "abi": [
                          "error CapacityLocked(uint256 marketId)",
                          "error CollateralDepositDisabled(address collateralType)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientAccountCollateral(uint256 amount)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error InsufficientDelegation(uint256 minDelegation)",
                          "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                          "error InvalidCollateralAmount()",
                          "error InvalidLeverage(uint256 leverage)",
                          "error MarketNotFound(uint128 marketId)",
                          "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                          "error OverflowInt128ToUint128()",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                          "error PoolNotFound(uint128 poolId)",
                          "error PositionOutOfBounds()",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                          "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                          "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                          "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                          "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                          "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                          "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                          "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                          "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x939f10bb60d2dba483fa7c5c900ca69760fe55dad1191ecf1e26c9ea9e83a50a",
                        "deployTxnBlockNumber": "16649375",
                        "deployTimestamp": "1729067038",
                        "sourceName": "contracts/modules/core/VaultModule.sol",
                        "contractName": "VaultModule",
                        "deployedOn": "contract.VaultModule",
                        "gasUsed": 4244908,
                        "gasCost": "941449312"
                      },
                      "InitialModuleBundle": {
                        "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "sourceName": "contracts/modules/InitialModuleBundle.sol",
                        "contractName": "InitialModuleBundle",
                        "deployedOn": "contract.InitialModuleBundle",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "InitialCoreProxy": {
                        "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x828EED723cAF0A8F822249231266E38dF614923C",
                          "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x5913f591061763378a9209c9ea168efbfd1de19af4440dbfcf5a73004f091491",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialCoreProxy",
                        "gasUsed": 185358,
                        "gasCost": "1000317"
                      },
                      "AccountRouter": {
                        "address": "0x768f77f75c7c4b6b81758bf56ce0ab70762b37e6",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error AlreadyInitialized()",
                          "error CannotSelfApprove(address addr)",
                          "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                          "error InvalidOwner(address addr)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidTransferRecipient(address addr)",
                          "error OverflowUint256ToUint128()",
                          "error TokenAlreadyMinted(uint256 id)",
                          "error TokenDoesNotExist(uint256 id)",
                          "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                          "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                          "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                          "function approve(address to, uint256 tokenId)",
                          "function balanceOf(address holder) view returns (uint256 balance)",
                          "function burn(uint256 tokenId)",
                          "function getApproved(uint256 tokenId) view returns (address operator)",
                          "function initialize(string tokenName, string tokenSymbol, string uri)",
                          "function isApprovedForAll(address holder, address operator) view returns (bool)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address to, uint256 tokenId)",
                          "function name() view returns (string)",
                          "function ownerOf(uint256 tokenId) view returns (address)",
                          "function safeMint(address to, uint256 tokenId, bytes data)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                          "function setAllowance(uint256 tokenId, address spender)",
                          "function setApprovalForAll(address operator, bool approved)",
                          "function setBaseTokenURI(string uri)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "function symbol() view returns (string)",
                          "function tokenByIndex(uint256 index) view returns (uint256)",
                          "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                          "function tokenURI(uint256 tokenId) view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transferFrom(address from, address to, uint256 tokenId)"
                        ],
                        "deployedOn": "router.AccountRouter",
                        "deployTxnHash": "0xbac818a079f296ffb1759aaecef641f5471ebed0cf6829aba98ea826cbb07a0b",
                        "deployTxnBlockNumber": "16649378",
                        "deployTimestamp": "1729067044",
                        "contractName": "AccountRouter",
                        "sourceName": "AccountRouter.sol",
                        "gasUsed": 406486,
                        "gasCost": "949929423"
                      },
                      "CoreRouter": {
                        "address": "0xad3553dc909d1d72a290ae14a530a46c57bb4d3d",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                          "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                          "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                          "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                          "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                          "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function getDeniers(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                          "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                          "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                          "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function setDeniers(bytes32 feature, address[] deniers)",
                          "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                          "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidAccountId(uint128 accountId)",
                          "error InvalidPermission(bytes32 permission)",
                          "error OnlyAccountTokenProxy(address origin)",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                          "error PositionOutOfBounds()",
                          "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                          "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "function createAccount() returns (uint128 accountId)",
                          "function createAccount(uint128 requestedAccountId)",
                          "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                          "function getAccountOwner(uint128 accountId) view returns (address)",
                          "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                          "function getAccountTokenAddress() view returns (address)",
                          "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                          "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function notifyAccountTransfer(address to, uint128 accountId)",
                          "function renouncePermission(uint128 accountId, bytes32 permission)",
                          "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                          "error AccountNotFound(uint128 accountId)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error MarketNotFound(uint128 marketId)",
                          "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                          "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                          "error InvalidMessage()",
                          "error NotCcipRouter(address)",
                          "error UnsupportedNetwork(uint64)",
                          "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                          "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                          "error CollateralDepositDisabled(address collateralType)",
                          "error CollateralNotFound()",
                          "error FailedTransfer(address from, address to, uint256 value)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientAccountCollateral(uint256 amount)",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowUint256ToUint64()",
                          "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                          "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                          "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                          "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                          "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                          "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                          "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                          "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                          "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                          "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                          "function getCollateralPrice(address collateralType) view returns (uint256)",
                          "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                          "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                          "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                          "error InsufficientDebt(int256 currentDebt)",
                          "error PoolNotFound(uint128 poolId)",
                          "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "error CannotScaleEmptyMapping()",
                          "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                          "error InsufficientMappedAmount()",
                          "error MustBeVaultLiquidated()",
                          "error OverflowInt128ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                          "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                          "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                          "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                          "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                          "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                          "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                          "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                          "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                          "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "error IncorrectMarketInterface(address market)",
                          "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                          "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                          "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                          "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                          "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                          "function getMarketAddress(uint128 marketId) view returns (address)",
                          "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                          "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                          "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                          "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                          "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                          "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                          "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                          "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                          "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                          "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                          "function getOracleManager() view returns (address)",
                          "function getUsdToken() view returns (address)",
                          "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                          "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                          "function registerMarket(address market) returns (uint128 marketId)",
                          "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                          "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                          "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "event PoolApprovedAdded(uint256 poolId)",
                          "event PoolApprovedRemoved(uint256 poolId)",
                          "event PreferredPoolSet(uint256 poolId)",
                          "function addApprovedPool(uint128 poolId)",
                          "function getApprovedPools() view returns (uint256[])",
                          "function getPreferredPool() view returns (uint128)",
                          "function removeApprovedPool(uint128 poolId)",
                          "function setPreferredPool(uint128 poolId)",
                          "error CapacityLocked(uint256 marketId)",
                          "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                          "error PoolAlreadyExists(uint128 poolId)",
                          "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                          "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                          "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                          "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                          "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                          "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                          "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                          "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function acceptPoolOwnership(uint128 poolId)",
                          "function createPool(uint128 requestedPoolId, address owner)",
                          "function getMinLiquidityRatio() view returns (uint256)",
                          "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                          "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                          "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                          "function getPoolName(uint128 poolId) view returns (string poolName)",
                          "function getPoolOwner(uint128 poolId) view returns (address)",
                          "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                          "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                          "function renouncePoolNomination(uint128 poolId)",
                          "function renouncePoolOwnership(uint128 poolId)",
                          "function revokePoolNomination(uint128 poolId)",
                          "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                          "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                          "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                          "function setPoolName(uint128 poolId, string name)",
                          "error RewardUnavailable(address distributor)",
                          "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                          "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                          "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                          "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                          "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                          "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                          "function configureOracleManager(address oracleManagerAddress)",
                          "function getConfig(bytes32 k) view returns (bytes32 v)",
                          "function getConfigAddress(bytes32 k) view returns (address v)",
                          "function getConfigUint(bytes32 k) view returns (uint256 v)",
                          "function getTrustedForwarder() pure returns (address)",
                          "function isTrustedForwarder(address forwarder) pure returns (bool)",
                          "function setConfig(bytes32 k, bytes32 v)",
                          "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "error InsufficientDelegation(uint256 minDelegation)",
                          "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                          "error InvalidCollateralAmount()",
                          "error InvalidLeverage(uint256 leverage)",
                          "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                          "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                          "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                          "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                          "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                          "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                          "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                          "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                          "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                          "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                        ],
                        "deployedOn": "router.CoreRouter",
                        "deployTxnHash": "0x7a059a46a4b514a360ccf2260f8bc8baa33bf74f309a7ba1c0fa2952e8b30f6a",
                        "deployTxnBlockNumber": "16649380",
                        "deployTimestamp": "1729067048",
                        "contractName": "CoreRouter",
                        "sourceName": "CoreRouter.sol",
                        "gasUsed": 1318142,
                        "gasCost": "945143807"
                      },
                      "USDRouter": {
                        "address": "0x44d4a4796a7604419e4051d4ab1e060759db99fb",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                          "error AlreadyInitialized()",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InsufficientBalance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                          "event Transfer(address indexed from, address indexed to, uint256 amount)",
                          "function allowance(address owner, address spender) view returns (uint256)",
                          "function approve(address spender, uint256 amount) returns (bool)",
                          "function balanceOf(address owner) view returns (uint256)",
                          "function burn(uint256 amount)",
                          "function burn(address target, uint256 amount)",
                          "function burnWithAllowance(address from, address spender, uint256 amount)",
                          "function decimals() view returns (uint8)",
                          "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                          "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                          "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address target, uint256 amount)",
                          "function name() view returns (string)",
                          "function setAllowance(address from, address spender, uint256 amount)",
                          "function symbol() view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transfer(address to, uint256 amount) returns (bool)",
                          "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                        ],
                        "deployedOn": "router.USDRouter",
                        "deployTxnHash": "0xade8ab8e92554c274e7b22ab353c4fe32ed2754195a0dcce871f2f73f21dc611",
                        "deployTxnBlockNumber": "16649382",
                        "deployTimestamp": "1729067052",
                        "contractName": "USDRouter",
                        "sourceName": "USDRouter.sol",
                        "gasUsed": 398033,
                        "gasCost": "945780250"
                      },
                      "CoreProxy": {
                        "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                          "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                          "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                          "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                          "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                          "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function getDeniers(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                          "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                          "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                          "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function setDeniers(bytes32 feature, address[] deniers)",
                          "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                          "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidAccountId(uint128 accountId)",
                          "error InvalidPermission(bytes32 permission)",
                          "error OnlyAccountTokenProxy(address origin)",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                          "error PositionOutOfBounds()",
                          "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                          "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "function createAccount() returns (uint128 accountId)",
                          "function createAccount(uint128 requestedAccountId)",
                          "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                          "function getAccountOwner(uint128 accountId) view returns (address)",
                          "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                          "function getAccountTokenAddress() view returns (address)",
                          "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                          "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function notifyAccountTransfer(address to, uint128 accountId)",
                          "function renouncePermission(uint128 accountId, bytes32 permission)",
                          "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                          "error AccountNotFound(uint128 accountId)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error MarketNotFound(uint128 marketId)",
                          "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                          "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                          "error InvalidMessage()",
                          "error NotCcipRouter(address)",
                          "error UnsupportedNetwork(uint64)",
                          "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                          "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                          "error CollateralDepositDisabled(address collateralType)",
                          "error CollateralNotFound()",
                          "error FailedTransfer(address from, address to, uint256 value)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientAccountCollateral(uint256 amount)",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowUint256ToUint64()",
                          "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                          "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                          "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                          "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                          "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                          "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                          "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                          "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                          "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                          "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                          "function getCollateralPrice(address collateralType) view returns (uint256)",
                          "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                          "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                          "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                          "error InsufficientDebt(int256 currentDebt)",
                          "error PoolNotFound(uint128 poolId)",
                          "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "error CannotScaleEmptyMapping()",
                          "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                          "error InsufficientMappedAmount()",
                          "error MustBeVaultLiquidated()",
                          "error OverflowInt128ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                          "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                          "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                          "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                          "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                          "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                          "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                          "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                          "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                          "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "error IncorrectMarketInterface(address market)",
                          "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                          "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                          "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                          "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                          "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                          "function getMarketAddress(uint128 marketId) view returns (address)",
                          "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                          "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                          "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                          "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                          "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                          "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                          "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                          "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                          "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                          "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                          "function getOracleManager() view returns (address)",
                          "function getUsdToken() view returns (address)",
                          "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                          "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                          "function registerMarket(address market) returns (uint128 marketId)",
                          "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                          "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                          "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "event PoolApprovedAdded(uint256 poolId)",
                          "event PoolApprovedRemoved(uint256 poolId)",
                          "event PreferredPoolSet(uint256 poolId)",
                          "function addApprovedPool(uint128 poolId)",
                          "function getApprovedPools() view returns (uint256[])",
                          "function getPreferredPool() view returns (uint128)",
                          "function removeApprovedPool(uint128 poolId)",
                          "function setPreferredPool(uint128 poolId)",
                          "error CapacityLocked(uint256 marketId)",
                          "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                          "error PoolAlreadyExists(uint128 poolId)",
                          "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                          "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                          "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                          "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                          "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                          "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                          "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                          "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function acceptPoolOwnership(uint128 poolId)",
                          "function createPool(uint128 requestedPoolId, address owner)",
                          "function getMinLiquidityRatio() view returns (uint256)",
                          "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                          "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                          "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                          "function getPoolName(uint128 poolId) view returns (string poolName)",
                          "function getPoolOwner(uint128 poolId) view returns (address)",
                          "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                          "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                          "function renouncePoolNomination(uint128 poolId)",
                          "function renouncePoolOwnership(uint128 poolId)",
                          "function revokePoolNomination(uint128 poolId)",
                          "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                          "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                          "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                          "function setPoolName(uint128 poolId, string name)",
                          "error RewardUnavailable(address distributor)",
                          "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                          "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                          "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                          "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                          "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                          "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                          "function configureOracleManager(address oracleManagerAddress)",
                          "function getConfig(bytes32 k) view returns (bytes32 v)",
                          "function getConfigAddress(bytes32 k) view returns (address v)",
                          "function getConfigUint(bytes32 k) view returns (uint256 v)",
                          "function getTrustedForwarder() pure returns (address)",
                          "function isTrustedForwarder(address forwarder) pure returns (bool)",
                          "function setConfig(bytes32 k, bytes32 v)",
                          "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "error InsufficientDelegation(uint256 minDelegation)",
                          "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                          "error InvalidCollateralAmount()",
                          "error InvalidLeverage(uint256 leverage)",
                          "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                          "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                          "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                          "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                          "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                          "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                          "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                          "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                          "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                          "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "invoke.upgrade_core_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      },
                      "AccountProxy": {
                        "address": "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error AlreadyInitialized()",
                          "error CannotSelfApprove(address addr)",
                          "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                          "error InvalidOwner(address addr)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidTransferRecipient(address addr)",
                          "error OverflowUint256ToUint128()",
                          "error TokenAlreadyMinted(uint256 id)",
                          "error TokenDoesNotExist(uint256 id)",
                          "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                          "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                          "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                          "function approve(address to, uint256 tokenId)",
                          "function balanceOf(address holder) view returns (uint256 balance)",
                          "function burn(uint256 tokenId)",
                          "function getApproved(uint256 tokenId) view returns (address operator)",
                          "function initialize(string tokenName, string tokenSymbol, string uri)",
                          "function isApprovedForAll(address holder, address operator) view returns (bool)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address to, uint256 tokenId)",
                          "function name() view returns (string)",
                          "function ownerOf(uint256 tokenId) view returns (address)",
                          "function safeMint(address to, uint256 tokenId, bytes data)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                          "function setAllowance(uint256 tokenId, address spender)",
                          "function setApprovalForAll(address operator, bool approved)",
                          "function setBaseTokenURI(string uri)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "function symbol() view returns (string)",
                          "function tokenByIndex(uint256 index) view returns (uint256)",
                          "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                          "function tokenURI(uint256 tokenId) view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transferFrom(address from, address to, uint256 tokenId)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                        "contractName": "UUPSProxyWithOwner",
                        "deployedOn": "invoke.init_account",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      },
                      "USDProxy": {
                        "address": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                          "error AlreadyInitialized()",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InsufficientBalance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                          "event Transfer(address indexed from, address indexed to, uint256 amount)",
                          "function allowance(address owner, address spender) view returns (uint256)",
                          "function approve(address spender, uint256 amount) returns (bool)",
                          "function balanceOf(address owner) view returns (uint256)",
                          "function burn(uint256 amount)",
                          "function burn(address target, uint256 amount)",
                          "function burnWithAllowance(address from, address spender, uint256 amount)",
                          "function decimals() view returns (uint8)",
                          "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                          "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                          "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address target, uint256 amount)",
                          "function name() view returns (string)",
                          "function setAllowance(address from, address spender, uint256 amount)",
                          "function symbol() view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transfer(address to, uint256 amount) returns (bool)",
                          "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                        "contractName": "UUPSProxyWithOwner",
                        "deployedOn": "invoke.init_usd",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmYi3NuhRQQVwHZLQd9KBCsg2HKeFP769mR6Yi2g2mA9cE",
                        "tags": [
                          "latest"
                        ],
                        "preset": "with-synthetix",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      },
                      "oracle_manager": {
                        "url": "ipfs://QmaSYrc3XvdZ2LhUDQ2njMCkHsfNT3nDLDDLJWwE8UaVkr",
                        "contracts": {
                          "NodeModule": {
                            "address": "0xE1681e5aC826043Ae6575ee1fD5E7064751c2fc5",
                            "abi": [
                              "error EmptyRevertReason()",
                              "error Errors(bytes[] errors)",
                              "error Errors(bytes[] revertReasons)",
                              "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                              "error InvalidParameter(string parameter, string reason)",
                              "error InvalidPrice(int256 price)",
                              "error NodeNotRegistered(bytes32 nodeId)",
                              "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                              "error OverflowInt256ToUint256()",
                              "error OverflowInt56ToInt24()",
                              "error OverflowUint256ToInt256()",
                              "error OverflowUint256ToUint160()",
                              "error OverflowUint56ToInt56()",
                              "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                              "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                              "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                              "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "0x1ca8b07aa6e171c4948031b71bfa2a8f9ffc7bbbbea847313177653956f58c31",
                            "deployTxnBlockNumber": "16649324",
                            "deployTimestamp": "1729066936",
                            "sourceName": "contracts/modules/NodeModule.sol",
                            "contractName": "NodeModule",
                            "deployedOn": "contract.NodeModule",
                            "gasUsed": 4820634,
                            "gasCost": "930730936"
                          },
                          "CoreModule": {
                            "address": "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                            "abi": [
                              "error ImplementationIsSterile(address implementation)",
                              "error NoChange()",
                              "error NotAContract(address contr)",
                              "error NotNominated(address addr)",
                              "error Unauthorized(address addr)",
                              "error UpgradeSimulationFailed()",
                              "error ZeroAddress()",
                              "event OwnerChanged(address oldOwner, address newOwner)",
                              "event OwnerNominated(address newOwner)",
                              "event Upgraded(address indexed self, address implementation)",
                              "function acceptOwnership()",
                              "function getImplementation() view returns (address)",
                              "function nominateNewOwner(address newNominatedOwner)",
                              "function nominatedOwner() view returns (address)",
                              "function owner() view returns (address)",
                              "function renounceNomination()",
                              "function simulateUpgradeTo(address newImplementation)",
                              "function upgradeTo(address newImplementation)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1729066942",
                            "sourceName": "contracts/modules/CoreModule.sol",
                            "contractName": "CoreModule",
                            "deployedOn": "contract.CoreModule",
                            "gasUsed": 0,
                            "gasCost": "0"
                          },
                          "InitialProxy": {
                            "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                            "abi": [
                              "error ImplementationIsSterile(address implementation)",
                              "error NoChange()",
                              "error NotAContract(address contr)",
                              "error NotNominated(address addr)",
                              "error Unauthorized(address addr)",
                              "error UpgradeSimulationFailed()",
                              "error ZeroAddress()",
                              "event OwnerChanged(address oldOwner, address newOwner)",
                              "event OwnerNominated(address newOwner)",
                              "event Upgraded(address indexed self, address implementation)",
                              "function acceptOwnership()",
                              "function getImplementation() view returns (address)",
                              "function nominateNewOwner(address newNominatedOwner)",
                              "function nominatedOwner() view returns (address)",
                              "function owner() view returns (address)",
                              "function renounceNomination()",
                              "function simulateUpgradeTo(address newImplementation)",
                              "function upgradeTo(address newImplementation)"
                            ],
                            "constructorArgs": [
                              "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                              "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                            ],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1729066944",
                            "sourceName": "contracts/Proxy.sol",
                            "contractName": "Proxy",
                            "deployedOn": "contract.InitialProxy",
                            "gasUsed": 0,
                            "gasCost": "0"
                          },
                          "OracleRouter": {
                            "address": "0x0a6a3a1553351a2a3e71f90e1b892794f2a2e64c",
                            "abi": [
                              "error ImplementationIsSterile(address implementation)",
                              "error NoChange()",
                              "error NotAContract(address contr)",
                              "error NotNominated(address addr)",
                              "error Unauthorized(address addr)",
                              "error UpgradeSimulationFailed()",
                              "error ZeroAddress()",
                              "event OwnerChanged(address oldOwner, address newOwner)",
                              "event OwnerNominated(address newOwner)",
                              "event Upgraded(address indexed self, address implementation)",
                              "function acceptOwnership()",
                              "function getImplementation() view returns (address)",
                              "function nominateNewOwner(address newNominatedOwner)",
                              "function nominatedOwner() view returns (address)",
                              "function owner() view returns (address)",
                              "function renounceNomination()",
                              "function simulateUpgradeTo(address newImplementation)",
                              "function upgradeTo(address newImplementation)",
                              "error EmptyRevertReason()",
                              "error Errors(bytes[] errors)",
                              "error Errors(bytes[] revertReasons)",
                              "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                              "error InvalidParameter(string parameter, string reason)",
                              "error InvalidPrice(int256 price)",
                              "error NodeNotRegistered(bytes32 nodeId)",
                              "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                              "error OverflowInt256ToUint256()",
                              "error OverflowInt56ToInt24()",
                              "error OverflowUint256ToInt256()",
                              "error OverflowUint256ToUint160()",
                              "error OverflowUint56ToInt56()",
                              "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                              "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                              "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                              "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                            ],
                            "deployedOn": "router.OracleRouter",
                            "deployTxnHash": "0xea0d86ad6ff5608eab445f132f01d2f905f7396ce6517efaafa91bea4f3b64e4",
                            "deployTxnBlockNumber": "16649330",
                            "deployTimestamp": "1729066948",
                            "contractName": "OracleRouter",
                            "sourceName": "OracleRouter.sol",
                            "gasUsed": 262878,
                            "gasCost": "933131741"
                          },
                          "Proxy": {
                            "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                            "abi": [
                              "error ImplementationIsSterile(address implementation)",
                              "error NoChange()",
                              "error NotAContract(address contr)",
                              "error NotNominated(address addr)",
                              "error Unauthorized(address addr)",
                              "error UpgradeSimulationFailed()",
                              "error ZeroAddress()",
                              "event OwnerChanged(address oldOwner, address newOwner)",
                              "event OwnerNominated(address newOwner)",
                              "event Upgraded(address indexed self, address implementation)",
                              "function acceptOwnership()",
                              "function getImplementation() view returns (address)",
                              "function nominateNewOwner(address newNominatedOwner)",
                              "function nominatedOwner() view returns (address)",
                              "function owner() view returns (address)",
                              "function renounceNomination()",
                              "function simulateUpgradeTo(address newImplementation)",
                              "function upgradeTo(address newImplementation)",
                              "error EmptyRevertReason()",
                              "error Errors(bytes[] errors)",
                              "error Errors(bytes[] revertReasons)",
                              "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                              "error InvalidParameter(string parameter, string reason)",
                              "error InvalidPrice(int256 price)",
                              "error NodeNotRegistered(bytes32 nodeId)",
                              "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                              "error OverflowInt256ToUint256()",
                              "error OverflowInt56ToInt24()",
                              "error OverflowUint256ToInt256()",
                              "error OverflowUint256ToUint160()",
                              "error OverflowUint56ToInt56()",
                              "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                              "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                              "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                              "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                            ],
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "",
                            "sourceName": "contracts/Proxy.sol",
                            "contractName": "Proxy",
                            "deployedOn": "invoke.upgrade_proxy",
                            "gasUsed": 0,
                            "gasCost": "0",
                            "highlight": true
                          }
                        },
                        "imports": {
                          "trusted_multicall_forwarder": {
                            "url": "ipfs://QmQdXmwU7gK9cPRt3opFcf55yFfNjbLCHmea7LStWnsH6b",
                            "tags": [
                              "latest"
                            ],
                            "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                            "preset": "with-oracle-manager",
                            "settings": {
                              "salt": "salt"
                            },
                            "contracts": {
                              "TrustedMulticallForwarder": {
                                "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                                "abi": [
                                  "constructor()",
                                  "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                                  "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                                  "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                                  "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                                  "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                                  "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                                  "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                                  "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                                  "function getBasefee() view returns (uint256 basefee)",
                                  "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                                  "function getBlockNumber() view returns (uint256 blockNumber)",
                                  "function getChainId() view returns (uint256 chainid)",
                                  "function getCurrentBlockCoinbase() view returns (address coinbase)",
                                  "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                                  "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                                  "function getEthBalance(address addr) view returns (uint256 balance)",
                                  "function getLastBlockHash() view returns (bytes32 blockHash)",
                                  "function getPrevRandao() view returns (uint256 prevrandao)",
                                  "function nonces(address owner) view returns (uint256)",
                                  "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                                  "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                                  "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                                  "event EIP712DomainChanged()",
                                  "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                                  "error AddressInsufficientBalance(address account)",
                                  "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                                  "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                                  "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                                  "error ERC2771UntrustfulTarget(address target, address forwarder)",
                                  "error FailedInnerCall()",
                                  "error InvalidAccountNonce(address account, uint256 currentNonce)",
                                  "error InvalidShortString()",
                                  "error StringTooLong(string str)"
                                ],
                                "constructorArgs": [],
                                "linkedLibraries": {},
                                "deployTxnHash": "",
                                "deployTxnBlockNumber": "",
                                "deployTimestamp": "1729066940",
                                "sourceName": "src/TrustedMulticallForwarder.sol",
                                "contractName": "TrustedMulticallForwarder",
                                "deployedOn": "contract.TrustedMulticallForwarder",
                                "gasUsed": 0,
                                "gasCost": "0"
                              }
                            },
                            "extras": {
                              "salt": "salt"
                            }
                          }
                        },
                        "settings": {
                          "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                          "salt": "oracle-manager-official"
                        },
                        "txns": {
                          "upgrade_proxy": {
                            "hash": "0x202d083402f6ee504921fa463b2dbb2fd506d047cc95e73904a675fcda5a0603",
                            "blockNumber": "16649332",
                            "timestamp": "1729066952",
                            "events": {
                              "Upgraded": [
                                {
                                  "name": "Upgraded",
                                  "args": [
                                    "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                                    "0x0a6a3a1553351A2A3e71F90e1B892794F2A2e64C"
                                  ]
                                }
                              ]
                            },
                            "deployedOn": "invoke.upgrade_proxy",
                            "gasUsed": 55368,
                            "gasCost": "936076092",
                            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                          }
                        },
                        "extras": {
                          "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                          "salt": "oracle-manager-official"
                        }
                      }
                    },
                    "settings": {
                      "account_token_name": "Synthetix Account",
                      "account_token_symbol": "SACCT",
                      "bundleSalt": "main",
                      "oracle_manager_package": "oracle-manager",
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "main",
                      "usd_token_name": "Synthetic USD Token v3",
                      "usd_token_symbol": "sUSD"
                    },
                    "txns": {
                      "register_const_one_oracle": {
                        "hash": "0x2baa0591174c004d4cf5f6ecce14a0d357d558ea242b7dd9f489a88103e1143b",
                        "events": {
                          "NodeRegistered": [
                            {
                              "name": "NodeRegistered",
                              "args": [
                                "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                                8,
                                "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                                []
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.register_const_one_oracle",
                        "gasUsed": 108489,
                        "gasCost": "1000318",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "upgrade_core_proxy": {
                        "hash": "0x3267b8dd6102327a45f96ff36a84e61e82adb5200b444d083c5daa87f27be03a",
                        "blockNumber": "16649385",
                        "timestamp": "1729067058",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                                "0xAd3553dc909D1D72A290ae14a530A46C57bb4D3d"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_core_proxy",
                        "gasUsed": 51203,
                        "gasCost": "945601052",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_burnUsd": {
                        "hash": "0x7087b881678eb12e6f6863f6ea29870a42433c72616bbdcba6e5a46c73313a3b",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6275726e55736400000000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_burnUsd",
                        "gasUsed": 56959,
                        "gasCost": "1000323",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_claimRewards": {
                        "hash": "0x20bd61d41b1be63384c93217591d71142f1bd15099d2827c27f54dd9768ac4d3",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x636c61696d526577617264730000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_claimRewards",
                        "gasUsed": 57019,
                        "gasCost": "1000322",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_createAccount": {
                        "hash": "0x8f2bd10b10a82848836679f365118b10813db0fc60e99e8ff7eb792f0a1854dd",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_createAccount",
                        "gasUsed": 57031,
                        "gasCost": "1000322",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_delegateCollateral": {
                        "hash": "0x5e9d60081eea0c6ad048d34640dba307a518c3b7b2cc7d9745a732219b6e403c",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_delegateCollateral",
                        "gasUsed": 57091,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_deposit": {
                        "hash": "0x0513e0e724ed24f32dc7a1a9b0b0b3cd42e5eb4e961f7e9006d691e65070806e",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6465706f73697400000000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_deposit",
                        "gasUsed": 56959,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_depositMarketCollateral": {
                        "hash": "0xcab8c6233dd9fe48e21b3ffa2c747e4224aa40cc2d71d627395bd416f7d05bec",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                        "gasUsed": 57151,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_depositMarketUsd": {
                        "hash": "0xed336b2c8be6acab9d4056f47fc368e220f5e3cab3316c95a2412f02dd53444b",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_depositMarketUsd",
                        "gasUsed": 57067,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_liquidate": {
                        "hash": "0x775cea26782e06292cd0f5d15463437a9efa9a19f81c7d5b486dd3ad0b607eb1",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6c69717569646174650000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_liquidate",
                        "gasUsed": 56983,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_liquidateVault": {
                        "hash": "0x6795708a5819e8ad9d54ab5ca382b90d8fbec48895738ec5fc84c3d477f0853d",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_liquidateVault",
                        "gasUsed": 57043,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_mintUsd": {
                        "hash": "0x1aa28aa9444a30ed09728dbed1a86c4ecb2cc37140e209abbaa62ce3e67879b7",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_mintUsd",
                        "gasUsed": 56959,
                        "gasCost": "1000324",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_withdraw": {
                        "hash": "0x76745b191844c7843b1e49d6a42d889e4dd7d9fdfac8308c90ec1ccde11baf0b",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x7769746864726177000000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_withdraw",
                        "gasUsed": 56971,
                        "gasCost": "1000323",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_withdrawMarketCollateral": {
                        "hash": "0x38ef18c9a665af7164e3951e392b51f679c1e8fd2fe1479c567ad2d20031e701",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                        "gasUsed": 57163,
                        "gasCost": "1000322",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_withdrawMarketUsd": {
                        "hash": "0x543ca887549b2eadefd10046a56fccbfea6d28e7601d1ad5b9f5b66e76262696",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                        "gasUsed": 57079,
                        "gasCost": "1000322",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "init_account": {
                        "hash": "0xc77f2d5b29d94e33e6fe2c485bbea010c30f2be170dd4a6073e9bd7ce8b39537",
                        "blockNumber": "16649389",
                        "timestamp": "1729067066",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                                "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                              ]
                            }
                          ],
                          "AssociatedSystemSet": [
                            {
                              "name": "AssociatedSystemSet",
                              "args": [
                                "0x6572633732310000000000000000000000000000000000000000000000000000",
                                "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                                "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                                "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.init_account",
                        "gasUsed": 80750,
                        "gasCost": "941134834",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "init_usd": {
                        "hash": "0x20f2eeac2a57f555e34d11b45eb88da7ec04144fc1a4893f35e00b91358530ce",
                        "blockNumber": "16649392",
                        "timestamp": "1729067072",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                                "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                              ]
                            }
                          ],
                          "AssociatedSystemSet": [
                            {
                              "name": "AssociatedSystemSet",
                              "args": [
                                "0x6572633230000000000000000000000000000000000000000000000000000000",
                                "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                                "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                                "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.init_usd",
                        "gasUsed": 96850,
                        "gasCost": "941615446",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "set_oracle_manager": {
                        "hash": "0xeb4c8bbf4df4f31f7e6470d8a05ab93d2fd8c934dceb6e1f8ea6125b240e0cb9",
                        "events": {},
                        "deployedOn": "invoke.set_oracle_manager",
                        "gasUsed": 54820,
                        "gasCost": "1000325",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "configure_usd_collateral": {
                        "hash": "0x2604376b5f5bf98e8d9c59562480ca3305b7b4b419df622ca7ab80008935f347",
                        "events": {
                          "CollateralConfigured": [
                            {
                              "name": "CollateralConfigured",
                              "args": [
                                "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                                {
                                  "depositingEnabled": true,
                                  "issuanceRatioD18": "10000000000000000000",
                                  "liquidationRatioD18": "10000000000000000000",
                                  "liquidationRewardD18": "0",
                                  "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                                  "tokenAddress": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                                  "minDelegationD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                                }
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.configure_usd_collateral",
                        "gasUsed": 240637,
                        "gasCost": "1000324",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      }
                    },
                    "extras": {
                      "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                      "account_token_name": "Synthetix Account",
                      "account_token_symbol": "SACCT",
                      "bundleSalt": "main",
                      "oracle_manager_package": "oracle-manager",
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "main",
                      "usd_token_name": "Synthetic USD Token v3",
                      "usd_token_symbol": "sUSD"
                    }
                  }
                },
                "txns": {
                  "upgradeSpotMarketProxy": {
                    "hash": "0x8c25e4a5c99e0e998e9da0470092a0e3c97bd93a96329208588f192212ceb546",
                    "blockNumber": "16649426",
                    "timestamp": "1729067140",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                            "0x07463c0c2ba77A6B6a69170Fb8c0E50CC5F588A4"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgradeSpotMarketProxy",
                    "gasUsed": 55585,
                    "gasCost": "950724163",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "addCreateSynthToFeatureFlag": {
                    "hash": "0x82a8c86f5a0e14670416819828d30d9e0774df83b023dee86b932ca5537c9964",
                    "events": {
                      "FeatureFlagAllowlistAdded": [
                        {
                          "name": "FeatureFlagAllowlistAdded",
                          "args": [
                            "0x63726561746553796e7468000000000000000000000000000000000000000000",
                            "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.addCreateSynthToFeatureFlag",
                    "gasUsed": 101751,
                    "gasCost": "1000316",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "addSpotMarketToFeatureFlag": {
                    "hash": "0x8485a13d2e27ef8d944e5e113a885e6060b70ee830465607e86d7b85d425600e",
                    "events": {
                      "FeatureFlagAllowlistAdded": [
                        {
                          "name": "FeatureFlagAllowlistAdded",
                          "args": [
                            "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                            "0xaD2fE7cd224c58871f541DAE01202F93928FEF72"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.addSpotMarketToFeatureFlag",
                    "gasUsed": 101643,
                    "gasCost": "1000325",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "setSynthImplementation": {
                    "hash": "0xfcaa7615223c60f845418265f66cf40a75458b69cd55e84638499ba899dd1093",
                    "blockNumber": "16649428",
                    "timestamp": "1729067144",
                    "events": {
                      "SynthImplementationSet": [
                        {
                          "name": "SynthImplementationSet",
                          "args": [
                            "0xcdfcE502963A101D544E0b0c9641a53fd6cfdC80"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.setSynthImplementation",
                    "gasUsed": 39108,
                    "gasCost": "954496463",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "setSynthetixSystem": {
                    "hash": "0x069c049a5441049a39db88371887cbfbe67c3d27e3098d90b2332fa640cbe22c",
                    "events": {
                      "SynthetixSystemSet": [
                        {
                          "name": "SynthetixSystemSet",
                          "args": [
                            "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.setSynthetixSystem",
                    "gasUsed": 124285,
                    "gasCost": "1000324",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  }
                },
                "extras": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "snax",
                  "synthetixPackage": "synthetix",
                  "synthetixPreset": "main"
                }
              },
              "synthetix": {
                "url": "ipfs://QmaoPV7jyHQF6ViTqPMvRFqGS3HWrXwr6Y1wCBtkai1Fbw",
                "contracts": {
                  "AccountModule": {
                    "address": "0xd4DFE8F3b91007ec187f8b74A3cEEDBA7A0873f7",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "error ZeroAddress()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x734f5d976bbfa5c0ec21808b4ff1b1b0532bdaaf2a07db1d08bde28c202bca66",
                    "deployTxnBlockNumber": "16649339",
                    "deployTimestamp": "1729066966",
                    "sourceName": "contracts/modules/core/AccountModule.sol",
                    "contractName": "AccountModule",
                    "deployedOn": "contract.AccountModule",
                    "gasUsed": 1225809,
                    "gasCost": "936592307"
                  },
                  "AccountTokenModule": {
                    "address": "0x6d448d821cbd5AA1A52dD3854ed0AEc2d1BF8832",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xd2af7a26d94f40173e1efabe174b03163cfb551b29fa45c909b70878f3b292b4",
                    "deployTxnBlockNumber": "16649341",
                    "deployTimestamp": "1729066970",
                    "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                    "contractName": "AccountTokenModule",
                    "deployedOn": "contract.AccountTokenModule",
                    "gasUsed": 1787668,
                    "gasCost": "932975250"
                  },
                  "AssociateDebtModule": {
                    "address": "0xEe047Ca39AE1EF562f3D5F23c1B8A5b074955331",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x2cdc64893f97d21159360a5096ad3abe14df13349fee8361324c43c10f10e694",
                    "deployTxnBlockNumber": "16649344",
                    "deployTimestamp": "1729066976",
                    "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                    "contractName": "AssociateDebtModule",
                    "deployedOn": "contract.AssociateDebtModule",
                    "gasUsed": 2603996,
                    "gasCost": "933120208"
                  },
                  "AssociatedSystemsModule": {
                    "address": "0xC8440d8e46D3C06beD106C6f2F918F30182bEb06",
                    "abi": [
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error Unauthorized(address addr)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xbdad45d38a1b1de1a6d9518ac7192e5bf5cf0c338a9f8c41fdbd33a30d9c6610",
                    "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                    "contractName": "AssociatedSystemsModule",
                    "deployedOn": "contract.AssociatedSystemsModule",
                    "gasUsed": 877153,
                    "gasCost": "1000305"
                  },
                  "CcipReceiverModule": {
                    "address": "0x290052592c38b55f827ec377B2a8023e734B815C",
                    "abi": [
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error Unauthorized(address addr)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x0a1ac64516ad97aca7fe23966c6050476f7c839b286cf64a5e2338d8a9e7e7b2",
                    "deployTxnBlockNumber": "16649346",
                    "deployTimestamp": "1729066980",
                    "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                    "contractName": "CcipReceiverModule",
                    "deployedOn": "contract.CcipReceiverModule",
                    "gasUsed": 469476,
                    "gasCost": "936917569"
                  },
                  "CollateralConfigurationModule": {
                    "address": "0x98A58c2A364f5C9dA829a8738Ba8b192E7B706db",
                    "abi": [
                      "error EmptyRevertReason()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error PositionOutOfBounds()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x3050067c8dad45ed319ffc5d018760acea5008c4bcdab87d645144b585beb212",
                    "deployTxnBlockNumber": "16649348",
                    "deployTimestamp": "1729066984",
                    "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                    "contractName": "CollateralConfigurationModule",
                    "deployedOn": "contract.CollateralConfigurationModule",
                    "gasUsed": 872728,
                    "gasCost": "937172209"
                  },
                  "CollateralModule": {
                    "address": "0xE8Ae6cAC1aBbC0Eef81D85f8f5f4402f164300FD",
                    "abi": [
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error AccountNotFound(uint128 accountId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x9135ef7a5060b7e3b30af8aaf4cbea2747784ce00a8f74d3498f66fab944981d",
                    "deployTxnBlockNumber": "16649350",
                    "deployTimestamp": "1729066988",
                    "sourceName": "contracts/modules/core/CollateralModule.sol",
                    "contractName": "CollateralModule",
                    "deployedOn": "contract.CollateralModule",
                    "gasUsed": 1878022,
                    "gasCost": "937764119"
                  },
                  "CrossChainUSDModule": {
                    "address": "0x0Db649f56b99B15c70198C925CD374b95B6Df5E8",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xd57eddd8ebbaaffdda7d1ccdedd8345b8cb7e1dba787af550943cc10b7be4830",
                    "deployTxnBlockNumber": "16649352",
                    "deployTimestamp": "1729066992",
                    "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                    "contractName": "CrossChainUSDModule",
                    "deployedOn": "contract.CrossChainUSDModule",
                    "gasUsed": 595289,
                    "gasCost": "934748763"
                  },
                  "FeatureFlagModule": {
                    "address": "0x57a24eafBCeDF9CEFD242b259517C84b9d72e3Ae",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xb8ed47b80ee3a4301f24b809cb8376373e4d68fea596a8c4c7ab5a89228c5a68",
                    "deployTxnBlockNumber": "16649354",
                    "deployTimestamp": "1729066996",
                    "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 777054,
                    "gasCost": "935496418"
                  },
                  "IssueUSDModule": {
                    "address": "0x8C9126A0dD9e2B60a69a4957669C507ff1c07C69",
                    "abi": [
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x1c864f9da23ddbe73a793494ef991044b6588ae73c290a6e79b4535649f698d9",
                    "deployTxnBlockNumber": "16649356",
                    "deployTimestamp": "1729067000",
                    "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                    "contractName": "IssueUSDModule",
                    "deployedOn": "contract.IssueUSDModule",
                    "gasUsed": 2940922,
                    "gasCost": "937306460"
                  },
                  "LiquidationModule": {
                    "address": "0xC090A806CC37c4C6CA9fc8eb7b7098d78eE72b60",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error CannotScaleEmptyMapping()",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint256ToUint64()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PositionOutOfBounds()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x3f4c10c3063b131da4b40f91d2fef5bc8294293ea31a63c606131902ecc314d0",
                    "deployTxnBlockNumber": "16649358",
                    "deployTimestamp": "1729067004",
                    "sourceName": "contracts/modules/core/LiquidationModule.sol",
                    "contractName": "LiquidationModule",
                    "deployedOn": "contract.LiquidationModule",
                    "gasUsed": 4289682,
                    "gasCost": "935586433"
                  },
                  "MarketCollateralModule": {
                    "address": "0xD88de2Ee855f145ab1eCFfF8273661C3d59fc8ad",
                    "abi": [
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "error Unauthorized(address addr)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xc5c4642d703fe51a5736f64cd0b91f641d0b0b14d582596313c350ac2b529f9e",
                    "deployTxnBlockNumber": "16649360",
                    "deployTimestamp": "1729067008",
                    "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                    "contractName": "MarketCollateralModule",
                    "deployedOn": "contract.MarketCollateralModule",
                    "gasUsed": 1298300,
                    "gasCost": "938598453"
                  },
                  "MarketManagerModule": {
                    "address": "0x35B79eD956064338d3DF10abc215Ab128C6265BE",
                    "abi": [
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IncorrectMarketInterface(address market)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xe7d5907e9bc6931cfd5d6ec2ee85fd04e32746281b79230ec9d301536c5e90ae",
                    "deployTxnBlockNumber": "16649362",
                    "deployTimestamp": "1729067012",
                    "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                    "contractName": "MarketManagerModule",
                    "deployedOn": "contract.MarketManagerModule",
                    "gasUsed": 2730455,
                    "gasCost": "938162086"
                  },
                  "PoolConfigurationModule": {
                    "address": "0x39fBdCBa20E57BC672DDD9f5756Dc8b5Fabe526a",
                    "abi": [
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xfe15402ad6fe9cfd54a4da2874d181a8c516c025d984b5ec4740f2910cea30ec",
                    "deployTxnBlockNumber": "16649364",
                    "deployTimestamp": "1729067016",
                    "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                    "contractName": "PoolConfigurationModule",
                    "deployedOn": "contract.PoolConfigurationModule",
                    "gasUsed": 446271,
                    "gasCost": "938194121"
                  },
                  "PoolModule": {
                    "address": "0x65a62Dc05B66FD007d05f2E34085348A45c6a424",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x4a9563128d503b59b74d159ed8b1745ec4d75645cb505f1a53f4990267c38886",
                    "deployTxnBlockNumber": "16649366",
                    "deployTimestamp": "1729067020",
                    "sourceName": "contracts/modules/core/PoolModule.sol",
                    "contractName": "PoolModule",
                    "deployedOn": "contract.PoolModule",
                    "gasUsed": 3986001,
                    "gasCost": "941481539"
                  },
                  "RewardsManagerModule": {
                    "address": "0x4A3979b6dc29B311e8c27D4E2cdF1E35f89913b0",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error RewardUnavailable(address distributor)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xbbc9ba761efa021f34153e39acaf3c8123e8d7a81f928be226b312cd978c2e16",
                    "deployTxnBlockNumber": "16649368",
                    "deployTimestamp": "1729067024",
                    "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                    "contractName": "RewardsManagerModule",
                    "deployedOn": "contract.RewardsManagerModule",
                    "gasUsed": 2642251,
                    "gasCost": "942593115"
                  },
                  "USDTokenModule": {
                    "address": "0x2F0f4304676B1399D970bac6488053F7014A80a6",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xca0f2c066651896de5930e5ee954bd0c03b025fa2c2a32eb8395c335a6d6905a",
                    "deployTxnBlockNumber": "16649371",
                    "deployTimestamp": "1729067030",
                    "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                    "contractName": "USDTokenModule",
                    "deployedOn": "contract.USDTokenModule",
                    "gasUsed": 1110294,
                    "gasCost": "939871566"
                  },
                  "UtilsModule": {
                    "address": "0xa76f3067888222b37a667814f696038b658B7368",
                    "abi": [
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x1e9d8122afd7dc158660bf1f9bb8ea629ed274203f628129ae91b5f54fe5753e",
                    "deployTxnBlockNumber": "16649373",
                    "deployTimestamp": "1729067034",
                    "sourceName": "contracts/modules/core/UtilsModule.sol",
                    "contractName": "UtilsModule",
                    "deployedOn": "contract.UtilsModule",
                    "gasUsed": 759697,
                    "gasCost": "944385460"
                  },
                  "VaultModule": {
                    "address": "0xA24ECBF86E4cD4763084cF1f1E7709400cE8d3BC",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "error PoolNotFound(uint128 poolId)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x939f10bb60d2dba483fa7c5c900ca69760fe55dad1191ecf1e26c9ea9e83a50a",
                    "deployTxnBlockNumber": "16649375",
                    "deployTimestamp": "1729067038",
                    "sourceName": "contracts/modules/core/VaultModule.sol",
                    "contractName": "VaultModule",
                    "deployedOn": "contract.VaultModule",
                    "gasUsed": 4244908,
                    "gasCost": "941449312"
                  },
                  "InitialModuleBundle": {
                    "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/modules/InitialModuleBundle.sol",
                    "contractName": "InitialModuleBundle",
                    "deployedOn": "contract.InitialModuleBundle",
                    "gasUsed": 0,
                    "gasCost": "0"
                  },
                  "InitialCoreProxy": {
                    "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x828EED723cAF0A8F822249231266E38dF614923C",
                      "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x5913f591061763378a9209c9ea168efbfd1de19af4440dbfcf5a73004f091491",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialCoreProxy",
                    "gasUsed": 185358,
                    "gasCost": "1000317"
                  },
                  "AccountRouter": {
                    "address": "0x768f77f75c7c4b6b81758bf56ce0ab70762b37e6",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployedOn": "router.AccountRouter",
                    "deployTxnHash": "0xbac818a079f296ffb1759aaecef641f5471ebed0cf6829aba98ea826cbb07a0b",
                    "deployTxnBlockNumber": "16649378",
                    "deployTimestamp": "1729067044",
                    "contractName": "AccountRouter",
                    "sourceName": "AccountRouter.sol",
                    "gasUsed": 406486,
                    "gasCost": "949929423"
                  },
                  "CoreRouter": {
                    "address": "0xad3553dc909d1d72a290ae14a530a46c57bb4d3d",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "deployedOn": "router.CoreRouter",
                    "deployTxnHash": "0x7a059a46a4b514a360ccf2260f8bc8baa33bf74f309a7ba1c0fa2952e8b30f6a",
                    "deployTxnBlockNumber": "16649380",
                    "deployTimestamp": "1729067048",
                    "contractName": "CoreRouter",
                    "sourceName": "CoreRouter.sol",
                    "gasUsed": 1318142,
                    "gasCost": "945143807"
                  },
                  "USDRouter": {
                    "address": "0x44d4a4796a7604419e4051d4ab1e060759db99fb",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.USDRouter",
                    "deployTxnHash": "0xade8ab8e92554c274e7b22ab353c4fe32ed2754195a0dcce871f2f73f21dc611",
                    "deployTxnBlockNumber": "16649382",
                    "deployTimestamp": "1729067052",
                    "contractName": "USDRouter",
                    "sourceName": "USDRouter.sol",
                    "gasUsed": 398033,
                    "gasCost": "945780250"
                  },
                  "CoreProxy": {
                    "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "AccountProxy": {
                    "address": "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "USDProxy": {
                    "address": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "imports": {
                  "trusted_multicall_forwarder": {
                    "url": "ipfs://QmYi3NuhRQQVwHZLQd9KBCsg2HKeFP769mR6Yi2g2mA9cE",
                    "tags": [
                      "latest"
                    ],
                    "preset": "with-synthetix",
                    "settings": {
                      "salt": "salt"
                    },
                    "contracts": {
                      "TrustedMulticallForwarder": {
                        "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                        "abi": [
                          "constructor()",
                          "error AddressInsufficientBalance(address account)",
                          "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                          "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                          "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                          "error ERC2771UntrustfulTarget(address target, address forwarder)",
                          "error FailedInnerCall()",
                          "error InvalidAccountNonce(address account, uint256 currentNonce)",
                          "error InvalidShortString()",
                          "error StringTooLong(string str)",
                          "event EIP712DomainChanged()",
                          "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                          "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                          "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                          "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                          "function getBasefee() view returns (uint256 basefee)",
                          "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                          "function getBlockNumber() view returns (uint256 blockNumber)",
                          "function getChainId() view returns (uint256 chainid)",
                          "function getCurrentBlockCoinbase() view returns (address coinbase)",
                          "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                          "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                          "function getEthBalance(address addr) view returns (uint256 balance)",
                          "function getLastBlockHash() view returns (bytes32 blockHash)",
                          "function getPrevRandao() view returns (uint256 prevrandao)",
                          "function nonces(address owner) view returns (uint256)",
                          "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "sourceName": "src/TrustedMulticallForwarder.sol",
                        "contractName": "TrustedMulticallForwarder",
                        "deployedOn": "contract.TrustedMulticallForwarder",
                        "gasUsed": 0,
                        "gasCost": "0"
                      }
                    },
                    "extras": {
                      "salt": "salt"
                    }
                  },
                  "oracle_manager": {
                    "url": "ipfs://QmaSYrc3XvdZ2LhUDQ2njMCkHsfNT3nDLDDLJWwE8UaVkr",
                    "contracts": {
                      "NodeModule": {
                        "address": "0xE1681e5aC826043Ae6575ee1fD5E7064751c2fc5",
                        "abi": [
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x1ca8b07aa6e171c4948031b71bfa2a8f9ffc7bbbbea847313177653956f58c31",
                        "deployTxnBlockNumber": "16649324",
                        "deployTimestamp": "1729066936",
                        "sourceName": "contracts/modules/NodeModule.sol",
                        "contractName": "NodeModule",
                        "deployedOn": "contract.NodeModule",
                        "gasUsed": 4820634,
                        "gasCost": "930730936"
                      },
                      "CoreModule": {
                        "address": "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1729066942",
                        "sourceName": "contracts/modules/CoreModule.sol",
                        "contractName": "CoreModule",
                        "deployedOn": "contract.CoreModule",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "InitialProxy": {
                        "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                          "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1729066944",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialProxy",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "OracleRouter": {
                        "address": "0x0a6a3a1553351a2a3e71f90e1b892794f2a2e64c",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployedOn": "router.OracleRouter",
                        "deployTxnHash": "0xea0d86ad6ff5608eab445f132f01d2f905f7396ce6517efaafa91bea4f3b64e4",
                        "deployTxnBlockNumber": "16649330",
                        "deployTimestamp": "1729066948",
                        "contractName": "OracleRouter",
                        "sourceName": "OracleRouter.sol",
                        "gasUsed": 262878,
                        "gasCost": "933131741"
                      },
                      "Proxy": {
                        "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmQdXmwU7gK9cPRt3opFcf55yFfNjbLCHmea7LStWnsH6b",
                        "tags": [
                          "latest"
                        ],
                        "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                        "preset": "with-oracle-manager",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1729066940",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      }
                    },
                    "settings": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    },
                    "txns": {
                      "upgrade_proxy": {
                        "hash": "0x202d083402f6ee504921fa463b2dbb2fd506d047cc95e73904a675fcda5a0603",
                        "blockNumber": "16649332",
                        "timestamp": "1729066952",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                                "0x0a6a3a1553351A2A3e71F90e1B892794F2A2e64C"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 55368,
                        "gasCost": "936076092",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      }
                    },
                    "extras": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    }
                  }
                },
                "settings": {
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                },
                "txns": {
                  "register_const_one_oracle": {
                    "hash": "0x2baa0591174c004d4cf5f6ecce14a0d357d558ea242b7dd9f489a88103e1143b",
                    "events": {
                      "NodeRegistered": [
                        {
                          "name": "NodeRegistered",
                          "args": [
                            "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                            8,
                            "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                            []
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.register_const_one_oracle",
                    "gasUsed": 108489,
                    "gasCost": "1000318",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "upgrade_core_proxy": {
                    "hash": "0x3267b8dd6102327a45f96ff36a84e61e82adb5200b444d083c5daa87f27be03a",
                    "blockNumber": "16649385",
                    "timestamp": "1729067058",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                            "0xAd3553dc909D1D72A290ae14a530A46C57bb4D3d"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 51203,
                    "gasCost": "945601052",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_burnUsd": {
                    "hash": "0x7087b881678eb12e6f6863f6ea29870a42433c72616bbdcba6e5a46c73313a3b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6275726e55736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_burnUsd",
                    "gasUsed": 56959,
                    "gasCost": "1000323",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_claimRewards": {
                    "hash": "0x20bd61d41b1be63384c93217591d71142f1bd15099d2827c27f54dd9768ac4d3",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x636c61696d526577617264730000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_claimRewards",
                    "gasUsed": 57019,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_createAccount": {
                    "hash": "0x8f2bd10b10a82848836679f365118b10813db0fc60e99e8ff7eb792f0a1854dd",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_createAccount",
                    "gasUsed": 57031,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_delegateCollateral": {
                    "hash": "0x5e9d60081eea0c6ad048d34640dba307a518c3b7b2cc7d9745a732219b6e403c",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_delegateCollateral",
                    "gasUsed": 57091,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_deposit": {
                    "hash": "0x0513e0e724ed24f32dc7a1a9b0b0b3cd42e5eb4e961f7e9006d691e65070806e",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f73697400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_deposit",
                    "gasUsed": 56959,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_depositMarketCollateral": {
                    "hash": "0xcab8c6233dd9fe48e21b3ffa2c747e4224aa40cc2d71d627395bd416f7d05bec",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                    "gasUsed": 57151,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_depositMarketUsd": {
                    "hash": "0xed336b2c8be6acab9d4056f47fc368e220f5e3cab3316c95a2412f02dd53444b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketUsd",
                    "gasUsed": 57067,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_liquidate": {
                    "hash": "0x775cea26782e06292cd0f5d15463437a9efa9a19f81c7d5b486dd3ad0b607eb1",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174650000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidate",
                    "gasUsed": 56983,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_liquidateVault": {
                    "hash": "0x6795708a5819e8ad9d54ab5ca382b90d8fbec48895738ec5fc84c3d477f0853d",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateVault",
                    "gasUsed": 57043,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_mintUsd": {
                    "hash": "0x1aa28aa9444a30ed09728dbed1a86c4ecb2cc37140e209abbaa62ce3e67879b7",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_mintUsd",
                    "gasUsed": 56959,
                    "gasCost": "1000324",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdraw": {
                    "hash": "0x76745b191844c7843b1e49d6a42d889e4dd7d9fdfac8308c90ec1ccde11baf0b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x7769746864726177000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdraw",
                    "gasUsed": 56971,
                    "gasCost": "1000323",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdrawMarketCollateral": {
                    "hash": "0x38ef18c9a665af7164e3951e392b51f679c1e8fd2fe1479c567ad2d20031e701",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                    "gasUsed": 57163,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdrawMarketUsd": {
                    "hash": "0x543ca887549b2eadefd10046a56fccbfea6d28e7601d1ad5b9f5b66e76262696",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                    "gasUsed": 57079,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "init_account": {
                    "hash": "0xc77f2d5b29d94e33e6fe2c485bbea010c30f2be170dd4a6073e9bd7ce8b39537",
                    "blockNumber": "16649389",
                    "timestamp": "1729067066",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                            "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633732310000000000000000000000000000000000000000000000000000",
                            "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                            "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                            "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 80750,
                    "gasCost": "941134834",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "init_usd": {
                    "hash": "0x20f2eeac2a57f555e34d11b45eb88da7ec04144fc1a4893f35e00b91358530ce",
                    "blockNumber": "16649392",
                    "timestamp": "1729067072",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633230000000000000000000000000000000000000000000000000000000",
                            "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 96850,
                    "gasCost": "941615446",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "set_oracle_manager": {
                    "hash": "0xeb4c8bbf4df4f31f7e6470d8a05ab93d2fd8c934dceb6e1f8ea6125b240e0cb9",
                    "events": {},
                    "deployedOn": "invoke.set_oracle_manager",
                    "gasUsed": 54820,
                    "gasCost": "1000325",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "configure_usd_collateral": {
                    "hash": "0x2604376b5f5bf98e8d9c59562480ca3305b7b4b419df622ca7ab80008935f347",
                    "events": {
                      "CollateralConfigured": [
                        {
                          "name": "CollateralConfigured",
                          "args": [
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            {
                              "depositingEnabled": true,
                              "issuanceRatioD18": "10000000000000000000",
                              "liquidationRatioD18": "10000000000000000000",
                              "liquidationRewardD18": "0",
                              "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                              "tokenAddress": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                              "minDelegationD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                            }
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.configure_usd_collateral",
                    "gasUsed": 240637,
                    "gasCost": "1000324",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  }
                },
                "extras": {
                  "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                }
              }
            },
            "txns": {
              "upgrade_proxy": {
                "hash": "0x79850738fb95d4546cb6212236e129b1078397804570a21af26cc1f2a9c39903",
                "blockNumber": "17158780",
                "timestamp": "1730085848",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xf53Ca60F031FAf0E347D44FbaA4870da68250c8d",
                        "0xAf77b0f116C31985AB22632BC0E5e2D70086cec2"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 55685,
                "gasCost": "1000255",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "addCreateMarketToFeatureFlag": {
                "hash": "0x0c80c1ed7a32e66972024f52c7f73a81c9dc2c0340e3f85fab900974d5109cfa",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x6372656174654d61726b65740000000000000000000000000000000000000000",
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.addCreateMarketToFeatureFlag",
                "gasUsed": 101763,
                "gasCost": "1000327",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "addPerpsMarketToFeatureFlag": {
                "hash": "0x026fbf5d27d862fd0542a415e68cad8c8dcc55435822187321412071c7211e02",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                        "0xf53Ca60F031FAf0E347D44FbaA4870da68250c8d"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.addPerpsMarketToFeatureFlag",
                "gasUsed": 84543,
                "gasCost": "1000325",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enableFeatureCreateAccount": {
                "hash": "0x73f6076910dafb449b239fb4c9ab098b8c0cad1e4d7a2caf6fa21b985100dc93",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enableFeatureCreateAccount",
                "gasUsed": 57197,
                "gasCost": "1000324",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_account": {
                "hash": "0xf7a3c2f4b804512540436f89c4c3d6181cc35c4e9baf9e9f8ca841a58aea7123",
                "blockNumber": "16649462",
                "timestamp": "1729067212",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xc8eE218577545D5b38443C0eB5d7B9E4140085F2",
                        "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                      ]
                    }
                  ],
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                        "0xc8eE218577545D5b38443C0eB5d7B9E4140085F2",
                        "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_account",
                "gasUsed": 80742,
                "gasCost": "948938780",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "initializeFactory": {
                "hash": "0xd0bd87e8049c3e2447e8bce991d639fe50c0b901ec6d6db25edd6542ccd7784f",
                "events": {
                  "FactoryInitialized": [
                    {
                      "name": "FactoryInitialized",
                      "args": [
                        "2"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.initializeFactory",
                "gasUsed": 275706,
                "gasCost": "1000327",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {
              "superMarketId": "2",
              "coreProxyOwner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "spotMarketPackage": "synthetix-spot-market:latest",
              "spotMarketPreset": "main",
              "synthetixPackage": "synthetix:latest",
              "synthetixPreset": "main"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.registerPerps_KeeperCostUsdOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPerps_KeeperCostUsdOracleNode": {
            "hash": "0xf55e97f6de6193a0458ab3cbb57236b7d0b2982c5ee7fb0bc956c131e57867d5",
            "blockNumber": "16432727",
            "timestamp": "1728633742",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x413b29bd12d25ea4bc1cf23feb2d030d4b32cece0a9c940412dc984f0a444f4e",
                    1,
                    "0x0000000000000000000000000000000000000000000000000000000000000007",
                    [
                      "0x88e7ea7b862b6f90aacf9b0f868277d85b78828b65f8bd13f5be71e114b6f1f5",
                      "0x5bd492340e6cabcad4e493583225fd58cbbaa8252bd98cc87ff2558741a62c4c"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPerps_KeeperCostUsdOracleNode",
            "gasUsed": 294132,
            "gasCost": "317771126",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "perps_keeper_cost_usd_oracle_id": "0x413b29bd12d25ea4bc1cf23feb2d030d4b32cece0a9c940412dc984f0a444f4e"
        }
      },
      "hash": "55de1b02692d556d40a30af862edcee8",
      "version": 7
    },
    "invoke.configure_usdc_collateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configure_usdc_collateral": {
            "hash": "0x6afa245c8c7f080013705f44c270484d8238098c44fb3f5583ede5172354cc7e",
            "blockNumber": "13287508",
            "timestamp": "1722343304",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0xc43708f8987Df3f3681801e5e640667D86Ce3C30",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
                      "liquidationRatioD18": "1005000000000000000",
                      "liquidationRewardD18": "1000000000000000000",
                      "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                      "tokenAddress": "0xc43708f8987Df3f3681801e5e640667D86Ce3C30",
                      "minDelegationD18": "100000000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configure_usdc_collateral",
            "gasUsed": 59368,
            "gasCost": "11217633",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "aa971363c30218b5bbaa19eccef2c79f",
      "version": 7
    },
    "invoke.permitCreatePool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "permitCreatePool": {
            "hash": "0xc3f23510a497fc0f950b9148b19a99cf4b40abbeb9a3c73f303c8ac398647a03",
            "events": {
              "FeatureFlagAllowlistAdded": [
                {
                  "name": "FeatureFlagAllowlistAdded",
                  "args": [
                    "0x637265617465506f6f6c00000000000000000000000000000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.permitCreatePool",
            "gasUsed": 101595,
            "gasCost": "1000323",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "d38505398186058faa907343eef3e45d",
      "version": 6
    },
    "invoke.setAccountTimeoutWithdraw": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setAccountTimeoutWithdraw": {
            "hash": "0xe29b843fc141d6d163defad772f065b6e62302850249346dd262da6518067b13",
            "events": {},
            "deployedOn": "invoke.setAccountTimeoutWithdraw",
            "gasUsed": 54941,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "e3f9ea153fa0f2622d58c2c8a7600cdf",
      "version": 6
    },
    "invoke.setMinimumLiquidityRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setMinimumLiquidityRatio": {
            "hash": "0x5eab449bf7ae448cbcb912ecfe220330e29e5d93a4e73fb510222f4e2c6bc90d",
            "events": {
              "SetMinLiquidityRatio": [
                {
                  "name": "SetMinLiquidityRatio",
                  "args": [
                    "1250000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setMinimumLiquidityRatio",
            "gasUsed": 55734,
            "gasCost": "1000327",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "d2a5bd029c0e2964e82e1ea52a43b636",
      "version": 6
    },
    "invoke.set_deniers_core_withdraw": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "set_deniers_core_withdraw": {
            "hash": "0xc87a8f494dee540f76d21b05e2e723cbe31c1d9e9519cc167890abfd7985c823",
            "blockNumber": "15234551",
            "timestamp": "1726237390",
            "events": {
              "FeatureFlagDeniersReset": [
                {
                  "name": "FeatureFlagDeniersReset",
                  "args": [
                    "0x7769746864726177000000000000000000000000000000000000000000000000",
                    [
                      "0x28Ed18Bd77A061E0A886a2a8FFb91da95FF03E56",
                      "0xd9b891AB93C210eafa46c61fAeb53836F99aa35B",
                      "0x0B67bab43157e53D21965Af0d83f83BeD9553E0a",
                      "0xe1Efa5C91cA533E4a51884d805879249E3FCB2BC",
                      "0x6985b94Db148eDd4df6BD1Ba3F4640da79B44947",
                      "0x599e835cbFC903eF09f3Dd5E08D1cF63c32AF8d8",
                      "0x347c3190bD015FBD0e47fb90AA4917138A8A32FE",
                      "0x562948111d50BF039A39Eea48D127f2Ae51ddF02",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.set_deniers_core_withdraw",
            "gasUsed": 72025,
            "gasCost": "1719645",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "626d0cb9fd9f2f3820696194ebddf824",
      "version": 7
    },
    "invoke.createScPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createScPool": {
            "hash": "0xc1c1cbe1e86532de2787c7cf71a5061d6b1158ba594f882d9d47604996f6bc28",
            "events": {
              "PoolCreated": [
                {
                  "name": "PoolCreated",
                  "args": [
                    "1",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createScPool",
            "gasUsed": 82572,
            "gasCost": "1000326",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "ea3a61f46151b6e66963b18fa33c0b15",
      "version": 6
    },
    "invoke.createUsdcSynth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createUsdcSynth": {
            "hash": "0x1fca4cf66dcebafefbe3732519f69c5890c05b8905d8d9309e7b8df55eddd1e3",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x6572633230000000000000000000000000000000000000000000000000000000",
                    "0x53f30006c39822da511b35a39972853ada7751741b0287254deb2bedfa69e6a6",
                    "0x8069c44244e72443722cfb22DcE5492cba239d39",
                    "0x3b1D0009899067D7DB5e859c182410714caf8725"
                  ]
                }
              ],
              "SynthRegistered": [
                {
                  "name": "SynthRegistered",
                  "args": [
                    "1",
                    "0x8069c44244e72443722cfb22DcE5492cba239d39"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createUsdcSynth",
            "gasUsed": 540658,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "synth_usdc_market_id": "1",
          "synth_usdc_token_address": "0x8069c44244e72443722cfb22DcE5492cba239d39"
        }
      },
      "hash": "538e7586c7b03ee5a4b97af57e8d364e",
      "version": 6
    },
    "invoke.allowAllPerpsSystem": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "allowAllPerpsSystem": {
            "hash": "0x44a7820362573594ceb3780f67b4edca0bf152be9c9e108ce37643d4e176dad6",
            "events": {
              "FeatureFlagAllowAllSet": [
                {
                  "name": "FeatureFlagAllowAllSet",
                  "args": [
                    "0x706572707353797374656d000000000000000000000000000000000000000000",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.allowAllPerpsSystem",
            "gasUsed": 57173,
            "gasCost": "1000327",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "b0d5d28d3ebc2d3b8aa38b1c7a9851d3",
      "version": 6
    },
    "invoke.configureSynthWrapperUsdc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configureSynthWrapperUsdc": {
            "hash": "0x14a20cfa34f8002ccca609b54670bdbee202472c64a4308ff168ab06e5e5f3d8",
            "events": {
              "WrapperSet": [
                {
                  "name": "WrapperSet",
                  "args": [
                    "1",
                    "0xc43708f8987Df3f3681801e5e640667D86Ce3C30",
                    "100000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configureSynthWrapperUsdc",
            "gasUsed": 61084,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "58ffa8742845412b57ce5ea79ac0a2e6",
      "version": 7
    },
    "invoke.configure_susdc_collateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configure_susdc_collateral": {
            "hash": "0xdb6b6ffcea1e12d131abf1b0a35496725491cc24fba20cc0546036f11b79bfac",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x8069c44244e72443722cfb22DcE5492cba239d39",
                    {
                      "depositingEnabled": true,
                      "issuanceRatioD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
                      "liquidationRatioD18": "1005000000000000000",
                      "liquidationRewardD18": "1000000000000000000",
                      "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                      "tokenAddress": "0x8069c44244e72443722cfb22DcE5492cba239d39",
                      "minDelegationD18": "100000000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configure_susdc_collateral",
            "gasUsed": 243533,
            "gasCost": "1000327",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "066b1163d5d9f838731a8c606b77a16e",
      "version": 6
    },
    "invoke.createBtcPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createBtcPerpsMarket": {
            "hash": "0x69f48372bc9d5b25fa9d11bae976685c7f7b6629f008cb511087012cbb473270",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "200",
                    "Bitcoin",
                    "BTC"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createBtcPerpsMarket",
            "gasUsed": 182970,
            "gasCost": "1000326",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "9e6ff4d8cf595898173b5a72b5d0a752",
      "version": 6
    },
    "invoke.createEthPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createEthPerpsMarket": {
            "hash": "0xc2be8fe514d007adbe292a638fe331e178e5cd1ecbaf9be7366d1be7a6c05995",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "100",
                    "Ethereum",
                    "ETH"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createEthPerpsMarket",
            "gasUsed": 165882,
            "gasCost": "1000324",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "bd4ee8b1c00d4eefae3247a406e95d2b",
      "version": 6
    },
    "invoke.setInfinexAsReferrerOnPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setInfinexAsReferrerOnPerpsMarket": {
            "hash": "0x459bfc461d8d26a4fbf0f6964c59d4f6a5abc8d3769e71ff1c2dd960ef23c501",
            "events": {
              "ReferrerShareUpdated": [
                {
                  "name": "ReferrerShareUpdated",
                  "args": [
                    "0xa7DB9b0a95D253022068d43BD1d64756f92eF83C",
                    "200000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setInfinexAsReferrerOnPerpsMarket",
            "gasUsed": 56697,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "69c4168173887acd17f5548023f0c84f",
      "version": 6
    },
    "invoke.setInterestRateParams": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setInterestRateParams": {
            "hash": "0xb4335dce2f225f9dd1d9243b261398d7881b501e66801fea3fe714709e9503dd",
            "events": {
              "InterestRateParametersSet": [
                {
                  "name": "InterestRateParametersSet",
                  "args": [
                    "25000000000000",
                    "800000000000000000",
                    "10000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setInterestRateParams",
            "gasUsed": 79419,
            "gasCost": "1000324",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "9fc138028574970e13e594ff5c96aa88",
      "version": 6
    },
    "invoke.setKwentaAsReferrerOnPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setKwentaAsReferrerOnPerpsMarket": {
            "hash": "0x5edecb547a78e342ea0be3b3ae76c348ae9fd71ca7e5d6ef93c492f98b06ab7e",
            "events": {
              "ReferrerShareUpdated": [
                {
                  "name": "ReferrerShareUpdated",
                  "args": [
                    "0xFffe627790EF1B28E3b48000b8Ba964b55766fF8",
                    "200000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setKwentaAsReferrerOnPerpsMarket",
            "gasUsed": 56685,
            "gasCost": "1000323",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "04eaa145dea287734a6a59cfd2ac9ab3",
      "version": 6
    },
    "invoke.setPerAccountCapsPerps": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerAccountCapsPerps": {
            "hash": "0x8fc6727c33d8c932dbd90e1d3f55334c20a3d3cb16e9d1b313f14ca88e95f252",
            "events": {
              "PerAccountCapsSet": [
                {
                  "name": "PerAccountCapsSet",
                  "args": [
                    "10",
                    "1"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerAccountCapsPerps",
            "gasUsed": 39412,
            "gasCost": "1000270",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5f3ecfcd9a3d7d31cfb84781446339e5",
      "version": 7
    },
    "invoke.setPerpsLiquidationRewardGuards": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLiquidationRewardGuards": {
            "hash": "0xe961ef468093b87470048843af1bb4a36b3214221865853c465fff9472c6c8f6",
            "blockNumber": "16432952",
            "timestamp": "1728634192",
            "events": {
              "KeeperRewardGuardsSet": [
                {
                  "name": "KeeperRewardGuardsSet",
                  "args": [
                    "1000000000000000000",
                    "300000000000000000",
                    "100000000000000000000",
                    "300000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLiquidationRewardGuards",
            "gasUsed": 47068,
            "gasCost": "318865605",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6169e522494ec8e68814645a9c56113e",
      "version": 7
    },
    "invoke.setPerpsMarketName": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMarketName": {
            "hash": "0x73ac24f049484f548592e088fa8fc403ef0a92dfb8eccbe137c2fb002ef8e6e3",
            "events": {},
            "deployedOn": "invoke.setPerpsMarketName",
            "gasUsed": 55843,
            "gasCost": "1000323",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "1d6ee05df591767fa5ab975630fd85f0",
      "version": 6
    },
    "invoke.setPerpsMaxCollateralForSnxUsd": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaxCollateralForSnxUsd": {
            "hash": "0xe947242ffe57315662047c56163c681d6969ef6543c5063d7ec4677a768489bd",
            "events": {
              "CollateralConfigurationSet": [
                {
                  "name": "CollateralConfigurationSet",
                  "args": [
                    "0",
                    "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaxCollateralForSnxUsd",
            "gasUsed": 104226,
            "gasCost": "1000322",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "44a8ff96895dac521dae189367bc1dbe",
      "version": 6
    },
    "invoke.setPerpsSynthDeductionPriority": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSynthDeductionPriority": {
            "hash": "0xa97ba93d916da1fea33173e9291e7bf0f1371ed25343e239f241434c7d7ca368",
            "events": {
              "SynthDeductionPrioritySet": [
                {
                  "name": "SynthDeductionPrioritySet",
                  "args": [
                    [
                      "0"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSynthDeductionPriority",
            "gasUsed": 60267,
            "gasCost": "1000320",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "c6e28f43d6ea47d17c2779267d5150cb",
      "version": 6
    },
    "invoke.setPolynomialAsReferrerOnPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPolynomialAsReferrerOnPerpsMarket": {
            "hash": "0x081fcc27d47327d05b42cb3908c587eb0a8ad0e6d73fa2e56b88936b68a45444",
            "events": {
              "ReferrerShareUpdated": [
                {
                  "name": "ReferrerShareUpdated",
                  "args": [
                    "0x159c143eF9Be79d5672726150462C9EfA679b27c",
                    "200000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPolynomialAsReferrerOnPerpsMarket",
            "gasUsed": 56697,
            "gasCost": "1000319",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "d9b2b695dfe68febd69cee2743a01436",
      "version": 6
    },
    "invoke.setPreferredPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPreferredPool": {
            "hash": "0x0d092068c0136c668dc8b332b29d7e6a174e9dcf6329b8b20cefb3c357137b4a",
            "events": {
              "PreferredPoolSet": [
                {
                  "name": "PreferredPoolSet",
                  "args": [
                    "1"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPreferredPool",
            "gasUsed": 58362,
            "gasCost": "1000321",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "2ba95480b011fa8a1aaf1f166b89d988",
      "version": 6
    },
    "invoke.setScPoolName": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setScPoolName": {
            "hash": "0x38748e8c163327ae9c8bfe07417c2ca1f351451c10787515640f20c11022e95e",
            "events": {
              "PoolNameUpdated": [
                {
                  "name": "PoolNameUpdated",
                  "args": [
                    "1",
                    "Spartan Council Pool",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setScPoolName",
            "gasUsed": 61043,
            "gasCost": "1000319",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "20335af4861a3fbadc13b880d2c55387",
      "version": 6
    },
    "invoke.setSynthMaxMarketCollateralUsdc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setSynthMaxMarketCollateralUsdc": {
            "hash": "0x886d153694a9b3b6f77f813738de3beac541b61587965d8a2abd6ee1577e8826",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "1",
                    "0xc43708f8987Df3f3681801e5e640667D86Ce3C30",
                    "100000000000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSynthMaxMarketCollateralUsdc",
            "gasUsed": 37894,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4f8e61295e8754f392d485cb417ddd1b",
      "version": 7
    },
    "invoke.setSynthPriceUsdc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setSynthPriceUsdc": {
            "hash": "0x797bb45d44c55bf4e013081014ca3f7f41283a6bb17025b3782c5f6f1ef2b16a",
            "events": {
              "SynthPriceDataUpdated": [
                {
                  "name": "SynthPriceDataUpdated",
                  "args": [
                    "1",
                    "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                    "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSynthPriceUsdc",
            "gasUsed": 102820,
            "gasCost": "1000317",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "5b0f7e37fcf3cad310d4ca7eeaec7cc2",
      "version": 6
    },
    "invoke.set_deniers_perps": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "set_deniers_perps": {
            "hash": "0x31c3feb899dd372804566d5129e276559c681e44d966529e29f2d1d4f1513f8e",
            "blockNumber": "15234555",
            "timestamp": "1726237398",
            "events": {
              "FeatureFlagDeniersReset": [
                {
                  "name": "FeatureFlagDeniersReset",
                  "args": [
                    "0x706572707353797374656d000000000000000000000000000000000000000000",
                    [
                      "0x28Ed18Bd77A061E0A886a2a8FFb91da95FF03E56",
                      "0xd9b891AB93C210eafa46c61fAeb53836F99aa35B",
                      "0x0B67bab43157e53D21965Af0d83f83BeD9553E0a",
                      "0xe1Efa5C91cA533E4a51884d805879249E3FCB2BC",
                      "0x6985b94Db148eDd4df6BD1Ba3F4640da79B44947",
                      "0x599e835cbFC903eF09f3Dd5E08D1cF63c32AF8d8",
                      "0x347c3190bD015FBD0e47fb90AA4917138A8A32FE",
                      "0x562948111d50BF039A39Eea48D127f2Ae51ddF02",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.set_deniers_perps",
            "gasUsed": 71604,
            "gasCost": "1730763",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cb1192fd60dd6f29cd7f778a79817e32",
      "version": 7
    },
    "provision.buyback_snx": {
      "artifacts": {
        "imports": {
          "buyback_snx": {
            "url": "ipfs://QmVaHcJ84foiHPuLajNRBDbF9Y7PGnr27hDxrtX9Ne2fBu",
            "tags": [
              "latest"
            ],
            "preset": "andromeda",
            "settings": {
              "oracle_manager_address": "0x0000000000000000000000000000000000000000",
              "premium": "10000000000000000",
              "snx_fee_share": "500000000000000000",
              "snx_oracle_id": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3",
              "snx_token": "0x0000000000000000000000000000000000000000",
              "usd_token": "0x0000000000000000000000000000000000000000"
            },
            "contracts": {
              "buyback_snx": {
                "address": "0xC0552736788bFA357539D6FeB690b14e4977E871",
                "abi": [
                  "constructor(uint256 _premium, uint256 _snxFeeShare, address _oracleManager, bytes32 _snxNodeId, address _snxToken, address _usdToken)",
                  "error OverflowInt256ToUint256()",
                  "event BuybackProcessed(address indexed buyer, uint256 snx, uint256 usd)",
                  "function DEAD() view returns (address)",
                  "function oracleManager() view returns (address)",
                  "function premium() view returns (uint256)",
                  "function processBuyback(uint256 snxAmount)",
                  "function quoteFees(uint128 marketId, uint256 feeAmount, address sender) view returns (uint256)",
                  "function snxFeeShare() view returns (uint256)",
                  "function snxNodeId() view returns (bytes32)",
                  "function snxToken() view returns (address)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function usdToken() view returns (address)"
                ],
                "constructorArgs": [
                  "10000000000000000",
                  "500000000000000000",
                  "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                  "0x32520a34b3e069c7c900a345f81436d79585ec1f3d9e402e904e79e829f7b2b9",
                  "0x8F4b425597A70001E255d067626e4860E2543f22",
                  "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xaf2e32db4f4cc7be784ca79016abeaa92d7989b94ba2f7a4140d2eaabb987632",
                "sourceName": "contracts/BuybackSnx.sol",
                "contractName": "BuybackSnx",
                "deployedOn": "contract.buyback_snx",
                "gasUsed": 486472,
                "gasCost": "1000293"
              }
            },
            "extras": {
              "oracle_manager_address": "0x0000000000000000000000000000000000000000",
              "premium": "10000000000000000",
              "snx_fee_share": "500000000000000000",
              "snx_oracle_id": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3",
              "snx_token": "0x0000000000000000000000000000000000000000",
              "usd_token": "0x0000000000000000000000000000000000000000"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.sccp_313_spartan_council_pool_usdc_rewards": {
      "artifacts": {
        "imports": {
          "sccp_313_spartan_council_pool_usdc_rewards": {
            "url": "ipfs://QmTZuh1hgYhCZB733Dpodo95j1AgHqcoKsbYAH2F4Cd9jD",
            "tags": [
              "latest"
            ],
            "preset": "andromeda",
            "settings": {
              "collateralType": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
              "name": "Rewards Distributor V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            },
            "contracts": {
              "RewardsDistributor": {
                "address": "0xA28719DDDa6e129d5E8fd470A17Cd075cEf5d25A",
                "abi": [
                  "constructor(address rewardManager_, uint128 poolId_, address collateralType_, address payoutToken_, uint8 payoutTokenDecimals_, string name_)",
                  "function SYSTEM_PRECISION() view returns (uint256)",
                  "function collateralType() view returns (address)",
                  "function distributeRewards(uint128 poolId_, address collateralType_, uint256 amount_, uint64 start_, uint32 duration_)",
                  "function name() view returns (string)",
                  "function onPositionUpdated(uint128, uint128, address, uint256)",
                  "function payout(uint128, uint128 poolId_, address collateralType_, address payoutTarget_, uint256 payoutAmount_) returns (bool)",
                  "function payoutToken() view returns (address)",
                  "function poolId() view returns (uint128)",
                  "function precision() view returns (uint256)",
                  "function rewardManager() view returns (address)",
                  "function rewardsAmount() view returns (uint256)",
                  "function setShouldFailPayout(bool shouldFailPayout_)",
                  "function shouldFailPayout() view returns (bool)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function token() view returns (address)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error NotEnoughBalance(uint256 amountRequested, uint256 currentBalance)",
                  "error NotEnoughRewardsLeft(uint256 amountRequested, uint256 amountLeft)",
                  "error Unauthorized(address addr)"
                ],
                "constructorArgs": [
                  "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                  "1",
                  "0x8069c44244e72443722cfb22DcE5492cba239d39",
                  "0xc43708f8987Df3f3681801e5e640667D86Ce3C30",
                  "6",
                  "Spartan Council Pool USDC Rewards"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x50b6affe4dcea0ca0a501beedc458e52099620d06d947b0d3ddb4804d9796f5d",
                "sourceName": "src/RewardsDistributor.sol",
                "contractName": "RewardsDistributor",
                "deployedOn": "contract.RewardsDistributor",
                "gasUsed": 968220,
                "gasCost": "1000294"
              }
            },
            "extras": {
              "collateralType": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
              "name": "Rewards Distributor V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.spartan_council_pool_rewards": {
      "artifacts": {
        "imports": {
          "spartan_council_pool_rewards": {
            "url": "ipfs://QmRVYyBYWnzm51B7CEeJnyEgxefyH4kYqnXUwDQLUBzufF",
            "tags": [
              "latest"
            ],
            "preset": "andromeda",
            "settings": {
              "collateralType": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
              "name": "Rewards Distributor V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            },
            "contracts": {
              "RewardsDistributor": {
                "address": "0x477010BEe49e5c88989138A4f0D7176E5741eb84",
                "abi": [
                  "constructor(address rewardManager_, uint128 poolId_, address collateralType_, address payoutToken_, uint8 payoutTokenDecimals_, string name_)",
                  "function SYSTEM_PRECISION() view returns (uint256)",
                  "function collateralType() view returns (address)",
                  "function distributeRewards(uint128 poolId_, address collateralType_, uint256 amount_, uint64 start_, uint32 duration_)",
                  "function name() view returns (string)",
                  "function onPositionUpdated(uint128, uint128, address, uint256)",
                  "function payout(uint128, uint128 poolId_, address collateralType_, address payoutTarget_, uint256 payoutAmount_) returns (bool)",
                  "function payoutToken() view returns (address)",
                  "function poolId() view returns (uint128)",
                  "function precision() view returns (uint256)",
                  "function rewardManager() view returns (address)",
                  "function rewardsAmount() view returns (uint256)",
                  "function setShouldFailPayout(bool shouldFailPayout_)",
                  "function shouldFailPayout() view returns (bool)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function token() view returns (address)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error NotEnoughBalance(uint256 amountRequested, uint256 currentBalance)",
                  "error NotEnoughRewardsLeft(uint256 amountRequested, uint256 amountLeft)",
                  "error Unauthorized(address addr)"
                ],
                "constructorArgs": [
                  "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                  "1",
                  "0x8069c44244e72443722cfb22DcE5492cba239d39",
                  "0x8F4b425597A70001E255d067626e4860E2543f22",
                  "18",
                  "Spartan Council Pool Rewards"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x075851ba1bc7630b0786671a3f6679fd0db64f4dc82037cdad84e825cfbfaf94",
                "sourceName": "src/RewardsDistributor.sol",
                "contractName": "RewardsDistributor",
                "deployedOn": "contract.RewardsDistributor",
                "gasUsed": 923611,
                "gasCost": "1010344"
              }
            },
            "extras": {
              "collateralType": "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913",
              "name": "Rewards Distributor V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.addPerpsBtcSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsBtcSettlementStrategy": {
            "hash": "0x81653e627a8a68a6ee4ddfd1cbb6f126170e4654a7e32bbbcd4411964e272c83",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsBtcSettlementStrategy",
            "gasUsed": 118538,
            "gasCost": "1000319",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "btc_pyth_settlement_strategy": "0"
        }
      },
      "hash": "6c0bee9cdaca6a4d33c8e4ab49674fde",
      "version": 6
    },
    "invoke.addPerpsEthSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsEthSettlementStrategy": {
            "hash": "0x428b01a5e77c3b36b38c7b1b6d98c412c7b82772c94ebda79a72a187fb2f70e9",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsEthSettlementStrategy",
            "gasUsed": 118538,
            "gasCost": "1000320",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "eth_pyth_settlement_strategy": "0"
        }
      },
      "hash": "df9d82a0cdbec3f7deb627cb1130165b",
      "version": 6
    },
    "invoke.register_spartan_council_pool_rewards": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "register_spartan_council_pool_rewards": {
            "hash": "0x72e125b8ef897409f9bb257d05c7dcc7b8f929f4e4537aa91b49927cf3833f65",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0x8069c44244e72443722cfb22DcE5492cba239d39",
                    "0x477010BEe49e5c88989138A4f0D7176E5741eb84"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.register_spartan_council_pool_rewards",
            "gasUsed": 111916,
            "gasCost": "1010320",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e7ce0f72fcdee2bcf5472aea864325c7",
      "version": 7
    },
    "invoke.sccp_313_register_spartan_council_pool_usdc_rewards": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "sccp_313_register_spartan_council_pool_usdc_rewards": {
            "hash": "0x8b32e68aaa3c3ef73c6093cf3fb20fed87161cae9c748845cf44a59f179234c9",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0x8069c44244e72443722cfb22DcE5492cba239d39",
                    "0xA28719DDDa6e129d5E8fd470A17Cd075cEf5d25A"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.sccp_313_register_spartan_council_pool_usdc_rewards",
            "gasUsed": 111916,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "7da58782d667f59f299d236b3fda2e38",
      "version": 6
    },
    "invoke.setFeeCollector": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setFeeCollector": {
            "hash": "0x1dabde1d57821975916c54cef4f68c2008cf764b9b52c5918d8e8a7bec4b8476",
            "events": {
              "FeeCollectorSet": [
                {
                  "name": "FeeCollectorSet",
                  "args": [
                    "0xC0552736788bFA357539D6FeB690b14e4977E871"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setFeeCollector",
            "gasUsed": 42901,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "76a51157e4c01a38dc6599a0a1e7ca22",
      "version": 6
    },
    "invoke.setPerpsBtcFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBtcFundingParameters": {
            "hash": "0x2ab902b1f8ed04df2cb4e28d5d6a5f69e770956c2db752b271313cdeeb921641",
            "blockNumber": "16432809",
            "timestamp": "1728633906",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "200",
                    "35000000000000000000000",
                    "4000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBtcFundingParameters",
            "gasUsed": 42236,
            "gasCost": "317676694",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cfd53263161f6c0b5d329917fd786e9f",
      "version": 7
    },
    "invoke.setPerpsBtcLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBtcLiquidationParameters": {
            "hash": "0x77dcc3f1ab3c0b2901e543452b9caaf4e7305513c87305ec06741d0a5c2b591b",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "200",
                    "1540000000000000000",
                    "280000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBtcLiquidationParameters",
            "gasUsed": 50421,
            "gasCost": "1000270",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "587f839542756c38c931a1bb5e8ab7ef",
      "version": 7
    },
    "invoke.setPerpsBtcLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBtcLockedOiRatio": {
            "hash": "0xcd398f4f6c3235c2997e04a8ef734b3ed238b251bc248fd84d0493ba5fed63df",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "200",
                    "250000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBtcLockedOiRatio",
            "gasUsed": 39444,
            "gasCost": "1000459",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bf4a4e1eae96fd12a9201fb24658edca",
      "version": 7
    },
    "invoke.setPerpsBtcMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBtcMaxLiquidationParameters": {
            "hash": "0x7c358d104b91ce08c19a6b8162b93b3d1754a80fee64955cd775b636ab1a8c34",
            "blockNumber": "15788515",
            "timestamp": "1727345318",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBtcMaxLiquidationParameters",
            "gasUsed": 47936,
            "gasCost": "1000257",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1a6b70e311399aa84fbeba12c9b03d85",
      "version": 7
    },
    "invoke.setPerpsBtcMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBtcMaxMarketSize": {
            "hash": "0x0e5f7aeb11230735cd025493a65fb2f999506df0b456cbfce74dabf79cbb34a6",
            "blockNumber": "16432811",
            "timestamp": "1728633910",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "200",
                    "1200000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBtcMaxMarketSize",
            "gasUsed": 39489,
            "gasCost": "319008417",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d9e983afa176180f6c35aaa52a35aa4a",
      "version": 7
    },
    "invoke.setPerpsBtcMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBtcMaxMarketValue": {
            "hash": "0x5d96f2a14299b4d9b556b806df78b76061ff920f06f9181e315d910e091b47b2",
            "blockNumber": "16432813",
            "timestamp": "1728633914",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "200",
                    "50000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBtcMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "319922066",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b21273b6f602d7bddc3cb50100b5e536",
      "version": 7
    },
    "invoke.setPerpsBtcOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBtcOrderFees": {
            "hash": "0x920782f81eff7276413b0244bb69cb02ca3456d96ae078fa6f5b1442676c48e7",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "200",
                    "1000000000000",
                    "500000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBtcOrderFees",
            "gasUsed": 59280,
            "gasCost": "1010069",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5b8c2db33cc9895092a4f018085265bd",
      "version": 7
    },
    "invoke.setPerpsEthFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthFundingParameters": {
            "hash": "0xb9ccf7332344f659ba02cbaef989133cee1c9bb88efc2d19086fe72cda772d7a",
            "blockNumber": "16432857",
            "timestamp": "1728634002",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "100",
                    "350000000000000000000000",
                    "4000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthFundingParameters",
            "gasUsed": 42236,
            "gasCost": "317275865",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e25516429501909243130cef6e3faad9",
      "version": 7
    },
    "invoke.setPerpsEthLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthLiquidationParameters": {
            "hash": "0xdd7d9c06477b3fdc157930350950e6421e5d5fea41a4bac2c57314c2e113d54a",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "100",
                    "1160000000000000000",
                    "280000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthLiquidationParameters",
            "gasUsed": 50421,
            "gasCost": "1000270",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0932edfde8b36449dfbf7fb1c096fc97",
      "version": 7
    },
    "invoke.setPerpsEthLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthLockedOiRatio": {
            "hash": "0x50c3984f9000c3949fc308f8726ff77cd296302a7dd3f6e3fb3d5fdb069d5c1a",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "100",
                    "250000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthLockedOiRatio",
            "gasUsed": 39444,
            "gasCost": "1000460",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8138928bc303767c98d5726c2f2b2160",
      "version": 7
    },
    "invoke.setPerpsEthMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthMaxLiquidationParameters": {
            "hash": "0x18bd2c743718a460c6ae7f39084ddbfe41ad5fd968733fde7e72e32db6f8a7b1",
            "blockNumber": "15788518",
            "timestamp": "1727345324",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthMaxLiquidationParameters",
            "gasUsed": 47936,
            "gasCost": "1000257",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "abc12476450ed443fa9bebae422f9c51",
      "version": 7
    },
    "invoke.setPerpsEthMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthMaxMarketSize": {
            "hash": "0x65b85d8abba5990959abc96043521f41f712b9855d6431649baa16265aac8fa3",
            "blockNumber": "16432859",
            "timestamp": "1728634006",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "100",
                    "30700000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthMaxMarketSize",
            "gasUsed": 39501,
            "gasCost": "318291347",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ebbab9c8038ea38a50f6b1afecbfa0b7",
      "version": 7
    },
    "invoke.setPerpsEthMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthMaxMarketValue": {
            "hash": "0x5d1a5d6833ce12c9172f25fa760a45317846634a47c6893baf759e1bf846324c",
            "blockNumber": "16432861",
            "timestamp": "1728634010",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "100",
                    "50000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "318941318",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2fc3f8e8540fc53697ae7eeb9be21b10",
      "version": 7
    },
    "invoke.setPerpsEthOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthOrderFees": {
            "hash": "0xa1c0a4fa6fdcf43c6afc040552c59051cde8fb863a5476d96ce2147b33a8f3b3",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "100",
                    "1000000000000",
                    "500000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthOrderFees",
            "gasUsed": 59280,
            "gasCost": "1009781",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "576eb4fc85486d603b02c9c8657133e9",
      "version": 7
    },
    "invoke.setPerpsMarketKeeperCostNodeId": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMarketKeeperCostNodeId": {
            "hash": "0x44f4496344a9ff391b52b683e1fb0b813cc537494ea5b7db9f5da159638626f6",
            "blockNumber": "16433104",
            "timestamp": "1728634496",
            "events": {
              "KeeperCostNodeIdUpdated": [
                {
                  "name": "KeeperCostNodeIdUpdated",
                  "args": [
                    "0x413b29bd12d25ea4bc1cf23feb2d030d4b32cece0a9c940412dc984f0a444f4e"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMarketKeeperCostNodeId",
            "gasUsed": 39059,
            "gasCost": "320977708",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0afe4e6fb0c28eef22ecc3c4f75e7fba",
      "version": 7
    },
    "invoke.setPerpsPriceBtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceBtc": {
            "hash": "0x06238230241cf93d6d769d5bc85661374d7c3fb6352ae9f2de50607538f0018c",
            "blockNumber": "17174587",
            "timestamp": "1730117462",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "200",
                    "0xaa10a255f2ff0320684513b5cc225976d0d26e9dbbb7a338dedcdc5c94f31c06",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceBtc",
            "gasUsed": 39759,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c098417bb191ca38ca0aabfa3169f488",
      "version": 7
    },
    "invoke.setPerpsPriceEth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceEth": {
            "hash": "0xf3f755b9cc36d983ca993cfc5cd26515a6cdb8df8d854adf77623c8b42d6f5f9",
            "blockNumber": "17174613",
            "timestamp": "1730117514",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "100",
                    "0xb4df545da972b990d9fb142d975545f5a21371c842495d2d95057e2b44ba56e3",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceEth",
            "gasUsed": 39759,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "99775a48bf792838904070f56f782a9f",
      "version": 7
    },
    "invoke.setPerpsBtcSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBtcSettlementStrategy": {
            "hash": "0x25a8e62ef1cb162024cc75caa6e8e5eb696b81d57ead9cf5b7049eac87d8b422",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBtcSettlementStrategy",
            "gasUsed": 144996,
            "gasCost": "1000315",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "92fc24d707187e40437723821ee47a2f",
      "version": 6
    },
    "invoke.setPerpsEthSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthSettlementStrategy": {
            "hash": "0x9cff1bb20a0d45f084f853f7288b462fb9a81e382a17718b56c054e6eb8c2e9b",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthSettlementStrategy",
            "gasUsed": 144996,
            "gasCost": "1000317",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "4b3ad3b9b86162d5a90d09a09f371fe5",
      "version": 6
    },
    "invoke.registerLookupSnxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupSnxOracleNode": {
            "hash": "0x277a74a0a1a27f1864c828d19d71ea382379bd454f691f444f1d81c59d2e256b",
            "blockNumber": "17174306",
            "timestamp": "1730116900",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xac4ca7d64343e27d71a0c88e2a256e2bd170826f0b024851df21636434863371",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupSnxOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "snx_lookup_oracle_id": "0xac4ca7d64343e27d71a0c88e2a256e2bd170826f0b024851df21636434863371"
        }
      },
      "hash": "8860bcce69ba0df05d777e2c7d2070f8",
      "version": 7
    },
    "invoke.registerLookupSolOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupSolOracleNode": {
            "hash": "0xee12026605e668311d59bf8bdbc1e843d6f1f3262a5bd5226166e1d1f9440c83",
            "blockNumber": "17174308",
            "timestamp": "1730116904",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd3158988c479501bd8ceba7f6ef1b05b7bb4c84af34e984e16b4fbbf78a26a41",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56def0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupSolOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sol_lookup_oracle_id": "0xd3158988c479501bd8ceba7f6ef1b05b7bb4c84af34e984e16b4fbbf78a26a41"
        }
      },
      "hash": "ae92833b323f30c6517c1504ffeab209",
      "version": 7
    },
    "invoke.registerLookupWifOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupWifOracleNode": {
            "hash": "0x2d10c3753d89fe9cd2f404dc6b60f9c57df7e5c62004d001930645a532c9fab6",
            "blockNumber": "17174333",
            "timestamp": "1730116954",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4cb0faf54b3705af2e199ab7a9f4be5eab8276c0d8df8c8032c478524a37272b",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d4ca4beeca86f0d164160323817a4e42b10010a724c2217c6ee41b54cd4cc61fc000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupWifOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wif_lookup_oracle_id": "0x4cb0faf54b3705af2e199ab7a9f4be5eab8276c0d8df8c8032c478524a37272b"
        }
      },
      "hash": "b84539e8cafbec7ed11f3f18ac8d9d49",
      "version": 7
    },
    "invoke.registerPythSnxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythSnxOracleNode": {
            "hash": "0x25e5bcf1ff21468600e60209da6adea7e66704bd09450cc8d93e416fbb51904c",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa9ee0a0bba4228d600518530e4f8ff871b70096b9d185318fac16fbc6ac55d9a",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572939d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da30000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythSnxOracleNode",
            "gasUsed": 51392,
            "gasCost": "1000284",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "snx_pyth_oracle_id": "0xa9ee0a0bba4228d600518530e4f8ff871b70096b9d185318fac16fbc6ac55d9a"
        }
      },
      "hash": "bda99676f553a261f04e51f072725319",
      "version": 6
    },
    "invoke.registerPythSolOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythSolOracleNode": {
            "hash": "0xd079cfbc996cd837970073f583304638a121bcfa1e1b44a91c4b254b22e30bf3",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xe28bcf3d1d809b1143dec3309f4943ad7a52afd7a6ae6466f556c93579be1c16",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729ef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythSolOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000284",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "sol_pyth_oracle_id": "0xe28bcf3d1d809b1143dec3309f4943ad7a52afd7a6ae6466f556c93579be1c16"
        }
      },
      "hash": "574cf9eea7b450cc99e51ac4aba13187",
      "version": 6
    },
    "invoke.registerPythWifOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythWifOracleNode": {
            "hash": "0x926c8f2adf6c29b586cf7769f2231edbe4b4c0faaefebdcc47b17331af9893a9",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1e531e2a369c53fdfd401559f470d324de02648cee5a195d01a86f3a63b3e079",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57294ca4beeca86f0d164160323817a4e42b10010a724c2217c6ee41b54cd4cc61fc0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythWifOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000284",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "wif_pyth_oracle_id": "0x1e531e2a369c53fdfd401559f470d324de02648cee5a195d01a86f3a63b3e079"
        }
      },
      "hash": "36bf587f028559f49fef03d81493cc16",
      "version": 6
    },
    "invoke.registerSnxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSnxOracleNode": {
            "hash": "0xbc54d22b9579a141b042e4c50c7f40ffa5be6e1e631dd207c4473c42fabb3819",
            "blockNumber": "17174485",
            "timestamp": "1730117258",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8e002cbf80570a8c56f05465d12beefbcc269cde8c92197b72c23449d336f656",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xa9ee0a0bba4228d600518530e4f8ff871b70096b9d185318fac16fbc6ac55d9a",
                      "0xac4ca7d64343e27d71a0c88e2a256e2bd170826f0b024851df21636434863371"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSnxOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "snx_oracle_id": "0x8e002cbf80570a8c56f05465d12beefbcc269cde8c92197b72c23449d336f656"
        }
      },
      "hash": "8ca52f5ee33faba12c22084156d9660e",
      "version": 7
    },
    "invoke.registerSolOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSolOracleNode": {
            "hash": "0xef79280cb7fe2143b16fd648e3e4951884418af89d96ec4ecf93f77c8fc0b5ec",
            "blockNumber": "17174487",
            "timestamp": "1730117262",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x851fe4f004ef7931ceea1ecd3f0651806aca02abc0a6da1f8fbbea4d2e5f95a6",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xe28bcf3d1d809b1143dec3309f4943ad7a52afd7a6ae6466f556c93579be1c16",
                      "0xd3158988c479501bd8ceba7f6ef1b05b7bb4c84af34e984e16b4fbbf78a26a41"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSolOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sol_oracle_id": "0x851fe4f004ef7931ceea1ecd3f0651806aca02abc0a6da1f8fbbea4d2e5f95a6"
        }
      },
      "hash": "1c1429f2169c205df351183829de17d9",
      "version": 7
    },
    "invoke.registerWifOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerWifOracleNode": {
            "hash": "0x05173b77683f317a6078157d541789f45d5711a32bb9043468c0b66c4a5c48a6",
            "blockNumber": "17174510",
            "timestamp": "1730117308",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x0cc2fa197d9123af622d05dd67afd32cbe5a248cb17930a92e2f91b745e5dbc8",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x1e531e2a369c53fdfd401559f470d324de02648cee5a195d01a86f3a63b3e079",
                      "0x4cb0faf54b3705af2e199ab7a9f4be5eab8276c0d8df8c8032c478524a37272b"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerWifOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wif_oracle_id": "0x0cc2fa197d9123af622d05dd67afd32cbe5a248cb17930a92e2f91b745e5dbc8"
        }
      },
      "hash": "7f58359e95cf606d106479427ae9bbde",
      "version": 7
    },
    "invoke.createSnxPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createSnxPerpsMarket": {
            "hash": "0x791f3f7dca7d13c8512d35d36e91ffecd6ba3c898a041d3114ac463ffe4d2ac7",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "300",
                    "Synthetix",
                    "SNX"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createSnxPerpsMarket",
            "gasUsed": 165906,
            "gasCost": "1000284",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "b09d955d23c1151ff4aa73e7f0df7f24",
      "version": 6
    },
    "invoke.createSolPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createSolPerpsMarket": {
            "hash": "0xa1541c7f019f985c647ba84346ef8b1fde5cc5443165037a3f57888410c4078e",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "400",
                    "Solana",
                    "SOL"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createSolPerpsMarket",
            "gasUsed": 165870,
            "gasCost": "1000286",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "2be983e3afaae011188dc0d53e5fd648",
      "version": 6
    },
    "invoke.createWifPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createWifPerpsMarket": {
            "hash": "0x1f10b3261c8431666eb8ea3b34a30e8252162c3e222a04c10871bc6c75b3bcc9",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "500",
                    "Wif",
                    "WIF"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createWifPerpsMarket",
            "gasUsed": 165834,
            "gasCost": "1000286",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "eb12b05a7cf206701e7ce18345d9e264",
      "version": 6
    },
    "invoke.addPerpsSnxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsSnxSettlementStrategy": {
            "hash": "0x908fce75cf0fd3e57ddd19a80a840fc99631f8cc11243bc8563fcd9cf01fb8c5",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsSnxSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000283",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "snx_pyth_settlement_strategy": "0"
        }
      },
      "hash": "9244f48906bd9b3086b12ac2b54cd77d",
      "version": 6
    },
    "invoke.addPerpsSolSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsSolSettlementStrategy": {
            "hash": "0x5dd4fe61111f11c15ff7c43c391f1244c7269086ddee06a11675ff73ce66fa71",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsSolSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000284",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "sol_pyth_settlement_strategy": "0"
        }
      },
      "hash": "5546fb50bbccacdf9919490f4b3586e5",
      "version": 6
    },
    "invoke.addPerpsWifSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsWifSettlementStrategy": {
            "hash": "0x955eab682b5b542f485836c5cee24666ea343e687367cb438dccad6d74decd97",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "500",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsWifSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000283",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "wif_pyth_settlement_strategy": "0"
        }
      },
      "hash": "4fb0230298f4eb72e45f36d7d39b2b65",
      "version": 6
    },
    "invoke.setPerpsPriceSnx": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceSnx": {
            "hash": "0x90c6798334e8f8a8d0a6e56a0f0b59eb783e52057d9cbd6e466b8ca103611e9e",
            "blockNumber": "17174686",
            "timestamp": "1730117660",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "300",
                    "0x8e002cbf80570a8c56f05465d12beefbcc269cde8c92197b72c23449d336f656",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceSnx",
            "gasUsed": 39759,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5b685c39b9fa9744f906fd9fb8bdc5d0",
      "version": 7
    },
    "invoke.setPerpsPriceSol": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceSol": {
            "hash": "0xf4ff15c159c1c2d805b648d272734416f9f7bd130e80c97d84d66e12bc277539",
            "blockNumber": "17174688",
            "timestamp": "1730117664",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "400",
                    "0x851fe4f004ef7931ceea1ecd3f0651806aca02abc0a6da1f8fbbea4d2e5f95a6",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceSol",
            "gasUsed": 39771,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a8fd2d026ddd70fda35fe02a31bd6a27",
      "version": 7
    },
    "invoke.setPerpsPriceWif": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceWif": {
            "hash": "0x916d3abf8897c8f6f5496189471dd51639fb40d13f3d62fe8b52d390d56e9cb1",
            "blockNumber": "17174722",
            "timestamp": "1730117732",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "500",
                    "0x0cc2fa197d9123af622d05dd67afd32cbe5a248cb17930a92e2f91b745e5dbc8",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceWif",
            "gasUsed": 39771,
            "gasCost": "1000353",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1eb60aa8de126a3bc3fdaf55509de2cf",
      "version": 7
    },
    "invoke.setPerpsSnxFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSnxFundingParameters": {
            "hash": "0xbfefd683b07d29f15bfe0280acaa59e37d6fe0b17a4c16406875a5555eed57e3",
            "blockNumber": "16433011",
            "timestamp": "1728634310",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "300",
                    "10200000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSnxFundingParameters",
            "gasUsed": 45048,
            "gasCost": "316338643",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ab5ce42361c2f8b6dc438b48394f00da",
      "version": 7
    },
    "invoke.setPerpsSnxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSnxLiquidationParameters": {
            "hash": "0x2034047246427568d827b3a732ad010cd81e0563b670586fd20ad5e59f9d552f",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "300",
                    "2820000000000000000",
                    "390000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSnxLiquidationParameters",
            "gasUsed": 53233,
            "gasCost": "1009436",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "aca9100ae9fdbc57698ea1ba0a5512d9",
      "version": 7
    },
    "invoke.setPerpsSnxLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSnxLockedOiRatio": {
            "hash": "0x085a5575c0e47f4ac2ed61547ff3bb3deae6ec5f35a99f4a087f016ffdb18805",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSnxLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000282",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "01f75a67eb028d6bb07d55ccca539e4b",
      "version": 6
    },
    "invoke.setPerpsSnxMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSnxMaxLiquidationParameters": {
            "hash": "0x9d61d5f75491c483439c2639d9b6ce5a15867bc7591a617b380b5535b0d0133f",
            "blockNumber": "15788676",
            "timestamp": "1727345640",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSnxMaxLiquidationParameters",
            "gasUsed": 47948,
            "gasCost": "1000252",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "39abb2a9d4aa2c1f641461c26a536682",
      "version": 7
    },
    "invoke.setPerpsSnxMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSnxMaxMarketSize": {
            "hash": "0x41861807ef5c968f7559a546b84d316148e5c77bf8c145be0a666676c3f6e660",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "300",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSnxMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "1000455",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "299221b0543d355260f800d7a6e03e48",
      "version": 7
    },
    "invoke.setPerpsSnxMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSnxMaxMarketValue": {
            "hash": "0x09e3e1bf7f6e798fc90f55e766171df077246b6b2803df6b7991bcee3d226920",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "300",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSnxMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b4b0bd47002f09bdb19bdeafb55be8bf",
      "version": 7
    },
    "invoke.setPerpsSnxOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSnxOrderFees": {
            "hash": "0xea1c91ccd421ee77fbdb7def67be285da01ae3c250c39bed880ef7c04a239028",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "300",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSnxOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000283",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "6b0d493ac417bbde73988b1c5ce2ff4b",
      "version": 6
    },
    "invoke.setPerpsSolFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSolFundingParameters": {
            "hash": "0x9db4f7df36d1d6e37846f87a110dda33cd793b3db603a79e29f2ac66182ea580",
            "blockNumber": "16433013",
            "timestamp": "1728634314",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "400",
                    "2812500000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSolFundingParameters",
            "gasUsed": 45060,
            "gasCost": "316022376",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6ff49f2b5f48c816168983d4f309bc4c",
      "version": 7
    },
    "invoke.setPerpsSolLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSolLiquidationParameters": {
            "hash": "0x1955a017294ce179df6454a9862661e520bf5239c62b587f1c37ecbf8bc9860e",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "400",
                    "4900000000000000000",
                    "330000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSolLiquidationParameters",
            "gasUsed": 50421,
            "gasCost": "1000269",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2c13aaada042a9616ced54baa2c2e8c7",
      "version": 7
    },
    "invoke.setPerpsSolLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSolLockedOiRatio": {
            "hash": "0xe5bf3532d77a04e3f630c7f9576d5d1c62a190b4e28401edb2d7f9f3ca0cb5ab",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSolLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000283",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "f96cf5ee1a59d53332f93e03ca105990",
      "version": 6
    },
    "invoke.setPerpsSolMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSolMaxLiquidationParameters": {
            "hash": "0x1557e6a07f13dfe0243b120a4cc1c27155e680c8da7da101cd336e5f0cb5bfc3",
            "blockNumber": "15788679",
            "timestamp": "1727345646",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSolMaxLiquidationParameters",
            "gasUsed": 47948,
            "gasCost": "1000252",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2f573b1422b450490817282ee7530d63",
      "version": 7
    },
    "invoke.setPerpsSolMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSolMaxMarketSize": {
            "hash": "0x56baaad841fd86abf72a47676439ca4a7ccf9356c9a1072ea8f1137c200a1a42",
            "blockNumber": "16433016",
            "timestamp": "1728634320",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "400",
                    "205550000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSolMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "315976815",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f2122ee8a22301790101776b5f846e30",
      "version": 7
    },
    "invoke.setPerpsSolMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSolMaxMarketValue": {
            "hash": "0x1a226b7b14e5fdd82b2f104e0954a0c8b89372928aa4c3b9fd097ee0ef9fda47",
            "blockNumber": "16433018",
            "timestamp": "1728634324",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "400",
                    "20000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSolMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "315770939",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dcea517e0212f971a4db37e1760d3d82",
      "version": 7
    },
    "invoke.setPerpsSolOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSolOrderFees": {
            "hash": "0x93254492e5d796120a20b941c9110e33f412f074d34a0b756ed845f84d3ed3da",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "400",
                    "1000000000000",
                    "800000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSolOrderFees",
            "gasUsed": 39380,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6f9211c634c1e5ef55135cb9e4acac83",
      "version": 7
    },
    "invoke.setPerpsWifFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWifFundingParameters": {
            "hash": "0x2be1d4c4fd5924e1209b85c9d221e776e2710c57c47d5bb26aba7d87be8e9c5b",
            "blockNumber": "16433083",
            "timestamp": "1728634454",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "500",
                    "30000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWifFundingParameters",
            "gasUsed": 45048,
            "gasCost": "319314905",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fc0c9469d1159f46c121dff62a42159e",
      "version": 7
    },
    "invoke.setPerpsWifLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWifLiquidationParameters": {
            "hash": "0x9980b7bea23b93227a42385f20fee37105719bbed5bdbdabf4c5430bbb971bf6",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "500",
                    "5990000000000000000",
                    "400000000000000000",
                    "40000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWifLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1009110",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "313874e2c134e2de9fb0ffcd09bf7e32",
      "version": 7
    },
    "invoke.setPerpsWifLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWifLockedOiRatio": {
            "hash": "0x1a75498598d7b3f9e01970620e0e3b1a06480e70a82ca2d8d667eb848a5e80b1",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "500",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWifLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000284",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "e2c0ab53292a7166df808dd8d0da3706",
      "version": 6
    },
    "invoke.setPerpsWifMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWifMaxLiquidationParameters": {
            "hash": "0x8e17532dc0893424d4e4ad1e12bac73748365408b8daf54afbefff5f9a075ee6",
            "blockNumber": "15788682",
            "timestamp": "1727345652",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "500",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWifMaxLiquidationParameters",
            "gasUsed": 47948,
            "gasCost": "1000252",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8a2f267172f25a55c19de16885759e06",
      "version": 7
    },
    "invoke.setPerpsWifMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWifMaxMarketSize": {
            "hash": "0x49522f8fa8f89d9f3d084f62615ca92a0ae2a0148de4a78ab4cee219115e45e6",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "500",
                    "1500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWifMaxMarketSize",
            "gasUsed": 36725,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0942b94de67526d4fe9fb62abd2ff586",
      "version": 7
    },
    "invoke.setPerpsWifMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWifMaxMarketValue": {
            "hash": "0x7c33cf9a56fb5f238e0d2432da49981a74d8037f9f8d8e6535e1ea246cbe3123",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "500",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWifMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5871a2071c7de818ff87e362abdb1d98",
      "version": 7
    },
    "invoke.setPerpsWifOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWifOrderFees": {
            "hash": "0x01bf6d9772062307fc1bfc818f31b16276b7860ed4ebcbf58352e9b271659ff4",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "500",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWifOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000284",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "d0155e2794d0dc4bd227a5a59dd0236b",
      "version": 6
    },
    "invoke.setPerpsSnxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSnxSettlementStrategy": {
            "hash": "0xe209564da6d87e4b806c11dea84d1c49e5aafe168509936efef4a0c7d9268fb8",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSnxSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000283",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "0712675d020806439cef50f58eb88454",
      "version": 6
    },
    "invoke.setPerpsSolSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSolSettlementStrategy": {
            "hash": "0xf019f2fd79a156cbb21ae52e640e2a9b2b2508cdb318be0af305da14df6ae6d4",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSolSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000285",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "3ae401419569d054ffa40ad14219d397",
      "version": 6
    },
    "invoke.setPerpsWifSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWifSettlementStrategy": {
            "hash": "0x6672561bca55475dd83161e7a187b0976f9e3f1be7b131492a8b49ac8fa5c222",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "500",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x4ca4beeca86f0d164160323817a4e42b10010a724c2217c6ee41b54cd4cc61fc",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWifSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000285",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "e6f45b2ff4a95be06b5ea12ca69eeafb",
      "version": 6
    },
    "invoke.registerLookupWOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupWOracleNode": {
            "hash": "0x5f1a5daf3f1de4cfd9888f7cba1050465937a5f3b3636adb4d4069dd728bf05e",
            "blockNumber": "17174330",
            "timestamp": "1730116948",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xbd73f535a6a686edb1c2e0d23398dfe4acc38d28195f85d68f3d589269f4ce88",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56deff7446475e218517566ea99e72a4abec2e1bd8498b43b7d8331e29dcb059389000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupWOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "w_lookup_oracle_id": "0xbd73f535a6a686edb1c2e0d23398dfe4acc38d28195f85d68f3d589269f4ce88"
        }
      },
      "hash": "c0584a4bd2c774901b5a7f32fe1fe97a",
      "version": 7
    },
    "invoke.registerPythWOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythWOracleNode": {
            "hash": "0xdaf220b9fb114be794b6d843ef3f3fb8eb2c4e4d13f676bb57ce0a1baca1e6a6",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x84c48fb764d89a0e63606160ba7096d8436ae2d37c6e9c690f2bc6669169db5b",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729eff7446475e218517566ea99e72a4abec2e1bd8498b43b7d8331e29dcb0593890000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythWOracleNode",
            "gasUsed": 51392,
            "gasCost": "1000256",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "w_pyth_oracle_id": "0x84c48fb764d89a0e63606160ba7096d8436ae2d37c6e9c690f2bc6669169db5b"
        }
      },
      "hash": "5fb3f0380cecd04da654a6c85143727d",
      "version": 6
    },
    "invoke.registerWOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerWOracleNode": {
            "hash": "0x8d2563d2fc216914d7f703b713d15434823873b100a2760f75f7e300449bc8fb",
            "blockNumber": "17174508",
            "timestamp": "1730117304",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc4b0c25c5be14c56197b6d92d7207b239e5ce37c42c4deb07b2acdd691bf7c8a",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x84c48fb764d89a0e63606160ba7096d8436ae2d37c6e9c690f2bc6669169db5b",
                      "0xbd73f535a6a686edb1c2e0d23398dfe4acc38d28195f85d68f3d589269f4ce88"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerWOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "w_oracle_id": "0xc4b0c25c5be14c56197b6d92d7207b239e5ce37c42c4deb07b2acdd691bf7c8a"
        }
      },
      "hash": "dae8a1abce7ee8b9d1e1120a6d836e5e",
      "version": 7
    },
    "invoke.createWPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {},
        "extras": {}
      },
      "hash": "734c55a9cc43f7c0a5058218536c563e",
      "version": 6
    },
    "invoke.addPerpsWSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsWSettlementStrategy": {
            "hash": "0x46c45e315c4537da09a1497b815dce685064727d0489cb11c515dfa44816832f",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "600",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "1"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsWSettlementStrategy",
            "gasUsed": 101450,
            "gasCost": "1000279",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {
          "w_pyth_settlement_strategy": "1"
        }
      },
      "hash": "3196d44c7a8f58b4fae9af70afdb3ca1",
      "version": 6
    },
    "invoke.setPerpsPriceW": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceW": {
            "hash": "0x85ea61d4c3c10fa73a19e72993fc039f381e162d35426ec9e0ac70a813ffff74",
            "blockNumber": "17174719",
            "timestamp": "1730117726",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "600",
                    "0xc4b0c25c5be14c56197b6d92d7207b239e5ce37c42c4deb07b2acdd691bf7c8a",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceW",
            "gasUsed": 39771,
            "gasCost": "1000354",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0c6d93dac5a68d2e6521a62d0831ad17",
      "version": 7
    },
    "invoke.setPerpsWFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWFundingParameters": {
            "hash": "0xdcf0001347ceb851945d90edec40478e236e3a7f6664290c49aa812252a4bd2f",
            "blockNumber": "16433080",
            "timestamp": "1728634448",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "600",
                    "59062500000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWFundingParameters",
            "gasUsed": 45060,
            "gasCost": "317301266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dc5c8994f1a56b561df32309d9069d42",
      "version": 7
    },
    "invoke.setPerpsWLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWLiquidationParameters": {
            "hash": "0xa006dcf9920ab72441acb4ffb9cc696e51827f3b6e1748d1147b40a994e70181",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "600",
                    "3870000000000000000",
                    "350000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWLiquidationParameters",
            "gasUsed": 50421,
            "gasCost": "1000272",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1d8edb4f4df33652f1a2dc46919999e8",
      "version": 7
    },
    "invoke.setPerpsWLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWLockedOiRatio": {
            "hash": "0x2e7c24bc005eecffde25891f12b1d110a433d7c4093eee6542346cf9710bae6c",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "600",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWLockedOiRatio",
            "gasUsed": 36656,
            "gasCost": "1000279",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "a09c9b4574e2f6d6025260df47f29db9",
      "version": 6
    },
    "invoke.setPerpsWMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWMaxLiquidationParameters": {
            "hash": "0xcb8715ddc9e6084be241722ba171c33eadcb11a533a5c8774d4ce4488466030d",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "600",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWMaxLiquidationParameters",
            "gasUsed": 45126,
            "gasCost": "1000279",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "73f3ba1b75b9f684dff6119b376e8e2b",
      "version": 6
    },
    "invoke.setPerpsWMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWMaxMarketSize": {
            "hash": "0x0659002555f56c12cc4551608f89b7d86836eabc70331e7c85b351ee3dbf471f",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "600",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f43a98eb3c2a1eccabdb73aa10cca8b1",
      "version": 7
    },
    "invoke.setPerpsWMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWMaxMarketValue": {
            "hash": "0x6d3bc36088b478e8b434f4be294bc06784b7c8eb60137b726da390c653f9984f",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "600",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWMaxMarketValue",
            "gasUsed": 39558,
            "gasCost": "1009126",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2a767f53bccd9beb7820f527e72ef3b4",
      "version": 7
    },
    "invoke.setPerpsWOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWOrderFees": {
            "hash": "0xe3d306831e5b5204699b0abc8e88eb118e01ce261b021c4001e4e33796a602bf",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "600",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWOrderFees",
            "gasUsed": 39404,
            "gasCost": "1000278",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "199e7d7fb04e7242e9156b34b52443f1",
      "version": 6
    },
    "invoke.setPerpsWSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWSettlementStrategy": {
            "hash": "0x3421eb5f5cdbd416118c5c734ad98c5d69ac15e8df4472d4d82df5163bf7ebd3",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "600",
                    "1",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xeff7446475e218517566ea99e72a4abec2e1bd8498b43b7d8331e29dcb059389",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWSettlementStrategy",
            "gasUsed": 145020,
            "gasCost": "1000278",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "extras": {}
      },
      "hash": "771f193d10653a0fa5265eb59223fc21",
      "version": 6
    },
    "setting.account_timeout_withdraw": {
      "artifacts": {
        "settings": {
          "account_timeout_withdraw": "86400"
        }
      },
      "hash": "3acf2387dde14e993634ca9badf5f564",
      "version": 7
    },
    "setting.bundleSalt": {
      "artifacts": {
        "settings": {
          "bundleSalt": "snax"
        }
      },
      "hash": "1ce8073982f8b8f0b4fa5c488c1fac79",
      "version": 7
    },
    "setting.buybackStalenessTolerance": {
      "artifacts": {
        "settings": {
          "buybackStalenessTolerance": "30"
        }
      },
      "hash": "b4168e6fd8e62178489ae92c23ee71e8",
      "version": 7
    },
    "setting.buyback_fee_share": {
      "artifacts": {
        "settings": {
          "buyback_fee_share": "500000000000000000"
        }
      },
      "hash": "432e3c15ccbe73e998f322de6cb6a0c3",
      "version": 7
    },
    "setting.buyback_premium": {
      "artifacts": {
        "settings": {
          "buyback_premium": "10000000000000000"
        }
      },
      "hash": "54bfc1b896e4a36386a208521c14a98b",
      "version": 7
    },
    "setting.buyback_snx_package": {
      "artifacts": {
        "settings": {
          "buyback_snx_package": "buyback-snx:3.3.14"
        }
      },
      "hash": "cbfb402010c05a2810eaa8ef8217001a",
      "version": 7
    },
    "setting.deployer": {
      "artifacts": {
        "settings": {
          "deployer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
        }
      },
      "hash": "3f34e398af2b36b5093aa17a4fca6630",
      "version": 7
    },
    "setting.minimum_liquidity_ratio": {
      "artifacts": {
        "settings": {
          "minimum_liquidity_ratio": "1250000000000000000"
        }
      },
      "hash": "290a2df513cdb87666df984b81069cc3",
      "version": 7
    },
    "setting.owner": {
      "artifacts": {
        "settings": {
          "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
        }
      },
      "hash": "3f34e398af2b36b5093aa17a4fca6630",
      "version": 7
    },
    "setting.perps_gradient_breakpoint": {
      "artifacts": {
        "settings": {
          "perps_gradient_breakpoint": "0.80"
        }
      },
      "hash": "c536eee0a5d7c45101a67aef8ca7339b",
      "version": 7
    },
    "setting.perps_high_util_gradient": {
      "artifacts": {
        "settings": {
          "perps_high_util_gradient": "0.01"
        }
      },
      "hash": "a840e81ef43cc70452b0b0112db30fde",
      "version": 7
    },
    "setting.perps_keeper_cost_package": {
      "artifacts": {
        "settings": {
          "perps_keeper_cost_package": "op-gas-price-oracle:3.4.0"
        }
      },
      "hash": "733008bb54949f848761d59255c5afad",
      "version": 7
    },
    "setting.perps_keeper_l1_cost_flag_gas_units": {
      "artifacts": {
        "settings": {
          "perps_keeper_l1_cost_flag_gas_units": "4500"
        }
      },
      "hash": "582b77d2fbaa81eec4a12388043c8349",
      "version": 7
    },
    "setting.perps_keeper_l1_cost_liquidate_gas_units": {
      "artifacts": {
        "settings": {
          "perps_keeper_l1_cost_liquidate_gas_units": "26600"
        }
      },
      "hash": "b9b3dbf130846854348fd938ec44175f",
      "version": 7
    },
    "setting.perps_keeper_l1_cost_settle_gas_units": {
      "artifacts": {
        "settings": {
          "perps_keeper_l1_cost_settle_gas_units": "23000"
        }
      },
      "hash": "31194a2436aa345edd450f134bb0d8eb",
      "version": 7
    },
    "setting.perps_keeper_l2_cost_flag_gas_units": {
      "artifacts": {
        "settings": {
          "perps_keeper_l2_cost_flag_gas_units": "450000"
        }
      },
      "hash": "75bcaa44eb27247b94289eb6cccba937",
      "version": 7
    },
    "setting.perps_keeper_l2_cost_liquidate_gas_units": {
      "artifacts": {
        "settings": {
          "perps_keeper_l2_cost_liquidate_gas_units": "2300000"
        }
      },
      "hash": "98956d770b5f66f894b47da114ed1038",
      "version": 7
    },
    "setting.perps_keeper_l2_cost_settle_gas_units": {
      "artifacts": {
        "settings": {
          "perps_keeper_l2_cost_settle_gas_units": "5500000"
        }
      },
      "hash": "bd28d7b8bd00dd9c4f9badc6de0c9c23",
      "version": 7
    },
    "setting.perps_liquidation_max_keeper_reward_usd": {
      "artifacts": {
        "settings": {
          "perps_liquidation_max_keeper_reward_usd": "100"
        }
      },
      "hash": "747281c13f8d6c7e000941bc58e5fc0a",
      "version": 7
    },
    "setting.perps_liquidation_max_keeper_scaling_ratio_d18": {
      "artifacts": {
        "settings": {
          "perps_liquidation_max_keeper_scaling_ratio_d18": "0.3"
        }
      },
      "hash": "5be58e437c18785e12ebf29daf48f188",
      "version": 7
    },
    "setting.perps_liquidation_min_keeper_profit_ratio_d18": {
      "artifacts": {
        "settings": {
          "perps_liquidation_min_keeper_profit_ratio_d18": "0.30"
        }
      },
      "hash": "041164afb163314bb04e81a41b187e8e",
      "version": 7
    },
    "setting.perps_liquidation_min_keeper_reward_usd": {
      "artifacts": {
        "settings": {
          "perps_liquidation_min_keeper_reward_usd": "1"
        }
      },
      "hash": "5f6fb867a611e73895d85f93fc6f7baa",
      "version": 7
    },
    "setting.perps_low_util_gradient": {
      "artifacts": {
        "settings": {
          "perps_low_util_gradient": "0.000025"
        }
      },
      "hash": "c9e100418ba6e11574ab86db1a763572",
      "version": 7
    },
    "setting.perps_market_package": {
      "artifacts": {
        "settings": {
          "perps_market_package": "synthetix-perps-market:3.9.0"
        }
      },
      "hash": "92d17cac3ae67e9607f06087d1351952",
      "version": 7
    },
    "setting.perps_super_market_name": {
      "artifacts": {
        "settings": {
          "perps_super_market_name": "High MCap"
        }
      },
      "hash": "92e2e331ed7c2c6a57cdf1512104ae7f",
      "version": 7
    },
    "setting.pool_owner": {
      "artifacts": {
        "settings": {
          "pool_owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
        }
      },
      "hash": "3f34e398af2b36b5093aa17a4fca6630",
      "version": 7
    },
    "setting.pythSnxFeedId": {
      "artifacts": {
        "settings": {
          "pythSnxFeedId": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3"
        }
      },
      "hash": "17469af564340e6ed8cd0790eedf9dcb",
      "version": 7
    },
    "setting.pyth_price_verification_address": {
      "artifacts": {
        "settings": {
          "pyth_price_verification_address": "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"
        }
      },
      "hash": "6ea8ff2218f9a6d4225a0a62e7a60bf4",
      "version": 7
    },
    "setting.referrerFee": {
      "artifacts": {
        "settings": {
          "referrerFee": "200000000000000000"
        }
      },
      "hash": "f296f686e58711260897d9596d6363a5",
      "version": 7
    },
    "setting.salt": {
      "artifacts": {
        "settings": {
          "salt": "andromeda-dev-2"
        }
      },
      "hash": "689d31feec3191b9a19798b10fac58c4",
      "version": 7
    },
    "setting.sc_pool_id": {
      "artifacts": {
        "settings": {
          "sc_pool_id": "1"
        }
      },
      "hash": "5f6fb867a611e73895d85f93fc6f7baa",
      "version": 7
    },
    "setting.settlementReward": {
      "artifacts": {
        "settings": {
          "settlementReward": "1"
        }
      },
      "hash": "5f6fb867a611e73895d85f93fc6f7baa",
      "version": 7
    },
    "setting.snx_package": {
      "artifacts": {
        "settings": {
          "snx_package": "synthetix:3.8.1"
        }
      },
      "hash": "68877550b0c3f5304d9c109b418d2fa9",
      "version": 7
    },
    "setting.spotStrictStalenessTolerance": {
      "artifacts": {
        "settings": {
          "spotStrictStalenessTolerance": "60"
        }
      },
      "hash": "c85e06d9961059219500923347f33fea",
      "version": 7
    },
    "setting.spot_market_package": {
      "artifacts": {
        "settings": {
          "spot_market_package": "synthetix-spot-market:3.8.1"
        }
      },
      "hash": "8615833e691ef2f0d5f8c7228e5e75e2",
      "version": 7
    },
    "setting.susdc_issuance_ratio": {
      "artifacts": {
        "settings": {
          "susdc_issuance_ratio": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
        }
      },
      "hash": "c58bed99bbb29bc55be4aca797032c53",
      "version": 7
    },
    "setting.susdc_liquidation_ratio": {
      "artifacts": {
        "settings": {
          "susdc_liquidation_ratio": "1005000000000000000"
        }
      },
      "hash": "ce8d7d40a0ac26dafbcc7074fe5bb1a6",
      "version": 7
    },
    "setting.susdc_liquidation_reward": {
      "artifacts": {
        "settings": {
          "susdc_liquidation_reward": "1000000000000000000"
        }
      },
      "hash": "845fb85d1e0ccaf6b0afd054626bbe97",
      "version": 7
    },
    "setting.susdc_min_delegation": {
      "artifacts": {
        "settings": {
          "susdc_min_delegation": "100000000000000000000"
        }
      },
      "hash": "ad27ad0c2fad068c59a31bad017dda13",
      "version": 7
    },
    "setting.synthUsdcMaxMarketCollateral": {
      "artifacts": {
        "settings": {
          "synthUsdcMaxMarketCollateral": "100000000000000000000000000"
        }
      },
      "hash": "42ab02ae7f916e6ed59461f615370985",
      "version": 7
    },
    "setting.target_preset": {
      "artifacts": {
        "settings": {
          "target_preset": "andromeda"
        }
      },
      "hash": "6f154b277b94433f367df0665a04c1f7",
      "version": 7
    },
    "invoke.registerLookupArbOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupArbOracleNode": {
            "hash": "0xd54ed563b05b14a1c50a833da31e235e63f2ac907b5ae455cd3d027a65dee6c9",
            "blockNumber": "17174196",
            "timestamp": "1730116680",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x451c9d9d5ce445bd86511a02026344b42144be60ba52c17f04ec88e4396d6399",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d3fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf5000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupArbOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000357",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "arb_lookup_oracle_id": "0x451c9d9d5ce445bd86511a02026344b42144be60ba52c17f04ec88e4396d6399"
        }
      },
      "hash": "c529120a03e8a4548d8944fd06666870",
      "version": 7
    },
    "invoke.registerLookupAvaxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupAvaxOracleNode": {
            "hash": "0xb0272bd67ed34a5c56488f105b9cdbfc8b9d7dcb32ee17af1aae72bee39a4347",
            "blockNumber": "17174202",
            "timestamp": "1730116692",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x09c05317e62c38da63b6f3f00d7b75b0124ffdafb342dc13f40e2f3d793559ce",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d93da3352f9f1d105fdfe4971cfa80e9dd777bfc5d0f683ebb6e1294b92137bb7000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupAvaxOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "avax_lookup_oracle_id": "0x09c05317e62c38da63b6f3f00d7b75b0124ffdafb342dc13f40e2f3d793559ce"
        }
      },
      "hash": "af587870ba40a9f27575236eb2b00fa9",
      "version": 7
    },
    "invoke.registerLookupBnbOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupBnbOracleNode": {
            "hash": "0x2ffbb16a5e0579186cd73edd183c384a3ed3ef374ece33ec178b693387d0b35a",
            "blockNumber": "17174215",
            "timestamp": "1730116718",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x30931143108b9ea6bac90b940d3c1ec8abc22cd76195b46e788c7a68c083d652",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupBnbOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bnb_lookup_oracle_id": "0x30931143108b9ea6bac90b940d3c1ec8abc22cd76195b46e788c7a68c083d652"
        }
      },
      "hash": "06e8456ab54d7d08751e6400a9d564f3",
      "version": 7
    },
    "invoke.registerLookupBonkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupBonkOracleNode": {
            "hash": "0x478686e62372fd6a8ff2d1ea3537f00ed8acf79e7852dd84461af6c7e4ba7f69",
            "blockNumber": "17174219",
            "timestamp": "1730116726",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x34ef40fc556e3fc5d7eb55a7b0ce7f73d10db49a20b64a99ade9e347bc15c321",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d72b021217ca3fe68922a19aaf990109cb9d84e9ad004b4d2025ad6f529314419000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupBonkOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bonk_lookup_oracle_id": "0x34ef40fc556e3fc5d7eb55a7b0ce7f73d10db49a20b64a99ade9e347bc15c321"
        }
      },
      "hash": "2494bf4deeb1ccbe5b46a543ee25b31f",
      "version": 7
    },
    "invoke.registerLookupDogeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupDogeOracleNode": {
            "hash": "0xca0923eab11f92020e7d8d37267a8fd726ce30418a6551605be9d3de8cf01ac1",
            "blockNumber": "17174233",
            "timestamp": "1730116754",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2fa984427417440e6f838baf3e33827484b3f715259cca119b8af04e26a65b3e",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56ddcef50dd0a4cd2dcc17e45df1676dcb336a11a61c69df7a0299b0150c672d25c000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupDogeOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "doge_lookup_oracle_id": "0x2fa984427417440e6f838baf3e33827484b3f715259cca119b8af04e26a65b3e"
        }
      },
      "hash": "3410144ca3cf0b3f046d1a5ef31bcdf9",
      "version": 7
    },
    "invoke.registerLookupEnaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupEnaOracleNode": {
            "hash": "0xab0f86990a136b69febe78b7f18bab0b9b3741a19bdfe5f36697d3c25799e330",
            "blockNumber": "17174239",
            "timestamp": "1730116766",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa5360b82286fa060616c71882798d05d6c8feb7c9c17b44150549add1b3243c7",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db7910ba7322db020416fcac28b48c01212fd9cc8fbcbaf7d30477ed8605f6bd4000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupEnaOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ena_lookup_oracle_id": "0xa5360b82286fa060616c71882798d05d6c8feb7c9c17b44150549add1b3243c7"
        }
      },
      "hash": "d0afd0680e2b708647401c149ab86dcb",
      "version": 7
    },
    "invoke.registerLookupFtmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupFtmOracleNode": {
            "hash": "0xe2122ac5de1a25025ce70f4d4effaec30d0550b5b9a773ae56e2229b6af8d1e6",
            "blockNumber": "17174255",
            "timestamp": "1730116798",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x7a9efd65df68379f6084044250801ba7f05ffc21b1d670028cf765a16be6aeba",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d5c6c0d2386e3352356c3ab84434fafb5ea067ac2678a38a338c4a69ddc4bdb0c000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupFtmOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000375",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ftm_lookup_oracle_id": "0x7a9efd65df68379f6084044250801ba7f05ffc21b1d670028cf765a16be6aeba"
        }
      },
      "hash": "e54cdb92d9bfb9d931ec75bccfc6d3b7",
      "version": 7
    },
    "invoke.registerLookupMaticOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupMaticOracleNode": {
            "hash": "0xc0e828ed3b7878a938290b97986c82d5e71771fd0263e55de90cf8df3c7cf981",
            "blockNumber": "17174283",
            "timestamp": "1730116854",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd226925a73d16ef1b835fa56355c6c83a5efaf3f8e612bf57992ef823d5add6c",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd70472000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupMaticOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "matic_lookup_oracle_id": "0xd226925a73d16ef1b835fa56355c6c83a5efaf3f8e612bf57992ef823d5add6c"
        }
      },
      "hash": "2ddc0b3f7f50b26aa5fc6f3b23f69d20",
      "version": 7
    },
    "invoke.registerLookupOpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupOpOracleNode": {
            "hash": "0x0616e2539e11891ba5f80da1699b82e3e128221bde639e82db92007640c46fc5",
            "blockNumber": "17174288",
            "timestamp": "1730116864",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x250ea629aa36db9e5ad7f480b81b460b3277b90018de0f6a73382aa6f65d53d9",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d385f64d993f7b77d8182ed5003d97c60aa3361f3cecfe711544d2d59165e9bdf000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupOpOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "op_lookup_oracle_id": "0x250ea629aa36db9e5ad7f480b81b460b3277b90018de0f6a73382aa6f65d53d9"
        }
      },
      "hash": "3b10039ea131288ce1e5eedea2c61d12",
      "version": 7
    },
    "invoke.registerLookupOrdiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupOrdiOracleNode": {
            "hash": "0x060c2eed7c5ffc950e2ac02fa4a02fc8f8a718bc76bf5d752f61ac003fc80760",
            "blockNumber": "17174290",
            "timestamp": "1730116868",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x6ad35186e68afdf08e79e98fbf4055d12c6208b87b5a7bed421bd1444445267d",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d193c739db502aadcef37c2589738b1e37bdb257d58cf1ab3c7ebc8e6df4e3ec0000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupOrdiOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ordi_lookup_oracle_id": "0x6ad35186e68afdf08e79e98fbf4055d12c6208b87b5a7bed421bd1444445267d"
        }
      },
      "hash": "85c953f57fcd94bcbf11b19c05e31da0",
      "version": 7
    },
    "invoke.registerLookupPepeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupPepeOracleNode": {
            "hash": "0x489cf8502056f099e9a0d8da4791c3034398fce466fa46f602d6cde3369f87d8",
            "blockNumber": "17174294",
            "timestamp": "1730116876",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc73afffc43d688c1a736293430352d7b079cc761bf67034caac4149ec963cea7",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dd69731a2e74ac1ce884fc3890f7ee324b6deb66147055249568869ed700882e4000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupPepeOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pepe_lookup_oracle_id": "0xc73afffc43d688c1a736293430352d7b079cc761bf67034caac4149ec963cea7"
        }
      },
      "hash": "d9ad987596a5e587802f73b84685c789",
      "version": 7
    },
    "invoke.registerLookupRuneOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupRuneOracleNode": {
            "hash": "0x7ea84c9afe980bc5777da7600be824d5d022f27c544fe6bf641db8b14d50a918",
            "blockNumber": "17174300",
            "timestamp": "1730116888",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4753963b9e67b9591021daa5aaca5c72337a37ac2656ac6fb7025714670870e4",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d5fcf71143bb70d41af4fa9aa1287e2efd3c5911cee59f909f915c9f61baacb1e000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupRuneOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "rune_lookup_oracle_id": "0x4753963b9e67b9591021daa5aaca5c72337a37ac2656ac6fb7025714670870e4"
        }
      },
      "hash": "b6ea75219979ed5020a51e215a3d6bf2",
      "version": 7
    },
    "invoke.registerPythArbOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythArbOracleNode": {
            "hash": "0x8eccf1c393e805ad57b12115a462b088bb330797c5c5407b96e5e3010bdcd41c",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd3323221062e69234315f0f23abd6d7969daba9f71ffb91767c3e8c32a9d9c6d",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57293fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf50000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythArbOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "arb_pyth_oracle_id": "0xd3323221062e69234315f0f23abd6d7969daba9f71ffb91767c3e8c32a9d9c6d"
        }
      },
      "hash": "568be4b7f8c595cc95397e2235a02e45",
      "version": 7
    },
    "invoke.registerPythAvaxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythAvaxOracleNode": {
            "hash": "0x8cd01c8602c1117323d5d049407ed462068512002cb95ad5e5635c32a4168640",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x78811dddcbc17f8ff41f7379de65ad9a7e9e417baaa8790d6c60fd6978f4a67c",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572993da3352f9f1d105fdfe4971cfa80e9dd777bfc5d0f683ebb6e1294b92137bb70000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythAvaxOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "avax_pyth_oracle_id": "0x78811dddcbc17f8ff41f7379de65ad9a7e9e417baaa8790d6c60fd6978f4a67c"
        }
      },
      "hash": "3826cd7fd0aeb456b7cf62afd474ff04",
      "version": 7
    },
    "invoke.registerPythBnbOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythBnbOracleNode": {
            "hash": "0x32cce2acf2e0911892250d530a80d67c74f557a1ef08d0c7f9c72d26ab245688",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x6fc41a8b636c689dbc65bb95d6a3ab0ab0ac68f790925782b145742ed85ff2cb",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57292f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythBnbOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bnb_pyth_oracle_id": "0x6fc41a8b636c689dbc65bb95d6a3ab0ab0ac68f790925782b145742ed85ff2cb"
        }
      },
      "hash": "e1926a4b26b147ed2278757d118abeec",
      "version": 7
    },
    "invoke.registerPythBonkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythBonkOracleNode": {
            "hash": "0xc741a0701a500ea66de835e047d263e81871cffdb4a2555c96e0e3ca6022c00a",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8e9a1fe464645fa0acc9d42fa2b3d995007c9a4d8c32bb453c854f189276c66e",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572972b021217ca3fe68922a19aaf990109cb9d84e9ad004b4d2025ad6f5293144190000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythBonkOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bonk_pyth_oracle_id": "0x8e9a1fe464645fa0acc9d42fa2b3d995007c9a4d8c32bb453c854f189276c66e"
        }
      },
      "hash": "9becb1601c4c2506feaf84d8b3ffcd23",
      "version": 7
    },
    "invoke.registerPythDogeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythDogeOracleNode": {
            "hash": "0x5558a8ac061a3bf5475b7d4ecb088c230509702faf7f4d9788721b8614c5bc2f",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x21df727697384ad1dfdb5942ade9908465f84002567fe040d87de4f6ed8b3f1c",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729dcef50dd0a4cd2dcc17e45df1676dcb336a11a61c69df7a0299b0150c672d25c0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythDogeOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "doge_pyth_oracle_id": "0x21df727697384ad1dfdb5942ade9908465f84002567fe040d87de4f6ed8b3f1c"
        }
      },
      "hash": "6ce49b643eae9481e91a7c6bce90ace2",
      "version": 7
    },
    "invoke.registerPythEnaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythEnaOracleNode": {
            "hash": "0xd6c1316828ea4fe226b987e662e7ded710a0496eeaf97cb8eacfb8ab8fd99808",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x0cb2c910e1eea54e8e432e0b040277f933015442a482001d197c805dda7e0b73",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b7910ba7322db020416fcac28b48c01212fd9cc8fbcbaf7d30477ed8605f6bd40000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythEnaOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ena_pyth_oracle_id": "0x0cb2c910e1eea54e8e432e0b040277f933015442a482001d197c805dda7e0b73"
        }
      },
      "hash": "76e80887de4cafbf34f34c619f376637",
      "version": 7
    },
    "invoke.registerPythFtmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythFtmOracleNode": {
            "hash": "0x506be6c839419c7573bf09d1c74caeb796a0ac7ed6651829f801784123124708",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xbea2ee2bb9f1b7296d3f59ed6b8330ca7bedc799329b1efe9d46106c9d099047",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57295c6c0d2386e3352356c3ab84434fafb5ea067ac2678a38a338c4a69ddc4bdb0c0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythFtmOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ftm_pyth_oracle_id": "0xbea2ee2bb9f1b7296d3f59ed6b8330ca7bedc799329b1efe9d46106c9d099047"
        }
      },
      "hash": "9c62d969cd5ada9d16f361e73368161f",
      "version": 7
    },
    "invoke.registerPythMaticOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythMaticOracleNode": {
            "hash": "0x3e17b209156823bcd81ad941d379cc2d86eaf26a7dc90787fa8e5360a632a772",
            "blockNumber": "15135342",
            "timestamp": "1726038972",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x09f7ef1688eeb812fcbc5433140a2a30d10e471d4dd14d722a24bf6869746cd3",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729ffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd704720000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythMaticOracleNode",
            "gasUsed": 51392,
            "gasCost": "9429245",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "matic_pyth_oracle_id": "0x09f7ef1688eeb812fcbc5433140a2a30d10e471d4dd14d722a24bf6869746cd3"
        }
      },
      "hash": "76244c40b2cbb90143bb50dd23547f60",
      "version": 7
    },
    "invoke.registerPythOpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythOpOracleNode": {
            "hash": "0x07b6c47ca332c5a1acae7949fdbc884cacc4aa86330f9b260ad701ecf9f3a6ef",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x66f4ef8b3bd4e40800d59a2c434435b4c942dbb3eac3378e9bbb8281af3e54dc",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729385f64d993f7b77d8182ed5003d97c60aa3361f3cecfe711544d2d59165e9bdf0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythOpOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "op_pyth_oracle_id": "0x66f4ef8b3bd4e40800d59a2c434435b4c942dbb3eac3378e9bbb8281af3e54dc"
        }
      },
      "hash": "c458b0248a7ddd3f074a07822909ec9e",
      "version": 7
    },
    "invoke.registerPythOrdiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythOrdiOracleNode": {
            "hash": "0xb3ae5703bb398acf198c02bbadf53ffb23e3de8bb4e69a7004915482f7e7646d",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x5b71ad7620c28f643a498b43def0625e21d20aa89c95d9fdfc4db515eb302153",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729193c739db502aadcef37c2589738b1e37bdb257d58cf1ab3c7ebc8e6df4e3ec00000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythOrdiOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ordi_pyth_oracle_id": "0x5b71ad7620c28f643a498b43def0625e21d20aa89c95d9fdfc4db515eb302153"
        }
      },
      "hash": "f530c1eac964b2bb043a8dd7ac19c257",
      "version": 7
    },
    "invoke.registerPythPepeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythPepeOracleNode": {
            "hash": "0x86c971d1a6a2f304d4a933a3e17d5240657b0ebedd784455fd175ef98f00be13",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x33c3e679ac1b69e003d436053c7ab52db0623b9c88274ca6f0f6cae39abb8434",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729d69731a2e74ac1ce884fc3890f7ee324b6deb66147055249568869ed700882e40000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythPepeOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pepe_pyth_oracle_id": "0x33c3e679ac1b69e003d436053c7ab52db0623b9c88274ca6f0f6cae39abb8434"
        }
      },
      "hash": "66ce34f39b7ee09b1aa46130645cf660",
      "version": 7
    },
    "invoke.registerPythRuneOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythRuneOracleNode": {
            "hash": "0x14c2e3e28b43e834583c679fa0a5e0f8244c9f22d8317a6b6e43e37dea6fe56e",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd0ee193472039dfd8ec5731447ddb604d8e49e439baae5e70e7ee94696c98473",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57295fcf71143bb70d41af4fa9aa1287e2efd3c5911cee59f909f915c9f61baacb1e0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythRuneOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "rune_pyth_oracle_id": "0xd0ee193472039dfd8ec5731447ddb604d8e49e439baae5e70e7ee94696c98473"
        }
      },
      "hash": "80812209de272609ebcf52491249c73c",
      "version": 7
    },
    "invoke.registerArbOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerArbOracleNode": {
            "hash": "0x2c64864eec472f056b79a5ea9631ccf3d2278776cba80359f2026df2dc766e0f",
            "blockNumber": "17174377",
            "timestamp": "1730117042",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc90994c2d864082d32615a56afca688c80378cd85c06f1ef683e8411b764fe6c",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xd3323221062e69234315f0f23abd6d7969daba9f71ffb91767c3e8c32a9d9c6d",
                      "0x451c9d9d5ce445bd86511a02026344b42144be60ba52c17f04ec88e4396d6399"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerArbOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "arb_oracle_id": "0xc90994c2d864082d32615a56afca688c80378cd85c06f1ef683e8411b764fe6c"
        }
      },
      "hash": "46f98d4cd6b3e8b1405bac19b381e3bd",
      "version": 7
    },
    "invoke.registerAvaxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerAvaxOracleNode": {
            "hash": "0x59ec4e0a1ce6a20cc8e159550e01078c7c464b507b06ad9ba3832905ae2277aa",
            "blockNumber": "17174383",
            "timestamp": "1730117054",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x107ab5071706032da14e02599383e72eb1c100f07ea78b23788360ecb70c33d5",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x78811dddcbc17f8ff41f7379de65ad9a7e9e417baaa8790d6c60fd6978f4a67c",
                      "0x09c05317e62c38da63b6f3f00d7b75b0124ffdafb342dc13f40e2f3d793559ce"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerAvaxOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "avax_oracle_id": "0x107ab5071706032da14e02599383e72eb1c100f07ea78b23788360ecb70c33d5"
        }
      },
      "hash": "8f507b0d4946d8ae0d766ebc0c063437",
      "version": 7
    },
    "invoke.registerBnbOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerBnbOracleNode": {
            "hash": "0x77d72a019e23982f4d10709721574b5267473899c1b557c0ef0deaf84971a5dd",
            "blockNumber": "17174395",
            "timestamp": "1730117078",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xeb6312b4cc2a6bf42e314ea421aae7e5262163a1a0e538acc7fd7a5f354a1eb5",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x6fc41a8b636c689dbc65bb95d6a3ab0ab0ac68f790925782b145742ed85ff2cb",
                      "0x30931143108b9ea6bac90b940d3c1ec8abc22cd76195b46e788c7a68c083d652"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerBnbOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bnb_oracle_id": "0xeb6312b4cc2a6bf42e314ea421aae7e5262163a1a0e538acc7fd7a5f354a1eb5"
        }
      },
      "hash": "cb3f687978ff39b768d2bc12bff4dda4",
      "version": 7
    },
    "invoke.registerBonkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerBonkOracleNode": {
            "hash": "0xae3d248a380e2695553771f46ef26e6e6687494121e13708c51bd6df836f0f1a",
            "blockNumber": "17174399",
            "timestamp": "1730117086",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xcbe13ef302dd680c9eb52904c728b27b1871a5fae70a2494dbf1ae58dbc4bd4e",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x8e9a1fe464645fa0acc9d42fa2b3d995007c9a4d8c32bb453c854f189276c66e",
                      "0x34ef40fc556e3fc5d7eb55a7b0ce7f73d10db49a20b64a99ade9e347bc15c321"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerBonkOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bonk_oracle_id": "0xcbe13ef302dd680c9eb52904c728b27b1871a5fae70a2494dbf1ae58dbc4bd4e"
        }
      },
      "hash": "2457ae5e12d3e68f53739dcf804db03e",
      "version": 7
    },
    "invoke.registerDogeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerDogeOracleNode": {
            "hash": "0x8570a48cf30d8a00723660fe3684e5214605b04bdaf9bdbcfca89b27e068ac1e",
            "blockNumber": "17174411",
            "timestamp": "1730117110",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x12fc7e4cedf66ed7edfcd875dd466ba7656172388c87bea41fa95b4fa5878496",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x21df727697384ad1dfdb5942ade9908465f84002567fe040d87de4f6ed8b3f1c",
                      "0x2fa984427417440e6f838baf3e33827484b3f715259cca119b8af04e26a65b3e"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerDogeOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000378",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "doge_oracle_id": "0x12fc7e4cedf66ed7edfcd875dd466ba7656172388c87bea41fa95b4fa5878496"
        }
      },
      "hash": "4b446a272b1c69b3d9977f177f35c401",
      "version": 7
    },
    "invoke.registerEnaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEnaOracleNode": {
            "hash": "0xd3897347f8f5ba2f97a1c5cefef3ef7def66451d35b9f92226b40eba2cdbba62",
            "blockNumber": "17174417",
            "timestamp": "1730117122",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1d20a20d719d36c99bb120db17354e2a38fa71bfbbc549e6672ce9f80d3dd9c9",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x0cb2c910e1eea54e8e432e0b040277f933015442a482001d197c805dda7e0b73",
                      "0xa5360b82286fa060616c71882798d05d6c8feb7c9c17b44150549add1b3243c7"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEnaOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000378",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ena_oracle_id": "0x1d20a20d719d36c99bb120db17354e2a38fa71bfbbc549e6672ce9f80d3dd9c9"
        }
      },
      "hash": "e9f2eac388e8b9ad4986819e0250b1d6",
      "version": 7
    },
    "invoke.registerFtmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerFtmOracleNode": {
            "hash": "0x43fcf1ae6962eb797e13b428c0fb8876fab87ac3b387dfb73b72f78aebd41ae1",
            "blockNumber": "17174435",
            "timestamp": "1730117158",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4a64d4789b1825b3ceff0cc8930cd930397a9dc54e6b477fa2d21264d6577091",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xbea2ee2bb9f1b7296d3f59ed6b8330ca7bedc799329b1efe9d46106c9d099047",
                      "0x7a9efd65df68379f6084044250801ba7f05ffc21b1d670028cf765a16be6aeba"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerFtmOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000373",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ftm_oracle_id": "0x4a64d4789b1825b3ceff0cc8930cd930397a9dc54e6b477fa2d21264d6577091"
        }
      },
      "hash": "93bf204c50a18f835af728d8be2fa6c0",
      "version": 7
    },
    "invoke.registerMaticOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerMaticOracleNode": {
            "hash": "0x7050fd737d8698c995cc38065e22949cd6ed0d9b5635fbc59c77e8de59789a4e",
            "blockNumber": "17174463",
            "timestamp": "1730117214",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8eeaf55aa741713e78fed72064d8352292e0e3df123c36f674cb27f19bace022",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x09f7ef1688eeb812fcbc5433140a2a30d10e471d4dd14d722a24bf6869746cd3",
                      "0xd226925a73d16ef1b835fa56355c6c83a5efaf3f8e612bf57992ef823d5add6c"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerMaticOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "matic_oracle_id": "0x8eeaf55aa741713e78fed72064d8352292e0e3df123c36f674cb27f19bace022"
        }
      },
      "hash": "98d0506eecf56d6b3fcd52008e81ebae",
      "version": 7
    },
    "invoke.registerOpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerOpOracleNode": {
            "hash": "0x93e3f22e7fa29061ebde03c7ed4347c84158f5ef1bbc090462fee945939d0aed",
            "blockNumber": "17174467",
            "timestamp": "1730117222",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb13637c048974898dd541ee7cbe55a3d94231db497c59305387eb736fcb3c0b8",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x66f4ef8b3bd4e40800d59a2c434435b4c942dbb3eac3378e9bbb8281af3e54dc",
                      "0x250ea629aa36db9e5ad7f480b81b460b3277b90018de0f6a73382aa6f65d53d9"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerOpOracleNode",
            "gasUsed": 51853,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "op_oracle_id": "0xb13637c048974898dd541ee7cbe55a3d94231db497c59305387eb736fcb3c0b8"
        }
      },
      "hash": "9cf2d0662334c011f6ef3ed4912925c9",
      "version": 7
    },
    "invoke.registerOrdiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerOrdiOracleNode": {
            "hash": "0xb5798202577f0502aab18036ad60e92855704af09052f40e257948395ec13adb",
            "blockNumber": "17174469",
            "timestamp": "1730117226",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb094d381fd30ac88a4a412562338a65ad5d5ac1ffefacc6be81e20d28d953cb7",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x5b71ad7620c28f643a498b43def0625e21d20aa89c95d9fdfc4db515eb302153",
                      "0x6ad35186e68afdf08e79e98fbf4055d12c6208b87b5a7bed421bd1444445267d"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerOrdiOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ordi_oracle_id": "0xb094d381fd30ac88a4a412562338a65ad5d5ac1ffefacc6be81e20d28d953cb7"
        }
      },
      "hash": "19a55f37cc5a17885558968a148974e6",
      "version": 7
    },
    "invoke.registerPepeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPepeOracleNode": {
            "hash": "0x9c9a5d2aa688a3ff32e37f378dd2a4c2c940d149981c56b8c4421c0fa41ac0ce",
            "blockNumber": "17174473",
            "timestamp": "1730117234",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9ed3b3618feb178b20a94e4c2a73ab318f593aa43b43b44f97203af56f7401ff",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x33c3e679ac1b69e003d436053c7ab52db0623b9c88274ca6f0f6cae39abb8434",
                      "0xc73afffc43d688c1a736293430352d7b079cc761bf67034caac4149ec963cea7"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPepeOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pepe_oracle_id": "0x9ed3b3618feb178b20a94e4c2a73ab318f593aa43b43b44f97203af56f7401ff"
        }
      },
      "hash": "548733ef43d2ce35c26ce505fcb5445d",
      "version": 7
    },
    "invoke.registerRuneOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerRuneOracleNode": {
            "hash": "0xa69a34fb673ddad9ae7fa394c4054d2c17a734bc88405f982bc58c07575e1b90",
            "blockNumber": "17174479",
            "timestamp": "1730117246",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x3968bc4b5db008ba01092df8a433fd0f5cd31306f75ee39931c7c79898e80f11",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xd0ee193472039dfd8ec5731447ddb604d8e49e439baae5e70e7ee94696c98473",
                      "0x4753963b9e67b9591021daa5aaca5c72337a37ac2656ac6fb7025714670870e4"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerRuneOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "rune_oracle_id": "0x3968bc4b5db008ba01092df8a433fd0f5cd31306f75ee39931c7c79898e80f11"
        }
      },
      "hash": "2a0cfee247308e81ead45528d9b32fb9",
      "version": 7
    },
    "invoke.createArbPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createArbPerpsMarket": {
            "hash": "0x7fb31a7cec2dbfa41a11504feee191b30142e7e65e7b9ed4f00bd3b36db850a2",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1600",
                    "Arbitrum",
                    "ARB"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createArbPerpsMarket",
            "gasUsed": 165894,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ac358cb5a3c86f52516708a1406eba2a",
      "version": 7
    },
    "invoke.createAvaxPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createAvaxPerpsMarket": {
            "hash": "0x7f9ce1e3f87a50311a4116da0db7a9fe40aef9c4b24965da559ac9dafac3d5a7",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "900",
                    "Avalanche",
                    "AVAX"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createAvaxPerpsMarket",
            "gasUsed": 165918,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "004bf4ec38b6e63625ff21f8a6a99d72",
      "version": 7
    },
    "invoke.createBnbPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createBnbPerpsMarket": {
            "hash": "0x9536073fa388fa5ddfab5a05b3348db9dabf7da8395e41c74214621358e6e456",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1800",
                    "BNB",
                    "BNB"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createBnbPerpsMarket",
            "gasUsed": 165834,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f8fb403333f427cc16cbc47e34cf94ac",
      "version": 7
    },
    "invoke.createBonkPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createBonkPerpsMarket": {
            "hash": "0xd8dbc2c4581b89115e25a87ab6495455dc406cb1b2fbd7cdd19d67496ed26cd5",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1400",
                    "Bonk",
                    "BONK"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createBonkPerpsMarket",
            "gasUsed": 165858,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "17f4be3cd5236f636ac29cbb27b06f14",
      "version": 7
    },
    "invoke.createDogePerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createDogePerpsMarket": {
            "hash": "0x1fec73414e8c759f0bc609d1a9c36a72a9a76b86395fda0f8c6c297fbec0dcc6",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "800",
                    "Dogecoin",
                    "DOGE"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createDogePerpsMarket",
            "gasUsed": 165906,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6d0dbe7b54ed4b5dc7c5f54d6a3eab7c",
      "version": 7
    },
    "invoke.createEnaPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createEnaPerpsMarket": {
            "hash": "0x986ab383d9f4a3b5b2fc7f7080f6664f25dc4dcd63d46c18291f9a82bf2f94e2",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "700",
                    "Ethena",
                    "ENA"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createEnaPerpsMarket",
            "gasUsed": 165870,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5e006f06a66db80d2ed0e81733154674",
      "version": 7
    },
    "invoke.createFtmPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createFtmPerpsMarket": {
            "hash": "0xd79b80cedc4a82231a49a67f17859308534df710d02eac118c04fbbb6cb3948a",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1500",
                    "Fantom",
                    "FTM"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createFtmPerpsMarket",
            "gasUsed": 165870,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "57ecc50552e05a686138e749ec83fee5",
      "version": 7
    },
    "invoke.createMaticPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createMaticPerpsMarket": {
            "hash": "0x17e8b0b428849a3e5f3259b214c0bbca84dc95d915eca32421c7a9c0c61885d5",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1700",
                    "Polygon",
                    "MATIC"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createMaticPerpsMarket",
            "gasUsed": 165906,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e33512c43f89f70fb23f4231c7a170e6",
      "version": 7
    },
    "invoke.createOpPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createOpPerpsMarket": {
            "hash": "0x2d178cc491440297b3355b70241699039807bc42ddfde2c23449ed2614ce95c5",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1000",
                    "Optimism",
                    "OP"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createOpPerpsMarket",
            "gasUsed": 165882,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dd43ae0020769acdead665e98f5364b1",
      "version": 7
    },
    "invoke.createOrdiPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createOrdiPerpsMarket": {
            "hash": "0x3c16fe1fb66fdf70c237a8d5abab7747eb58f04c50d9e322dce7c60eb74514d4",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1100",
                    "ORDI",
                    "ORDI"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createOrdiPerpsMarket",
            "gasUsed": 165858,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "35f6b78e14e1f007c229daf8b8ad0f4d",
      "version": 7
    },
    "invoke.createPepePerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createPepePerpsMarket": {
            "hash": "0x077bcae2b085e6a04e3a684cf969b02368c53e3cc10936a38a1813e38cfe1750",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1200",
                    "Pepe",
                    "PEPE"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createPepePerpsMarket",
            "gasUsed": 165858,
            "gasCost": "1000270",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "60d6360562d8a5355b6df0ff594a46c4",
      "version": 7
    },
    "invoke.createRunePerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createRunePerpsMarket": {
            "hash": "0xaa9f2562c6c0209450c4a04154b3afcd513bac45343f24e1ab65cba5eb3b48d3",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1300",
                    "THORChain",
                    "RUNE"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createRunePerpsMarket",
            "gasUsed": 165918,
            "gasCost": "1000270",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "242f25627bebc7640380d753c4779439",
      "version": 7
    },
    "invoke.addPerpsArbSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsArbSettlementStrategy": {
            "hash": "0x9f640138232afdc9d13f12d77a38b51e93730e6fd03cb7d281e15af78747e46b",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1600",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsArbSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "arb_pyth_settlement_strategy": "0"
        }
      },
      "hash": "18f286960d6449dd7d765ae4413d81f5",
      "version": 7
    },
    "invoke.addPerpsAvaxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsAvaxSettlementStrategy": {
            "hash": "0x93d39cb934804a53af8abdc262b672b89033ad2e3ffe109f70f392e86bbaf4ea",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "900",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsAvaxSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "avax_pyth_settlement_strategy": "0"
        }
      },
      "hash": "710e0841d4d4438e55e215a0bcf00836",
      "version": 7
    },
    "invoke.addPerpsBnbSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsBnbSettlementStrategy": {
            "hash": "0xaf019f67d1034ac362ee224f27cda91450dc5849c0ac7f9c28d8e5fa359b92f9",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1800",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsBnbSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bnb_pyth_settlement_strategy": "0"
        }
      },
      "hash": "10e95952eea537d10d15faa6001b8e85",
      "version": 7
    },
    "invoke.addPerpsBonkSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsBonkSettlementStrategy": {
            "hash": "0xdcd4b7848f392ee5c5da58153b562c6ec0e425cb9117c3e755fded561e4e265b",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsBonkSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bonk_pyth_settlement_strategy": "0"
        }
      },
      "hash": "861089c2ff2a57986a6be8a4b5653e4a",
      "version": 7
    },
    "invoke.addPerpsDogeSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsDogeSettlementStrategy": {
            "hash": "0xc29045ca5cafe83ac290e483f2983b9a859c7481e5fbc77d931fbf75cad2bf40",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "800",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsDogeSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "doge_pyth_settlement_strategy": "0"
        }
      },
      "hash": "696f109e2e4790feb70bf28b7261bddf",
      "version": 7
    },
    "invoke.addPerpsEnaSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsEnaSettlementStrategy": {
            "hash": "0x806761d5275b29c686f61dac64b84d96a3871b3d73a810148c419dd74ae6ebaa",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "700",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsEnaSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ena_pyth_settlement_strategy": "0"
        }
      },
      "hash": "a3ac7b54d6161ef4d4836f783f630621",
      "version": 7
    },
    "invoke.addPerpsFtmSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsFtmSettlementStrategy": {
            "hash": "0x7d220ee86cdf982ec4e756d90cc35dfe3e98cc4495db9c6549266d94626bc971",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1500",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsFtmSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ftm_pyth_settlement_strategy": "0"
        }
      },
      "hash": "213282fb653e4072601ddd0d8be81192",
      "version": 7
    },
    "invoke.addPerpsMaticSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsMaticSettlementStrategy": {
            "hash": "0x4fa48cf3f767dfff1c185b4dec1b69767cea4bd48f55ecfdbdeabd5aa01e44b9",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1700",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsMaticSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "matic_pyth_settlement_strategy": "0"
        }
      },
      "hash": "3fc1d81659debe33a771b5edb23faf1c",
      "version": 7
    },
    "invoke.addPerpsOpSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsOpSettlementStrategy": {
            "hash": "0xfd2f0ec75dccab8553d5ca85c3e559c6a02dc9b24a82c17ed3ce473c3e35c8b5",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1000",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsOpSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "op_pyth_settlement_strategy": "0"
        }
      },
      "hash": "9774ba949fc5169fa1535ca84ed0e8a1",
      "version": 7
    },
    "invoke.addPerpsOrdiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsOrdiSettlementStrategy": {
            "hash": "0x91940dc9e7ee9c8fc5c39fa00f2b81f10c6f6d60fad4b70c854f0171eebbbe35",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsOrdiSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ordi_pyth_settlement_strategy": "0"
        }
      },
      "hash": "e4d0d9633b02a786b0b12418acf921e4",
      "version": 7
    },
    "invoke.addPerpsPepeSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsPepeSettlementStrategy": {
            "hash": "0x7c1bb7630d2868c849783c80fe431946ed9925fc102a8bf0b79520f556136be8",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsPepeSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pepe_pyth_settlement_strategy": "0"
        }
      },
      "hash": "53c3b85af52f7d58ea47e1ca631b2481",
      "version": 7
    },
    "invoke.addPerpsRuneSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsRuneSettlementStrategy": {
            "hash": "0x2b4e5474173687024a28108a926ec7cbc4df1bc8d95322b4bcd259d6816762d8",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsRuneSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "rune_pyth_settlement_strategy": "0"
        }
      },
      "hash": "7a896a0ec3377b276ca0afdcbd15ffa2",
      "version": 7
    },
    "invoke.setPerpsArbFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArbFundingParameters": {
            "hash": "0xceff685b9bd582a46cd6f293832eeda12b6edde6b6fd7e859df93cd94220cc7c",
            "blockNumber": "16432753",
            "timestamp": "1728633794",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1600",
                    "82000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArbFundingParameters",
            "gasUsed": 45048,
            "gasCost": "321892016",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3547ace10bef34ffc79da227ab70f408",
      "version": 7
    },
    "invoke.setPerpsArbLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArbLiquidationParameters": {
            "hash": "0x33ba93e03cc550bb664156cb4997e0d51b3791971ad1e5f3cc2093fe8e07bdff",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1600",
                    "4160000000000000000",
                    "380000000000000000",
                    "33333000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArbLiquidationParameters",
            "gasUsed": 147145,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e497f5b208a0d63c5ad38cb192b143f2",
      "version": 7
    },
    "invoke.setPerpsArbLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArbLockedOiRatio": {
            "hash": "0xe4e1b91fb1b0ee2761bbf5815e53fcb9e36b99cb2af28f53f1c2752b51b29ab8",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1600",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArbLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "27fcb11f6bf401c3ee38cdf76f110a63",
      "version": 7
    },
    "invoke.setPerpsArbMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArbMaxLiquidationParameters": {
            "hash": "0x8c9261a1a0c52179f72825c3cb8d7a0809d9b3304caa9e9303a9052534b0696f",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1600",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArbMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4f9c61dcfdd17c1acd7f3bf7b76c4fca",
      "version": 7
    },
    "invoke.setPerpsArbMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArbMaxMarketSize": {
            "hash": "0x7d0db5bc8ef40f21f994115318e6abcf0ac58b1966415eb92a450bc25c713629",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1600",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArbMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bf614954ff5867cb51ea4d1148bc1c9f",
      "version": 7
    },
    "invoke.setPerpsArbMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArbMaxMarketValue": {
            "hash": "0xa0bfa0f44ffacde75ae5945792aaf79ef44cc96e4b673a0e83e2fb3c84fee2fe",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1600",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArbMaxMarketValue",
            "gasUsed": 36746,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "151b166e9f6cd5b40eff62e7e93e4230",
      "version": 7
    },
    "invoke.setPerpsArbOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArbOrderFees": {
            "hash": "0x6224fdb6b279755d3d415c0f781799ca6c178883a29bc3e46ae09528720d1243",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1600",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArbOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "06b863a909ba3c5b5fe653cb544a06f9",
      "version": 7
    },
    "invoke.setPerpsAvaxFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAvaxFundingParameters": {
            "hash": "0x265634245c53d92b494575dd93e25b3683ad156131a2a06b4aeda3b51ea0d2f5",
            "blockNumber": "16432764",
            "timestamp": "1728633816",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "900",
                    "2500000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAvaxFundingParameters",
            "gasUsed": 45048,
            "gasCost": "319515551",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a0f98a1e8d224edb56207b0c42323753",
      "version": 7
    },
    "invoke.setPerpsAvaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAvaxLiquidationParameters": {
            "hash": "0xc2580eb0e6bc22bbe3fabc885d870fce487b0ab11ccddbf2fb7678ca4cec9f5a",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "900",
                    "9080000000000000000",
                    "360000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAvaxLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "05055568a9e18b55713495ce6f11d64e",
      "version": 7
    },
    "invoke.setPerpsAvaxLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAvaxLockedOiRatio": {
            "hash": "0x3d2ac4a1f56c3faa2cf9c47b635736a7e19069e433d77fb67a4bf28e45e64c55",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "900",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAvaxLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "686e74fb7746e05507ab5ec015cfc8ad",
      "version": 7
    },
    "invoke.setPerpsAvaxMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAvaxMaxLiquidationParameters": {
            "hash": "0x9addc1e932ba2fa2e155471b96d05fa440081832370fb382ed6c7e135fc53fe1",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "900",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAvaxMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9c32d6902e0ec68eecf1505c6e395da2",
      "version": 7
    },
    "invoke.setPerpsAvaxMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAvaxMaxMarketSize": {
            "hash": "0x7eec6f11e938b1f956d42d1b6cee54969d54c41566d50b856bcf06e293d4bfd6",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "900",
                    "100000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAvaxMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e8479c549635cf51a520d8367255891f",
      "version": 7
    },
    "invoke.setPerpsAvaxMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAvaxMaxMarketValue": {
            "hash": "0x22ced98dd0a292128bf078b651e26dc3dccc82d93e1800869363848c2aa56737",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "900",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAvaxMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3700ee98e7cb47144b96ca46cff20195",
      "version": 7
    },
    "invoke.setPerpsAvaxOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAvaxOrderFees": {
            "hash": "0x2e5b4be7c342abfc61ae5c8bbe1154abd4fdcb10b231b89cc770b9f752a62e0c",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "900",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAvaxOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000268",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "afdd595bd4ef6f66d44eeb77003e5f6a",
      "version": 7
    },
    "invoke.setPerpsBnbFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBnbFundingParameters": {
            "hash": "0x4f5e52ec3f42ab7c872c0f3ab860f194bf4db43c6582e8c35ffd42c2b936cd39",
            "blockNumber": "16432795",
            "timestamp": "1728633878",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1800",
                    "375000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBnbFundingParameters",
            "gasUsed": 45048,
            "gasCost": "316426622",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d5a122214f93823448a55c4efa6a6693",
      "version": 7
    },
    "invoke.setPerpsBnbLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBnbLiquidationParameters": {
            "hash": "0x35e13773b9412ae5e56f74d6312cead91e962e10d637a871aff1995eb721f5cb",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1800",
                    "10720000000000000000",
                    "350000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBnbLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "22b2c9c0ca208bf847cc2298c4474325",
      "version": 7
    },
    "invoke.setPerpsBnbLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBnbLockedOiRatio": {
            "hash": "0x9f2c2ca4c22944c306452322f21ea31eeb580db1058c6f2b1c0c7160adcc414e",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1800",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBnbLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3930dd3a9dd833b0c70641b5a1706895",
      "version": 7
    },
    "invoke.setPerpsBnbMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBnbMaxLiquidationParameters": {
            "hash": "0xdc970f475466e8e8a30f77699c9bc900f18f413697edef3d15faa6b64f23d001",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1800",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBnbMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "262101592232cc8738e96146b002dd4c",
      "version": 7
    },
    "invoke.setPerpsBnbMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBnbMaxMarketSize": {
            "hash": "0xdfd26f01ab1372426c081716f15c4a02258f61e256b01a82b3b2d7b6846b25e8",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1800",
                    "7000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBnbMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "021f891918a3e0da3166ad5398415765",
      "version": 7
    },
    "invoke.setPerpsBnbMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBnbMaxMarketValue": {
            "hash": "0x5b780d0ec15dbf38d4000ccf762c3c27121ee53ced947903b87c7855ff32528a",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1800",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBnbMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b62db7b6f2df228c54e6253650bbd8ed",
      "version": 7
    },
    "invoke.setPerpsBnbOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBnbOrderFees": {
            "hash": "0x968a00b7bcc74f7d1dfa9a9487da4398e415b0122426f2dbe5a8eefbd44f101a",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1800",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBnbOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "26fb834e93070ee6129d33e4190308b0",
      "version": 7
    },
    "invoke.setPerpsBonkFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBonkFundingParameters": {
            "hash": "0x19de8b37c45f7265f8a909f94b3cc15185c6489b43b079bb32318b77c8a63609",
            "blockNumber": "16432803",
            "timestamp": "1728633894",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1400",
                    "1600000000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBonkFundingParameters",
            "gasUsed": 45060,
            "gasCost": "316548430",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "51a5f879d173b13a77123473136f87e8",
      "version": 7
    },
    "invoke.setPerpsBonkLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBonkLiquidationParameters": {
            "hash": "0x15e134999a0c389ea029e3b7d1a4fb56c87ac4e252166443b4b40b468870a798",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1400",
                    "2550000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBonkLiquidationParameters",
            "gasUsed": 53233,
            "gasCost": "1010137",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1dbed4870092f383e79a069d03460644",
      "version": 7
    },
    "invoke.setPerpsBonkLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBonkLockedOiRatio": {
            "hash": "0xeff0cc20547f7d4a9ea487d53e8f4d14cd5ad8a6061e525673949900f7ab2b05",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBonkLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4519296875639252af338cd970935f22",
      "version": 7
    },
    "invoke.setPerpsBonkMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBonkMaxLiquidationParameters": {
            "hash": "0x88c524b6f254cb83c6a658f04124ebe4e713cfd272c71d7a07f3451d58d0cf15",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBonkMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000262",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fde7a373a7834c2917a1a6d025fc2aab",
      "version": 7
    },
    "invoke.setPerpsBonkMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBonkMaxMarketSize": {
            "hash": "0x546aba4ae697839e15550b5d021162491a80c3c2cae59e90a6f577a1e27967c9",
            "blockNumber": "16432805",
            "timestamp": "1728633898",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1400",
                    "135525228000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBonkMaxMarketSize",
            "gasUsed": 39549,
            "gasCost": "318109562",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "959b399b6a27cbf0a6c8791875ebdfcf",
      "version": 7
    },
    "invoke.setPerpsBonkMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBonkMaxMarketValue": {
            "hash": "0xbc2d5e1179e31e72d02fac674cf2db1600d6a0b02f2563dd92ff6e4ef7b6d3de",
            "blockNumber": "16432807",
            "timestamp": "1728633902",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1400",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBonkMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "317985507",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "eb97e5716f7cbbbc315668fc97701000",
      "version": 7
    },
    "invoke.setPerpsBonkOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBonkOrderFees": {
            "hash": "0x0222b00cfc74f964f3ef26c8ec6d2c12df2ce85462a8d3a04288579756ff0c79",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1400",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBonkOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000260",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7c4b44608f79fba927aeeee2dc7b5e65",
      "version": 7
    },
    "invoke.setPerpsDogeFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDogeFundingParameters": {
            "hash": "0xe18b9dc97ad0438a0e2dd7a051c87c115d4fd0dc76240f9425bf21f7c837298f",
            "blockNumber": "16432827",
            "timestamp": "1728633942",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "800",
                    "1578000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDogeFundingParameters",
            "gasUsed": 45060,
            "gasCost": "318523613",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "01079208ba8b3b032084ecbc6a4487dd",
      "version": 7
    },
    "invoke.setPerpsDogeLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDogeLiquidationParameters": {
            "hash": "0xdb04e091cf7a23bb1546e20ce12c0f101edf2872562f268140ca8f61b27eefd1",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "800",
                    "6900000000000000000",
                    "300000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDogeLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000262",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "69bd1ceaf4ad3b638597d55e41269d91",
      "version": 7
    },
    "invoke.setPerpsDogeLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDogeLockedOiRatio": {
            "hash": "0x56f9f8d2f1b4d002fbd8581424b44f28a85eb369d29d236e777834387fda8df3",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "800",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDogeLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000261",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "70834e92c746f22bf6fb834f20bc580f",
      "version": 7
    },
    "invoke.setPerpsDogeMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDogeMaxLiquidationParameters": {
            "hash": "0x50deba0ef6a0ad9369e11b8caea888689321e0d3543c3f72ca2c96f56f87ab15",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "800",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDogeMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000261",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8bb6dd3f607211cb3b46c54a03ef00d5",
      "version": 7
    },
    "invoke.setPerpsDogeMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDogeMaxMarketSize": {
            "hash": "0xccddfceecbc06bf2b1e214258d7728b8bbf48326e1e734319aee8e8f794ef0db",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "800",
                    "25000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDogeMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8450ca85fbe17fe20e13258889b157e9",
      "version": 7
    },
    "invoke.setPerpsDogeMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDogeMaxMarketValue": {
            "hash": "0x2aa07eb11151a7c6df8a8316c28408b333312a78630d834bd89903b5c9320ae0",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "800",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDogeMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "890adcc487d17ddfa62d89f31d6fc119",
      "version": 7
    },
    "invoke.setPerpsDogeOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDogeOrderFees": {
            "hash": "0x5224d5fe01bf314e4dc3ed14342833f54da985dd0857ac5b08d2c72f26a14659",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "800",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDogeOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000260",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bcc3bac2b84b2c3482d4ea85525d2265",
      "version": 7
    },
    "invoke.setPerpsEnaFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEnaFundingParameters": {
            "hash": "0x754e720309b48fd8425d56eb991f9ee372bdc2a2086ad09db4420bea7243fda8",
            "blockNumber": "16432841",
            "timestamp": "1728633970",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "700",
                    "102000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEnaFundingParameters",
            "gasUsed": 45048,
            "gasCost": "319759710",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "adbda60f3cc2bd659e895d08d76bce1e",
      "version": 7
    },
    "invoke.setPerpsEnaLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEnaLiquidationParameters": {
            "hash": "0xe87dd02ffca44c0a0f51b09450a28c3576f331e85d7dcbdf1b71166bf2dcbcba",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "700",
                    "3460000000000000000",
                    "380000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEnaLiquidationParameters",
            "gasUsed": 53233,
            "gasCost": "1009888",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0076b1b36fb382d6ac21c701267e39a9",
      "version": 7
    },
    "invoke.setPerpsEnaLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEnaLockedOiRatio": {
            "hash": "0xe2f4ac2dc84ecc5f18816bc2afa9b2d61614a531b8ecdb307e3ab84ede2af35e",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "700",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEnaLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000260",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e8c53130951b1125bf95018b37d76290",
      "version": 7
    },
    "invoke.setPerpsEnaMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEnaMaxLiquidationParameters": {
            "hash": "0x93317137e78f66d30ac4e4f582d3afee2532c1e7b9d81f6e10c29150376246a8",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "700",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEnaMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000260",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f6fa5037ad9135b7c722d19e1afa46f4",
      "version": 7
    },
    "invoke.setPerpsEnaMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEnaMaxMarketSize": {
            "hash": "0x336265a8b4a1ada459f18ea6bc41c88803a1f217a5450bd5c1f2f082037ee4b9",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "700",
                    "3000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEnaMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "41f5b7d643517451a33a752a4229f818",
      "version": 7
    },
    "invoke.setPerpsEnaMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEnaMaxMarketValue": {
            "hash": "0x8c43d6429dea58a258f8c1375fec0a0c91f0732c6e1c6d09f31f793796cdb67c",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "700",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEnaMaxMarketValue",
            "gasUsed": 39546,
            "gasCost": "1000270",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a2a76c6b9621181913260fdded59a144",
      "version": 7
    },
    "invoke.setPerpsEnaOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEnaOrderFees": {
            "hash": "0xc13e3e08d33111705d6807f20d5c2493e32d39c5356c69a4f6867ba63535fc54",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "700",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEnaOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000261",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "254338ee2abb748f8643c5f35a713b1c",
      "version": 7
    },
    "invoke.setPerpsFtmFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFtmFundingParameters": {
            "hash": "0x831939f04dcbbfd93b6593e7dc1b52fe6efc64b90c5b7ea7bf33d4eeaecfc433",
            "blockNumber": "16432879",
            "timestamp": "1728634046",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1500",
                    "118000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFtmFundingParameters",
            "gasUsed": 45048,
            "gasCost": "318198284",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dca1693601cd686a16b052b42527a09a",
      "version": 7
    },
    "invoke.setPerpsFtmLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFtmLiquidationParameters": {
            "hash": "0x8e59795f7e0704e219d2612ad19b3a74f56214e722feaa75a2b42eb830ce2f32",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1500",
                    "5580000000000000000",
                    "380000000000000000",
                    "33333000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFtmLiquidationParameters",
            "gasUsed": 147145,
            "gasCost": "1000261",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ba060a5f5a78653bf992421c9547d874",
      "version": 7
    },
    "invoke.setPerpsFtmLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFtmLockedOiRatio": {
            "hash": "0xeb2121c8d6f6143c031ec83c9638ff63d6005b3ae9773336cfa3697d493d9230",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1500",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFtmLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000261",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "086c81892297483b3dff68b829c385d0",
      "version": 7
    },
    "invoke.setPerpsFtmMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFtmMaxLiquidationParameters": {
            "hash": "0x845ffc0bc6a0452df31496aeadd0d486b825b1739c7ba5ae124a372cc05d2168",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1500",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFtmMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000261",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7d0aada73c98d4e2ec542caca0eec283",
      "version": 7
    },
    "invoke.setPerpsFtmMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFtmMaxMarketSize": {
            "hash": "0xdfd73df8d8652c41e20912cc426c24c46e4c3615ac50a6d553be768e50690de5",
            "blockNumber": "16432881",
            "timestamp": "1728634050",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1500",
                    "4655350000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFtmMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "317456346",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5e3edd36c8f23be310665a9cf12421ef",
      "version": 7
    },
    "invoke.setPerpsFtmMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFtmMaxMarketValue": {
            "hash": "0x0addcd2cbf1134b833ca35e8066f141e98f34ccd0a90a553952f62bbf1aba5b4",
            "blockNumber": "16432883",
            "timestamp": "1728634054",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1500",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFtmMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "316883891",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6fc3c99c5b4e9017aaa1f90ae52a009b",
      "version": 7
    },
    "invoke.setPerpsFtmOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFtmOrderFees": {
            "hash": "0x1421c0b6ed56a2e8d1d057b2d89feec7b22ca85445a6a777d6d2fe7f63c806bb",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1500",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFtmOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000261",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5bf7456258506406a14232f808b37b90",
      "version": 7
    },
    "invoke.setPerpsMaticFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaticFundingParameters": {
            "hash": "0x7dc8e6a8ddaf2729a93ff2b5afa580816583c36d112fa0cd96f085b2c077c073",
            "blockNumber": "16432960",
            "timestamp": "1728634208",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1700",
                    "84000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaticFundingParameters",
            "gasUsed": 42248,
            "gasCost": "318543331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3affc9cb621d632e880b2a6f5ae522d5",
      "version": 7
    },
    "invoke.setPerpsMaticLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaticLiquidationParameters": {
            "hash": "0xedc7af8a9ce1829c6b0411dd6bebb577b59c87924ef548ed385b8323e7996c53",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1700",
                    "4410000000000000000",
                    "260000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaticLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5f85378b0d0f997aaa6cc44c4844f43f",
      "version": 7
    },
    "invoke.setPerpsMaticLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaticLockedOiRatio": {
            "hash": "0xfecf0d754fcbdf1d781712ad21447ef73f3325402a7f21902252757e9a232ac6",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1700",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaticLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f57f6b6b7a1c47c4089e3dd667ef5d2a",
      "version": 7
    },
    "invoke.setPerpsMaticMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaticMaxLiquidationParameters": {
            "hash": "0xef996cf7be59b77e995a7be50a5467801734478f95c215b3e126bae0d5326d2e",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1700",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaticMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000262",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8da294531a96f2c85b4168af6a2b9a8e",
      "version": 7
    },
    "invoke.setPerpsMaticMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaticMaxMarketSize": {
            "hash": "0xb71d62557cdc81a490302adc679b075eaa5ff9a5dbdbe30c444d1a0d9274eaef",
            "blockNumber": "14592248",
            "timestamp": "1724952784",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1700",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaticMaxMarketSize",
            "gasUsed": 34617,
            "gasCost": "1001050",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b2cea94fea4be4e082effae1ad1d196c",
      "version": 7
    },
    "invoke.setPerpsMaticMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaticMaxMarketValue": {
            "hash": "0x0a88930861715595b04304384a6a649e813444335d13f5ec578cb9d9a33026ed",
            "blockNumber": "14592250",
            "timestamp": "1724952788",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1700",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaticMaxMarketValue",
            "gasUsed": 34640,
            "gasCost": "1001049",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ef0d2ab0aa694b3c5831edd3504408f8",
      "version": 7
    },
    "invoke.setPerpsMaticOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaticOrderFees": {
            "hash": "0x333772e0372a98fd91d4c819831fedb109d35bc472f56343134f052caf289abe",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1700",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaticOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000262",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9376cdfc49c2668965946d7d367802c2",
      "version": 7
    },
    "invoke.setPerpsOpFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOpFundingParameters": {
            "hash": "0x5225214022dfcdcf865e797462a9b9aee4ddadf798cbec9fe8b12b85bc1777b1",
            "blockNumber": "16432975",
            "timestamp": "1728634238",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1000",
                    "24000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOpFundingParameters",
            "gasUsed": 45048,
            "gasCost": "317037426",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "97ad2fccbc5426dd5cfdddf1c06a0f23",
      "version": 7
    },
    "invoke.setPerpsOpLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOpLiquidationParameters": {
            "hash": "0xfb913fad1d67274e28dcfaf5dc0cd98f6a4e65ef803b8a7fe498d68ff0799158",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1000",
                    "2270000000000000000",
                    "380000000000000000",
                    "40000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOpLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fc82bad22ada7deb540effb13a9afad7",
      "version": 7
    },
    "invoke.setPerpsOpLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOpLockedOiRatio": {
            "hash": "0xc027431fee3a8566c435efd2ba589dbdbcf37aa4a968ab8311179afc38ff8a7b",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOpLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9a93666aec6504a44eca5ba5e2831993",
      "version": 7
    },
    "invoke.setPerpsOpMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOpMaxLiquidationParameters": {
            "hash": "0x7416cddf21cad9f99a0cd5b09ab68e07ff99916b76a4d6435d3562933713dc8b",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1000",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOpMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c60abe84195cee444d1458bdb8a184e4",
      "version": 7
    },
    "invoke.setPerpsOpMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOpMaxMarketSize": {
            "hash": "0xe583ee7ab94d0729a0f95dab0b496e37a9904fa7a89604fb01bd030100d1a3d3",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1000",
                    "750000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOpMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9f2f255623dc38e9e5d0301a7fa745a3",
      "version": 7
    },
    "invoke.setPerpsOpMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOpMaxMarketValue": {
            "hash": "0x59086eb16630ef3ed53d3934f14ea729ff53c3d2bdbc86d948b5c898d772aa7b",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1000",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOpMaxMarketValue",
            "gasUsed": 39546,
            "gasCost": "1000269",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e447032a58952276b258a20c53c687c6",
      "version": 7
    },
    "invoke.setPerpsOpOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOpOrderFees": {
            "hash": "0x4ab87d35f10d3b8de9deba52a591730529b09ddfc03c1ef0fa242dd9e6cd4ae7",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1000",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOpOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1e4a0e3694d89aad3cf39508955f64da",
      "version": 7
    },
    "invoke.setPerpsOrdiFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOrdiFundingParameters": {
            "hash": "0x0e73ebdc389df2dbe6dc6894970b1bb4b8a20328956af6e80e466e57bd0beed4",
            "blockNumber": "16432977",
            "timestamp": "1728634242",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1100",
                    "1305000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOrdiFundingParameters",
            "gasUsed": 45060,
            "gasCost": "316561667",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9a3caf2e74c33ddddab10f25df309ee8",
      "version": 7
    },
    "invoke.setPerpsOrdiLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOrdiLiquidationParameters": {
            "hash": "0xd51c045fc4575f3224f1fc1eab574512888d644aac7cfc178a81a962c11584d5",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1100",
                    "3020000000000000000",
                    "380000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOrdiLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000262",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e6f75ca8745d6b2acaf1836e2cf90821",
      "version": 7
    },
    "invoke.setPerpsOrdiLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOrdiLockedOiRatio": {
            "hash": "0x076c96cb464067af952d01bb4a3aa36824538f0407eb2cb1246484742653abcd",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1100",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOrdiLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4cbd2bb6e69021bcef9d960f03cc4e7d",
      "version": 7
    },
    "invoke.setPerpsOrdiMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOrdiMaxLiquidationParameters": {
            "hash": "0xaba2178db49e47380ea67c20dcc658d483f618b88c716e04f154f86bc711b347",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOrdiMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "304c88e38c44ed938cd99a5f4249dbe6",
      "version": 7
    },
    "invoke.setPerpsOrdiMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOrdiMaxMarketSize": {
            "hash": "0x6e89940a6f07576755a1689da56a733b505b46d37fddb8aec43861522d00b523",
            "blockNumber": "16432979",
            "timestamp": "1728634246",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1100",
                    "82100000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOrdiMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "317086047",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8bb87f03f197ad92bd94c20504e35955",
      "version": 7
    },
    "invoke.setPerpsOrdiMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOrdiMaxMarketValue": {
            "hash": "0xf238784e9fe459c21170a43c2b4606ff64ef7ce72b613ccbc8236cfddf8d4d3e",
            "blockNumber": "16432981",
            "timestamp": "1728634250",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1100",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOrdiMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "317143378",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6dce4503947d9d8508e63602e6844c64",
      "version": 7
    },
    "invoke.setPerpsOrdiOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOrdiOrderFees": {
            "hash": "0x0f3a426ee20c39f4fbceb130ade918d13b92f01749ffa1a67d41187111dd6aa3",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1100",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOrdiOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b0e702ee2801f02b0f79019685454df2",
      "version": 7
    },
    "invoke.setPerpsPepeFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPepeFundingParameters": {
            "hash": "0xef94237e979148d5f8244729724d297a38b54d63cc594a96f686c057f14333fe",
            "blockNumber": "16432985",
            "timestamp": "1728634258",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1200",
                    "12600000000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPepeFundingParameters",
            "gasUsed": 45072,
            "gasCost": "316067705",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6c41238302afb7dcf73dde80c0836725",
      "version": 7
    },
    "invoke.setPerpsPepeLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPepeLiquidationParameters": {
            "hash": "0x5855ef893d7d92c98d65772da7382ab1cf62f098dc1bd3cf68e37ea5b0d2278c",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1200",
                    "4880000000000000000",
                    "430000000000000000",
                    "40000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPepeLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "65e33d8a0bfc9ce1abce5152ce7f319e",
      "version": 7
    },
    "invoke.setPerpsPepeLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPepeLockedOiRatio": {
            "hash": "0xe222d5727513e7b4b03818a6380d33793a47bd0bef046c24288c12f0d5a89cef",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1200",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPepeLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "11fe9f8676c53b858d717d2ffb64f4da",
      "version": 7
    },
    "invoke.setPerpsPepeMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPepeMaxLiquidationParameters": {
            "hash": "0x71071d2ab8350e5690234ef2eab494e431eac009cc4a5f06c0be0b0b06e86eb0",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPepeMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ecf45b715e450dd01b9ef44cb89ae7db",
      "version": 7
    },
    "invoke.setPerpsPepeMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPepeMaxMarketSize": {
            "hash": "0xb7c107309d66ccfd12dd43c9328b1f19835ceb0e68536ac0ba04f0d0a50f5217",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1200",
                    "360000000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPepeMaxMarketSize",
            "gasUsed": 39537,
            "gasCost": "1009420",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6901f0070f159bf8ac51fb9ea4a06835",
      "version": 7
    },
    "invoke.setPerpsPepeMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPepeMaxMarketValue": {
            "hash": "0x2b03313fcaef05671cd9f1452f8757216af02d339ff1d005d0031158a81ae356",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1200",
                    "1500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPepeMaxMarketValue",
            "gasUsed": 39570,
            "gasCost": "1009387",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "72b523d229e77d0a58f6b5da601b724c",
      "version": 7
    },
    "invoke.setPerpsPepeOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPepeOrderFees": {
            "hash": "0x2c06b3571ed550aff7602d617a6562197af91bacfbfc737e905d0a68201b284c",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1200",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPepeOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000269",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c19686e3bd623cfd6d77bf105e34ca9d",
      "version": 7
    },
    "invoke.setPerpsPriceArb": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceArb": {
            "hash": "0x8ea218e0cf5870a1d7160349b58abf096b2ab35e3798210aaa199b8be44e6ee0",
            "blockNumber": "17174563",
            "timestamp": "1730117414",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1600",
                    "0xc90994c2d864082d32615a56afca688c80378cd85c06f1ef683e8411b764fe6c",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceArb",
            "gasUsed": 39771,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "30080c34b69e1f18528fa00f646c0bd6",
      "version": 7
    },
    "invoke.setPerpsPriceAvax": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceAvax": {
            "hash": "0xdf0807a4958ebfaf4e29a8e0fed49cacd4cc5b8086eed95f3cafbcd38ecf99d9",
            "blockNumber": "17174569",
            "timestamp": "1730117426",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "900",
                    "0x107ab5071706032da14e02599383e72eb1c100f07ea78b23788360ecb70c33d5",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceAvax",
            "gasUsed": 39759,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "601d38f1b54c936d763e3c2c5de5afde",
      "version": 7
    },
    "invoke.setPerpsPriceBnb": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceBnb": {
            "hash": "0x93fe837580403215a682d35dae4e7d9efb8e0682a843de04979d9ab9cf413e66",
            "blockNumber": "17174581",
            "timestamp": "1730117450",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1800",
                    "0xeb6312b4cc2a6bf42e314ea421aae7e5262163a1a0e538acc7fd7a5f354a1eb5",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceBnb",
            "gasUsed": 39771,
            "gasCost": "1000363",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c9670df2b56494cd0d0264681b6b3b88",
      "version": 7
    },
    "invoke.setPerpsPriceBonk": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceBonk": {
            "hash": "0xa4bab630caf2196c241e39c8d6bc761c4a47a0e361acc1924cf10e24dca01a24",
            "blockNumber": "17174585",
            "timestamp": "1730117458",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1400",
                    "0xcbe13ef302dd680c9eb52904c728b27b1871a5fae70a2494dbf1ae58dbc4bd4e",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceBonk",
            "gasUsed": 39771,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c8407db3bcb53d9f7f30dc6741db36dd",
      "version": 7
    },
    "invoke.setPerpsPriceDoge": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceDoge": {
            "hash": "0x44f6389b65e3a7d24167310ea1f5065ff7f0286f4e111c7131dcbf3ac758654d",
            "blockNumber": "17174593",
            "timestamp": "1730117474",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "800",
                    "0x12fc7e4cedf66ed7edfcd875dd466ba7656172388c87bea41fa95b4fa5878496",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceDoge",
            "gasUsed": 39771,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "454ed9bf8c7ddf4841eae730f50c4c89",
      "version": 7
    },
    "invoke.setPerpsPriceEna": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceEna": {
            "hash": "0x95e264a6ff44b17174fc87cbdd8161a268201394d712f2fb2f202c0e9d70d73b",
            "blockNumber": "17174605",
            "timestamp": "1730117498",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "700",
                    "0x1d20a20d719d36c99bb120db17354e2a38fa71bfbbc549e6672ce9f80d3dd9c9",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceEna",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c93408bfc8b1a93a745331892ecfb93b",
      "version": 7
    },
    "invoke.setPerpsPriceFtm": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceFtm": {
            "hash": "0x988f1b3385dedd6bc35cbdd668c473c2b30e19a0ceb501b93d7715d13a83507b",
            "blockNumber": "17174846",
            "timestamp": "1730117980",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1500",
                    "0x4a64d4789b1825b3ceff0cc8930cd930397a9dc54e6b477fa2d21264d6577091",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceFtm",
            "gasUsed": 39771,
            "gasCost": "1000319",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e4f8ee7532fb9740e18cf548550e12a5",
      "version": 7
    },
    "invoke.setPerpsPriceMatic": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceMatic": {
            "hash": "0xaab5825589105fdf237b2f2b7ec977a37e5ef5007160c652ddea0608de2f861c",
            "blockNumber": "17174648",
            "timestamp": "1730117584",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1700",
                    "0x8eeaf55aa741713e78fed72064d8352292e0e3df123c36f674cb27f19bace022",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceMatic",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dc589332dfdc92be4a7bf4f286925df3",
      "version": 7
    },
    "invoke.setPerpsPriceOp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceOp": {
            "hash": "0xeea51517c4f91a907aeb561c927be24a31825416c82b86b133984114c9d6a091",
            "blockNumber": "17174658",
            "timestamp": "1730117604",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1000",
                    "0xb13637c048974898dd541ee7cbe55a3d94231db497c59305387eb736fcb3c0b8",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceOp",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4c90583da389ccb6188f3cd1ed62cc26",
      "version": 7
    },
    "invoke.setPerpsPriceOrdi": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceOrdi": {
            "hash": "0xe50695c758013381c2b27a1fc98d10e96cb2b54b4b8e4077f3c43973d09b759e",
            "blockNumber": "17174660",
            "timestamp": "1730117608",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1100",
                    "0xb094d381fd30ac88a4a412562338a65ad5d5ac1ffefacc6be81e20d28d953cb7",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceOrdi",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3f575562f434cd9676acd1ac315c312d",
      "version": 7
    },
    "invoke.setPerpsPricePepe": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPricePepe": {
            "hash": "0x323eb6b2f11bb92d77ca4e6d8ec0e479045d1b920085abb8a6faaacaef94255a",
            "blockNumber": "17174666",
            "timestamp": "1730117620",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1200",
                    "0x9ed3b3618feb178b20a94e4c2a73ab318f593aa43b43b44f97203af56f7401ff",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPricePepe",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "302744d5e08290aa13b13e037c4d7a1d",
      "version": 7
    },
    "invoke.setPerpsPriceRune": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceRune": {
            "hash": "0x2f04bf77957d9562e9ee049ecc19766eb6a6409ce99162f40691190b5db0fa0d",
            "blockNumber": "17174678",
            "timestamp": "1730117644",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1300",
                    "0x3968bc4b5db008ba01092df8a433fd0f5cd31306f75ee39931c7c79898e80f11",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceRune",
            "gasUsed": 39771,
            "gasCost": "1000363",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f67d26e0cbb33d1f4b7bc4ef51dd6ffb",
      "version": 7
    },
    "invoke.setPerpsRuneFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRuneFundingParameters": {
            "hash": "0x1aea31444db0271ede7b9ff042ea398b633399acc6c683987791cadbbe92acf0",
            "blockNumber": "16432996",
            "timestamp": "1728634280",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1300",
                    "6000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRuneFundingParameters",
            "gasUsed": 45048,
            "gasCost": "318629222",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "488732c1560d43296de40be639a9f6e2",
      "version": 7
    },
    "invoke.setPerpsRuneLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRuneLiquidationParameters": {
            "hash": "0xacd16e5376ce1f07c2e960a1acb31102dcc303e4128be9ce9539840da6fb6176",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1300",
                    "5390000000000000000",
                    "360000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRuneLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1009338",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "565c47bdc8bd808fd6b75d16a4de6673",
      "version": 7
    },
    "invoke.setPerpsRuneLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRuneLockedOiRatio": {
            "hash": "0xd474366a9f6729ee278f4860dc4e058a54c78d382bba0856b4fe7eef04ebeb0b",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRuneLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "358b294eae0595410421401f76a02677",
      "version": 7
    },
    "invoke.setPerpsRuneMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRuneMaxLiquidationParameters": {
            "hash": "0x254880465831c34bca4ed30636c719e5e51f98c51c0cbac34dbba74654782f84",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRuneMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000267",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e74c0bf585e254619331465586ec7ed5",
      "version": 7
    },
    "invoke.setPerpsRuneMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRuneMaxMarketSize": {
            "hash": "0x56046f1e9a9694a3f3f0ed52252ffe7ce1e9c48a55ae02351ed044af7f487407",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1300",
                    "300000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRuneMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "55f38d885300290ac0863869d7e475da",
      "version": 7
    },
    "invoke.setPerpsRuneMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRuneMaxMarketValue": {
            "hash": "0x738c5883324a40c6386b2ade673ed66c31c6e87b9f3a9a2eec54ec27f1bf17f2",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1300",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRuneMaxMarketValue",
            "gasUsed": 36746,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fbdfa5f6389214976a68719584047303",
      "version": 7
    },
    "invoke.setPerpsRuneOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRuneOrderFees": {
            "hash": "0x4d971b55a7b6e4545e72a194c9768bd065040038111a20c38111846bb8141262",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1300",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRuneOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0f47114bd908c13f37801713b46a5cf0",
      "version": 7
    },
    "invoke.setPerpsArbSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArbSettlementStrategy": {
            "hash": "0xe157e4bed2ca0c2488a00bfc9b62c3374e0ee55d9736c14d7ecb57f37860270d",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1600",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x3fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf5",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArbSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cbe60151e339f2174ac11f665f09f8be",
      "version": 7
    },
    "invoke.setPerpsAvaxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAvaxSettlementStrategy": {
            "hash": "0x92ea3aa7b6f1feb0168b0eccdd2f70a0ee869d020eeeb0de1d7829a1ba253dd7",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "900",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x93da3352f9f1d105fdfe4971cfa80e9dd777bfc5d0f683ebb6e1294b92137bb7",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAvaxSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "59f9178ba99dc7817798fb578e931b1d",
      "version": 7
    },
    "invoke.setPerpsBnbSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBnbSettlementStrategy": {
            "hash": "0x039ff86f87ef1c8a0fcd753beacf839de9d567d3ee46b82b8d2f9850de9e70ce",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1800",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBnbSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "19e392afdc0ec5c0a8e50b8bf96f2c4f",
      "version": 7
    },
    "invoke.setPerpsBonkSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBonkSettlementStrategy": {
            "hash": "0xd9b62f0bdcfcb47536b8318a11d953dc30d15a39e95478576ec617cfbb0b7ad3",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x72b021217ca3fe68922a19aaf990109cb9d84e9ad004b4d2025ad6f529314419",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBonkSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "36417e9edefcefc145f6e67c723cadc9",
      "version": 7
    },
    "invoke.setPerpsDogeSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDogeSettlementStrategy": {
            "hash": "0x6da886103fd6fe1a14ca07ed764db36678428947965c4619bf9acb46fbe8378b",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "800",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xdcef50dd0a4cd2dcc17e45df1676dcb336a11a61c69df7a0299b0150c672d25c",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDogeSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "16611b477e96eb516772cb937d1ed004",
      "version": 7
    },
    "invoke.setPerpsEnaSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEnaSettlementStrategy": {
            "hash": "0x4666352d5513a4f2d4bd5d0e8a1741b5e070cc8c6b1b2db89ec1e8e58ae135d3",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "700",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb7910ba7322db020416fcac28b48c01212fd9cc8fbcbaf7d30477ed8605f6bd4",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEnaSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3c57ac0e1142bc9fd6c9f1f29a361a27",
      "version": 7
    },
    "invoke.setPerpsFtmSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFtmSettlementStrategy": {
            "hash": "0xc3e1472fc30251a8e5279064ce5f09baa308f4144f70b8d029084adc40377fb7",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1500",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x5c6c0d2386e3352356c3ab84434fafb5ea067ac2678a38a338c4a69ddc4bdb0c",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFtmSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "82ae0ada9ef231778769341624ff7e32",
      "version": 7
    },
    "invoke.setPerpsMaticSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMaticSettlementStrategy": {
            "hash": "0x9bd27c14224b29424e4c958f92c6192544f4d06ae06d0cead64bd804d91eb405",
            "blockNumber": "15135370",
            "timestamp": "1726039028",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1700",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd70472",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMaticSettlementStrategy",
            "gasUsed": 59808,
            "gasCost": "9654620",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "83c9983ba1a8637061313084e29af88c",
      "version": 7
    },
    "invoke.setPerpsOpSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOpSettlementStrategy": {
            "hash": "0xe93f0bfabafbc0a4b498636a73f7409f1ba513dad412a48b524a62724d5a60e2",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1000",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x385f64d993f7b77d8182ed5003d97c60aa3361f3cecfe711544d2d59165e9bdf",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOpSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "88cfdc27fba0340e8c13031e2931dd82",
      "version": 7
    },
    "invoke.setPerpsOrdiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsOrdiSettlementStrategy": {
            "hash": "0x04407e61e8cbfb192021a2374b14fdda425f10edfe6382606ec0d8d2a1395382",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x193c739db502aadcef37c2589738b1e37bdb257d58cf1ab3c7ebc8e6df4e3ec0",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsOrdiSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0b75bfa32b21a4a7a7bd558695278eb5",
      "version": 7
    },
    "invoke.setPerpsPepeSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPepeSettlementStrategy": {
            "hash": "0xeb7483d81ebf95b64d6734b33036cb5d139dc58830b9824bbc1a74ef00badce4",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xd69731a2e74ac1ce884fc3890f7ee324b6deb66147055249568869ed700882e4",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPepeSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "20296a7432bebbd4c336d086e666955c",
      "version": 7
    },
    "invoke.setPerpsRuneSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRuneSettlementStrategy": {
            "hash": "0x9845aebe19746e5a54578f07f1781e30b3db51271b11c4be8933c0158aab1880",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x5fcf71143bb70d41af4fa9aa1287e2efd3c5911cee59f909f915c9f61baacb1e",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRuneSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1db73d39350cbf91fcac1577341b89c3",
      "version": 7
    },
    "invoke.registerLookupArkmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupArkmOracleNode": {
            "hash": "0xcee3167862b6cd47479bb95b6478701ba54528f83abf6c6a05b12ad9beaf2e1a",
            "blockNumber": "17174198",
            "timestamp": "1730116684",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x56da23d2c2d47eb40e1652c4a32b465b0d963e29a935de910d9f6ff4c5ec3414",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d7677dd124dee46cfcd46ff03cf405fb0ed94b1f49efbea3444aadbda939a7ad3000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupArkmOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000357",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "arkm_lookup_oracle_id": "0x56da23d2c2d47eb40e1652c4a32b465b0d963e29a935de910d9f6ff4c5ec3414"
        }
      },
      "hash": "7b3e32997d9604fbdb2a4c5467b55597",
      "version": 7
    },
    "invoke.registerLookupAxlOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupAxlOracleNode": {
            "hash": "0xcb282caba2ddfedd4234d62b65932cc4b6988a2b4743b99f298758fc7e48dd3f",
            "blockNumber": "17174204",
            "timestamp": "1730116696",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa6f1ffccbf31224e32744ebae7dd2f84206d5d3370ddf8ec0c2f649976391442",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d60144b1d5c9e9851732ad1d9760e3485ef80be39b984f6bf60f82b28a2b7f126000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupAxlOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "axl_lookup_oracle_id": "0xa6f1ffccbf31224e32744ebae7dd2f84206d5d3370ddf8ec0c2f649976391442"
        }
      },
      "hash": "2f53789563f47ecee7c8ffb655f36994",
      "version": 7
    },
    "invoke.registerLookupBomeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupBomeOracleNode": {
            "hash": "0x67a825d99d9305e744910ab2971c9ee60a018deb4d8bfe351a3c72d60bae60f2",
            "blockNumber": "17174217",
            "timestamp": "1730116722",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x5212eaefecfea82cb76e7d7bdda8126dc733d12f26738873eac4f3475b9d5ad9",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d30e4780570973e438fdb3f1b7ad22618b2fc7333b65c7853a7ca144c39052f7a000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupBomeOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bome_lookup_oracle_id": "0x5212eaefecfea82cb76e7d7bdda8126dc733d12f26738873eac4f3475b9d5ad9"
        }
      },
      "hash": "ff8e29ca37bdf4019f93a9170bb58114",
      "version": 7
    },
    "invoke.registerLookupEthfiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupEthfiOracleNode": {
            "hash": "0xec433304864e0f5e05054cdcf90ef3e621dda4d4c05f8ad1d273b2aaa3e2ca76",
            "blockNumber": "17174249",
            "timestamp": "1730116786",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2f25dd1e587b78dee6c090eaf0f126836a51d3e4d777e9620adb344ddd5206ce",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db27578a9654246cb0a2950842b92330e9ace141c52b63829cc72d5c45a5a595a000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupEthfiOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ethfi_lookup_oracle_id": "0x2f25dd1e587b78dee6c090eaf0f126836a51d3e4d777e9620adb344ddd5206ce"
        }
      },
      "hash": "0179365599ed27a5e287a0a8c9533fbc",
      "version": 7
    },
    "invoke.registerLookupGalaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupGalaOracleNode": {
            "hash": "0xe72138a62edcb81c920d2d64f6eee1740e6de084fb60846aa03c4e5aabb2c19a",
            "blockNumber": "17174259",
            "timestamp": "1730116806",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x312f2450dc3bbc2ec3e714633339756107e0d4b79d5e5f512368e4fa2e4314d1",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d0781209c28fda797616212b7f94d77af3a01f3e94a5d421760aef020cf2bcb51000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupGalaOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "gala_lookup_oracle_id": "0x312f2450dc3bbc2ec3e714633339756107e0d4b79d5e5f512368e4fa2e4314d1"
        }
      },
      "hash": "7bd3f972b93a60190f6241caabc1a2ab",
      "version": 7
    },
    "invoke.registerLookupGmxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupGmxOracleNode": {
            "hash": "0x4718abdb481fc44c7f9d48bf393ceb7a4ad44348ca1252dc65a7d67ee7aed0d1",
            "blockNumber": "17174261",
            "timestamp": "1730116810",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd64ae5f63afd08e0870a9e4a629b49e9b2b8b286183fdde0c55fa0899d258277",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db962539d0fcb272a494d65ea56f94851c2bcf8823935da05bd628916e2e9edbf000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupGmxOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "gmx_lookup_oracle_id": "0xd64ae5f63afd08e0870a9e4a629b49e9b2b8b286183fdde0c55fa0899d258277"
        }
      },
      "hash": "e06100c18bf4f1e354fa742b19b2197d",
      "version": 7
    },
    "invoke.registerLookupInjOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupInjOracleNode": {
            "hash": "0x98f405bc1a13bc23db136a415669a2d84cd41b8fcef29917b864c13a151eeaca",
            "blockNumber": "17174269",
            "timestamp": "1730116826",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa0108988889c740c42f61e69224a536b845d4dc478d0b33faa3fc1ec564092d9",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d7a5bc1d2b56ad029048cd63964b3ad2776eadf812edc1a43a31406cb54bff592000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupInjOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "inj_lookup_oracle_id": "0xa0108988889c740c42f61e69224a536b845d4dc478d0b33faa3fc1ec564092d9"
        }
      },
      "hash": "1fa6bc995d049b2e801d6527bdacdbf0",
      "version": 7
    },
    "invoke.registerLookupLinkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupLinkOracleNode": {
            "hash": "0x7a70799b5423031a8b73f52ee6310ae56d7c345f2396419870f44a5742f31a14",
            "blockNumber": "17174279",
            "timestamp": "1730116846",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x577b76261e13d3ae12037bfff07950f22b49f28be957c32ebd0f5492dc3d71e0",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d8ac0c70fff57e9aefdf5edf44b51d62c2d433653cbb2cf5cc06bb115af04d221000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupLinkOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "link_lookup_oracle_id": "0x577b76261e13d3ae12037bfff07950f22b49f28be957c32ebd0f5492dc3d71e0"
        }
      },
      "hash": "07add24b2d7ae37a2d111188b4d40a27",
      "version": 7
    },
    "invoke.registerLookupPendleOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupPendleOracleNode": {
            "hash": "0x56d33cb5f2bddab2ad632068cdffac89fdb506e44d747aedf14d328507f386e1",
            "blockNumber": "17174292",
            "timestamp": "1730116872",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x49e3ba65afab3022c9b35e35fd73c1f755a7da882ff7abab26124a985e0e869a",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d9a4df90b25497f66b1afb012467e316e801ca3d839456db028892fe8c70c8016000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupPendleOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pendle_lookup_oracle_id": "0x49e3ba65afab3022c9b35e35fd73c1f755a7da882ff7abab26124a985e0e869a"
        }
      },
      "hash": "99ee71e838297a42ee509eaa2800e9ac",
      "version": 7
    },
    "invoke.registerLookupStxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupStxOracleNode": {
            "hash": "0x9516d9c6982717bd7484751a7b6c07ea627058e637374865f07eead11a00f225",
            "blockNumber": "17174312",
            "timestamp": "1730116912",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xdc5ba6473090687984be275eef7e4c259b947563f70f22761c300dc4e1c0ac4d",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dec7a775f46379b5e943c3526b1c8d54cd49749176b0b98e02dde68d1bd335c17000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupStxOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "stx_lookup_oracle_id": "0xdc5ba6473090687984be275eef7e4c259b947563f70f22761c300dc4e1c0ac4d"
        }
      },
      "hash": "f869163df0877bff342154b2d6b89554",
      "version": 7
    },
    "invoke.registerLookupSuiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupSuiOracleNode": {
            "hash": "0xac2e12d5a16335691c20507586c30d4abe1cb8020269bce3dee4d1e8cf96df05",
            "blockNumber": "17174315",
            "timestamp": "1730116918",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb88d6aec18067ef560b0b0a92eef6c23313f3e37b540cb69bccda2f7562f4bf6",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupSuiOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000389",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sui_lookup_oracle_id": "0xb88d6aec18067ef560b0b0a92eef6c23313f3e37b540cb69bccda2f7562f4bf6"
        }
      },
      "hash": "b8ddbbabdc6cfeee75fa43f8fbc0f24e",
      "version": 7
    },
    "invoke.registerLookupTaoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupTaoOracleNode": {
            "hash": "0x07bf89af5a7f5702c9253549ac3de574840408bf863a267905605a4fcc2ef3c5",
            "blockNumber": "17174320",
            "timestamp": "1730116928",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1f2b37fb849438b918b4cc6968ea4b0c64d7e1841feeb5d3c5287aa0d8cb6cca",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d410f41de235f2db824e562ea7ab2d3d3d4ff048316c61d629c0b93f58584e1af000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupTaoOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000388",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "tao_lookup_oracle_id": "0x1f2b37fb849438b918b4cc6968ea4b0c64d7e1841feeb5d3c5287aa0d8cb6cca"
        }
      },
      "hash": "634abe9676c3adb818f7b334a3392c4b",
      "version": 7
    },
    "invoke.registerLookupTiaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupTiaOracleNode": {
            "hash": "0x5d4086d9b2bcf032aeb2b2143bb046fb032a17818aac0f2d3a284c4c6eb798e6",
            "blockNumber": "17174322",
            "timestamp": "1730116932",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x55038ce1a6bceac3791966a41fbf0956449f53e0b11a2939e29037b803c2c75f",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d09f7c1d7dfbb7df2b8fe3d3d87ee94a2259d212da4f30c1f0540d066dfa44723000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupTiaOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000387",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "tia_lookup_oracle_id": "0x55038ce1a6bceac3791966a41fbf0956449f53e0b11a2939e29037b803c2c75f"
        }
      },
      "hash": "ace62bda84f8f147e3465282d4026be9",
      "version": 7
    },
    "invoke.registerLookupTonOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupTonOracleNode": {
            "hash": "0x41662f80df933afa084564e0dba6b28712994b7872d1fd8bc73cd14da49eb340",
            "blockNumber": "17174324",
            "timestamp": "1730116936",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xdc015fbbb14948534b15e113ed0288cd8ee2df8bafeebc3c54c5d5f12d3dedc5",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d8963217838ab4cf5cadc172203c1f0b763fbaa45f346d8ee50ba994bbcac3026000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupTonOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000387",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ton_lookup_oracle_id": "0xdc015fbbb14948534b15e113ed0288cd8ee2df8bafeebc3c54c5d5f12d3dedc5"
        }
      },
      "hash": "abfd58ac7b24c2eb0fa9711487e74b01",
      "version": 7
    },
    "invoke.registerPythArkmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythArkmOracleNode": {
            "hash": "0xfa79b9622ea14f4dd481150af5d7e369b1f128e28e2665f03f454d1f439e7961",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xfb291279e6d2e488541dc18ff7249feb910975b458fcc5ce4bd4e17c3528f0d6",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57297677dd124dee46cfcd46ff03cf405fb0ed94b1f49efbea3444aadbda939a7ad30000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythArkmOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000300",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "arkm_pyth_oracle_id": "0xfb291279e6d2e488541dc18ff7249feb910975b458fcc5ce4bd4e17c3528f0d6"
        }
      },
      "hash": "19a87883a5f584d33ff12cfa42de878d",
      "version": 7
    },
    "invoke.registerPythAxlOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythAxlOracleNode": {
            "hash": "0x603f707a1852c01103729e7e4c1a23a4ace59c8d1fd1ecf566d530be6fa811c7",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1a4a20a0d9755cd97fa01f5dca56daf1fa62cd2acc900122f4c71aebd742f8b9",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572960144b1d5c9e9851732ad1d9760e3485ef80be39b984f6bf60f82b28a2b7f1260000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythAxlOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000300",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "axl_pyth_oracle_id": "0x1a4a20a0d9755cd97fa01f5dca56daf1fa62cd2acc900122f4c71aebd742f8b9"
        }
      },
      "hash": "679245d90c9695bd43433a869cc76f70",
      "version": 7
    },
    "invoke.registerPythBomeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythBomeOracleNode": {
            "hash": "0xa4fc575133bf0df1767c4c7bbf466633eb595088122b4ba9b9763f6efbe796ef",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x188f755ac2b82eec9b653fb36f3808c36b67b6bf0d616688a1e9aa1bfb3ecff6",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572930e4780570973e438fdb3f1b7ad22618b2fc7333b65c7853a7ca144c39052f7a0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythBomeOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000299",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bome_pyth_oracle_id": "0x188f755ac2b82eec9b653fb36f3808c36b67b6bf0d616688a1e9aa1bfb3ecff6"
        }
      },
      "hash": "36c2f116f8cf4d336d59253b89d77e93",
      "version": 7
    },
    "invoke.registerPythEthfiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythEthfiOracleNode": {
            "hash": "0xcca8419c946a7fc82b8c3e0b40ac1c92648eb175212c0359907658e057965830",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x714af30d095f25364bf8a7a50f9ba6a06687379d694dd48537efb4bfe28040ce",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b27578a9654246cb0a2950842b92330e9ace141c52b63829cc72d5c45a5a595a0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythEthfiOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000297",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ethfi_pyth_oracle_id": "0x714af30d095f25364bf8a7a50f9ba6a06687379d694dd48537efb4bfe28040ce"
        }
      },
      "hash": "69344be233620d883172b36e75a6432b",
      "version": 7
    },
    "invoke.registerPythGalaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythGalaOracleNode": {
            "hash": "0x0d489a42f751884c656fc160d2440a8e839cda12be13f568b40b44b219ed4347",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xcdbae55b5a09df5ff3c775c246be7d2b30baae1623d7189dcd78fd51d44efb22",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57290781209c28fda797616212b7f94d77af3a01f3e94a5d421760aef020cf2bcb510000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythGalaOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000297",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "gala_pyth_oracle_id": "0xcdbae55b5a09df5ff3c775c246be7d2b30baae1623d7189dcd78fd51d44efb22"
        }
      },
      "hash": "0f788b208a31d8d0ddb49448ddcf576a",
      "version": 7
    },
    "invoke.registerPythGmxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythGmxOracleNode": {
            "hash": "0x2afe4f6338a0fd7c176d62aba1f2259f210b82c9320a37785f1e57954f386748",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x96e7d432270077e96fc661804bd965c06a69afaec14581c96e7b128cde552c25",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b962539d0fcb272a494d65ea56f94851c2bcf8823935da05bd628916e2e9edbf0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythGmxOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "gmx_pyth_oracle_id": "0x96e7d432270077e96fc661804bd965c06a69afaec14581c96e7b128cde552c25"
        }
      },
      "hash": "bf85b890bead4bbd98bc8d6d78ed8b91",
      "version": 7
    },
    "invoke.registerPythInjOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythInjOracleNode": {
            "hash": "0xdf0a8fcdf2463bc3c66c9a76d70e120e30af3cb390347ea1e0334c99313c6d07",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x6ecc485f479cce251117e6f799e76be6ce99bf85d2d6981e0ef3b2f62a3a4521",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57297a5bc1d2b56ad029048cd63964b3ad2776eadf812edc1a43a31406cb54bff5920000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythInjOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "inj_pyth_oracle_id": "0x6ecc485f479cce251117e6f799e76be6ce99bf85d2d6981e0ef3b2f62a3a4521"
        }
      },
      "hash": "eabc8de6c930d0170a38990dafa3389c",
      "version": 7
    },
    "invoke.registerPythLinkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythLinkOracleNode": {
            "hash": "0xaf8e576fd7a6299487c463939809452c39069c3d1eeb8258495a81f699632020",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd1ae0fa49c7558fd2897b6d5854937a4208e4b9d0b08338f3332976f0f9960af",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57298ac0c70fff57e9aefdf5edf44b51d62c2d433653cbb2cf5cc06bb115af04d2210000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythLinkOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000298",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "link_pyth_oracle_id": "0xd1ae0fa49c7558fd2897b6d5854937a4208e4b9d0b08338f3332976f0f9960af"
        }
      },
      "hash": "39becf923e846de6f5851c5ae02213d3",
      "version": 7
    },
    "invoke.registerPythPendleOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythPendleOracleNode": {
            "hash": "0x42f7b781fecf31fde25d98dbf00a366bec5a245ef44b0f4b7e0936fad911ab37",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x396964d08cecb7b81ed36fd4161a746fb6e2e6ba071458146b521870746f9379",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57299a4df90b25497f66b1afb012467e316e801ca3d839456db028892fe8c70c80160000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythPendleOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000298",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pendle_pyth_oracle_id": "0x396964d08cecb7b81ed36fd4161a746fb6e2e6ba071458146b521870746f9379"
        }
      },
      "hash": "2ff3f8386157645d0464005d58ff90fd",
      "version": 7
    },
    "invoke.registerPythStxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythStxOracleNode": {
            "hash": "0x4f1e67e0729b198b598eeba8a3e995027b3d9b72265e89d8ec887f16e1eabac3",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xab5ee6d268c493c309e0f9d455d69bbd6175d8d21ead4483c85d6279f4b3b9b9",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729ec7a775f46379b5e943c3526b1c8d54cd49749176b0b98e02dde68d1bd335c170000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythStxOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000299",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "stx_pyth_oracle_id": "0xab5ee6d268c493c309e0f9d455d69bbd6175d8d21ead4483c85d6279f4b3b9b9"
        }
      },
      "hash": "489457c23deb242245f2c308f1be41a8",
      "version": 7
    },
    "invoke.registerPythSuiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythSuiOracleNode": {
            "hash": "0xae5b379c885f19a4f88ee20590eae236fdcee890ded38e020cc9c32e6f73dba1",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x0e4d41421db2be5c25fec3fbba183e3cb59b1ae620dfd8c29201cc11b495b886",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572923d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc657440000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythSuiOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000299",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sui_pyth_oracle_id": "0x0e4d41421db2be5c25fec3fbba183e3cb59b1ae620dfd8c29201cc11b495b886"
        }
      },
      "hash": "0d017e064783fdc88bdb6604c2e3d04f",
      "version": 7
    },
    "invoke.registerPythTaoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythTaoOracleNode": {
            "hash": "0xcfee57dfdd8134a6eb98f5a2ed6608f9d25b9b3ce50cb41b43b853892964c9c6",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8a61ab68e7de32c41155510424a44d5323a7f51baa97fe7fa6282721354897e2",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729410f41de235f2db824e562ea7ab2d3d3d4ff048316c61d629c0b93f58584e1af0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythTaoOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000299",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "tao_pyth_oracle_id": "0x8a61ab68e7de32c41155510424a44d5323a7f51baa97fe7fa6282721354897e2"
        }
      },
      "hash": "d3a39135e1120a48747eec682da85704",
      "version": 7
    },
    "invoke.registerPythTiaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythTiaOracleNode": {
            "hash": "0xc249f39e1209aea647e4849eaba93395f4323e1b79d62bbda5fbc9711aa39760",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xff90b8553629a3a28a11e0b25e04c0c63dc78364629fb1a5f714377a46b2e48c",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572909f7c1d7dfbb7df2b8fe3d3d87ee94a2259d212da4f30c1f0540d066dfa447230000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythTiaOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000299",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "tia_pyth_oracle_id": "0xff90b8553629a3a28a11e0b25e04c0c63dc78364629fb1a5f714377a46b2e48c"
        }
      },
      "hash": "2c714753e78d81339f28521188e477b6",
      "version": 7
    },
    "invoke.registerPythTonOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythTonOracleNode": {
            "hash": "0x78b92306ba63663236f9baea0ff688e74660feda3f1d4aa722558550aacee324",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x83fbb853f17a316de47c88f3b12d5911db671b55f2f74fce0ebdc54d9aa145ef",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57298963217838ab4cf5cadc172203c1f0b763fbaa45f346d8ee50ba994bbcac30260000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythTonOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000299",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ton_pyth_oracle_id": "0x83fbb853f17a316de47c88f3b12d5911db671b55f2f74fce0ebdc54d9aa145ef"
        }
      },
      "hash": "9b7ee398ad4b8237445acc4b0f4d638e",
      "version": 7
    },
    "invoke.registerArkmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerArkmOracleNode": {
            "hash": "0xcb1f345cbe76144e7735165856eb69c2efe2ff04b0be91d59a744162445a46e2",
            "blockNumber": "17174379",
            "timestamp": "1730117046",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2813e7fc3a60b016d31df62e999bb06399c75e68992851761816750580c7c735",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xfb291279e6d2e488541dc18ff7249feb910975b458fcc5ce4bd4e17c3528f0d6",
                      "0x56da23d2c2d47eb40e1652c4a32b465b0d963e29a935de910d9f6ff4c5ec3414"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerArkmOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000381",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "arkm_oracle_id": "0x2813e7fc3a60b016d31df62e999bb06399c75e68992851761816750580c7c735"
        }
      },
      "hash": "09e8b268f04b2b0ea128d83a67850813",
      "version": 7
    },
    "invoke.registerAxlOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerAxlOracleNode": {
            "hash": "0x44b9ecca9d3b22c055bb0414857fcca1b0499c160f7d9d82f5a3369416618bc9",
            "blockNumber": "17174385",
            "timestamp": "1730117058",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x7da776ef891114089b81f55ff022ffeac6adbefb828b8a68eea274f315868a35",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x1a4a20a0d9755cd97fa01f5dca56daf1fa62cd2acc900122f4c71aebd742f8b9",
                      "0xa6f1ffccbf31224e32744ebae7dd2f84206d5d3370ddf8ec0c2f649976391442"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerAxlOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "axl_oracle_id": "0x7da776ef891114089b81f55ff022ffeac6adbefb828b8a68eea274f315868a35"
        }
      },
      "hash": "f2c38dcd3416f6a4459067b31a672150",
      "version": 7
    },
    "invoke.registerBomeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerBomeOracleNode": {
            "hash": "0x5942d2f166396170cbff58e9ba9eebbf4c5722284d87323bfcdb812ed0e0b6a2",
            "blockNumber": "17174397",
            "timestamp": "1730117082",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x67b87b5b9e7554a0faf81d7c847de3cd9bfd5692d3ac5b94388445a2c43d33fd",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x188f755ac2b82eec9b653fb36f3808c36b67b6bf0d616688a1e9aa1bfb3ecff6",
                      "0x5212eaefecfea82cb76e7d7bdda8126dc733d12f26738873eac4f3475b9d5ad9"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerBomeOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bome_oracle_id": "0x67b87b5b9e7554a0faf81d7c847de3cd9bfd5692d3ac5b94388445a2c43d33fd"
        }
      },
      "hash": "eda12928f5395f49e89aaf314a55cc4b",
      "version": 7
    },
    "invoke.registerEthfiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEthfiOracleNode": {
            "hash": "0x531646b03e6b9c14dfb925c7995c6dcf0afa8a08af9dbb56db644f03604249e4",
            "blockNumber": "17174428",
            "timestamp": "1730117144",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x56eed4fcb940bb6e0b410a69c74985b6da2e16c14b591e5e0b1094c0666a2517",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x714af30d095f25364bf8a7a50f9ba6a06687379d694dd48537efb4bfe28040ce",
                      "0x2f25dd1e587b78dee6c090eaf0f126836a51d3e4d777e9620adb344ddd5206ce"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEthfiOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000375",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ethfi_oracle_id": "0x56eed4fcb940bb6e0b410a69c74985b6da2e16c14b591e5e0b1094c0666a2517"
        }
      },
      "hash": "5fc88f2d54e56e0e7816da607255333a",
      "version": 7
    },
    "invoke.registerGalaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerGalaOracleNode": {
            "hash": "0x7cd3e1aa9dcc61114a661cecde1112347483c7cf3025433f41b957cca03d503e",
            "blockNumber": "17174441",
            "timestamp": "1730117170",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2ac918fe3b6e9d877423b21d1f9537a509c09dfdb4d69a9f0542c1354d97f859",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xcdbae55b5a09df5ff3c775c246be7d2b30baae1623d7189dcd78fd51d44efb22",
                      "0x312f2450dc3bbc2ec3e714633339756107e0d4b79d5e5f512368e4fa2e4314d1"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerGalaOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000372",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "gala_oracle_id": "0x2ac918fe3b6e9d877423b21d1f9537a509c09dfdb4d69a9f0542c1354d97f859"
        }
      },
      "hash": "a25e7ce865020ad54ae3c7386fe27054",
      "version": 7
    },
    "invoke.registerGmxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerGmxOracleNode": {
            "hash": "0xa5f676d92647586602a080d8e2aa41b332565303c6f775eba2c1c14ca275d4bd",
            "blockNumber": "17174443",
            "timestamp": "1730117174",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xf00372f2235ec0385a3374446d88c8140c0519444ce9f04eac260ee4117d069e",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x96e7d432270077e96fc661804bd965c06a69afaec14581c96e7b128cde552c25",
                      "0xd64ae5f63afd08e0870a9e4a629b49e9b2b8b286183fdde0c55fa0899d258277"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerGmxOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "gmx_oracle_id": "0xf00372f2235ec0385a3374446d88c8140c0519444ce9f04eac260ee4117d069e"
        }
      },
      "hash": "2ff6951bb5b32c64689b592654534bcb",
      "version": 7
    },
    "invoke.registerInjOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerInjOracleNode": {
            "hash": "0x02be0a37444725da1f7b648200701b89a5e46d9f435f7099babea47106ac82a3",
            "blockNumber": "17174451",
            "timestamp": "1730117190",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd46aa1d29e6d5a5e95052033c91e6dcf40b3388297825f1461e92c7d59940405",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x6ecc485f479cce251117e6f799e76be6ce99bf85d2d6981e0ef3b2f62a3a4521",
                      "0xa0108988889c740c42f61e69224a536b845d4dc478d0b33faa3fc1ec564092d9"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerInjOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "inj_oracle_id": "0xd46aa1d29e6d5a5e95052033c91e6dcf40b3388297825f1461e92c7d59940405"
        }
      },
      "hash": "71fecc36a5857b12bba1d483cd0f3e85",
      "version": 7
    },
    "invoke.registerLinkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLinkOracleNode": {
            "hash": "0x9093eb3e6395894907f5f144325f7685ce0610abed4f6be4bb48e3c0c7c66cdf",
            "blockNumber": "17174459",
            "timestamp": "1730117206",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4f8138351dfb8b05c9a713af357a77efbc4afa4c0fa4ead3912d6a35c0eeea64",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xd1ae0fa49c7558fd2897b6d5854937a4208e4b9d0b08338f3332976f0f9960af",
                      "0x577b76261e13d3ae12037bfff07950f22b49f28be957c32ebd0f5492dc3d71e0"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLinkOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "link_oracle_id": "0x4f8138351dfb8b05c9a713af357a77efbc4afa4c0fa4ead3912d6a35c0eeea64"
        }
      },
      "hash": "d7dbddac3c91649ca415dab3f925d539",
      "version": 7
    },
    "invoke.registerPendleOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPendleOracleNode": {
            "hash": "0xb941ee8b7f1d21f81b9c583f644bffd4d87abf5cb9ad7dbe700ad023284650c5",
            "blockNumber": "17174471",
            "timestamp": "1730117230",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xfb9f1c8f457622ccd88be254e7859ede58bacbbb8e08d704291f7151f99d458a",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x396964d08cecb7b81ed36fd4161a746fb6e2e6ba071458146b521870746f9379",
                      "0x49e3ba65afab3022c9b35e35fd73c1f755a7da882ff7abab26124a985e0e869a"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPendleOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pendle_oracle_id": "0xfb9f1c8f457622ccd88be254e7859ede58bacbbb8e08d704291f7151f99d458a"
        }
      },
      "hash": "47f4e761ceb6e33e00faf36ae4dc72b2",
      "version": 7
    },
    "invoke.registerStxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerStxOracleNode": {
            "hash": "0x583e95987bdd9bb81a80c9f321d208b0c7f8055d1130791836cc508a2ecfd04a",
            "blockNumber": "17174491",
            "timestamp": "1730117270",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x5baa4163b96ae40110040874135c6593e5c7a12c7eb92ecf3c9c0a1d71996e29",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xab5ee6d268c493c309e0f9d455d69bbd6175d8d21ead4483c85d6279f4b3b9b9",
                      "0xdc5ba6473090687984be275eef7e4c259b947563f70f22761c300dc4e1c0ac4d"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerStxOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000369",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "stx_oracle_id": "0x5baa4163b96ae40110040874135c6593e5c7a12c7eb92ecf3c9c0a1d71996e29"
        }
      },
      "hash": "ccb954ae194f55428e34b088d07525d1",
      "version": 7
    },
    "invoke.registerSuiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSuiOracleNode": {
            "hash": "0x395d350dd9b3c8a6d18202e28172923b54cf1a5add58be66f2ab72aa725a6f26",
            "blockNumber": "17174493",
            "timestamp": "1730117274",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x863cd378f259a72dfc71d02d6509aaf627de8b7b58bf2eda9493d32ff0797297",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x0e4d41421db2be5c25fec3fbba183e3cb59b1ae620dfd8c29201cc11b495b886",
                      "0xb88d6aec18067ef560b0b0a92eef6c23313f3e37b540cb69bccda2f7562f4bf6"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSuiOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000369",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sui_oracle_id": "0x863cd378f259a72dfc71d02d6509aaf627de8b7b58bf2eda9493d32ff0797297"
        }
      },
      "hash": "4fc1250ed83dcea3814c55da72c2dc5d",
      "version": 7
    },
    "invoke.registerTaoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerTaoOracleNode": {
            "hash": "0xe02e2a25167577f79d9c946527ef07aa20111cb6c65c2f7913fb3fe887e5aa98",
            "blockNumber": "17174498",
            "timestamp": "1730117284",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xcf5af2e320dabe4eff6a9bc0db44167c2f8faefcdfc1e51e8e2470f71a968536",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x8a61ab68e7de32c41155510424a44d5323a7f51baa97fe7fa6282721354897e2",
                      "0x1f2b37fb849438b918b4cc6968ea4b0c64d7e1841feeb5d3c5287aa0d8cb6cca"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerTaoOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "tao_oracle_id": "0xcf5af2e320dabe4eff6a9bc0db44167c2f8faefcdfc1e51e8e2470f71a968536"
        }
      },
      "hash": "d5f026c531ab8fd155dfb091bc948edc",
      "version": 7
    },
    "invoke.registerTiaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerTiaOracleNode": {
            "hash": "0x8cf98977f6b586df138c83addbea18da9d9126a202f395395a0246d341206379",
            "blockNumber": "17174500",
            "timestamp": "1730117288",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xe4f6808181f695c130580cb343eadb986a588b93a4923911a39ca3954c76fc75",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xff90b8553629a3a28a11e0b25e04c0c63dc78364629fb1a5f714377a46b2e48c",
                      "0x55038ce1a6bceac3791966a41fbf0956449f53e0b11a2939e29037b803c2c75f"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerTiaOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "tia_oracle_id": "0xe4f6808181f695c130580cb343eadb986a588b93a4923911a39ca3954c76fc75"
        }
      },
      "hash": "8f1cd9b4df4fec9459b494eb85b24c39",
      "version": 7
    },
    "invoke.registerTonOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerTonOracleNode": {
            "hash": "0x6ae50731977d8cf09a9e5ab44346d5d057d1f009e083de528e7ebf459a95516a",
            "blockNumber": "17174502",
            "timestamp": "1730117292",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x74a32bda202c423d392f6c5733bab1adad6faac284c81d434c731055572dc87f",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x83fbb853f17a316de47c88f3b12d5911db671b55f2f74fce0ebdc54d9aa145ef",
                      "0xdc015fbbb14948534b15e113ed0288cd8ee2df8bafeebc3c54c5d5f12d3dedc5"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerTonOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ton_oracle_id": "0x74a32bda202c423d392f6c5733bab1adad6faac284c81d434c731055572dc87f"
        }
      },
      "hash": "7222ec738ed2706ac90b5ab3a1fd5068",
      "version": 7
    },
    "invoke.createArkmPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createArkmPerpsMarket": {
            "hash": "0x27704dbbf96ad17851bb7bec0d7844fe1f1380ca269b5c912d361f90bb205417",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2600",
                    "Arkham",
                    "ARKM"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createArkmPerpsMarket",
            "gasUsed": 165882,
            "gasCost": "1000301",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b6b2a356d6c74ff3b0c8779db0a99d82",
      "version": 7
    },
    "invoke.createAxlPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createAxlPerpsMarket": {
            "hash": "0x5c62464090d00688d0d7769f72e4bcb8a0c1c7f19f40ec9d70a31b0e105dca61",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3200",
                    "Axelar",
                    "AXL"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createAxlPerpsMarket",
            "gasUsed": 165870,
            "gasCost": "1000303",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "06bbb24edc9cac53a35fa1911f6183f0",
      "version": 7
    },
    "invoke.createBomePerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createBomePerpsMarket": {
            "hash": "0x71e7bbbb27f8ca28631d6f8f27279ed125398bc8ffe4eb515f13355beada118b",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2900",
                    "BOOK OF MEME",
                    "BOME"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createBomePerpsMarket",
            "gasUsed": 165954,
            "gasCost": "1000302",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "13bb49aef792384a0ed88bc7d2a612a9",
      "version": 7
    },
    "invoke.createEthfiPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createEthfiPerpsMarket": {
            "hash": "0x9bcfa8cd40731447475de6603fe9dcdfed9d79bbb3a1265d9753e6bccdc14112",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3000",
                    "Ether.fi",
                    "ETHFI"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createEthfiPerpsMarket",
            "gasUsed": 165918,
            "gasCost": "1000303",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "afe0c9ebcd728567acf4b7d431592814",
      "version": 7
    },
    "invoke.createGalaPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createGalaPerpsMarket": {
            "hash": "0x2de6dd1dcde7980eb9232ebdab2f521c54b7ae1df842033cb17d04b5cf14bf64",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2700",
                    "GALA",
                    "GALA"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createGalaPerpsMarket",
            "gasUsed": 165858,
            "gasCost": "1000303",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "10d0d255fff9e3741e6646b2c68c2666",
      "version": 7
    },
    "invoke.createGmxPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createGmxPerpsMarket": {
            "hash": "0x8fcd2d04e910ec8fe72eed7f164eebf2af17e846e53469d6a1aa3a398e49cf52",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2200",
                    "GMX",
                    "GMX"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createGmxPerpsMarket",
            "gasUsed": 165834,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4f26b95000e702e8b835185b0bc6965b",
      "version": 7
    },
    "invoke.createInjPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createInjPerpsMarket": {
            "hash": "0xbc216af4d9084716fad9b1a1d7d31149e76f942ea0d109bfd76a44e85801e5b7",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2100",
                    "Injective",
                    "INJ"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createInjPerpsMarket",
            "gasUsed": 165906,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "70dd728ef7060c60a11bf5e3c7c52d6a",
      "version": 7
    },
    "invoke.createLinkPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createLinkPerpsMarket": {
            "hash": "0x3b32be4b2f0cbd89a313eb551015b7e4570847ca8400b623b88e90b91526562d",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "1900",
                    "Chainlink",
                    "LINK"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createLinkPerpsMarket",
            "gasUsed": 165918,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f0d5923b17392f5a822c2dbdaad98d4b",
      "version": 7
    },
    "invoke.createPendlePerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createPendlePerpsMarket": {
            "hash": "0xbed1fc4cd57a5b5d840f3b7b6209d3b8b31c605b3d401f6175e922227773ef84",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2000",
                    "Pendle",
                    "PENDLE"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createPendlePerpsMarket",
            "gasUsed": 165906,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6da24655e6b2c2f34db43a64afb621f8",
      "version": 7
    },
    "invoke.createStxPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createStxPerpsMarket": {
            "hash": "0xa9761342a6491e1eeea1a27a45b2bb60fcb8046a0fb9e6ed118c1d3b0bf3545c",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3100",
                    "Stacks",
                    "STX"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createStxPerpsMarket",
            "gasUsed": 165870,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "22c559999ccaa74f7a83e42759b70df0",
      "version": 7
    },
    "invoke.createSuiPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createSuiPerpsMarket": {
            "hash": "0x98129b05cd8c06b46315618e2fe321eb98eab1b254331a2a8a5b35ad9fdc455a",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2400",
                    "Sui",
                    "SUI"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createSuiPerpsMarket",
            "gasUsed": 165834,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "93fdc422b21c52b9b52aee73eab9db5d",
      "version": 7
    },
    "invoke.createTaoPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createTaoPerpsMarket": {
            "hash": "0x542e7c00b9a55173dc70cd1c6881eac12d104e3f3499aa88b8c1849d726a5b1c",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2800",
                    "Bittensor",
                    "TAO"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createTaoPerpsMarket",
            "gasUsed": 165906,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f49805a5f1a601e144967a62586aebcf",
      "version": 7
    },
    "invoke.createTiaPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createTiaPerpsMarket": {
            "hash": "0xc162e940d0ed9fd779632e2cbafb3cf5b14c84b3a6602fac10fedfc354a43229",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2300",
                    "Celestia",
                    "TIA"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createTiaPerpsMarket",
            "gasUsed": 165894,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7cc9cdb86027fffab8d202050d10968f",
      "version": 7
    },
    "invoke.createTonPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createTonPerpsMarket": {
            "hash": "0xcd70a70fa8e9fc1bf7392cb5e2fbeedfcaa85c0becfafc375c33f43db3ea5710",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "2500",
                    "Toncoin",
                    "TON"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createTonPerpsMarket",
            "gasUsed": 165882,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ae718ac2ba368a6a46c9e5b45b4aba54",
      "version": 7
    },
    "invoke.addPerpsArkmSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsArkmSettlementStrategy": {
            "hash": "0x355f87338cd78267697770eda705cbfffb3d47e999a0de5f6d69a2a2a9faf575",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2600",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsArkmSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000306",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "arkm_pyth_settlement_strategy": "0"
        }
      },
      "hash": "e771adba2d8d4f462147db11ddddff99",
      "version": 7
    },
    "invoke.addPerpsAxlSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsAxlSettlementStrategy": {
            "hash": "0xc1b30c1e7c258e7bd62585ace1342b2c22ca66584be8a797907ba9f3755ab927",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsAxlSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "axl_pyth_settlement_strategy": "0"
        }
      },
      "hash": "6f588085205de6658feb4d7eff87f07e",
      "version": 7
    },
    "invoke.addPerpsBomeSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsBomeSettlementStrategy": {
            "hash": "0x9745fd73f15667df0906662b038dfc42a947e53978d9e55f5d6a933ab0a88b94",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2900",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsBomeSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000309",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bome_pyth_settlement_strategy": "0"
        }
      },
      "hash": "3cc97b442db5d67b3f3c9c6f8e8faa89",
      "version": 7
    },
    "invoke.addPerpsEthfiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsEthfiSettlementStrategy": {
            "hash": "0x5f25b2cd3a39d90b5bee478679dd9eecdfe7cf5445da8d6e9c070977452ed752",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3000",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsEthfiSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000308",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ethfi_pyth_settlement_strategy": "0"
        }
      },
      "hash": "3dee88bfbf8623d09c99c3263e597d69",
      "version": 7
    },
    "invoke.addPerpsGalaSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsGalaSettlementStrategy": {
            "hash": "0x08da030d926d9683a92049b8f2c87e1e40ec079cfeff970ae856b700ca69af1d",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2700",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsGalaSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000307",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "gala_pyth_settlement_strategy": "0"
        }
      },
      "hash": "365abb95aabca4e5d3034e99a4dd701a",
      "version": 7
    },
    "invoke.addPerpsGmxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsGmxSettlementStrategy": {
            "hash": "0x4435bdd8153078b4ee713f02ca2c894c79dffba801d89d4d9c8f329a42f9da0b",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsGmxSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000307",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "gmx_pyth_settlement_strategy": "0"
        }
      },
      "hash": "4746cef55325e2a061c1f2ad07a1578e",
      "version": 7
    },
    "invoke.addPerpsInjSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsInjSettlementStrategy": {
            "hash": "0x27740656df07c7108302bc478df49132339971e0fd320901911637fb2330d0a3",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsInjSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000307",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "inj_pyth_settlement_strategy": "0"
        }
      },
      "hash": "feeffabeae9cad71b71710ce7ac1941a",
      "version": 7
    },
    "invoke.addPerpsLinkSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsLinkSettlementStrategy": {
            "hash": "0xd2bbe6014d2105607021ba5cacd593c05a5f531778f28079f20228a16a02b96b",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "1900",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsLinkSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000306",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "link_pyth_settlement_strategy": "0"
        }
      },
      "hash": "60df2abaa05ed3439639ca7c89106cfe",
      "version": 7
    },
    "invoke.addPerpsPendleSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsPendleSettlementStrategy": {
            "hash": "0x2e7eae372c459da8281548a52195662143d99dc6e7c7a9209f82184a175ab700",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2000",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsPendleSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pendle_pyth_settlement_strategy": "0"
        }
      },
      "hash": "5b934d5d4d92f12d5e6770bb9d596482",
      "version": 7
    },
    "invoke.addPerpsStxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsStxSettlementStrategy": {
            "hash": "0xa43fe3619151acc52c02a50e444ec42de59ec5e0e7a3c3870bb703e4b4569a6c",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsStxSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "stx_pyth_settlement_strategy": "0"
        }
      },
      "hash": "a56c6d485bf330f355e7b0e5416ac4c0",
      "version": 7
    },
    "invoke.addPerpsSuiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsSuiSettlementStrategy": {
            "hash": "0x1022eddd878086a0f0cdab92254b9706a51f2175b44a572f385951cf933e2eef",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsSuiSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sui_pyth_settlement_strategy": "0"
        }
      },
      "hash": "075d51f84ff6fb0ca71a6f0be0f82a35",
      "version": 7
    },
    "invoke.addPerpsTaoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsTaoSettlementStrategy": {
            "hash": "0x40b8e8500bc3eb624e867670fa6c434712b33b46fb1bc69a490a03e1dfff29f0",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2800",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsTaoSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000306",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "tao_pyth_settlement_strategy": "0"
        }
      },
      "hash": "82aabbd1d2b000a761ec56a99dca7c3d",
      "version": 7
    },
    "invoke.addPerpsTiaSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsTiaSettlementStrategy": {
            "hash": "0x4944b1810a0b3603a922a2122c3054862515b310f9d2799fb3aa89f14b4606d3",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsTiaSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000306",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "tia_pyth_settlement_strategy": "0"
        }
      },
      "hash": "adbe4a50a3f23507f6d36eaea701e8e2",
      "version": 7
    },
    "invoke.addPerpsTonSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsTonSettlementStrategy": {
            "hash": "0x90e1647b0e475c6d547c1754916360111bae4e49cf8c4cff3df3a0b3ac01f0b0",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "2500",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsTonSettlementStrategy",
            "gasUsed": 118550,
            "gasCost": "1000308",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ton_pyth_settlement_strategy": "0"
        }
      },
      "hash": "d58c2075f5306ed1687e481f87fdf1fe",
      "version": 7
    },
    "invoke.setPerpsArkmFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArkmFundingParameters": {
            "hash": "0xdfb5a67839ebfa2d863625f70a6a19782db069595f934e6454e3a302fc74b959",
            "blockNumber": "16432755",
            "timestamp": "1728633798",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2600",
                    "11000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArkmFundingParameters",
            "gasUsed": 45048,
            "gasCost": "321215265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "34ee42443348b9224a8cc0b45d319bba",
      "version": 7
    },
    "invoke.setPerpsArkmLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArkmLiquidationParameters": {
            "hash": "0xeee52b7c8c48fb4300d107950a912dbb2b656a84ff40579124d6c19c0b4debf7",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2600",
                    "4430000000000000000",
                    "440000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArkmLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000273",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a9ed7c93c504f772bdef9165170b9408",
      "version": 7
    },
    "invoke.setPerpsArkmLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArkmLockedOiRatio": {
            "hash": "0xc9eece0f84950380662b7c58926e0cdd5d7d7b22a7a8e1ee62778ede68836179",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2600",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArkmLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000307",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cdab12bbaf0d407f79a5c53bf148dfbb",
      "version": 7
    },
    "invoke.setPerpsArkmMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArkmMaxLiquidationParameters": {
            "hash": "0x1cbd27f4beba8e7a968fa8fefe2a54b8a7fc14bc1531768d8b0412161104a276",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2600",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArkmMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000307",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c247c8a3ae1dacd50adaf701b87dc2c3",
      "version": 7
    },
    "invoke.setPerpsArkmMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArkmMaxMarketSize": {
            "hash": "0x097da9efb2e89ae8647b643d95d8fad9279a04465a2cf97eac3e45f389a2514d",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2600",
                    "400000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArkmMaxMarketSize",
            "gasUsed": 36701,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6639cc12a753b49571d3227f598a8961",
      "version": 7
    },
    "invoke.setPerpsArkmMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArkmMaxMarketValue": {
            "hash": "0x062087a4d161b59af0dc039588a392b044a2c9bfc4b64a29a30e3aa461632598",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2600",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArkmMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0bd3e00deca420148df673afdfc2162b",
      "version": 7
    },
    "invoke.setPerpsArkmOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArkmOrderFees": {
            "hash": "0x42b44c8babab536685a92e1927eadfd8cf4c44ae679163d7bbd582768f7f42c8",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2600",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArkmOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000308",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "65ef070246f568571a83094fac7bd7df",
      "version": 7
    },
    "invoke.setPerpsAxlFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxlFundingParameters": {
            "hash": "0xa33710336b7d2c001b3a23fd70a29d5c34e755ad95bcaf15477a42a71d7beaf6",
            "blockNumber": "16432767",
            "timestamp": "1728633822",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3200",
                    "10125000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxlFundingParameters",
            "gasUsed": 45060,
            "gasCost": "321770037",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "aa38be175dfb078a3e01290a091c4ce2",
      "version": 7
    },
    "invoke.setPerpsAxlLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxlLiquidationParameters": {
            "hash": "0xc1524cd5dbfe75351b75eb73ee40bf6e2dee6eb33d2f55b8fd7274eee5c5be41",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3200",
                    "2850000000000000000",
                    "340000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxlLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000275",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d39715cd3da6876704512b634b9859da",
      "version": 7
    },
    "invoke.setPerpsAxlLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxlLockedOiRatio": {
            "hash": "0xb52d69c53a3b92fd9e2facfc61b9fdc4098d9984fdbe0afe73af18bcdc317fc8",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3200",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxlLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000309",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "48ab5d4c1c8bc6afdcb507d68ad7514d",
      "version": 7
    },
    "invoke.setPerpsAxlMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxlMaxLiquidationParameters": {
            "hash": "0x0e75084c031ca54c0a3d60fd820d77fce548473f3d1cfc90d3d88adbdd126878",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxlMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000308",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f381f7dc172be0c4117373e141a27daf",
      "version": 7
    },
    "invoke.setPerpsAxlMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxlMaxMarketSize": {
            "hash": "0x06724eb95774fc9f5a9e3b1428455a1fe96c5611e847da49864184da56ecada0",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3200",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxlMaxMarketSize",
            "gasUsed": 36701,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9135ce91b145b1459591c1d3b1a0766c",
      "version": 7
    },
    "invoke.setPerpsAxlMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxlMaxMarketValue": {
            "hash": "0x49a70561701e954c3c252a187797aacfcf167aa9fb6eb80559dcc9a4d117bbb4",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3200",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxlMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1b03108c6b94c36eba15895d9374fd42",
      "version": 7
    },
    "invoke.setPerpsAxlOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxlOrderFees": {
            "hash": "0x61f4dfff96546f6f994566a0465224e70c1c4d8a7357c3683cbf2fc4559d4bec",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3200",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxlOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "254334d9ae7873d6e4d85e88b56cf913",
      "version": 7
    },
    "invoke.setPerpsBomeFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBomeFundingParameters": {
            "hash": "0xcdbc4b5cf14c2567483900de755420f9d194d8455840105a396f4aab1aae6cfc",
            "blockNumber": "16432797",
            "timestamp": "1728633882",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2900",
                    "3750000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBomeFundingParameters",
            "gasUsed": 45060,
            "gasCost": "315894945",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6b141ff38961df611aca14d986f7433a",
      "version": 7
    },
    "invoke.setPerpsBomeLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBomeLiquidationParameters": {
            "hash": "0xdfc5618c45860cdc631cb6d3a423366c5e071dfef487fbb4c1a877aa01a9ed3e",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2900",
                    "1440000000000000000",
                    "380000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBomeLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000276",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ffd00f4f9f70795cef1d71e03caf6493",
      "version": 7
    },
    "invoke.setPerpsBomeLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBomeLockedOiRatio": {
            "hash": "0x1dcb9d125eaa1c775f4ba8658f432ede2df84d37efa36806743cc2ead9c6f93a",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2900",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBomeLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a2a176bb046414c6123bce459522172d",
      "version": 7
    },
    "invoke.setPerpsBomeMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBomeMaxLiquidationParameters": {
            "hash": "0x8e7a559d76ef4c300f5c7d1c659e35c0594cf1cb923d7d0fe853128a4749b992",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2900",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBomeMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a178869b06c4beba545c06a948051a7e",
      "version": 7
    },
    "invoke.setPerpsBomeMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBomeMaxMarketSize": {
            "hash": "0xdf1248d34df31107b3ec8a01c0c3dd6c50541a23d2caaa096ede183b3168f67a",
            "blockNumber": "16432799",
            "timestamp": "1728633886",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2900",
                    "229513950000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBomeMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "316792886",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ce4484429b7a4a764e090643728d25b1",
      "version": 7
    },
    "invoke.setPerpsBomeMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBomeMaxMarketValue": {
            "hash": "0x0e42226aa06b7651d998d6a028cf92eba11f40b8c929b2372707e38000a30bf8",
            "blockNumber": "16432801",
            "timestamp": "1728633890",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2900",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBomeMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "316264289",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "12282b81531f1dab7a0a03c1172d8a80",
      "version": 7
    },
    "invoke.setPerpsBomeOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBomeOrderFees": {
            "hash": "0x3f025229f3fb4308c9dac7420b79586a27b058e61f41cb3e6a3eca2fded0fe3a",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2900",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBomeOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000311",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f80c32193cfe7d4158f128daab271062",
      "version": 7
    },
    "invoke.setPerpsEthfiFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthfiFundingParameters": {
            "hash": "0xd05489da03ad3441fee9a5ebd0270093ca9c378789c555303843b6af3919cf0e",
            "blockNumber": "16432865",
            "timestamp": "1728634018",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3000",
                    "16500000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthfiFundingParameters",
            "gasUsed": 45060,
            "gasCost": "319942128",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f9655a0e107b9bdf8e90ea5d48a61b1a",
      "version": 7
    },
    "invoke.setPerpsEthfiLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthfiLiquidationParameters": {
            "hash": "0x19804c67816f29dd978bc63a8221ddd9040a0563ae96532163c94936d5343881",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3000",
                    "2120000000000000000",
                    "380000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthfiLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000275",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fde3c91568a1e282da471dc5ec8eba2c",
      "version": 7
    },
    "invoke.setPerpsEthfiLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthfiLockedOiRatio": {
            "hash": "0xeea3e97139c8de30db319b46ed42b5ee794e6800bdb0cdcf3c935ed618a16158",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthfiLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "93a40833ec1ac95a599b4196a8667559",
      "version": 7
    },
    "invoke.setPerpsEthfiMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthfiMaxLiquidationParameters": {
            "hash": "0xa952ce128b4120943ef6f25bb203e65628dfb425f0cc85b04feea804193fbf49",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3000",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthfiMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000309",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d2a1344a04686767eba1cab41bfdc37a",
      "version": 7
    },
    "invoke.setPerpsEthfiMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthfiMaxMarketSize": {
            "hash": "0x4f77d1ef943203fc0f8c5ba393d9c2c448b8de3cb9c463631a9e27ffdb3345d7",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3000",
                    "300000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthfiMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a5af227ecbd736c2e7ffb5914bee95bd",
      "version": 7
    },
    "invoke.setPerpsEthfiMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthfiMaxMarketValue": {
            "hash": "0x2ef83bb8b2f7e41a36cce0d7ebf174186c03789ddecf7b7629f91d15e1033b2c",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3000",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthfiMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "842675d0ba6ca5adeb313e9fa3c569b2",
      "version": 7
    },
    "invoke.setPerpsEthfiOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthfiOrderFees": {
            "hash": "0xf8e0d87ef5e5f0a5de72bdb74464ea2365cf05dacd032b60a6f75364a00b954c",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3000",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthfiOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000307",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1e67447d284829064360e3df37dd7e01",
      "version": 7
    },
    "invoke.setPerpsGalaFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGalaFundingParameters": {
            "hash": "0x03ed8dcd3f45ab51b4d0efe94187f51249fd0c707f7d466b9a94194d2ef534a9",
            "blockNumber": "16432891",
            "timestamp": "1728634070",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2700",
                    "1125000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGalaFundingParameters",
            "gasUsed": 45060,
            "gasCost": "316306714",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f35c14612d3c951676e6aa4f4c74dc28",
      "version": 7
    },
    "invoke.setPerpsGalaLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGalaLiquidationParameters": {
            "hash": "0x3dd667fa4bfc8a9477e52dd467465378303b185216c0592557fd91d3e5ae11cb",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2700",
                    "1290000000000000000",
                    "350000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGalaLiquidationParameters",
            "gasUsed": 50421,
            "gasCost": "1000275",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2d18d5f45837ac991c05fd7e762cfb51",
      "version": 7
    },
    "invoke.setPerpsGalaLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGalaLockedOiRatio": {
            "hash": "0xf54f122222ec9ca49b2221b7b8f3366d9d826542162aab3aebd49210c592ac25",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2700",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGalaLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000309",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "129000c9bd184ad52bfe52d9b4861ef0",
      "version": 7
    },
    "invoke.setPerpsGalaMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGalaMaxLiquidationParameters": {
            "hash": "0x6585a2c6b79c3a1121324d678b579257ba421d218e68d3b50e1bcb79b1b15228",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2700",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGalaMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000309",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "afa388a46c9b5d23722c118e8163b07f",
      "version": 7
    },
    "invoke.setPerpsGalaMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGalaMaxMarketSize": {
            "hash": "0x859e3bc7c10e6527f0d881ea1917c4f2cea244419bd67e8c9861e92d47c232eb",
            "blockNumber": "16432894",
            "timestamp": "1728634076",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2700",
                    "36165750000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGalaMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "317403135",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b0d2306210386564c0f15f91561e60bd",
      "version": 7
    },
    "invoke.setPerpsGalaMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGalaMaxMarketValue": {
            "hash": "0x21952739e7b4b1c029b6f431072dd756e3f828772a24201817ee460cdeaee67d",
            "blockNumber": "16432896",
            "timestamp": "1728634080",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2700",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGalaMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "318373296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "30ed53fc2884913e702c15dd59b8edfd",
      "version": 7
    },
    "invoke.setPerpsGalaOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGalaOrderFees": {
            "hash": "0x5e82f11147f7c120855edf0bf09deb811d75b26984d9408890704130efcff8ca",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2700",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGalaOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000309",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "be53c1053b9bb590f79689ff53a98ad1",
      "version": 7
    },
    "invoke.setPerpsGmxFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGmxFundingParameters": {
            "hash": "0x465308d15add5c2afcf04177a816ccc3fe15d3c4c6a2d3b2bce6bd33a89de34c",
            "blockNumber": "16432898",
            "timestamp": "1728634084",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2200",
                    "250000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGmxFundingParameters",
            "gasUsed": 45048,
            "gasCost": "318241754",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "17d8928740587df2f742e30dcfa53cf5",
      "version": 7
    },
    "invoke.setPerpsGmxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGmxLiquidationParameters": {
            "hash": "0xd61466c33255889f53cd3a99183a4b6bd338b29cc2b7053b014da2c4edb4d598",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2200",
                    "1270000000000000000",
                    "440000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGmxLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000275",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ccbccccb1eaddf674a025e14c868961c",
      "version": 7
    },
    "invoke.setPerpsGmxLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGmxLockedOiRatio": {
            "hash": "0xcaace8b25355c63ff5793927e399a3ed21bf04c6c31deb76c0d3b440d9c4b39b",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2200",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGmxLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2a42f30c7a0189eb4d8c4a58e0b3d819",
      "version": 7
    },
    "invoke.setPerpsGmxMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGmxMaxLiquidationParameters": {
            "hash": "0xff160433eb7bb1a4caab3e5b36dc9ac3119cf587d55ecf1a05ea75997a3dab46",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGmxMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000312",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b8ab8de64a09dabda41f41ffee13bbc4",
      "version": 7
    },
    "invoke.setPerpsGmxMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGmxMaxMarketSize": {
            "hash": "0xbb5634252b92d4fe3939b1dbf2917d577a945afefaf517063147d42f5eeb2478",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2200",
                    "35000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGmxMaxMarketSize",
            "gasUsed": 36713,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "83b147a77779d692e2d9e94f6366e075",
      "version": 7
    },
    "invoke.setPerpsGmxMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGmxMaxMarketValue": {
            "hash": "0x9715e2e495374fe5fe8fc5bded410f3ff85580b17ce59d9516e49c83e2962984",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2200",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGmxMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a11018c8c6841dcf303ca9eed432b72b",
      "version": 7
    },
    "invoke.setPerpsGmxOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGmxOrderFees": {
            "hash": "0x23630040da6a4cd07dc6485ed82b2e228c715bf048f62153a796e2ca26bbf82a",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2200",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGmxOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000311",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ee78e478df9076904b94a7d12cf1f127",
      "version": 7
    },
    "invoke.setPerpsInjFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsInjFundingParameters": {
            "hash": "0x86baf214e28731d5a44382869cf69b666cd2dea8c3968cf8c8d99ad8666240d1",
            "blockNumber": "16432920",
            "timestamp": "1728634128",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2100",
                    "2250000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsInjFundingParameters",
            "gasUsed": 45060,
            "gasCost": "317807422",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "02d0e191500467908bdea99d66ffc4cf",
      "version": 7
    },
    "invoke.setPerpsInjLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsInjLiquidationParameters": {
            "hash": "0xf6c0557393078e34aa9d405c0821dcab7cf89b9832fa52132a26efc579f0ee84",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2100",
                    "1310000000000000000",
                    "460000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsInjLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000275",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "92c725826d01f0cdd033962fe6e858a6",
      "version": 7
    },
    "invoke.setPerpsInjLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsInjLockedOiRatio": {
            "hash": "0xa5435dacb6c563c954e678f75ecbafca29683eddfe7492c50652e558592eb1f2",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2100",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsInjLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000313",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "07818ab85625590480bb4a85eac10667",
      "version": 7
    },
    "invoke.setPerpsInjMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsInjMaxLiquidationParameters": {
            "hash": "0xaece0d5b6b0d62c9db7ed53f294f1f31fd79bd70a8199bfd06bb1c1516a0fbba",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsInjMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000312",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9b551fb89fb5463140aa1b7ce27f2df0",
      "version": 7
    },
    "invoke.setPerpsInjMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsInjMaxMarketSize": {
            "hash": "0x0f3af583c3577cf47bcc79085211fa70f90a239f7aa8f15a52dd5633ce2e6ae2",
            "blockNumber": "16432922",
            "timestamp": "1728634132",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2100",
                    "73500000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsInjMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318387357",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e0efb69d21df9ba23606ebe4de33870c",
      "version": 7
    },
    "invoke.setPerpsInjMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsInjMaxMarketValue": {
            "hash": "0x9338ec85d7888e87d48ac2176b43e3402b7c01fee6428c3a02b7b660c3cb71d5",
            "blockNumber": "16432924",
            "timestamp": "1728634136",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2100",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsInjMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "317879304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a0254839bccd10b6badefcaa75899e1f",
      "version": 7
    },
    "invoke.setPerpsInjOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsInjOrderFees": {
            "hash": "0xf6f63bb4b7db8815ad67bcebfa24635389a1972f98e3a78d6d961b68bbf984cb",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2100",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsInjOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000311",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7dfb395103e9372d21da038e7ab4febb",
      "version": 7
    },
    "invoke.setPerpsLinkFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLinkFundingParameters": {
            "hash": "0x025ec764bac39f6903fb82948dc9fbe82e08f8e3cf6f04f3d8c1a41e6d250346",
            "blockNumber": "16432946",
            "timestamp": "1728634180",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "1900",
                    "5625000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLinkFundingParameters",
            "gasUsed": 45060,
            "gasCost": "317739360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7c052ea516893a7a64166ab3c2ac80ad",
      "version": 7
    },
    "invoke.setPerpsLinkLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLinkLiquidationParameters": {
            "hash": "0x33b4dfd85843a6725cad7543350d2c487c88a0e630e6c62f39e6d9576981529a",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "1900",
                    "6730000000000000000",
                    "370000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLinkLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000275",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f8e0f1240b73645f05dfffc2b62bb0e4",
      "version": 7
    },
    "invoke.setPerpsLinkLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLinkLockedOiRatio": {
            "hash": "0x5058016c3be8f042bd25ca4956f5dc63c6d628db50609dec5e018ef792467a2f",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "1900",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLinkLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000313",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d8ecf8b087f62e4d516f391d8cadb41e",
      "version": 7
    },
    "invoke.setPerpsLinkMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLinkMaxLiquidationParameters": {
            "hash": "0x2e543b7b490098b970ce55bedb6efedb2c23a7b66f4711dc50ab4c08a95a9c1c",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "1900",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLinkMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000311",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "185dd9e1d62979d119d0ba6ddd3523ae",
      "version": 7
    },
    "invoke.setPerpsLinkMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLinkMaxMarketSize": {
            "hash": "0x5d00956179cd6112fe6cf9f896e8901dd7aa32ad8715bcf5e9e230b3f345ec8f",
            "blockNumber": "16432948",
            "timestamp": "1728634184",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "1900",
                    "265650000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLinkMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318000623",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0d4334c78443ff7c60d69e51eb26c412",
      "version": 7
    },
    "invoke.setPerpsLinkMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLinkMaxMarketValue": {
            "hash": "0x4e877f7ec889aaeeca73ff7aa2bcc0352c741759692d41ddb5a6989e3b10f04f",
            "blockNumber": "16432950",
            "timestamp": "1728634188",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "1900",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLinkMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "318274931",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "62943a55a5c8a400db494d81bab54a3a",
      "version": 7
    },
    "invoke.setPerpsLinkOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLinkOrderFees": {
            "hash": "0x1f4d6cc31d4fd60a3eadf7b26991278a71322dab2751f462525f81a4e6edb482",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "1900",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLinkOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000312",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1db1cf7af8ad84dffd2130474125a491",
      "version": 7
    },
    "invoke.setPerpsPendleFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPendleFundingParameters": {
            "hash": "0xe62268e4e66dfb0cd3f29e5301e80b0a1be8e74fe935a780003d60316a9cd769",
            "blockNumber": "16432983",
            "timestamp": "1728634254",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2000",
                    "6000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPendleFundingParameters",
            "gasUsed": 45048,
            "gasCost": "317434573",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "aa166d2ce489ba166847d6bcf3cc614e",
      "version": 7
    },
    "invoke.setPerpsPendleLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPendleLiquidationParameters": {
            "hash": "0x11a1788bf25aeba1cbff53c286f9bdbb56dc18580874674833124d0634f1c8a4",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2000",
                    "2450000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPendleLiquidationParameters",
            "gasUsed": 50421,
            "gasCost": "1000277",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f1e41661533c9049c3e177bdcea3aa9a",
      "version": 7
    },
    "invoke.setPerpsPendleLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPendleLockedOiRatio": {
            "hash": "0x3028989fd4c598dedae339d6dbcbde0eee11477c3967c20ea9d59a361e833b1c",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPendleLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000314",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7a92682db3d3e8da60489b33605441ae",
      "version": 7
    },
    "invoke.setPerpsPendleMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPendleMaxLiquidationParameters": {
            "hash": "0x1debe110e7cdb27141657d2e0cc7e9eec5b0887525690cd64f91b13e3fb43275",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2000",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPendleMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000314",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6ebd4953f48e668d8e054fee51501722",
      "version": 7
    },
    "invoke.setPerpsPendleMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPendleMaxMarketSize": {
            "hash": "0x0f843808a447f649b13ae4badedd5f8385330166ee4c01a2c0873fed5894b476",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2000",
                    "200000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPendleMaxMarketSize",
            "gasUsed": 36701,
            "gasCost": "1000265",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8412058af809fc98e5f4d327fe7b7c32",
      "version": 7
    },
    "invoke.setPerpsPendleMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPendleMaxMarketValue": {
            "hash": "0xe612fa931e20d7de86f1a3bef262e870273c1681dd936350040ba97a854584fe",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2000",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPendleMaxMarketValue",
            "gasUsed": 36758,
            "gasCost": "1000266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "814f549648b476ab95c98bb40a40bb99",
      "version": 7
    },
    "invoke.setPerpsPendleOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPendleOrderFees": {
            "hash": "0x3066931db44dc34da37aebbc2cd1a39da105b926878a34a5c2a4f223adae66de",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2000",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPendleOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000315",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "299d32e2e0108eeaa9a7509de8097dd4",
      "version": 7
    },
    "invoke.setPerpsPriceArkm": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceArkm": {
            "hash": "0xfa08751a4045a6513f9e65a1cd6946f8b908d9c1cefb1bd65e75e31a64507ff4",
            "blockNumber": "17174565",
            "timestamp": "1730117418",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2600",
                    "0x2813e7fc3a60b016d31df62e999bb06399c75e68992851761816750580c7c735",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceArkm",
            "gasUsed": 39771,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4807593e6eac267ed55279f6a921a6e3",
      "version": 7
    },
    "invoke.setPerpsPriceAxl": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceAxl": {
            "hash": "0x26da141a9c00ecdc6f5e06c01084dcec5235acbe728c79d853c9122108d199f3",
            "blockNumber": "17174571",
            "timestamp": "1730117430",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3200",
                    "0x7da776ef891114089b81f55ff022ffeac6adbefb828b8a68eea274f315868a35",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceAxl",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cd6dba873a40f97182c6fbd7ac51c200",
      "version": 7
    },
    "invoke.setPerpsPriceBome": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceBome": {
            "hash": "0xde76de14eb91bb99d666a363d07fdb4e3604075c1675225257325d433987703a",
            "blockNumber": "17174583",
            "timestamp": "1730117454",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2900",
                    "0x67b87b5b9e7554a0faf81d7c847de3cd9bfd5692d3ac5b94388445a2c43d33fd",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceBome",
            "gasUsed": 39771,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "425ad6f2fb382ad7beadfa28bd6debd2",
      "version": 7
    },
    "invoke.setPerpsPriceEthfi": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceEthfi": {
            "hash": "0x473904c855af328fbc476b51fa736684b0ca4a442950214217432faced8284a4",
            "blockNumber": "17174617",
            "timestamp": "1730117522",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3000",
                    "0x56eed4fcb940bb6e0b410a69c74985b6da2e16c14b591e5e0b1094c0666a2517",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceEthfi",
            "gasUsed": 39771,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0723b5539bcd6ee26193db6efd48cb87",
      "version": 7
    },
    "invoke.setPerpsPriceGala": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceGala": {
            "hash": "0x5c5be07979b34b8439b6c3cc1f64423769b218394220e8ce94ce934ba97d194f",
            "blockNumber": "17174848",
            "timestamp": "1730117984",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2700",
                    "0x2ac918fe3b6e9d877423b21d1f9537a509c09dfdb4d69a9f0542c1354d97f859",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceGala",
            "gasUsed": 39771,
            "gasCost": "1000319",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a5b2454668a1a114d2eea1859b53f06f",
      "version": 7
    },
    "invoke.setPerpsPriceGmx": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceGmx": {
            "hash": "0x1f6d37e005fad09afc289262d926b148f0cf11f930db182851a9d65781f26184",
            "blockNumber": "17174626",
            "timestamp": "1730117540",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2200",
                    "0xf00372f2235ec0385a3374446d88c8140c0519444ce9f04eac260ee4117d069e",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceGmx",
            "gasUsed": 39771,
            "gasCost": "1000359",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bb389f225b3bcd66fca609a4ae62bf53",
      "version": 7
    },
    "invoke.setPerpsPriceInj": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceInj": {
            "hash": "0x709d714716e587b880b12ad8fbae670375809f5206a7497926d17ca223f01cd9",
            "blockNumber": "17174634",
            "timestamp": "1730117556",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2100",
                    "0xd46aa1d29e6d5a5e95052033c91e6dcf40b3388297825f1461e92c7d59940405",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceInj",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b90e261ac7e3e36ac856c12b89ed1ed6",
      "version": 7
    },
    "invoke.setPerpsPriceLink": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceLink": {
            "hash": "0xed081b423ec02df3746b91495ef1bd5e4fa2ed04408d75bd58dd33ae2dff36cf",
            "blockNumber": "17174644",
            "timestamp": "1730117576",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "1900",
                    "0x4f8138351dfb8b05c9a713af357a77efbc4afa4c0fa4ead3912d6a35c0eeea64",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceLink",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1b601c14c85a4ddb2ce14d4b71531422",
      "version": 7
    },
    "invoke.setPerpsPricePendle": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPricePendle": {
            "hash": "0x6e0b92ce4e10d06937ada5256b97a0daca4f3bc11ea6557d9b40e192ec0b7647",
            "blockNumber": "17174662",
            "timestamp": "1730117612",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2000",
                    "0xfb9f1c8f457622ccd88be254e7859ede58bacbbb8e08d704291f7151f99d458a",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPricePendle",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "64361e231abc636db2772bbc5c4b7eb9",
      "version": 7
    },
    "invoke.setPerpsPriceStx": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceStx": {
            "hash": "0x6673753df9d31d4e06970ca9b21b71b7e757976de19e9567ecd143cd274bdb12",
            "blockNumber": "17174693",
            "timestamp": "1730117674",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3100",
                    "0x5baa4163b96ae40110040874135c6593e5c7a12c7eb92ecf3c9c0a1d71996e29",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceStx",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "14079d6e2dadc13c42fcadc9b1d703f3",
      "version": 7
    },
    "invoke.setPerpsPriceSui": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceSui": {
            "hash": "0x05289860bf0b0007f04438dda1ab8610c3d65462be10d47ae0907e2b80b74fb2",
            "blockNumber": "17174695",
            "timestamp": "1730117678",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2400",
                    "0x863cd378f259a72dfc71d02d6509aaf627de8b7b58bf2eda9493d32ff0797297",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceSui",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "33875019116296c39a142e0bc1588db9",
      "version": 7
    },
    "invoke.setPerpsPriceTao": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceTao": {
            "hash": "0x2bae186bb0537fed80a63fee24aaf7ba77ffba0e32abed7b27778e9f121133d8",
            "blockNumber": "17174700",
            "timestamp": "1730117688",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2800",
                    "0xcf5af2e320dabe4eff6a9bc0db44167c2f8faefcdfc1e51e8e2470f71a968536",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceTao",
            "gasUsed": 39771,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "85453d53344982d9f8dd12af2a3920d6",
      "version": 7
    },
    "invoke.setPerpsPriceTia": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceTia": {
            "hash": "0x80d101a97c82f114e971a66af06c6ac3198b7e68c865988b004e441dcb4c1384",
            "blockNumber": "17174702",
            "timestamp": "1730117692",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2300",
                    "0xe4f6808181f695c130580cb343eadb986a588b93a4923911a39ca3954c76fc75",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceTia",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "097bebf538786b78cb1da3357c2d748a",
      "version": 7
    },
    "invoke.setPerpsPriceTon": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceTon": {
            "hash": "0x04b29c9e681af406dcb61da01f65c46b4608551a5ae216a3e28c233777334df6",
            "blockNumber": "17174704",
            "timestamp": "1730117696",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "2500",
                    "0x74a32bda202c423d392f6c5733bab1adad6faac284c81d434c731055572dc87f",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceTon",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7fa7ab17cf7fb63344464f1714325592",
      "version": 7
    },
    "invoke.setPerpsStxFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStxFundingParameters": {
            "hash": "0xf7f4cc35bd5d04a27cf621370bc0683ea18a26ad8fa96e6a00a2dca45bac7346",
            "blockNumber": "16433026",
            "timestamp": "1728634340",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3100",
                    "22500000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStxFundingParameters",
            "gasUsed": 45060,
            "gasCost": "317248480",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0984886c19cc4599a5cef987025b491c",
      "version": 7
    },
    "invoke.setPerpsStxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStxLiquidationParameters": {
            "hash": "0x848d026c6ce0b76fc2e4d6a35f844f823b4ac4e74be35a7ea09e2b9e9587f05e",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3100",
                    "2610000000000000000",
                    "430000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStxLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000276",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b3910c455215ee9d5194abc6ea52809f",
      "version": 7
    },
    "invoke.setPerpsStxLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStxLockedOiRatio": {
            "hash": "0x940abfd335954a557d19d2f042655d9518c68cc80e44648e6451580f529dad4d",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3100",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStxLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000322",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "699d02c1333666cbcdacbff13ba8bcff",
      "version": 7
    },
    "invoke.setPerpsStxMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStxMaxLiquidationParameters": {
            "hash": "0x03a75a6dcf9f14a3598c9ab5a8ce95484a0181d164b501601512d0cc3e59fd2a",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStxMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000322",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a68309e3383ff6de2de65a9b907da520",
      "version": 7
    },
    "invoke.setPerpsStxMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStxMaxMarketSize": {
            "hash": "0x5e9609bf5e283b55d0e96a1967f4b14c3955c97ce56dc8d9d5e5d8c2daaffd9a",
            "blockNumber": "16433030",
            "timestamp": "1728634348",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3100",
                    "849150000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStxMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "316904933",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "383c94d950877d74afb4dec2f1d7ce43",
      "version": 7
    },
    "invoke.setPerpsStxMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStxMaxMarketValue": {
            "hash": "0xf41d119e3f9584d07f99530340ae921756dcd68c30ffb4d971120c128823c5ec",
            "blockNumber": "16433032",
            "timestamp": "1728634352",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3100",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStxMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "316041206",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c6a5506f97cfad587f89ba458660b409",
      "version": 7
    },
    "invoke.setPerpsStxOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStxOrderFees": {
            "hash": "0x6035d9702a78c7d2eb991619d5a4a72e755e356b85cddb70191495e749700038",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3100",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStxOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "35f348c09acba7f92eada8f654daca57",
      "version": 7
    },
    "invoke.setPerpsSuiFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSuiFundingParameters": {
            "hash": "0x41b07c5a3695054358b9f2db5957b3b5407ec618403ffbfe4af66e8838e27366",
            "blockNumber": "16433034",
            "timestamp": "1728634356",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2400",
                    "55000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSuiFundingParameters",
            "gasUsed": 45048,
            "gasCost": "315247206",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b049d04488afdc4c7bd23c8f3d351c0e",
      "version": 7
    },
    "invoke.setPerpsSuiLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSuiLiquidationParameters": {
            "hash": "0x8bf684fff20337b4bab5d93fb3c47924bde4b011b2a69dab80fdc06135388b64",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2400",
                    "1960000000000000000",
                    "340000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSuiLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000276",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "137e4fd88bf77cd0ed3dea918523d27e",
      "version": 7
    },
    "invoke.setPerpsSuiLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSuiLockedOiRatio": {
            "hash": "0x221555805501f471b4963d9ac9e76e2b905a3959788f51b5928d09dd398bca55",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSuiLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ab132003b064e03d56f789a72873af4e",
      "version": 7
    },
    "invoke.setPerpsSuiMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSuiMaxLiquidationParameters": {
            "hash": "0xc0f06dd0e6d6ba489ced4174db8dfc71456424154ea5f9efef5925b2eee09feb",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSuiMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "843f349a9d1043944d50a711c0c866b4",
      "version": 7
    },
    "invoke.setPerpsSuiMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSuiMaxMarketSize": {
            "hash": "0x8caf27dbe09c383b8f91c328f7c381c5281e06b92fda561388a247ad6b7ca033",
            "blockNumber": "16433036",
            "timestamp": "1728634360",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2400",
                    "1559950000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSuiMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "314470275",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3aba6e87e5eba302ce367bdef355ac84",
      "version": 7
    },
    "invoke.setPerpsSuiMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSuiMaxMarketValue": {
            "hash": "0xb4ba3a38760b6414139857d7540a8e44f507260a9b6e0d7bb43622f99b30f046",
            "blockNumber": "16433038",
            "timestamp": "1728634364",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2400",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSuiMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "313916271",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f74b04d6517cb05391fbdffdca5d30f0",
      "version": 7
    },
    "invoke.setPerpsSuiOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSuiOrderFees": {
            "hash": "0x9b9ba82b869c782ad36e42de2176247f895710fff1ba0a53a3cee5e419bf6a1b",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2400",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSuiOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000324",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6d930650befc8cfdc4161e7bfb03e199",
      "version": 7
    },
    "invoke.setPerpsTaoFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTaoFundingParameters": {
            "hash": "0xacfd616df512fd7428a7c076e4161fad0d3ba9787aa00017cd309328966d363d",
            "blockNumber": "16433048",
            "timestamp": "1728634384",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2800",
                    "32500000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTaoFundingParameters",
            "gasUsed": 45048,
            "gasCost": "315486584",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d626bdefdc0aed0c6eda04c7dcc255c3",
      "version": 7
    },
    "invoke.setPerpsTaoLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTaoLiquidationParameters": {
            "hash": "0x874cb5f6f91ef7d7c3d3ca46685f32094e0012807adbe82beb9b13dae8e14ea9",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2800",
                    "2890000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTaoLiquidationParameters",
            "gasUsed": 53233,
            "gasCost": "1000276",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "184689d83d43d16cce0113be4cc997b0",
      "version": 7
    },
    "invoke.setPerpsTaoLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTaoLockedOiRatio": {
            "hash": "0xc47be8ef1be39e630558dfbb508ecefe61e7ab9783da7a7540fe8a1fb46f14d7",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2800",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTaoLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000324",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4b09f50d1f1813196cfffe479de5bad5",
      "version": 7
    },
    "invoke.setPerpsTaoMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTaoMaxLiquidationParameters": {
            "hash": "0x661648cb4efe433566dcaed905f005c7cf790a0d27127e07a0f8288f652dfca7",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2800",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTaoMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c521ce3583d43218aa4f4624660cecef",
      "version": 7
    },
    "invoke.setPerpsTaoMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTaoMaxMarketSize": {
            "hash": "0x04402ca0c02fc721fdb731e4c08416c0526f47aab558028422c5741f6e50f6f2",
            "blockNumber": "16433051",
            "timestamp": "1728634390",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2800",
                    "2450000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTaoMaxMarketSize",
            "gasUsed": 39501,
            "gasCost": "316060017",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fbc9450d4cedf8ac795fe24f1b3ab229",
      "version": 7
    },
    "invoke.setPerpsTaoMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTaoMaxMarketValue": {
            "hash": "0x927549593e60c53af1b251e3e7a1d73b1cae1029c50801e2f35a6f98e85ed8bd",
            "blockNumber": "16433053",
            "timestamp": "1728634394",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2800",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTaoMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "316535088",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4093f87e766adcf43628428972cb6093",
      "version": 7
    },
    "invoke.setPerpsTaoOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTaoOrderFees": {
            "hash": "0xff6e139505e3bec5b9e220798550bf95ee22f7984da8f49453ab309fa1132087",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2800",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTaoOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000330",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "52d4de507430ecb562ee98ea75a79532",
      "version": 7
    },
    "invoke.setPerpsTiaFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTiaFundingParameters": {
            "hash": "0x392fa3fdefcdea5f74304cbf7b513f91088eeb834919f9219240312b74347d8a",
            "blockNumber": "16433055",
            "timestamp": "1728634398",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2300",
                    "6000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTiaFundingParameters",
            "gasUsed": 45048,
            "gasCost": "316835915",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "185f3972abde2d0892bf95c3c5ec79bc",
      "version": 7
    },
    "invoke.setPerpsTiaLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTiaLiquidationParameters": {
            "hash": "0x342847c22483ebb798b6fbf7f333dcf60643c436b1c271b12223cecf328490fc",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2300",
                    "2240000000000000000",
                    "380000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTiaLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000276",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "338cabd90058927af36fa06b7495db67",
      "version": 7
    },
    "invoke.setPerpsTiaLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTiaLockedOiRatio": {
            "hash": "0x0115609187ae81b44fa6df21309ac25a87ea4f247be77456f8d95654d5c14246",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTiaLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000330",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9d404cea50e215be7df1c4fd7f55045a",
      "version": 7
    },
    "invoke.setPerpsTiaMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTiaMaxLiquidationParameters": {
            "hash": "0x527afec9c63a766c9a4e50484a1e9fd6413dc9fc59083881f69628a61247faca",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTiaMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000329",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "883c32ddcdaf7821d60fdc3e56d6fd1e",
      "version": 7
    },
    "invoke.setPerpsTiaMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTiaMaxMarketSize": {
            "hash": "0x81c0834039b24c4b6bc3273d3054363bb1a2ef383db0a0862eb33cad6731a930",
            "blockNumber": "16433058",
            "timestamp": "1728634404",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2300",
                    "279500000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTiaMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "316998148",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "744442375f5caf28b1b09ac4a82c61ea",
      "version": 7
    },
    "invoke.setPerpsTiaMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTiaMaxMarketValue": {
            "hash": "0x39981f9c0faec93600eec9e1a2073bf543680be38e99d24e142f023e1a0c02a8",
            "blockNumber": "16433060",
            "timestamp": "1728634408",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2300",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTiaMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "316574927",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ccc35099da994729a94b63b693826307",
      "version": 7
    },
    "invoke.setPerpsTiaOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTiaOrderFees": {
            "hash": "0x66a607ee23f7af65db1da2730d36fac4c08efe249569b3a6d7defd3deb9f3995",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2300",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTiaOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f37eb11d5ae77909fc8b51963505e551",
      "version": 7
    },
    "invoke.setPerpsTonFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTonFundingParameters": {
            "hash": "0x174769fb93d6c8b405b5bfdda14a89e8d849a20271c0e655781d1236c35f3d2a",
            "blockNumber": "16433062",
            "timestamp": "1728634412",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "2500",
                    "12000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTonFundingParameters",
            "gasUsed": 45048,
            "gasCost": "316100120",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4a6f84fc6736a290ac7f4feb2a00527c",
      "version": 7
    },
    "invoke.setPerpsTonLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTonLiquidationParameters": {
            "hash": "0x19c0ee1adacc5931b71ac16149c6eeae38d9af3412996000763bc0d5e5ea9932",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "2500",
                    "2890000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTonLiquidationParameters",
            "gasUsed": 50433,
            "gasCost": "1000276",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "308da083c2234751cf38edeed10f12e4",
      "version": 7
    },
    "invoke.setPerpsTonLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTonLockedOiRatio": {
            "hash": "0xb9efafaae168e0688933bd60e2f0acef455697b5203d83f9f97be3c8f675276e",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "2500",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTonLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000333",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "441f9043b9cf0b6388e7cb92c055c4e8",
      "version": 7
    },
    "invoke.setPerpsTonMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTonMaxLiquidationParameters": {
            "hash": "0xb9dc24db90754b42acad13f54ebb02dfe99c71d31db54a43fcd767318b11125b",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "2500",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTonMaxLiquidationParameters",
            "gasUsed": 124726,
            "gasCost": "1000335",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0aa78002ff696697cb704c7ee893b2aa",
      "version": 7
    },
    "invoke.setPerpsTonMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTonMaxMarketSize": {
            "hash": "0x812eb721a12e0d6b005bd7a61511b0bbaa48ba65f45ae9d9a517f0fef25042df",
            "blockNumber": "16433064",
            "timestamp": "1728634416",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "2500",
                    "576800000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTonMaxMarketSize",
            "gasUsed": 39501,
            "gasCost": "315626175",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "14b74d3aaf68c81b400a563bac1ab384",
      "version": 7
    },
    "invoke.setPerpsTonMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTonMaxMarketValue": {
            "hash": "0xc999bfa5266792e9b15c74060f0e5b4cbba9666e8a6427612b4cee5a2eaf2295",
            "blockNumber": "16433066",
            "timestamp": "1728634420",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "2500",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTonMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "315674115",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7c1e75adb1060393512bc22aa878efc0",
      "version": 7
    },
    "invoke.setPerpsTonOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTonOrderFees": {
            "hash": "0x806ef510a3513f3a4c15264397b41d2293e81259e91f343152c4a1ac82398915",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "2500",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTonOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000334",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4979a57532eefbebd1156d6af7a13be3",
      "version": 7
    },
    "invoke.setPerpsArkmSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsArkmSettlementStrategy": {
            "hash": "0x7502a3c800b01047aa508cf34cbb4b8a5296d214a4cd7cb43e841edf30370def",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2600",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x7677dd124dee46cfcd46ff03cf405fb0ed94b1f49efbea3444aadbda939a7ad3",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsArkmSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000334",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0d352cf469b53951ec368c15006b22b4",
      "version": 7
    },
    "invoke.setPerpsAxlSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxlSettlementStrategy": {
            "hash": "0x848e30dab4c243de91e664b8ff2acfda04c01bfe1151c040d8f6d36f1ef4f9a8",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x60144b1d5c9e9851732ad1d9760e3485ef80be39b984f6bf60f82b28a2b7f126",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxlSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000334",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7dfb904171941f19e4109866f0920cc0",
      "version": 7
    },
    "invoke.setPerpsBomeSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBomeSettlementStrategy": {
            "hash": "0x5c9595e63a8f233d11c5f4047d9ee31307eb261f9a0c77887ac55f054d82e460",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2900",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x30e4780570973e438fdb3f1b7ad22618b2fc7333b65c7853a7ca144c39052f7a",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBomeSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000333",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "adb9b401a5941df4b86908b55e8f7115",
      "version": 7
    },
    "invoke.setPerpsEthfiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthfiSettlementStrategy": {
            "hash": "0xec1f44203ab8fc6e48ee89915da5bc7b523d3be594022de573ebff437ae8f1ca",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3000",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb27578a9654246cb0a2950842b92330e9ace141c52b63829cc72d5c45a5a595a",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthfiSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8d678a3ea65a373470ad3ba4301165ca",
      "version": 7
    },
    "invoke.setPerpsGalaSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGalaSettlementStrategy": {
            "hash": "0x6ea404606fab980827dff20dc8d434322a664ce174adfb2be4df34335e0629ab",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2700",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x0781209c28fda797616212b7f94d77af3a01f3e94a5d421760aef020cf2bcb51",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGalaSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d6112f08eece813cbfd8ad9f56ca63b1",
      "version": 7
    },
    "invoke.setPerpsGmxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGmxSettlementStrategy": {
            "hash": "0xccff83fe30591a7c488d1a99ab5cc1fcbf8860e1fd516e95417b02be98e303ee",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb962539d0fcb272a494d65ea56f94851c2bcf8823935da05bd628916e2e9edbf",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGmxSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000334",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a2946a9ec1b8c9f11f711f9e5cf7fe76",
      "version": 7
    },
    "invoke.setPerpsInjSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsInjSettlementStrategy": {
            "hash": "0xb838b212de20cc49340ada4fc517f63cc82c68efb9d5625254e1082c16ee742e",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x7a5bc1d2b56ad029048cd63964b3ad2776eadf812edc1a43a31406cb54bff592",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsInjSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000333",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "17443482bf46907c97b934f4566afbcb",
      "version": 7
    },
    "invoke.setPerpsLinkSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLinkSettlementStrategy": {
            "hash": "0x303eeb10d4bb1a8a6dad4b3d8d793d2a8e47c63b0185f63bbe0eadafe8d96ae0",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "1900",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x8ac0c70fff57e9aefdf5edf44b51d62c2d433653cbb2cf5cc06bb115af04d221",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLinkSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4ed16a6e903308460f672f847908c90c",
      "version": 7
    },
    "invoke.setPerpsPendleSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPendleSettlementStrategy": {
            "hash": "0x8032f5deeb1d2bd18ddcdca9d47ee9b6c7a482e256683cf4c74eb3626917311c",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2000",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x9a4df90b25497f66b1afb012467e316e801ca3d839456db028892fe8c70c8016",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPendleSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000333",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fccb7a5e526bbfa998e5d16e4d71a7fe",
      "version": 7
    },
    "invoke.setPerpsStxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStxSettlementStrategy": {
            "hash": "0x2fc7293ab000520bb0cdfb2b46228a992c410f96094da222ed7c92167e2aec13",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xec7a775f46379b5e943c3526b1c8d54cd49749176b0b98e02dde68d1bd335c17",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStxSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5899af2494407bbae4e096a24fea9b73",
      "version": 7
    },
    "invoke.setPerpsSuiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSuiSettlementStrategy": {
            "hash": "0xc008495d4a26aa2c40ce115c065b63e95cb09f88726dd17baddcdec0768e79b3",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSuiSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5a390a43be117f30e449839e78544a7c",
      "version": 7
    },
    "invoke.setPerpsTaoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTaoSettlementStrategy": {
            "hash": "0xc9246c39f385c50a8c129289e44818deb0a25b409bec11fa115fad8848811a68",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2800",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x410f41de235f2db824e562ea7ab2d3d3d4ff048316c61d629c0b93f58584e1af",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTaoSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8c944e88e0e7691d59771dc4fe00916a",
      "version": 7
    },
    "invoke.setPerpsTiaSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTiaSettlementStrategy": {
            "hash": "0x60576099825f5d3da77ea1c3f39523969ce0fdccad8f913113136badb1be524b",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x09f7c1d7dfbb7df2b8fe3d3d87ee94a2259d212da4f30c1f0540d066dfa44723",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTiaSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0fa6fd21ec381ee931d6939fe4621b75",
      "version": 7
    },
    "invoke.setPerpsTonSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTonSettlementStrategy": {
            "hash": "0x970843ca1d0725eef3b12327c66a115552895190fd4308ef975646c2c497689f",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "2500",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x8963217838ab4cf5cadc172203c1f0b763fbaa45f346d8ee50ba994bbcac3026",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTonSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "987767e43b4c2cd97cfa330163926f2c",
      "version": 7
    },
    "clone.erc_4626_to_assets_ratio_oracle": {
      "artifacts": {
        "imports": {
          "erc_4626_to_assets_ratio_oracle": {
            "url": "ipfs://QmZ5kmNVm4zeLLY8LqAddHYV7awy99zA4zgj3kyh34MyyZ",
            "tags": [
              "latest"
            ],
            "target": "erc-4626-to-assets-ratio-oracle:3.3.19@with-synthetix-omnibus",
            "preset": "with-synthetix-omnibus",
            "imports": {
              "ausdc_token_mock": {
                "url": "ipfs://QmdHmZdySmgzRa6V1CHf1jBoyJU2y6ayTmWD8rqsMZKB3D",
                "tags": [
                  "latest"
                ],
                "target": "synthetix-mock-tokens:latest@ausdc",
                "preset": "ausdc",
                "settings": {
                  "decimals": "18",
                  "name": "Token",
                  "salt": "",
                  "symbol": "TKN"
                },
                "contracts": {
                  "MintableToken": {
                    "address": "0x862AB59572e38F93197C29Aa7a562e986c80e928",
                    "abi": [
                      "constructor(string name, string symbol, uint8 tokenDecimals) payable",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function mint(uint256 amount, address to)",
                      "function name() view returns (string)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)"
                    ],
                    "constructorArgs": [
                      "aUSDC Mock",
                      "aUSDC",
                      "6"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "src/MintableTokenPermissionlessMint.sol",
                    "contractName": "MintableTokenPermissionlessMint",
                    "deployedOn": "contract.MintableToken",
                    "highlight": true,
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                },
                "extras": {
                  "decimals": "18",
                  "name": "Token",
                  "salt": "",
                  "symbol": "TKN"
                }
              },
              "statausdc_token_mock": {
                "url": "ipfs://QmbFhQoadCLHnNstRR68zonbKVb8aoqzdGVPk9bxYsX92q",
                "tags": [
                  "latest"
                ],
                "target": "synthetix-mock-tokens:latest@statausdc",
                "preset": "statausdc",
                "settings": {
                  "name": "",
                  "symbol": "",
                  "asset": ""
                },
                "contracts": {
                  "Token": {
                    "address": "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70",
                    "abi": [
                      "constructor(address asset, string vaultName, string vaultSymbol)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function asset() view returns (address)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function convertToAssets(uint256 shares) view returns (uint256)",
                      "function convertToShares(uint256 assets) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function deposit(uint256 assets, address receiver) returns (uint256)",
                      "function maxDeposit(address) view returns (uint256)",
                      "function maxMint(address) view returns (uint256)",
                      "function maxRedeem(address owner) view returns (uint256)",
                      "function maxWithdraw(address owner) view returns (uint256)",
                      "function mint(uint256 shares, address receiver) returns (uint256)",
                      "function name() view returns (string)",
                      "function previewDeposit(uint256 assets) view returns (uint256)",
                      "function previewMint(uint256 shares) view returns (uint256)",
                      "function previewRedeem(uint256 shares) view returns (uint256)",
                      "function previewWithdraw(uint256 assets) view returns (uint256)",
                      "function redeem(uint256 shares, address receiver, address owner) returns (uint256)",
                      "function symbol() view returns (string)",
                      "function totalAssets() view returns (uint256)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function withdraw(uint256 assets, address receiver, address owner) returns (uint256)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "event Withdraw(address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares)",
                      "error AddressEmptyCode(address target)",
                      "error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed)",
                      "error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed)",
                      "error ERC20InvalidApprover(address approver)",
                      "error ERC20InvalidReceiver(address receiver)",
                      "error ERC20InvalidSender(address sender)",
                      "error ERC20InvalidSpender(address spender)",
                      "error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max)",
                      "error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max)",
                      "error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max)",
                      "error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max)",
                      "error FailedCall()",
                      "error InsufficientBalance(uint256 balance, uint256 needed)",
                      "error SafeERC20FailedOperation(address token)"
                    ],
                    "constructorArgs": [
                      "0x862AB59572e38F93197C29Aa7a562e986c80e928",
                      "stataUSDC Mock",
                      "stataUSDC"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x4271f29c8dff8fe72bfcef203ab190ced26549919b9dd005b38159560d005043",
                    "sourceName": "contracts/implementations/token/ERC4626Impl.sol",
                    "contractName": "ERC4626Impl",
                    "deployedOn": "deploy.Token",
                    "gasUsed": 1140905,
                    "gasCost": "1000257"
                  }
                },
                "extras": {
                  "name": "",
                  "symbol": "",
                  "asset": ""
                }
              }
            },
            "settings": {
              "vault": "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70"
            },
            "contracts": {
              "ERC4626ToAssetsRatioOracle": {
                "address": "0xC312E26dFFd01a20508712dEeb7EBAc025884Ca7",
                "abi": [
                  "constructor(address _vaultAddress)",
                  "error OverflowUint256ToInt256()",
                  "function ASSET_ADDRESS() view returns (address)",
                  "function ASSET_DECIMALS() view returns (uint256)",
                  "function BASE_UNIT() view returns (uint256)",
                  "function VAULT_ADDRESS() view returns (address)",
                  "function VAULT_DECIMALS() view returns (uint256)",
                  "function isValid(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeDefinition) view returns (bool valid)",
                  "function process(tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[], bytes, bytes32[], bytes32[]) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2))",
                  "function supportsInterface(bytes4 interfaceId) pure returns (bool)"
                ],
                "constructorArgs": [
                  "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x091628f643d9560d387c524511df79f8cb770e95a4a93859e777c5f7b01075c7",
                "deployTxnBlockNumber": "12339828",
                "deployTimestamp": "1720447944",
                "sourceName": "contracts/ERC4626ToAssetsRatioOracle.sol",
                "contractName": "ERC4626ToAssetsRatioOracle",
                "deployedOn": "deploy.ERC4626ToAssetsRatioOracle",
                "gasUsed": 659223,
                "gasCost": "1000361"
              }
            },
            "extras": {
              "vault": "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "setting.sstatausdc_issuance_ratio": {
      "artifacts": {
        "settings": {
          "sstatausdc_issuance_ratio": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
        }
      },
      "hash": "c58bed99bbb29bc55be4aca797032c53",
      "version": 7
    },
    "setting.sstatausdc_liquidation_ratio": {
      "artifacts": {
        "settings": {
          "sstatausdc_liquidation_ratio": "1100000000000000000"
        }
      },
      "hash": "109f80ca4fb572bb6f910537ee0e25cf",
      "version": 7
    },
    "setting.sstatausdc_liquidation_reward": {
      "artifacts": {
        "settings": {
          "sstatausdc_liquidation_reward": "1000000000000000000"
        }
      },
      "hash": "845fb85d1e0ccaf6b0afd054626bbe97",
      "version": 7
    },
    "setting.sstatausdc_min_delegation": {
      "artifacts": {
        "settings": {
          "sstatausdc_min_delegation": "100000000000000000000"
        }
      },
      "hash": "ad27ad0c2fad068c59a31bad017dda13",
      "version": 7
    },
    "setting.synthStataUsdcMaxMarketCollateral": {
      "artifacts": {
        "settings": {
          "synthStataUsdcMaxMarketCollateral": "5000000000000000000000000"
        }
      },
      "hash": "40dfe572475f6cde9234159fff2a3402",
      "version": 7
    },
    "invoke.register_erc_4626_to_assets_ratio_oracle_node": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "register_erc_4626_to_assets_ratio_oracle_node": {
            "hash": "0x526b3716c07ff66db0512197231bfa070d544d7fbc4751cbd59c7bea095316fb",
            "blockNumber": "12339838",
            "timestamp": "1720447964",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8b974cb78abe3bd48345687ac68dd934dcad3229e07dfe23c0f378bddefc7be4",
                    2,
                    "0x000000000000000000000000c312e26dffd01a20508712deeb7ebac025884ca7",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.register_erc_4626_to_assets_ratio_oracle_node",
            "gasUsed": 126624,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "erc_4626_to_assets_ratio_oracle_id": "0x8b974cb78abe3bd48345687ac68dd934dcad3229e07dfe23c0f378bddefc7be4"
        }
      },
      "hash": "a33ded6a4cad2b4d2646fb04447f4629",
      "version": 7
    },
    "invoke.CoreProxy_configureCollateral_stataUSDC": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureCollateral_stataUSDC": {
            "hash": "0x783e289e627964109727f24eab5b10a266825c6dca4567305ea9423868e78a1e",
            "blockNumber": "12339841",
            "timestamp": "1720447970",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "1000000000000000000",
                      "oracleNodeId": "0x8b974cb78abe3bd48345687ac68dd934dcad3229e07dfe23c0f378bddefc7be4",
                      "tokenAddress": "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70",
                      "minDelegationD18": "100000000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureCollateral_stataUSDC",
            "gasUsed": 59356,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "451630b041ee0f4a81893268eb199eb5",
      "version": 7
    },
    "invoke.SpotMarketProxy_createSynth_stataUSDC": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_createSynth_stataUSDC": {
            "hash": "0xfc3e0ea741c5956df9909864656303b05d63d87498af47807e8575c0214ca0f3",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x6572633230000000000000000000000000000000000000000000000000000000",
                    "0x2ec0db1eb4d7fde2d2ecfde5060d5de4d2f5b1f7ea6319c97be9a39eb01ae852",
                    "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528",
                    "0x3b1D0009899067D7DB5e859c182410714caf8725"
                  ]
                }
              ],
              "SynthRegistered": [
                {
                  "name": "SynthRegistered",
                  "args": [
                    "4",
                    "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_createSynth_stataUSDC",
            "gasUsed": 506566,
            "gasCost": "1000264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_stata_usdc_market_id": "4",
          "synth_stata_usdc_token_address": "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528"
        }
      },
      "hash": "a393a7ad86aaa3ec64e2908957ed5fb0",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_stataUSDC": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_stataUSDC": {
            "hash": "0xf95adeb888d67397dd186ab4933fa8ea2a76e54a93f063ebcfaefc4b7c90059a",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "4",
                    "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70",
                    "5000000000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_stataUSDC",
            "gasUsed": 57782,
            "gasCost": "1000257",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9a58d7be807234629a86e8bdaa43f5c8",
      "version": 7
    },
    "invoke.SpotMarketProxy_setWrapper_stataUSDC": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setWrapper_stataUSDC": {
            "hash": "0x5b8166fab767db86e4ce03845a806563a28228846c134e725026dbb260f93cbf",
            "events": {
              "WrapperSet": [
                {
                  "name": "WrapperSet",
                  "args": [
                    "4",
                    "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70",
                    "5000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setWrapper_stataUSDC",
            "gasUsed": 59395,
            "gasCost": "1000257",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fbae9c75780cf1697b34007b9fa0cb11",
      "version": 7
    },
    "invoke.SpotMarketProxy_updatePriceData_stataUSDC": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_updatePriceData_stataUSDC": {
            "hash": "0x32a14956ba70da364886d835ea70142c979be4e00476e9a17ac680173b629476",
            "blockNumber": "12339844",
            "timestamp": "1720447976",
            "events": {
              "SynthPriceDataUpdated": [
                {
                  "name": "SynthPriceDataUpdated",
                  "args": [
                    "4",
                    "0x8b974cb78abe3bd48345687ac68dd934dcad3229e07dfe23c0f378bddefc7be4",
                    "0x8b974cb78abe3bd48345687ac68dd934dcad3229e07dfe23c0f378bddefc7be4",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_updatePriceData_stataUSDC",
            "gasUsed": 48720,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0bc9314bfba31a478d539d749a55c285",
      "version": 7
    },
    "invoke.configure_sstatausdc_collateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configure_sstatausdc_collateral": {
            "hash": "0xa871c92d18fd1823417995ace101fe594f2799a0b897af29bf8fce6f3cd4087f",
            "blockNumber": "12339846",
            "timestamp": "1720447980",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528",
                    {
                      "depositingEnabled": true,
                      "issuanceRatioD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "1000000000000000000",
                      "oracleNodeId": "0x8b974cb78abe3bd48345687ac68dd934dcad3229e07dfe23c0f378bddefc7be4",
                      "tokenAddress": "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528",
                      "minDelegationD18": "100000000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configure_sstatausdc_collateral",
            "gasUsed": 59368,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cd521461438ed86d91c92d7d718b708e",
      "version": 7
    },
    "setting.perps_lowcap_super_market_name": {
      "artifacts": {
        "settings": {
          "perps_lowcap_super_market_name": "Low MCap"
        }
      },
      "hash": "e64dbe90f166b13004028015e52a3a70",
      "version": 7
    },
    "invoke.registerLookupAaveOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupAaveOracleNode": {
            "hash": "0xd49e5e6ee70c990485ae29c69d982ed8373a817c87d5a4446cec368d44d46a14",
            "blockNumber": "17174188",
            "timestamp": "1730116664",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc54dea6295eccb62957bb59c878a691fd9a291d4031277910c51aa86db4f4d09",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e47445000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupAaveOracleNode",
            "gasUsed": 51462,
            "gasCost": "1000359",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "aave_lookup_oracle_id": "0xc54dea6295eccb62957bb59c878a691fd9a291d4031277910c51aa86db4f4d09"
        }
      },
      "hash": "6fb3d7e0801c4a6063f3aa96318a419a",
      "version": 7
    },
    "invoke.registerLookupAdaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupAdaOracleNode": {
            "hash": "0x7aa29af2e1e8200ca02980a17dd8dfc30a81f82297db295784ea278f3ebc377d",
            "blockNumber": "17174190",
            "timestamp": "1730116668",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xe4b5b231633ffdeed361e9d4395f63b22c12f71b1a1e4859bdd4336af4663fd6",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d2a01deaec9e51a579277b34b122399984d0bbf57e2458a7e42fecd2829867a0d000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupAdaOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000359",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ada_lookup_oracle_id": "0xe4b5b231633ffdeed361e9d4395f63b22c12f71b1a1e4859bdd4336af4663fd6"
        }
      },
      "hash": "c9f5b8b71a90908c70b8a0a32ca4ec96",
      "version": 7
    },
    "invoke.registerLookupAlgoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupAlgoOracleNode": {
            "hash": "0x6fe94b4118c835cc3ca92fedbb61fd3b79b7c4492c8fb66f11a94a11dad5331f",
            "blockNumber": "17174192",
            "timestamp": "1730116672",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x24e529d02c817b9c2ebfc211353ee2cc15a80f48c9846ebd8cbf24596341a0bd",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dfa17ceaf30d19ba51112fdcc750cc83454776f47fb0112e4af07f15f4bb1ebc0000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupAlgoOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000358",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "algo_lookup_oracle_id": "0x24e529d02c817b9c2ebfc211353ee2cc15a80f48c9846ebd8cbf24596341a0bd"
        }
      },
      "hash": "6b54aa541a0b1fce1b60fc528043ac22",
      "version": 7
    },
    "invoke.registerLookupAptOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupAptOracleNode": {
            "hash": "0xc3c23601724ffdc89cc48512efbef7f22c387eef1e85a9aa3965ab42247a5179",
            "blockNumber": "17174194",
            "timestamp": "1730116676",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xcf31d11334dda541dc651591f22b9c89fdd72666bab35559ba270f2f947ba954",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupAptOracleNode",
            "gasUsed": 51450,
            "gasCost": "1000358",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "apt_lookup_oracle_id": "0xcf31d11334dda541dc651591f22b9c89fdd72666bab35559ba270f2f947ba954"
        }
      },
      "hash": "e8618b8b95eafd3b769bdac3acd87067",
      "version": 7
    },
    "invoke.registerLookupAtomOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupAtomOracleNode": {
            "hash": "0x3b66c93a24782fc11f50fd37db2af93340a76581caf7e0cb61371ca1409c2b05",
            "blockNumber": "17174200",
            "timestamp": "1730116688",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x50ba92f37df74b48d60000ad37f41a550aed71772dc48148dfd0c1e658006263",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db00b60f88b03a6a625a8d1c048c3f66653edf217439983d037e7222c4e612819000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupAtomOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "atom_lookup_oracle_id": "0x50ba92f37df74b48d60000ad37f41a550aed71772dc48148dfd0c1e658006263"
        }
      },
      "hash": "0d0b4422f1fb6a8a17640b38b66bc679",
      "version": 7
    },
    "invoke.registerLookupAxsOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupAxsOracleNode": {
            "hash": "0x5876d4322f687ec4c0668933a764f8973c3fd8f8d64a4a88f92f2bee2ccc0cc4",
            "blockNumber": "17174207",
            "timestamp": "1730116702",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4fa6374aed82a6a865433095990a0bdef796bfceca6222dd6624d074cc1345ae",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db7e3904c08ddd9c0c10c6d207d390fd19e87eb6aab96304f571ed94caebdefa0000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupAxsOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "axs_lookup_oracle_id": "0x4fa6374aed82a6a865433095990a0bdef796bfceca6222dd6624d074cc1345ae"
        }
      },
      "hash": "c8d95414efcf43ceff4ca7e50bdc99d8",
      "version": 7
    },
    "invoke.registerLookupBalOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupBalOracleNode": {
            "hash": "0xfc859753ef3629941a1cddc74db86603e00dfdc937fff121cc98897369524de6",
            "blockNumber": "17174209",
            "timestamp": "1730116706",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2ecaca27a7b41095c53e8b2ce48533bdff6245d735890bba698fb1b0e8a6e078",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d07ad7b4a7662d19a6bc675f6b467172d2f3947fa653ca97555a9b20236406628000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupBalOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bal_lookup_oracle_id": "0x2ecaca27a7b41095c53e8b2ce48533bdff6245d735890bba698fb1b0e8a6e078"
        }
      },
      "hash": "9aa52e7026a99a4494a8dbe158354b76",
      "version": 7
    },
    "invoke.registerLookupBchOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupBchOracleNode": {
            "hash": "0xdd59ef38dbee7993a0a9e30e5b7b65dd624e97d68b6cc3fa2df5f2be1c6ac18b",
            "blockNumber": "17174211",
            "timestamp": "1730116710",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x54593000884b6e9b8f5850c8758d5e0256e1970a148fb70afcad8809c2bd31cc",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d3dd2b63686a450ec7290df3a1e0b583c0481f651351edfa7636f39aed55cf8a3000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupBchOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bch_lookup_oracle_id": "0x54593000884b6e9b8f5850c8758d5e0256e1970a148fb70afcad8809c2bd31cc"
        }
      },
      "hash": "57b4648e9302c809df3e7fffa206f40f",
      "version": 7
    },
    "invoke.registerLookupBlurOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupBlurOracleNode": {
            "hash": "0x7cb31575ec82a63a13830eb6af797bf29cf37f54b166e124e49e4ea9a8713238",
            "blockNumber": "17174213",
            "timestamp": "1730116714",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xbb74fa54da4dcae3480f449b692d480c14586a707b31827de81056bfdec957df",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d856aac602516addee497edf6f50d39e8c95ae5fb0da1ed434a8c2ab9c3e877e9000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupBlurOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "blur_lookup_oracle_id": "0xbb74fa54da4dcae3480f449b692d480c14586a707b31827de81056bfdec957df"
        }
      },
      "hash": "e54971ff60a8fab17c1694dbc75aeaac",
      "version": 7
    },
    "invoke.registerLookupCompOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupCompOracleNode": {
            "hash": "0x71b1d306380d8180f98662964a9d649262f15f95bbc5b23a8a0365e82abb2229",
            "blockNumber": "17174228",
            "timestamp": "1730116744",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x96885bd00434c57cf4a378d98ba8c3977ff495aea26d8511029963d431aff7d9",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d4a8e42861cabc5ecb50996f92e7cfa2bce3fd0a2423b0c44c9b423fb2bd25478000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupCompOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "comp_lookup_oracle_id": "0x96885bd00434c57cf4a378d98ba8c3977ff495aea26d8511029963d431aff7d9"
        }
      },
      "hash": "21a54e156de6b10ce928ab7ee38f613d",
      "version": 7
    },
    "invoke.registerLookupCrvOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupCrvOracleNode": {
            "hash": "0xbe6a16dd327c45ddb838e84d4e930bfff0cc169721b3a97a84f97c1549e447b0",
            "blockNumber": "17174231",
            "timestamp": "1730116750",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xddadf1450a9c229e4a15fb613af5b3bcf44167cb9d133702ea50b9dd83ed8f5c",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56da19d04ac696c7a6616d291c7e5d1377cc8be437c327b75adb5dc1bad745fcae8000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupCrvOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "crv_lookup_oracle_id": "0xddadf1450a9c229e4a15fb613af5b3bcf44167cb9d133702ea50b9dd83ed8f5c"
        }
      },
      "hash": "4e492cfe32cc05eba4bc241f77b863b7",
      "version": 7
    },
    "invoke.registerLookupDotOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupDotOracleNode": {
            "hash": "0xb3a66a3d7862affbbb7186d10b6204aa793a32db310e158a60466068dc974447",
            "blockNumber": "17174235",
            "timestamp": "1730116758",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9680da1489b8939f5daf8c35bc7904eae9e280108ccf12987f5a2cbd40c75dc6",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dca3eed9b267293f6595901c734c7525ce8ef49adafe8284606ceb307afa2ca5b000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupDotOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "dot_lookup_oracle_id": "0x9680da1489b8939f5daf8c35bc7904eae9e280108ccf12987f5a2cbd40c75dc6"
        }
      },
      "hash": "cf9c2e4445ddd6fa5932086184e86697",
      "version": 7
    },
    "invoke.registerLookupDydxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupDydxOracleNode": {
            "hash": "0x0f911af96c5a785f0d80506dd4147a649aeb9a57ccb0da3bd8bcddc8fec05151",
            "blockNumber": "17174237",
            "timestamp": "1730116762",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8552810205aa09ad60c0bda485f4ceb38f7d1d80de635fc8d6c635992ff7f744",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d6489800bb8974169adfe35937bf6736507097d13c190d760c557108c7e93a81b000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupDydxOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "dydx_lookup_oracle_id": "0x8552810205aa09ad60c0bda485f4ceb38f7d1d80de635fc8d6c635992ff7f744"
        }
      },
      "hash": "a3e468699349a436fba6b8eee36fe754",
      "version": 7
    },
    "invoke.registerLookupEosOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupEosOracleNode": {
            "hash": "0xd44ac8b8bedea0115e23b1acf058e918e289ebb05fa5a3c4f0e649b41e119830",
            "blockNumber": "17174241",
            "timestamp": "1730116770",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xba4c605a22470fc83f211443a23b87de6db874e7cebaeac86d35c55707b24aa9",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d06ade621dbc31ed0fc9255caaab984a468abe84164fb2ccc76f02a4636d97e31000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupEosOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eos_lookup_oracle_id": "0xba4c605a22470fc83f211443a23b87de6db874e7cebaeac86d35c55707b24aa9"
        }
      },
      "hash": "2e748fd6c5ca84b91d7c4a9edb7875dd",
      "version": 7
    },
    "invoke.registerLookupEtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupEtcOracleNode": {
            "hash": "0x7cf20f02bd43c0e2753e9794d867ebbd99a999b012df86a1071193a35c791b19",
            "blockNumber": "17174243",
            "timestamp": "1730116774",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x700b5a47df847d5ef6d4002fe3b02c54a0c7408ac3538d038c20edf20b9fe112",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d7f5cc8d963fc5b3d2ae41fe5685ada89fd4f14b435f8050f28c7fd409f40c2d8000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupEtcOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "etc_lookup_oracle_id": "0x700b5a47df847d5ef6d4002fe3b02c54a0c7408ac3538d038c20edf20b9fe112"
        }
      },
      "hash": "4780b33989e999eb40b43013ccd065a2",
      "version": 7
    },
    "invoke.registerLookupEthbtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupEthbtcOracleNode": {
            "hash": "0x7709a4d13162571b442272fbd5c1c15250a4d920ff7933afbc820ca9ca75513a",
            "blockNumber": "17174247",
            "timestamp": "1730116782",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x49346049c9826f44fe687e9ab2477183a3a4fb5ec9446ae0913e6dbb5d024ca0",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupEthbtcOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ethbtc_lookup_oracle_id": "0x49346049c9826f44fe687e9ab2477183a3a4fb5ec9446ae0913e6dbb5d024ca0"
        }
      },
      "hash": "23381711ba848eeff860ef89802de83f",
      "version": 7
    },
    "invoke.registerLookupFilOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupFilOracleNode": {
            "hash": "0x5da2b08ff79b01ec3c7416b1d5f30e3466de9917ad64165093f96be135ce8dac",
            "blockNumber": "17174251",
            "timestamp": "1730116790",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9156d1252a93c171962c583af45ef326f64daf2577c5bbb144f961e1a57a2c17",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupFilOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000376",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "fil_lookup_oracle_id": "0x9156d1252a93c171962c583af45ef326f64daf2577c5bbb144f961e1a57a2c17"
        }
      },
      "hash": "51ff8cca20456645cf0ea29966d6bec0",
      "version": 7
    },
    "invoke.registerLookupFlowOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupFlowOracleNode": {
            "hash": "0xe6ca1af4ffda99e74ad076d88f4d5de0ff51fda94c36ac057e1b44378891b310",
            "blockNumber": "17174253",
            "timestamp": "1730116794",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc3d5cc15e68f7f71991c4498bea4c2f03b1213e5f205ad1a5094fdd99546bb52",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d2fb245b9a84554a0f15aa123cbb5f64cd263b59e9a87d80148cbffab50c69f30000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupFlowOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000375",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "flow_lookup_oracle_id": "0xc3d5cc15e68f7f71991c4498bea4c2f03b1213e5f205ad1a5094fdd99546bb52"
        }
      },
      "hash": "45a7135b547b9fd2914f01441565d0f0",
      "version": 7
    },
    "invoke.registerLookupFxsOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupFxsOracleNode": {
            "hash": "0x2ca75b3a3707244f01db84de0efa7f545f6988d85ca1d8a237225430bdf03aa3",
            "blockNumber": "17174257",
            "timestamp": "1730116802",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2334df269aa38bf8c0001157f8cf60f64dd0cab3a43bf5bea5f2325a5c55c86c",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d735f591e4fed988cd38df74d8fcedecf2fe8d9111664e0fd500db9aa78b316b1000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupFxsOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000376",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "fxs_lookup_oracle_id": "0x2334df269aa38bf8c0001157f8cf60f64dd0cab3a43bf5bea5f2325a5c55c86c"
        }
      },
      "hash": "5138c56d2834024b5bad7c4a7fdd51f2",
      "version": 7
    },
    "invoke.registerLookupGrtOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupGrtOracleNode": {
            "hash": "0x8874f33ab6f14a67ed0710160a2b1094115563d8904bfffefbae70d4bd845773",
            "blockNumber": "17174263",
            "timestamp": "1730116814",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x76c58e9e7a7b70aeb8f6363844273519ee53a20dbcc90c1115f3f91478f552bc",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d4d1f8dae0d96236fb98e8f47471a366ec3b1732b47041781934ca3a9bb2f35e7000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupGrtOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "grt_lookup_oracle_id": "0x76c58e9e7a7b70aeb8f6363844273519ee53a20dbcc90c1115f3f91478f552bc"
        }
      },
      "hash": "bf3ef34dc686928510edd89fc56e5b71",
      "version": 7
    },
    "invoke.registerLookupIcpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupIcpOracleNode": {
            "hash": "0x65cb158c0603a70ca6801179d1f2bea145d650d75f2d1e56f84de6266b935d16",
            "blockNumber": "17174265",
            "timestamp": "1730116818",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x0ab6855c6068dedb7cb931e745c86a97f1bae6d629b954e999cffe65337ef430",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dc9907d786c5821547777780a1e4f89484f3417cb14dd244f2b0a34ea7a554d67000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupIcpOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000381",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "icp_lookup_oracle_id": "0x0ab6855c6068dedb7cb931e745c86a97f1bae6d629b954e999cffe65337ef430"
        }
      },
      "hash": "a910744063ce82fd5efb73e981ed07fc",
      "version": 7
    },
    "invoke.registerLookupImxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupImxOracleNode": {
            "hash": "0xcce2b16a97e3ace38b5a9f5db032ae8645f302c3f6fd6a472074dd896ce85c57",
            "blockNumber": "17174267",
            "timestamp": "1730116822",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1156163f02a1178db4ae886831a0a62518a0318cf9176f36674aec717d4d549f",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d941320a8989414874de5aa2fc340a75d5ed91fdff1613dd55f83844d52ea63a2000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupImxOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "imx_lookup_oracle_id": "0x1156163f02a1178db4ae886831a0a62518a0318cf9176f36674aec717d4d549f"
        }
      },
      "hash": "1c4c9a7382a7a871c465714ad9661248",
      "version": 7
    },
    "invoke.registerLookupJtoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupJtoOracleNode": {
            "hash": "0xe5b9de72e96029e5a1939d36f70cb3606dfade79f689bb9fbf4b2ab90b0b5d3f",
            "blockNumber": "17174272",
            "timestamp": "1730116832",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xe99dd49bfe4bb8bd57219cbccd52dd61b26099882992357bb7b796b24c670e2f",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db43660a5f790c69354b0729a5ef9d50d68f1df92107540210b9cccba1f947cc2000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupJtoOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "jto_lookup_oracle_id": "0xe99dd49bfe4bb8bd57219cbccd52dd61b26099882992357bb7b796b24c670e2f"
        }
      },
      "hash": "83c012845b90ebe1f4981519caad6e20",
      "version": 7
    },
    "invoke.registerLookupJupOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupJupOracleNode": {
            "hash": "0xfba167dc750f9790d8eebf730e85d3dcbb4b64b3dab2efeb61d96da45389ac7a",
            "blockNumber": "17174275",
            "timestamp": "1730116838",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x680bde49c5fced41ee3aaaf8297a3853a83c18a7cf873f3092595365b17f53f4",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d0a0408d619e9380abad35060f9192039ed5042fa6f82301d0e48bb52be830996000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupJupOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "jup_lookup_oracle_id": "0x680bde49c5fced41ee3aaaf8297a3853a83c18a7cf873f3092595365b17f53f4"
        }
      },
      "hash": "e6a7c5e6b24b03acdc7adff4afe81898",
      "version": 7
    },
    "invoke.registerLookupLdoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupLdoOracleNode": {
            "hash": "0x8ce635e60935daf68cb5ccd02786ea4c2d54466fe3e5be6a163786ee9ef65d54",
            "blockNumber": "17174277",
            "timestamp": "1730116842",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x37dacec3bfa29b7a6956c406ccb618bcbf621515b34f5cb0842fe8c6be5ec5ee",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dc63e2a7f37a04e5e614c07238bedb25dcc38927fba8fe890597a593c0b2fa4ad000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupLdoOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ldo_lookup_oracle_id": "0x37dacec3bfa29b7a6956c406ccb618bcbf621515b34f5cb0842fe8c6be5ec5ee"
        }
      },
      "hash": "15c28ce388bdb443f9bb32d1f109c389",
      "version": 7
    },
    "invoke.registerLookupLtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupLtcOracleNode": {
            "hash": "0x3b1918a9ad437fbafe497642ab807c3b4278852468fb813ee4b307c56727e128",
            "blockNumber": "17174281",
            "timestamp": "1730116850",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x5ae8d0ffd342d961325f2235bce43aa0afb509fd3d89de73eca8748d96ae1bed",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d6e3f3fa8253588df9326580180233eb791e03b443a3ba7a1d892e73874e19a54000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupLtcOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ltc_lookup_oracle_id": "0x5ae8d0ffd342d961325f2235bce43aa0afb509fd3d89de73eca8748d96ae1bed"
        }
      },
      "hash": "7c59fd5b0127d5599039e31c65e39d54",
      "version": 7
    },
    "invoke.registerLookupMemeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupMemeOracleNode": {
            "hash": "0x013fd3371d9275f5ed2c2bd7d8cb9c9bbb45255f63965cc30b3b7c33764fdb80",
            "blockNumber": "17174285",
            "timestamp": "1730116858",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x6a033b251668a7fb5cedef12f698a59d08724f1be8637fc92f7ad07cd34f041c",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dcd2cee36951a571e035db0dfad138e6ecdb06b517cc3373cd7db5d3609b7927c000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupMemeOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "meme_lookup_oracle_id": "0x6a033b251668a7fb5cedef12f698a59d08724f1be8637fc92f7ad07cd34f041c"
        }
      },
      "hash": "454e26fa5977b1bbe9741a97e089d68a",
      "version": 7
    },
    "invoke.registerLookupNearOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupNearOracleNode": {
            "hash": "0x26f3b710c0156f2a8e98f546fbf7b9ed6a0858ec85f6279c1c5c750cf64a1230",
            "blockNumber": "17174826",
            "timestamp": "1730117940",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x500b460744d9e23986280ad30f1cc053274ebcd132d70cf8d6597ecafcb29ff1",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dc415de8d2eba7db216527dff4b60e8f3a5311c740dadb233e13e12547e226750000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupNearOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000328",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "near_lookup_oracle_id": "0x500b460744d9e23986280ad30f1cc053274ebcd132d70cf8d6597ecafcb29ff1"
        }
      },
      "hash": "7b626776822bfedfee6bb18b8655c8c9",
      "version": 7
    },
    "invoke.registerLookupPythOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupPythOracleNode": {
            "hash": "0xa128a49aa6bf0c48d2571c794031175d34ea5e4ea7899afbecdba0f337d909e9",
            "blockNumber": "17174296",
            "timestamp": "1730116880",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x757d21be44d3ba706aa82a547b8eeb141c47afd058ff6caf5ef1e3e952a3f2ec",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d0bbf28e9a841a1cc788f6a361b17ca072d0ea3098a1e5df1c3922d06719579ff000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupPythOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pyth_lookup_oracle_id": "0x757d21be44d3ba706aa82a547b8eeb141c47afd058ff6caf5ef1e3e952a3f2ec"
        }
      },
      "hash": "756484b1d7d3c04e081933227afcd538",
      "version": 7
    },
    "invoke.registerLookupRndrOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupRndrOracleNode": {
            "hash": "0x2ea6fef289d7f8f42b7952f4a77c35cdd26ab3979810ea5b5fd7839d12a8341c",
            "blockNumber": "17174298",
            "timestamp": "1730116884",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd4a7c8be9b405623982962e51d34c983c394b074083089be847200e62eb2e017",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupRndrOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "rndr_lookup_oracle_id": "0xd4a7c8be9b405623982962e51d34c983c394b074083089be847200e62eb2e017"
        }
      },
      "hash": "60d29cdebbfa040258712bda5b2219a9",
      "version": 7
    },
    "invoke.registerLookupSeiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupSeiOracleNode": {
            "hash": "0xe4bfab2c2f5a23dd147ffc5ea7219152d0ab158ab4d2d433519219a362672567",
            "blockNumber": "17174302",
            "timestamp": "1730116892",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x890613ab0c44e20ba9d725b798c012931fadb194f333450f55e632612a7e9bf9",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d53614f1cb0c031d4af66c04cb9c756234adad0e1cee85303795091499a4084eb000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupSeiOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sei_lookup_oracle_id": "0x890613ab0c44e20ba9d725b798c012931fadb194f333450f55e632612a7e9bf9"
        }
      },
      "hash": "b7571f372ad1ab5148109ee21511b09b",
      "version": 7
    },
    "invoke.registerLookupShibOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupShibOracleNode": {
            "hash": "0xf6133b56564757c80470a622b4b63acc6023e42bb1f29c437c11cf388c0f8608",
            "blockNumber": "17174304",
            "timestamp": "1730116896",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x06fe6902e60af778c789412f9b756b864998a98a50b21317e057f0095c9e0c6a",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56df0d57deca57b3da2fe63a493f4c25925fdfd8edf834b20f93e1f84dbd1504d4a000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupShibOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "shib_lookup_oracle_id": "0x06fe6902e60af778c789412f9b756b864998a98a50b21317e057f0095c9e0c6a"
        }
      },
      "hash": "2f593e5245b5e43c77758e690a1807b1",
      "version": 7
    },
    "invoke.registerLookupStrkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupStrkOracleNode": {
            "hash": "0x0d3bfa0d291d639c59c5217a80d567e3f82122bb582c1f2a64fc0d605d8abe09",
            "blockNumber": "17174310",
            "timestamp": "1730116908",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2ee5eec5f6218e0d271d5bae7503ef4f492e9dd0da5b40a4b5031749ecd7dc48",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d6a182399ff70ccf3e06024898942028204125a819e519a335ffa4579e66cd870000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupStrkOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "strk_lookup_oracle_id": "0x2ee5eec5f6218e0d271d5bae7503ef4f492e9dd0da5b40a4b5031749ecd7dc48"
        }
      },
      "hash": "5b5ea53cbbd5c2d9a944773a59ee71a6",
      "version": 7
    },
    "invoke.registerLookupSushiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupSushiOracleNode": {
            "hash": "0xba5b2d37d3635c016d8ba79f5e4f78f9526de25228b2beb955b1c8a8b8654392",
            "blockNumber": "17174318",
            "timestamp": "1730116924",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x34a31c6cb67502374b1de1c168798ec8af6d9506a1360e52c78ba54d606c3b48",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d26e4f737fde0263a9eea10ae63ac36dcedab2aaf629261a994e1eeb6ee0afe53000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupSushiOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000388",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sushi_lookup_oracle_id": "0x34a31c6cb67502374b1de1c168798ec8af6d9506a1360e52c78ba54d606c3b48"
        }
      },
      "hash": "5c799571f3ae04dd70c4f9a97de15e8f",
      "version": 7
    },
    "invoke.registerLookupTrxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupTrxOracleNode": {
            "hash": "0x8e8d9987d0173edd9d2d9b9185d4c22d94c45c9ea8af9f5aa1653cec5af9f86e",
            "blockNumber": "17174326",
            "timestamp": "1730116940",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc45006361e6873d345c4cf0d0bb9622fe89dc2a9c36a693c6ef5a93b344a45c5",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d67aed5a24fdad045475e7195c98a98aea119c763f272d4523f5bac93a4f33c2b000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupTrxOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "trx_lookup_oracle_id": "0xc45006361e6873d345c4cf0d0bb9622fe89dc2a9c36a693c6ef5a93b344a45c5"
        }
      },
      "hash": "ad6b2e06602c3fc40f423fc0f77d79d5",
      "version": 7
    },
    "invoke.registerLookupUniOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupUniOracleNode": {
            "hash": "0xab80cba2fc44a5b75587074b3a76727d4210d584e87c756ec4ef18983e28b97c",
            "blockNumber": "17174328",
            "timestamp": "1730116944",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x31f8b9bcb5ac0a37295d721e01b425e0da02cd5ed02e1865dcf3d6f0fc13925e",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d78d185a741d07edb3412b09008b7c5cfb9bbbd7d568bf00ba737b456ba171501000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupUniOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "uni_lookup_oracle_id": "0x31f8b9bcb5ac0a37295d721e01b425e0da02cd5ed02e1865dcf3d6f0fc13925e"
        }
      },
      "hash": "c4a93bdfef5491fe3106861c92cf1fd3",
      "version": 7
    },
    "invoke.registerLookupXlmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupXlmOracleNode": {
            "hash": "0x0ff005aa65d121f191af4a39f018ec61cffd8199f59f9e86274030dca61e1ef2",
            "blockNumber": "17174337",
            "timestamp": "1730116962",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xada7895ece3923c0a778d40029aa79418d0aa38fa4a37b542cad492b1c7d6bf9",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db7a8eba68a997cd0210c2e1e4ee811ad2d174b3611c22d9ebf16f4cb7e9ba850000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupXlmOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "xlm_lookup_oracle_id": "0xada7895ece3923c0a778d40029aa79418d0aa38fa4a37b542cad492b1c7d6bf9"
        }
      },
      "hash": "f5176ae5cf5f91ccc5bf45543dd2a889",
      "version": 7
    },
    "invoke.registerLookupXrpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupXrpOracleNode": {
            "hash": "0x30d45ef2cc12acb2c5f4ffc08e224f69a98a8a4592c075e5b81b7612ed4cd7ac",
            "blockNumber": "17174339",
            "timestamp": "1730116966",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb07ef6acf4191a6083547d5ff5fb43b05d8645926c3badf870a7ddffbe3e040b",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dec5d399846a9209f3fe5881d70aae9268c94339ff9817e8d18ff19fa05eea1c8000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupXrpOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "xrp_lookup_oracle_id": "0xb07ef6acf4191a6083547d5ff5fb43b05d8645926c3badf870a7ddffbe3e040b"
        }
      },
      "hash": "0017e431bee38be42f49907506546247",
      "version": 7
    },
    "invoke.registerLookupYfiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupYfiOracleNode": {
            "hash": "0x5950a038b68c37cb09c8fdc63e2bc73f0087a2a4173a4919475d978ee6120f9e",
            "blockNumber": "17174342",
            "timestamp": "1730116972",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x997b4e63b6529d7609415e43845f9bbce4a5dfe477d6f9ea01aa4769580f69ce",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d425f4b198ab2504936886c1e93511bb6720fbcf2045a4f3c0723bb213846022f000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupYfiOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "yfi_lookup_oracle_id": "0x997b4e63b6529d7609415e43845f9bbce4a5dfe477d6f9ea01aa4769580f69ce"
        }
      },
      "hash": "dfd4c1bd872e824071188303a65a2daf",
      "version": 7
    },
    "invoke.registerPythAaveOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythAaveOracleNode": {
            "hash": "0x00b2a8af540dc90a8e91f273e77c61c04c4e44ae77458fb9e465a2ab2d5cacdd",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xe5923091472b20af0b486b34daf9b0ddf28eb67cf3a87cbd567f1019106a9a46",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57292b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e474450000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythAaveOracleNode",
            "gasUsed": 146104,
            "gasCost": "1000378",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "aave_pyth_oracle_id": "0xe5923091472b20af0b486b34daf9b0ddf28eb67cf3a87cbd567f1019106a9a46"
        }
      },
      "hash": "1c100833c4acc8513e2d0d4e3ced6bbf",
      "version": 7
    },
    "invoke.registerPythAdaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythAdaOracleNode": {
            "hash": "0xd76173a18aee122283f0011597d2ae6101224d29fc35f70ec1df181253dbc89d",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9be9b090eebca93439d17f254a374f6b8bae48d5fb76a31127d3b5fd322606c9",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57292a01deaec9e51a579277b34b122399984d0bbf57e2458a7e42fecd2829867a0d0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythAdaOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000376",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ada_pyth_oracle_id": "0x9be9b090eebca93439d17f254a374f6b8bae48d5fb76a31127d3b5fd322606c9"
        }
      },
      "hash": "e918205744c2c188c67b984c709dfe31",
      "version": 7
    },
    "invoke.registerPythAlgoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythAlgoOracleNode": {
            "hash": "0x81db1528d8ef17dcc05e8f5f91acc52a722e34e2460cdab7b6aac645abf08533",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd8a3a0204bcea0c2ed1f920788d19bf33678fd01515fab3519523b58d272002f",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729fa17ceaf30d19ba51112fdcc750cc83454776f47fb0112e4af07f15f4bb1ebc00000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythAlgoOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000374",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "algo_pyth_oracle_id": "0xd8a3a0204bcea0c2ed1f920788d19bf33678fd01515fab3519523b58d272002f"
        }
      },
      "hash": "f228a2c3c5d3b842c147dc68c7308b8d",
      "version": 7
    },
    "invoke.registerPythAptOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythAptOracleNode": {
            "hash": "0x3cb53fe61e133b178f980196871d7e80d3dd33e2d2534be40df90b24df0b9a67",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd6d2ed1ae15d4aab7fe67071d70b179a14ba57c10edf60859a82f1357a404912",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572903ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d50000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythAptOracleNode",
            "gasUsed": 146092,
            "gasCost": "1000372",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "apt_pyth_oracle_id": "0xd6d2ed1ae15d4aab7fe67071d70b179a14ba57c10edf60859a82f1357a404912"
        }
      },
      "hash": "317686d3e2f437b889b97088b3ee6793",
      "version": 7
    },
    "invoke.registerPythAtomOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythAtomOracleNode": {
            "hash": "0xa9b04ab00b676983d23dc19f7fe40d40067d34eb7bcf5f10aae4e5eb9de49ab8",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x684583f6aa71b42e629074e6c7dfe99b46736bafb103b5797492ef02e02f6691",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b00b60f88b03a6a625a8d1c048c3f66653edf217439983d037e7222c4e6128190000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythAtomOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000374",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "atom_pyth_oracle_id": "0x684583f6aa71b42e629074e6c7dfe99b46736bafb103b5797492ef02e02f6691"
        }
      },
      "hash": "66f7d67df8904c0fa06c9acac2cd9c21",
      "version": 7
    },
    "invoke.registerPythAxsOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythAxsOracleNode": {
            "hash": "0xac719aa9fd63bba075898b30fd35df1bf80252e44ac6623ad0ab1e234837db4d",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x67fd06964b1068a0849d50622b6b52665602e1335344390a2b288840431e4690",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b7e3904c08ddd9c0c10c6d207d390fd19e87eb6aab96304f571ed94caebdefa00000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythAxsOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000377",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "axs_pyth_oracle_id": "0x67fd06964b1068a0849d50622b6b52665602e1335344390a2b288840431e4690"
        }
      },
      "hash": "d0403bf43108bacaaf109b6089762e07",
      "version": 7
    },
    "invoke.registerPythBalOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythBalOracleNode": {
            "hash": "0x14f68c6c01dd9dfa2d891c715b17fcbd8b7e357c07ddef532bf6bffb627de646",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb5f2bd407cd6918acdf63fb25d26593786dcc3bd84d3b6cad126196aa67b0da3",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572907ad7b4a7662d19a6bc675f6b467172d2f3947fa653ca97555a9b202364066280000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythBalOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bal_pyth_oracle_id": "0xb5f2bd407cd6918acdf63fb25d26593786dcc3bd84d3b6cad126196aa67b0da3"
        }
      },
      "hash": "d0ee9fee8a30015801ed8d2e13c978bd",
      "version": 7
    },
    "invoke.registerPythBchOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythBchOracleNode": {
            "hash": "0xd278071439f4e6deccb806e4e7a050c80ad6e0a5e05ba1ffdf5429faf531c42c",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa0a4aee691b75f0d3a2a41b930917e281c9fed61b2f4182d396f4c37056b1981",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57293dd2b63686a450ec7290df3a1e0b583c0481f651351edfa7636f39aed55cf8a30000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythBchOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bch_pyth_oracle_id": "0xa0a4aee691b75f0d3a2a41b930917e281c9fed61b2f4182d396f4c37056b1981"
        }
      },
      "hash": "724c0985bc07661b324d5017e7881350",
      "version": 7
    },
    "invoke.registerPythBlurOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythBlurOracleNode": {
            "hash": "0x881f3d50533e9627b0612d6c0f779c5d7061e935e555a93c9e8e1188bc764e22",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x69754aaaad6b9a1e565fd42c8d136a7d74312a42db73880ae27e95addc541103",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729856aac602516addee497edf6f50d39e8c95ae5fb0da1ed434a8c2ab9c3e877e90000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythBlurOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "blur_pyth_oracle_id": "0x69754aaaad6b9a1e565fd42c8d136a7d74312a42db73880ae27e95addc541103"
        }
      },
      "hash": "bc5df9a515ec5890d503e739f79dbdad",
      "version": 7
    },
    "invoke.registerPythCompOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythCompOracleNode": {
            "hash": "0x73be5ccc5cc52865e2307cc3efa5da074509b06b83f094db87d1efd854b7ed8f",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x397b9e0697b27f57f0617973c7e47a7926f83f9067aa37af2dd8bfed24d089e0",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57294a8e42861cabc5ecb50996f92e7cfa2bce3fd0a2423b0c44c9b423fb2bd254780000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythCompOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "comp_pyth_oracle_id": "0x397b9e0697b27f57f0617973c7e47a7926f83f9067aa37af2dd8bfed24d089e0"
        }
      },
      "hash": "d46ffa4c1d92b421fd9a33816a5d2786",
      "version": 7
    },
    "invoke.registerPythCrvOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythCrvOracleNode": {
            "hash": "0x11f628262b69d380f80ee1efb4bfebc454c9abbc31b4edbb9ca1c8d9fbfc049e",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xea184fa95d78b12bf86bf9a6d3d11fa572052de496c5213a089d97ef5bc37f07",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729a19d04ac696c7a6616d291c7e5d1377cc8be437c327b75adb5dc1bad745fcae80000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythCrvOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "crv_pyth_oracle_id": "0xea184fa95d78b12bf86bf9a6d3d11fa572052de496c5213a089d97ef5bc37f07"
        }
      },
      "hash": "8cec80459e1a38bbb823e81efa52631c",
      "version": 7
    },
    "invoke.registerPythDotOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythDotOracleNode": {
            "hash": "0x23f4536391ad78af064ae3f929e7b35c6c5352d7ce2c2628c99ba11961801140",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x41749c87c58c03174dc3813d83f70ee00e04202d3e73d79354da4910f780fb47",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729ca3eed9b267293f6595901c734c7525ce8ef49adafe8284606ceb307afa2ca5b0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythDotOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000381",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "dot_pyth_oracle_id": "0x41749c87c58c03174dc3813d83f70ee00e04202d3e73d79354da4910f780fb47"
        }
      },
      "hash": "4ad5a834953461e008745ae22bb12c71",
      "version": 7
    },
    "invoke.registerPythDydxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythDydxOracleNode": {
            "hash": "0xa17516312b73e7fc9aa6868a86e7a1344f37053e152c7d75bc6dd6d40484a25f",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc6d7ee5d5243dd9dfec2055a7806944ca5b8a6fa13bb926eccec940071346dc7",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57296489800bb8974169adfe35937bf6736507097d13c190d760c557108c7e93a81b0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythDydxOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "dydx_pyth_oracle_id": "0xc6d7ee5d5243dd9dfec2055a7806944ca5b8a6fa13bb926eccec940071346dc7"
        }
      },
      "hash": "b09acd2d03a386a5339f028eff61b550",
      "version": 7
    },
    "invoke.registerPythEosOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythEosOracleNode": {
            "hash": "0x8ef8ab9446b8e2f8e54fd2c2be36c6712ecfb4262e83234f728761cf469aa068",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xdcdc794c8d0556b4397092b2184d84d4b2dd71e40b8b63a9a4964ac2da03063f",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572906ade621dbc31ed0fc9255caaab984a468abe84164fb2ccc76f02a4636d97e310000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythEosOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eos_pyth_oracle_id": "0xdcdc794c8d0556b4397092b2184d84d4b2dd71e40b8b63a9a4964ac2da03063f"
        }
      },
      "hash": "d714070d4b1cbbe0515e1d956f832bda",
      "version": 7
    },
    "invoke.registerPythEtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythEtcOracleNode": {
            "hash": "0x1b53dc88f0bb54a508609a0bb0b4b059d50538544ed37152c546a22a59e864f6",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x38c2b0b9d857f5dda5198e3db5dc530013a5c1cf7d4c76cbd6c2a299af1840bc",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57297f5cc8d963fc5b3d2ae41fe5685ada89fd4f14b435f8050f28c7fd409f40c2d80000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythEtcOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000378",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "etc_pyth_oracle_id": "0x38c2b0b9d857f5dda5198e3db5dc530013a5c1cf7d4c76cbd6c2a299af1840bc"
        }
      },
      "hash": "fc1d695111e779f75ad0bde9674880b1",
      "version": 7
    },
    "invoke.registerPythEthbtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythEthbtcOracleNode": {
            "hash": "0x7c83bea868bcc4c809b2094fe1936683d37a97149dbb17d1b968c0f8b57c4f77",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9021dd5898e510521f7252e181c55729c2cbb3f7f3d505f144c04940dd3434e6",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729c96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythEthbtcOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000381",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ethbtc_pyth_oracle_id": "0x9021dd5898e510521f7252e181c55729c2cbb3f7f3d505f144c04940dd3434e6"
        }
      },
      "hash": "6bd3cf9e8731ee468fcabc0ec64b059c",
      "version": 7
    },
    "invoke.registerPythFilOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythFilOracleNode": {
            "hash": "0xd8d3b2d16d0c51bc4b395bfcae4150a650fac55f2ce96fa5505fa43306e58c4c",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x526c3ae2e56d9ef9659ddd3b37f3b843402baa316d66a43fc11ffbaa1827f020",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythFilOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "fil_pyth_oracle_id": "0x526c3ae2e56d9ef9659ddd3b37f3b843402baa316d66a43fc11ffbaa1827f020"
        }
      },
      "hash": "e14bcf4b6fc272eec7fa250d1ee53f69",
      "version": 7
    },
    "invoke.registerPythFlowOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythFlowOracleNode": {
            "hash": "0x634bdfd33f301e7d5364141ab495a48ca696ed0190b814a7af79505cbe4f5a74",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xcf9c75c6fc7fc38cfd72407b77f5beaa59b36c1978d2da86f2d6ca926c702499",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57292fb245b9a84554a0f15aa123cbb5f64cd263b59e9a87d80148cbffab50c69f300000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythFlowOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "flow_pyth_oracle_id": "0xcf9c75c6fc7fc38cfd72407b77f5beaa59b36c1978d2da86f2d6ca926c702499"
        }
      },
      "hash": "4acd099e3e90da66fbc46264e35a5ecc",
      "version": 7
    },
    "invoke.registerPythFxsOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythFxsOracleNode": {
            "hash": "0x09899c0d76681ba8813b6d36ebeaf9fecabd1e2582613eadd8e3e08e59385f11",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x436fdacfec271c8094f41d085ce2af035079c779f5abc5d3869ff135ed5857d8",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729735f591e4fed988cd38df74d8fcedecf2fe8d9111664e0fd500db9aa78b316b10000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythFxsOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "fxs_pyth_oracle_id": "0x436fdacfec271c8094f41d085ce2af035079c779f5abc5d3869ff135ed5857d8"
        }
      },
      "hash": "f392ff0aa692fedd9fd9876c4e47c7ac",
      "version": 7
    },
    "invoke.registerPythGrtOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythGrtOracleNode": {
            "hash": "0xf58cd53f832f876d57ed0361d62155832b758c373dc0ec7b51a4da6eaad7a279",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1a9ae951d44661f71d5071289ee2c34864c71a44fe83a5133d3a17a046b9546b",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57294d1f8dae0d96236fb98e8f47471a366ec3b1732b47041781934ca3a9bb2f35e70000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythGrtOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "grt_pyth_oracle_id": "0x1a9ae951d44661f71d5071289ee2c34864c71a44fe83a5133d3a17a046b9546b"
        }
      },
      "hash": "e21206c2ced322e4fa86167535425fec",
      "version": 7
    },
    "invoke.registerPythIcpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythIcpOracleNode": {
            "hash": "0xe9caba50237faff50a81fedba92929b4537b51467a27e517e9adc8294158e58a",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x5d8fbcdfa7d81ba448b9d7638e98e1ec6ea1cc460fde3eaf910a8477c26b6e98",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729c9907d786c5821547777780a1e4f89484f3417cb14dd244f2b0a34ea7a554d670000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythIcpOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "icp_pyth_oracle_id": "0x5d8fbcdfa7d81ba448b9d7638e98e1ec6ea1cc460fde3eaf910a8477c26b6e98"
        }
      },
      "hash": "137bdb3c00e4c07800fc582b992d06df",
      "version": 7
    },
    "invoke.registerPythImxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythImxOracleNode": {
            "hash": "0xafa56cbe8c6c41fce4cdfb7deafce871c60b2cfd914324e26279a60a4000fad8",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x5d4530bed7ebeee3d7eac16e3318471502f3bc2a73355200a5967ebf07dcca54",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729941320a8989414874de5aa2fc340a75d5ed91fdff1613dd55f83844d52ea63a20000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythImxOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "imx_pyth_oracle_id": "0x5d4530bed7ebeee3d7eac16e3318471502f3bc2a73355200a5967ebf07dcca54"
        }
      },
      "hash": "bbffa34d606daead7782b7b73621b02c",
      "version": 7
    },
    "invoke.registerPythJtoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythJtoOracleNode": {
            "hash": "0xb4a93a41ca638f7136115290645c57be18177013733f28ee84614e91b6f6c6ee",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2fa344ced880283cea1906b8044c74148c9fa6f0d1f3294d0606cf038d81ea75",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b43660a5f790c69354b0729a5ef9d50d68f1df92107540210b9cccba1f947cc20000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythJtoOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "jto_pyth_oracle_id": "0x2fa344ced880283cea1906b8044c74148c9fa6f0d1f3294d0606cf038d81ea75"
        }
      },
      "hash": "920501e60e6f205d765ea5d1dea30944",
      "version": 7
    },
    "invoke.registerPythJupOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythJupOracleNode": {
            "hash": "0x6be50c755f6113b80be172689b7045d45c9f3a4abe7d7c851bcf5275f713502e",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x81dc2ff51a71f08871755abd3229cc44481e796d2dddeae61021323c44869985",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57290a0408d619e9380abad35060f9192039ed5042fa6f82301d0e48bb52be8309960000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythJupOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000378",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "jup_pyth_oracle_id": "0x81dc2ff51a71f08871755abd3229cc44481e796d2dddeae61021323c44869985"
        }
      },
      "hash": "b47e7cf000a7b25e7fff3efdd282c260",
      "version": 7
    },
    "invoke.registerPythLdoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythLdoOracleNode": {
            "hash": "0x3a46069a0158828de2b49d215a2f83531a465309ef12caf43911eb741eb11e00",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x95cade0fa3244173fa49b53d92f963be8de35a6e0498e40d239c9a3dcf35712b",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729c63e2a7f37a04e5e614c07238bedb25dcc38927fba8fe890597a593c0b2fa4ad0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythLdoOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ldo_pyth_oracle_id": "0x95cade0fa3244173fa49b53d92f963be8de35a6e0498e40d239c9a3dcf35712b"
        }
      },
      "hash": "979cf340111a9c210cb8910e55ba6f0b",
      "version": 7
    },
    "invoke.registerPythLtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythLtcOracleNode": {
            "hash": "0xcac6e5e2881483c0f598ed7239aa9bed795455938000ad3fd6756ff33272ed19",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8e7479e8472b1bae41a09281927224e99cb1082e01f52e4a1f48fbc489f4e859",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57296e3f3fa8253588df9326580180233eb791e03b443a3ba7a1d892e73874e19a540000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythLtcOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ltc_pyth_oracle_id": "0x8e7479e8472b1bae41a09281927224e99cb1082e01f52e4a1f48fbc489f4e859"
        }
      },
      "hash": "c80f2c61de7c2a79f591e6868a8094f0",
      "version": 7
    },
    "invoke.registerPythMemeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythMemeOracleNode": {
            "hash": "0x87f8cf04102a23e7570cae22b89e9ce8f24a7141d1915ff4e5d417934b16218c",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa3b0a1fb9507c9e70bdec75dfcee8df418000f50705b6c573320ed0281b6ff6f",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729cd2cee36951a571e035db0dfad138e6ecdb06b517cc3373cd7db5d3609b7927c0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythMemeOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000381",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "meme_pyth_oracle_id": "0xa3b0a1fb9507c9e70bdec75dfcee8df418000f50705b6c573320ed0281b6ff6f"
        }
      },
      "hash": "958ed16816e9dac925146a4114ae44da",
      "version": 7
    },
    "invoke.registerPythNearOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythNearOracleNode": {
            "hash": "0xe335013be763ce7c3841c52e310e05729342acc9b0b88f77ea6d6c0dfcd588b8",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x81eb5e1f5e3c2d3c73ed340840084d1387ecdf0a236c5313e6604c188ef2b546",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729c415de8d2eba7db216527dff4b60e8f3a5311c740dadb233e13e12547e2267500000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythNearOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "near_pyth_oracle_id": "0x81eb5e1f5e3c2d3c73ed340840084d1387ecdf0a236c5313e6604c188ef2b546"
        }
      },
      "hash": "b70f6fbc11018ee45f528fba9f90c708",
      "version": 7
    },
    "invoke.registerPythPythOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythPythOracleNode": {
            "hash": "0x2fc7775b532186508b834961cbd90d1c68e60d2219daa969d46870180a6348fb",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x677f0fdd08a29165a0a76517fc397605c96da2bb3cac76083163d49da2121c6c",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57290bbf28e9a841a1cc788f6a361b17ca072d0ea3098a1e5df1c3922d06719579ff0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythPythOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pyth_pyth_oracle_id": "0x677f0fdd08a29165a0a76517fc397605c96da2bb3cac76083163d49da2121c6c"
        }
      },
      "hash": "4cd49f0eaeb9f9b7af2b070341e11ed9",
      "version": 7
    },
    "invoke.registerPythRndrOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythRndrOracleNode": {
            "hash": "0x75c4d2477bd25303ef1d273c014c4b2d4cb7227c4c9ca5d4ba870195e46438ee",
            "blockNumber": "13596888",
            "timestamp": "1722962064",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x50c4108d9a18e2179b58dac2a5182356dc8b77731c43a80f2703c3d8523cf71c",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57293d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythRndrOracleNode",
            "gasUsed": 51392,
            "gasCost": "10529215",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "rndr_pyth_oracle_id": "0x50c4108d9a18e2179b58dac2a5182356dc8b77731c43a80f2703c3d8523cf71c"
        }
      },
      "hash": "059482952e75c98efbf0e80294ca3738",
      "version": 7
    },
    "invoke.registerPythSeiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythSeiOracleNode": {
            "hash": "0x34fecbf2d0c1db9be820c5cfa1a30edc95d7e17a776c9e6fbbbd32a0e28936a6",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x957068f86f2fbe115c42d3a141ac5061a186666ad7068d037c8647e0d4ee7c1a",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572953614f1cb0c031d4af66c04cb9c756234adad0e1cee85303795091499a4084eb0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythSeiOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sei_pyth_oracle_id": "0x957068f86f2fbe115c42d3a141ac5061a186666ad7068d037c8647e0d4ee7c1a"
        }
      },
      "hash": "c2d41b9b768d9dc360a95567e96a296c",
      "version": 7
    },
    "invoke.registerPythShibOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythShibOracleNode": {
            "hash": "0x00d345e51871b6a4146f4d5bed3275d15284c519635c8e21c6288552b6915eaf",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xcf5b1033ee72e10976ec2aa17b9cddb5ca2eeaa005a828ae08e5e16d11504cac",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729f0d57deca57b3da2fe63a493f4c25925fdfd8edf834b20f93e1f84dbd1504d4a0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythShibOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "shib_pyth_oracle_id": "0xcf5b1033ee72e10976ec2aa17b9cddb5ca2eeaa005a828ae08e5e16d11504cac"
        }
      },
      "hash": "bb7de751b904adbef61a3f98bb9e550d",
      "version": 7
    },
    "invoke.registerPythStrkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythStrkOracleNode": {
            "hash": "0x176ba24fc02318ceae3b82afea67fa68d66734cb530e7c08491e8ad4565f5009",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4c13accaffdc7b700aa961e3ca0c24a0d7a5ece4ccc19d4a7b6fb8c04861b84e",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57296a182399ff70ccf3e06024898942028204125a819e519a335ffa4579e66cd8700000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythStrkOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000381",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "strk_pyth_oracle_id": "0x4c13accaffdc7b700aa961e3ca0c24a0d7a5ece4ccc19d4a7b6fb8c04861b84e"
        }
      },
      "hash": "541188f5e24e22291cbc9a1020e01500",
      "version": 7
    },
    "invoke.registerPythSushiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythSushiOracleNode": {
            "hash": "0x9d2ba07ae288252f5b9476417c4ffb90e0f8ab94c542a777e5f5a23d403cb879",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xac562de87386fd48cac25550197c70b4b7c6e7ef3d41118b2eda6261ec59db13",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572926e4f737fde0263a9eea10ae63ac36dcedab2aaf629261a994e1eeb6ee0afe530000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythSushiOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sushi_pyth_oracle_id": "0xac562de87386fd48cac25550197c70b4b7c6e7ef3d41118b2eda6261ec59db13"
        }
      },
      "hash": "b63be32db71e9b973eb294e9d6005376",
      "version": 7
    },
    "invoke.registerPythTrxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythTrxOracleNode": {
            "hash": "0x8476aa53dbff31b645498e75516d5fea589c723668ec4469c3c406e01e9fc2d1",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb6fc7227f100b7a940cbfef3ccb52dbd8811888b0c2d2d61f355b45b5da7bbbe",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572967aed5a24fdad045475e7195c98a98aea119c763f272d4523f5bac93a4f33c2b0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythTrxOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "trx_pyth_oracle_id": "0xb6fc7227f100b7a940cbfef3ccb52dbd8811888b0c2d2d61f355b45b5da7bbbe"
        }
      },
      "hash": "7eb88891d78324fb420532b8d00ceea5",
      "version": 7
    },
    "invoke.registerPythUniOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythUniOracleNode": {
            "hash": "0x79cc3b9c4e1e4d9d7440ad4ee70ef52dad662273d94b22139c6985d6df500f01",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x3f3a0d8e7ddf6900b1030a57619ddae64fcfc14076ca630fecbbdeb2fda7e82c",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572978d185a741d07edb3412b09008b7c5cfb9bbbd7d568bf00ba737b456ba1715010000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythUniOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "uni_pyth_oracle_id": "0x3f3a0d8e7ddf6900b1030a57619ddae64fcfc14076ca630fecbbdeb2fda7e82c"
        }
      },
      "hash": "63c1da7334a3d012a1865341e79f8129",
      "version": 7
    },
    "invoke.registerPythXlmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythXlmOracleNode": {
            "hash": "0x408add2458cd4f2ad0b6ae9e4a6e8a79a8e4bb184355422d687fa0552c8e9293",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x50aaeeded38e6e4324620f58a317d81010f9184094cb7ef5272a03460d7646a9",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b7a8eba68a997cd0210c2e1e4ee811ad2d174b3611c22d9ebf16f4cb7e9ba8500000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythXlmOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "xlm_pyth_oracle_id": "0x50aaeeded38e6e4324620f58a317d81010f9184094cb7ef5272a03460d7646a9"
        }
      },
      "hash": "6440ea81b046dc64cf5380736ca12882",
      "version": 7
    },
    "invoke.registerPythXrpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythXrpOracleNode": {
            "hash": "0x822401d6c07ae63d943704650fe1ce11259610e55e53079c27fd2a0c6b63d4f9",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x15022ea086daf458da80c8c2392c3514c7b2e705ac0f6eed2cf7b1fe0c32879e",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729ec5d399846a9209f3fe5881d70aae9268c94339ff9817e8d18ff19fa05eea1c80000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythXrpOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "xrp_pyth_oracle_id": "0x15022ea086daf458da80c8c2392c3514c7b2e705ac0f6eed2cf7b1fe0c32879e"
        }
      },
      "hash": "6e0e12203fb263eb53ffdd8ac8867774",
      "version": 7
    },
    "invoke.registerPythYfiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythYfiOracleNode": {
            "hash": "0x91ca3533f9c17c8d5bb1df30b2a80cd3993ba3ead58de07aac3e8be35d065b30",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd57712321e9c0e8ab79c619a250a1573f12597e6b95d0f1d81060b9f6d6256a1",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729425f4b198ab2504936886c1e93511bb6720fbcf2045a4f3c0723bb213846022f0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythYfiOracleNode",
            "gasUsed": 146116,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "yfi_pyth_oracle_id": "0xd57712321e9c0e8ab79c619a250a1573f12597e6b95d0f1d81060b9f6d6256a1"
        }
      },
      "hash": "52aba89a878e3506a0a0c7db1f9e3edb",
      "version": 7
    },
    "invoke.registerAaveOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerAaveOracleNode": {
            "hash": "0xa977e381294d02a69be0381ebad39544f15151c7892b50680ffbb20d06e89294",
            "blockNumber": "17174368",
            "timestamp": "1730117024",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4c443d37d5f369861dc29280fc6c68c1f79e3c597f682eeb1c8580679932029d",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xe5923091472b20af0b486b34daf9b0ddf28eb67cf3a87cbd567f1019106a9a46",
                      "0xc54dea6295eccb62957bb59c878a691fd9a291d4031277910c51aa86db4f4d09"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerAaveOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "aave_oracle_id": "0x4c443d37d5f369861dc29280fc6c68c1f79e3c597f682eeb1c8580679932029d"
        }
      },
      "hash": "def0860d162dac3ec88dd40a5a0a9a60",
      "version": 7
    },
    "invoke.registerAdaOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerAdaOracleNode": {
            "hash": "0x8a2ac673724c5930c1e4fec81280d7e1676a9288183f1989c21b34edf77e8eae",
            "blockNumber": "17174371",
            "timestamp": "1730117030",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x017d02774d24bd3dea6bcd3e8fff53cf52ae37cf3c31a2bb387a5d2e4c81bcb8",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x9be9b090eebca93439d17f254a374f6b8bae48d5fb76a31127d3b5fd322606c9",
                      "0xe4b5b231633ffdeed361e9d4395f63b22c12f71b1a1e4859bdd4336af4663fd6"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerAdaOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ada_oracle_id": "0x017d02774d24bd3dea6bcd3e8fff53cf52ae37cf3c31a2bb387a5d2e4c81bcb8"
        }
      },
      "hash": "738d51c9593918d34572fe902053f13e",
      "version": 7
    },
    "invoke.registerAlgoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerAlgoOracleNode": {
            "hash": "0x353af7fa16a60d64e6daf4ca66354d2cb5df8ade2b3a09d4fa6c27fe5ea9a2b1",
            "blockNumber": "17174373",
            "timestamp": "1730117034",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa10195b650b54f488406a9fe4d521c4b794c2103f52312f9a73a2505896968e0",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xd8a3a0204bcea0c2ed1f920788d19bf33678fd01515fab3519523b58d272002f",
                      "0x24e529d02c817b9c2ebfc211353ee2cc15a80f48c9846ebd8cbf24596341a0bd"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerAlgoOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "algo_oracle_id": "0xa10195b650b54f488406a9fe4d521c4b794c2103f52312f9a73a2505896968e0"
        }
      },
      "hash": "9095a37b3a1ae35c3df4e16a2d86d3fb",
      "version": 7
    },
    "invoke.registerAptOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerAptOracleNode": {
            "hash": "0xce8ed1f20bc90196b0012d33cd834f0ee20d3c0211009918abfae4a407dc04d4",
            "blockNumber": "17174375",
            "timestamp": "1730117038",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x75a04aca68bdb7776a596132e302ecde961ad4087ea9e0ae114547a2abc73a96",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xd6d2ed1ae15d4aab7fe67071d70b179a14ba57c10edf60859a82f1357a404912",
                      "0xcf31d11334dda541dc651591f22b9c89fdd72666bab35559ba270f2f947ba954"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerAptOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "apt_oracle_id": "0x75a04aca68bdb7776a596132e302ecde961ad4087ea9e0ae114547a2abc73a96"
        }
      },
      "hash": "aa4cebd691d51ea219f25746cfb78472",
      "version": 7
    },
    "invoke.registerAtomOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerAtomOracleNode": {
            "hash": "0xaa27dd040b5126252a8e4ea87bda40a494b88d0e37362b3c632001c8129ae87f",
            "blockNumber": "17174381",
            "timestamp": "1730117050",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x5935824af7bf7d73cf04489d38b24426afd80d57ea5d47049d9295dc9870fd43",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x684583f6aa71b42e629074e6c7dfe99b46736bafb103b5797492ef02e02f6691",
                      "0x50ba92f37df74b48d60000ad37f41a550aed71772dc48148dfd0c1e658006263"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerAtomOracleNode",
            "gasUsed": 51841,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "atom_oracle_id": "0x5935824af7bf7d73cf04489d38b24426afd80d57ea5d47049d9295dc9870fd43"
        }
      },
      "hash": "3176d08f0c25b914942f4da9f09841cd",
      "version": 7
    },
    "invoke.registerAxsOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerAxsOracleNode": {
            "hash": "0x42763e7a161bdf381e85affab278623371ecbadf277c885f847efff70a467567",
            "blockNumber": "17174387",
            "timestamp": "1730117062",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x33ec6ffbcd3d67bc9e6adf23e4c821ccf625ffbe5a15a9174bf18d2f0b06268c",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x67fd06964b1068a0849d50622b6b52665602e1335344390a2b288840431e4690",
                      "0x4fa6374aed82a6a865433095990a0bdef796bfceca6222dd6624d074cc1345ae"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerAxsOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "axs_oracle_id": "0x33ec6ffbcd3d67bc9e6adf23e4c821ccf625ffbe5a15a9174bf18d2f0b06268c"
        }
      },
      "hash": "8c8ade25b1dbcb947e41b45356f125bd",
      "version": 7
    },
    "invoke.registerBalOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerBalOracleNode": {
            "hash": "0x792c0f770f8295fc07aaefc30de5142ffae575b1da252c4dffccff490ded0328",
            "blockNumber": "17174389",
            "timestamp": "1730117066",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa7d0f072dcb76901053e8f835137da5a415bd393279e971d31015c55f34dcff0",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xb5f2bd407cd6918acdf63fb25d26593786dcc3bd84d3b6cad126196aa67b0da3",
                      "0x2ecaca27a7b41095c53e8b2ce48533bdff6245d735890bba698fb1b0e8a6e078"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerBalOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bal_oracle_id": "0xa7d0f072dcb76901053e8f835137da5a415bd393279e971d31015c55f34dcff0"
        }
      },
      "hash": "9e3778824413e3ccbd8def622b06474a",
      "version": 7
    },
    "invoke.registerBchOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerBchOracleNode": {
            "hash": "0xa82773fa89721af7f1ea5138aa62f11ee4dc38540dfdcc1478a61c8f862e5ae2",
            "blockNumber": "17174391",
            "timestamp": "1730117070",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8cfaa6bb923668df3331cabb70b3234a05b1cbd7b3f80f7d06784de9d3a15523",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xa0a4aee691b75f0d3a2a41b930917e281c9fed61b2f4182d396f4c37056b1981",
                      "0x54593000884b6e9b8f5850c8758d5e0256e1970a148fb70afcad8809c2bd31cc"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerBchOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000383",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bch_oracle_id": "0x8cfaa6bb923668df3331cabb70b3234a05b1cbd7b3f80f7d06784de9d3a15523"
        }
      },
      "hash": "786ca21925858ec2ef57149c9ff5ef9f",
      "version": 7
    },
    "invoke.registerBlurOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerBlurOracleNode": {
            "hash": "0x0600aad9cb5be3bd8a96ccae2ccfa61e828adb3b42a63b04a42884415662202a",
            "blockNumber": "17174393",
            "timestamp": "1730117074",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x0e34d973f4252ebc9aa56de1d1cf7f2d51cc6f65682f92d4c62c806812c30348",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x69754aaaad6b9a1e565fd42c8d136a7d74312a42db73880ae27e95addc541103",
                      "0xbb74fa54da4dcae3480f449b692d480c14586a707b31827de81056bfdec957df"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerBlurOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "blur_oracle_id": "0x0e34d973f4252ebc9aa56de1d1cf7f2d51cc6f65682f92d4c62c806812c30348"
        }
      },
      "hash": "de63931e1af2072f47383e15c7ac15e1",
      "version": 7
    },
    "invoke.registerCompOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerCompOracleNode": {
            "hash": "0x0a7fc1406139ba21d5206ffb78bf562030aa2d3f21271afa3bae8935d738994a",
            "blockNumber": "17174407",
            "timestamp": "1730117102",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1ed9041c17b0ffb0f3b83d49ba2a401a6b5ea4c57c74e95c6682b2804b3e0359",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x397b9e0697b27f57f0617973c7e47a7926f83f9067aa37af2dd8bfed24d089e0",
                      "0x96885bd00434c57cf4a378d98ba8c3977ff495aea26d8511029963d431aff7d9"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerCompOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "comp_oracle_id": "0x1ed9041c17b0ffb0f3b83d49ba2a401a6b5ea4c57c74e95c6682b2804b3e0359"
        }
      },
      "hash": "4151558c7ea51d61345be49b114d1316",
      "version": 7
    },
    "invoke.registerCrvOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerCrvOracleNode": {
            "hash": "0x34f6a47dced8a6d8f0bd92ac711cec96ea68fe82b37c2568f1c1ff7b7d1cabcd",
            "blockNumber": "17174409",
            "timestamp": "1730117106",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x60df08b4a3ea7c43f42d92480a54ce6e88ea124def902af734d676041ef454a0",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xea184fa95d78b12bf86bf9a6d3d11fa572052de496c5213a089d97ef5bc37f07",
                      "0xddadf1450a9c229e4a15fb613af5b3bcf44167cb9d133702ea50b9dd83ed8f5c"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerCrvOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "crv_oracle_id": "0x60df08b4a3ea7c43f42d92480a54ce6e88ea124def902af734d676041ef454a0"
        }
      },
      "hash": "7093f08db95faff5a8144e1e33f34593",
      "version": 7
    },
    "invoke.registerDotOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerDotOracleNode": {
            "hash": "0x515a379d4ed1f9bf5e84c0ab62feaf3f77c2fa9ed69e062c34c742fa5f233e02",
            "blockNumber": "17174413",
            "timestamp": "1730117114",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x93552ab5ec8eaec6491242d48ad055f7fe2b904b0ceeb0f211ce946757e00bd5",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x41749c87c58c03174dc3813d83f70ee00e04202d3e73d79354da4910f780fb47",
                      "0x9680da1489b8939f5daf8c35bc7904eae9e280108ccf12987f5a2cbd40c75dc6"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerDotOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "dot_oracle_id": "0x93552ab5ec8eaec6491242d48ad055f7fe2b904b0ceeb0f211ce946757e00bd5"
        }
      },
      "hash": "bb10107d04f9dc346b38dac520fd2f4e",
      "version": 7
    },
    "invoke.registerDydxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerDydxOracleNode": {
            "hash": "0xca99da491187e914381a0f90262515dd6366fe1a5c333fca559ae032cb3cca50",
            "blockNumber": "17174415",
            "timestamp": "1730117118",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x93ee9238a3e704ed5e065fd99052e6c5122b9a081d9da6ca83cff2cd96b79375",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xc6d7ee5d5243dd9dfec2055a7806944ca5b8a6fa13bb926eccec940071346dc7",
                      "0x8552810205aa09ad60c0bda485f4ceb38f7d1d80de635fc8d6c635992ff7f744"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerDydxOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000378",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "dydx_oracle_id": "0x93ee9238a3e704ed5e065fd99052e6c5122b9a081d9da6ca83cff2cd96b79375"
        }
      },
      "hash": "8e85b6c0c97378b851f99a784d979cb0",
      "version": 7
    },
    "invoke.registerEosOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEosOracleNode": {
            "hash": "0x2d8d6052302180b930eb9be1557f1e6281486eafde9da878178c8c6bb20be387",
            "blockNumber": "17174419",
            "timestamp": "1730117126",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xe496c5a9745043a1827303a14954582d2364284f37730479b9140231d395b243",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xdcdc794c8d0556b4397092b2184d84d4b2dd71e40b8b63a9a4964ac2da03063f",
                      "0xba4c605a22470fc83f211443a23b87de6db874e7cebaeac86d35c55707b24aa9"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEosOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000377",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eos_oracle_id": "0xe496c5a9745043a1827303a14954582d2364284f37730479b9140231d395b243"
        }
      },
      "hash": "625c0b18586fc1d52a10e6c80881691e",
      "version": 7
    },
    "invoke.registerEtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEtcOracleNode": {
            "hash": "0x57e3f9c4e00018923d39f198585fcd8dedd413d8f3acbf0fac6a833d335e41ac",
            "blockNumber": "17174422",
            "timestamp": "1730117132",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb844e647ba2faa7fcb3385684a34c5798ac3e62aa8ef26d4997f0224b9938ed9",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x38c2b0b9d857f5dda5198e3db5dc530013a5c1cf7d4c76cbd6c2a299af1840bc",
                      "0x700b5a47df847d5ef6d4002fe3b02c54a0c7408ac3538d038c20edf20b9fe112"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEtcOracleNode",
            "gasUsed": 51853,
            "gasCost": "1000377",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "etc_oracle_id": "0xb844e647ba2faa7fcb3385684a34c5798ac3e62aa8ef26d4997f0224b9938ed9"
        }
      },
      "hash": "09a60f7c5ebaa916bbd0b595eb2c02e9",
      "version": 7
    },
    "invoke.registerEthbtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerEthbtcOracleNode": {
            "hash": "0xf1d821d58ccaab02f6376b947438637d5c6fc2a38152bc16c0fda082a52785e4",
            "blockNumber": "17174426",
            "timestamp": "1730117140",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x20258bba5101aac70fd7bfbe72ee94f35e60f2e6fc903341824d5e116beaff3a",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x9021dd5898e510521f7252e181c55729c2cbb3f7f3d505f144c04940dd3434e6",
                      "0x49346049c9826f44fe687e9ab2477183a3a4fb5ec9446ae0913e6dbb5d024ca0"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerEthbtcOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000375",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ethbtc_oracle_id": "0x20258bba5101aac70fd7bfbe72ee94f35e60f2e6fc903341824d5e116beaff3a"
        }
      },
      "hash": "3ccebf5d7b081d9db0c0ca2bc182880a",
      "version": 7
    },
    "invoke.registerFilOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerFilOracleNode": {
            "hash": "0x64536bd56b30472c801b75e747a9ebbad82923d707674ef779ce301387b7ef4b",
            "blockNumber": "17174430",
            "timestamp": "1730117148",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x2ec565bd3d47a23d9b8a01d89afebb842224613105a1a169995af24a90ccb33e",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x526c3ae2e56d9ef9659ddd3b37f3b843402baa316d66a43fc11ffbaa1827f020",
                      "0x9156d1252a93c171962c583af45ef326f64daf2577c5bbb144f961e1a57a2c17"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerFilOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000375",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "fil_oracle_id": "0x2ec565bd3d47a23d9b8a01d89afebb842224613105a1a169995af24a90ccb33e"
        }
      },
      "hash": "3b5b6384ea9da69c83a519f729beccf4",
      "version": 7
    },
    "invoke.registerFlowOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerFlowOracleNode": {
            "hash": "0xc915694a55d6199f082926bb2d152a01af5b2ebd50b752e381eff9da18ff61a1",
            "blockNumber": "17174432",
            "timestamp": "1730117152",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x382ea67143c5f5ac64f1b869d516ce525bd0f76d1e6e72d2c9dccc629cc11561",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xcf9c75c6fc7fc38cfd72407b77f5beaa59b36c1978d2da86f2d6ca926c702499",
                      "0xc3d5cc15e68f7f71991c4498bea4c2f03b1213e5f205ad1a5094fdd99546bb52"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerFlowOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000374",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "flow_oracle_id": "0x382ea67143c5f5ac64f1b869d516ce525bd0f76d1e6e72d2c9dccc629cc11561"
        }
      },
      "hash": "7bac96743b3325b1e5eb6ac1e03d4197",
      "version": 7
    },
    "invoke.registerFxsOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerFxsOracleNode": {
            "hash": "0xae2ad55d9f6a62e2641fb63dcfab934d663f92f443bcb7ddb93b42cf21d68989",
            "blockNumber": "17174438",
            "timestamp": "1730117164",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x24a376e1ca18b514d506338b4b72b4a4bc75647568121223b7b80ae914f80dfd",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x436fdacfec271c8094f41d085ce2af035079c779f5abc5d3869ff135ed5857d8",
                      "0x2334df269aa38bf8c0001157f8cf60f64dd0cab3a43bf5bea5f2325a5c55c86c"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerFxsOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000372",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "fxs_oracle_id": "0x24a376e1ca18b514d506338b4b72b4a4bc75647568121223b7b80ae914f80dfd"
        }
      },
      "hash": "4dd2dd303042f18fc14baa60e68df91b",
      "version": 7
    },
    "invoke.registerGrtOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerGrtOracleNode": {
            "hash": "0x68170c800e151b5d0c00735e20ed1c6dac21aad4404f21baa407691d675865e4",
            "blockNumber": "17174445",
            "timestamp": "1730117178",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x186584614ebde9668ea9fbd942c60397e27dab9f9433a97c2980f25f002f3b10",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x1a9ae951d44661f71d5071289ee2c34864c71a44fe83a5133d3a17a046b9546b",
                      "0x76c58e9e7a7b70aeb8f6363844273519ee53a20dbcc90c1115f3f91478f552bc"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerGrtOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "grt_oracle_id": "0x186584614ebde9668ea9fbd942c60397e27dab9f9433a97c2980f25f002f3b10"
        }
      },
      "hash": "6dfc787caa0fdcbf059cf3979144811e",
      "version": 7
    },
    "invoke.registerIcpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerIcpOracleNode": {
            "hash": "0x9f767398809fe78d321922c02224eacfb3f4197cd1cf5557bbce4f1c91717a61",
            "blockNumber": "17174447",
            "timestamp": "1730117182",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x43d313681c1f19233879e6a5e56b3a69c0aa4f2f24e5f48c2faad94972757e7a",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x5d8fbcdfa7d81ba448b9d7638e98e1ec6ea1cc460fde3eaf910a8477c26b6e98",
                      "0x0ab6855c6068dedb7cb931e745c86a97f1bae6d629b954e999cffe65337ef430"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerIcpOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "icp_oracle_id": "0x43d313681c1f19233879e6a5e56b3a69c0aa4f2f24e5f48c2faad94972757e7a"
        }
      },
      "hash": "442d73670caa9a993c988bbff088d751",
      "version": 7
    },
    "invoke.registerImxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerImxOracleNode": {
            "hash": "0x76c1e3a53486cc83d7b96b853b4e5ab3e7dc7e677f6c24ff4e69fb2cfc8b0c40",
            "blockNumber": "17174449",
            "timestamp": "1730117186",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x337493bcd57fbf5f360a615403d5ed992bf7e5ce2dea8a264dd66de9a700e8e8",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x5d4530bed7ebeee3d7eac16e3318471502f3bc2a73355200a5967ebf07dcca54",
                      "0x1156163f02a1178db4ae886831a0a62518a0318cf9176f36674aec717d4d549f"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerImxOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "imx_oracle_id": "0x337493bcd57fbf5f360a615403d5ed992bf7e5ce2dea8a264dd66de9a700e8e8"
        }
      },
      "hash": "d25aae5ef42e652cde7ab8f92d024345",
      "version": 7
    },
    "invoke.registerJtoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerJtoOracleNode": {
            "hash": "0x6e4e70cdf4f5f2df2d969bc92fff91a0ef598a456e5226186e0eae92d51f4583",
            "blockNumber": "17174453",
            "timestamp": "1730117194",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x6f2c4c8414cf47730c88bbead98f0c5939d357d9950739ba6de5bdb206e8a092",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x2fa344ced880283cea1906b8044c74148c9fa6f0d1f3294d0606cf038d81ea75",
                      "0xe99dd49bfe4bb8bd57219cbccd52dd61b26099882992357bb7b796b24c670e2f"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerJtoOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "jto_oracle_id": "0x6f2c4c8414cf47730c88bbead98f0c5939d357d9950739ba6de5bdb206e8a092"
        }
      },
      "hash": "190a330382f800193f85973a5abcd081",
      "version": 7
    },
    "invoke.registerJupOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerJupOracleNode": {
            "hash": "0xf04c9391c19a7f9399b9ff91d44a486ba82890432b994b9a50f57031bf1b1497",
            "blockNumber": "17174455",
            "timestamp": "1730117198",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x907c4993a9c30698887e5ec5370cf24ea84ade41d0033c301ad330512b8cbf26",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x81dc2ff51a71f08871755abd3229cc44481e796d2dddeae61021323c44869985",
                      "0x680bde49c5fced41ee3aaaf8297a3853a83c18a7cf873f3092595365b17f53f4"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerJupOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "jup_oracle_id": "0x907c4993a9c30698887e5ec5370cf24ea84ade41d0033c301ad330512b8cbf26"
        }
      },
      "hash": "f6b982b6a55f377ea6c46d1a81785b16",
      "version": 7
    },
    "invoke.registerLdoOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLdoOracleNode": {
            "hash": "0x3de47f525b3cd9eaac7c5691bbf3119089f935a5fa8de9f6f3e8a13dad8f4968",
            "blockNumber": "17174457",
            "timestamp": "1730117202",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x63513ea9761d6cbad27aa7e255b09fc25a238180be68f2d63fc80554fc94761b",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x95cade0fa3244173fa49b53d92f963be8de35a6e0498e40d239c9a3dcf35712b",
                      "0x37dacec3bfa29b7a6956c406ccb618bcbf621515b34f5cb0842fe8c6be5ec5ee"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLdoOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ldo_oracle_id": "0x63513ea9761d6cbad27aa7e255b09fc25a238180be68f2d63fc80554fc94761b"
        }
      },
      "hash": "dbcc6f3cda4c9ff725a209a9e3db5a77",
      "version": 7
    },
    "invoke.registerLtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLtcOracleNode": {
            "hash": "0x33dbc5c25293c2db790ee11991ee76aeb3bd95e2c1d244a72360bfebac811af6",
            "blockNumber": "17174461",
            "timestamp": "1730117210",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9bc97f01548fa9cf9ad463d579f7d9194e837e4ac2cc3852e96da139b4dd232c",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x8e7479e8472b1bae41a09281927224e99cb1082e01f52e4a1f48fbc489f4e859",
                      "0x5ae8d0ffd342d961325f2235bce43aa0afb509fd3d89de73eca8748d96ae1bed"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLtcOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ltc_oracle_id": "0x9bc97f01548fa9cf9ad463d579f7d9194e837e4ac2cc3852e96da139b4dd232c"
        }
      },
      "hash": "558e41a99fb6b55719c6d928f0e2329c",
      "version": 7
    },
    "invoke.registerMemeOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerMemeOracleNode": {
            "hash": "0x26415cf80bd717d186057fb0f1bd6570eda5104eeab492a72f10a9848f35ac8a",
            "blockNumber": "17174465",
            "timestamp": "1730117218",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xea8f082528b875706b9558f094b1484f547818bcd70ea5fb0bf48927dbaf9c15",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xa3b0a1fb9507c9e70bdec75dfcee8df418000f50705b6c573320ed0281b6ff6f",
                      "0x6a033b251668a7fb5cedef12f698a59d08724f1be8637fc92f7ad07cd34f041c"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerMemeOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "meme_oracle_id": "0xea8f082528b875706b9558f094b1484f547818bcd70ea5fb0bf48927dbaf9c15"
        }
      },
      "hash": "35a56720be05551bee713bb96d2bdd8d",
      "version": 7
    },
    "invoke.registerNearOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerNearOracleNode": {
            "hash": "0x864f1063f9cd0de8219d037fc3d927b109c511712697e931b88f51560c6ac95a",
            "blockNumber": "17174830",
            "timestamp": "1730117948",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x3d04113cb2b82719011da6bb644575c6c83b27a97dd4ae36bd47fd8e4370f63f",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x81eb5e1f5e3c2d3c73ed340840084d1387ecdf0a236c5313e6604c188ef2b546",
                      "0x500b460744d9e23986280ad30f1cc053274ebcd132d70cf8d6597ecafcb29ff1"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerNearOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000328",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "near_oracle_id": "0x3d04113cb2b82719011da6bb644575c6c83b27a97dd4ae36bd47fd8e4370f63f"
        }
      },
      "hash": "d3a35f6a03e97e51e67251f0d3f7d4ca",
      "version": 7
    },
    "invoke.registerPythOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythOracleNode": {
            "hash": "0xfe9125c9827cd2826e748a45e5cf8aff438b129f9d7ffd8baf0ac3b10b33f906",
            "blockNumber": "17174475",
            "timestamp": "1730117238",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xfe8a456bca19e452bf807b5ad0e4b7d55c2353ec7f5a1dd23672dc58fab90539",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x677f0fdd08a29165a0a76517fc397605c96da2bb3cac76083163d49da2121c6c",
                      "0x757d21be44d3ba706aa82a547b8eeb141c47afd058ff6caf5ef1e3e952a3f2ec"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pyth_oracle_id": "0xfe8a456bca19e452bf807b5ad0e4b7d55c2353ec7f5a1dd23672dc58fab90539"
        }
      },
      "hash": "964a8707ebde5815e2a92afd44d89465",
      "version": 7
    },
    "invoke.registerRndrOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerRndrOracleNode": {
            "hash": "0xa8d0091ba90d27c8ff2febb3ef16ad7e9e1ce1e8e682ae93ea61e9440d0aa95f",
            "blockNumber": "17174477",
            "timestamp": "1730117242",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb04e06c4be2997e52efe0789ef28aa4a968b7fb0f7e356832829f347ea912c6c",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x50c4108d9a18e2179b58dac2a5182356dc8b77731c43a80f2703c3d8523cf71c",
                      "0xd4a7c8be9b405623982962e51d34c983c394b074083089be847200e62eb2e017"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerRndrOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "rndr_oracle_id": "0xb04e06c4be2997e52efe0789ef28aa4a968b7fb0f7e356832829f347ea912c6c"
        }
      },
      "hash": "ed0c05ada1e343341376b6fe7596adcf",
      "version": 7
    },
    "invoke.registerSeiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSeiOracleNode": {
            "hash": "0x8065bde8c44618660795692917f7a63e7b3f9bc71bc41d9f22ec3cd09b26fc14",
            "blockNumber": "17174481",
            "timestamp": "1730117250",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x07c96d055614b8b1eb3fd8ded27207d9d21f9093a48aa7be135bcc5ebb14bc5f",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x957068f86f2fbe115c42d3a141ac5061a186666ad7068d037c8647e0d4ee7c1a",
                      "0x890613ab0c44e20ba9d725b798c012931fadb194f333450f55e632612a7e9bf9"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSeiOracleNode",
            "gasUsed": 220723,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sei_oracle_id": "0x07c96d055614b8b1eb3fd8ded27207d9d21f9093a48aa7be135bcc5ebb14bc5f"
        }
      },
      "hash": "1f95847eec02f7fc6d63771226fca7ef",
      "version": 7
    },
    "invoke.registerShibOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerShibOracleNode": {
            "hash": "0x572c796037a3aaed060f074426972a43823b8962ef31bc7fe9d7a98a24fd90d6",
            "blockNumber": "17174483",
            "timestamp": "1730117254",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x829ccc3beb13d5788d0cd915e3d560462b0b6698d1f8b3730c44a295fc190457",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xcf5b1033ee72e10976ec2aa17b9cddb5ca2eeaa005a828ae08e5e16d11504cac",
                      "0x06fe6902e60af778c789412f9b756b864998a98a50b21317e057f0095c9e0c6a"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerShibOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000371",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "shib_oracle_id": "0x829ccc3beb13d5788d0cd915e3d560462b0b6698d1f8b3730c44a295fc190457"
        }
      },
      "hash": "ebee1d0e27775d8cd6fb22448bd71ba6",
      "version": 7
    },
    "invoke.registerStrkOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerStrkOracleNode": {
            "hash": "0x7f20a718995b563b75a7e6d40ce745c02042da3b91163dd9887f01a6dab8936a",
            "blockNumber": "17174489",
            "timestamp": "1730117266",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xbae0fca08a5abafcc87dca7dc235f5b1aec76a008d3d26db80fbc2077837c438",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x4c13accaffdc7b700aa961e3ca0c24a0d7a5ece4ccc19d4a7b6fb8c04861b84e",
                      "0x2ee5eec5f6218e0d271d5bae7503ef4f492e9dd0da5b40a4b5031749ecd7dc48"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerStrkOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "strk_oracle_id": "0xbae0fca08a5abafcc87dca7dc235f5b1aec76a008d3d26db80fbc2077837c438"
        }
      },
      "hash": "d5ea80aa43d414ad8021dc42de4f8bcd",
      "version": 7
    },
    "invoke.registerSushiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSushiOracleNode": {
            "hash": "0x2afb56aba137e843818296febe68abe16fd4e1af8b80a508b97f26091f170b82",
            "blockNumber": "17174496",
            "timestamp": "1730117280",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x49ed80809a36eaea07b1fc66bc6125bcd1ac9a84a5d8b4e970616b975ab4a587",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xac562de87386fd48cac25550197c70b4b7c6e7ef3d41118b2eda6261ec59db13",
                      "0x34a31c6cb67502374b1de1c168798ec8af6d9506a1360e52c78ba54d606c3b48"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSushiOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sushi_oracle_id": "0x49ed80809a36eaea07b1fc66bc6125bcd1ac9a84a5d8b4e970616b975ab4a587"
        }
      },
      "hash": "c9b6849fb22b9965254a5cb86e84755b",
      "version": 7
    },
    "invoke.registerTrxOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerTrxOracleNode": {
            "hash": "0xca7001fc19c1456585ad7fefd2b16fef47cc91f8d4a347168217c27f8babd98d",
            "blockNumber": "17174504",
            "timestamp": "1730117296",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1020228d24f0ce203fdf7bb98de43154a8c2321522e1b399aa0c1c302466f0ed",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xb6fc7227f100b7a940cbfef3ccb52dbd8811888b0c2d2d61f355b45b5da7bbbe",
                      "0xc45006361e6873d345c4cf0d0bb9622fe89dc2a9c36a693c6ef5a93b344a45c5"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerTrxOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "trx_oracle_id": "0x1020228d24f0ce203fdf7bb98de43154a8c2321522e1b399aa0c1c302466f0ed"
        }
      },
      "hash": "3ac4cdfadb5ca3ced7f4f9d457207ba6",
      "version": 7
    },
    "invoke.registerUniOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerUniOracleNode": {
            "hash": "0xa143109cb10e8882f9d10cd6e14d2dd699f96a32a6f065ab2ddc1bf3042f55fe",
            "blockNumber": "17174506",
            "timestamp": "1730117300",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x94ad5d79e05fae9c56b06899d518208df453cb2509b8d564036920cc68b87d4a",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x3f3a0d8e7ddf6900b1030a57619ddae64fcfc14076ca630fecbbdeb2fda7e82c",
                      "0x31f8b9bcb5ac0a37295d721e01b425e0da02cd5ed02e1865dcf3d6f0fc13925e"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerUniOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "uni_oracle_id": "0x94ad5d79e05fae9c56b06899d518208df453cb2509b8d564036920cc68b87d4a"
        }
      },
      "hash": "af633506793f9a891a579126f0c57068",
      "version": 7
    },
    "invoke.registerXlmOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerXlmOracleNode": {
            "hash": "0xf28f149997e0678665d26b2a6911fa05d8bfed3697489c934ff026555f4aa68c",
            "blockNumber": "17174514",
            "timestamp": "1730117316",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd395b3a82c393546588965c0fd419d72a208a64f8fb18f73a47affe060947d78",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x50aaeeded38e6e4324620f58a317d81010f9184094cb7ef5272a03460d7646a9",
                      "0xada7895ece3923c0a778d40029aa79418d0aa38fa4a37b542cad492b1c7d6bf9"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerXlmOracleNode",
            "gasUsed": 51865,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "xlm_oracle_id": "0xd395b3a82c393546588965c0fd419d72a208a64f8fb18f73a47affe060947d78"
        }
      },
      "hash": "4cf2aaf8657dad9d7a7c7f7d2a5b4553",
      "version": 7
    },
    "invoke.registerXrpOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerXrpOracleNode": {
            "hash": "0xbc1cecebe6f5317328ceb5d9a7f1982003d8111a84caf4fddc785a5a958a63bc",
            "blockNumber": "17174516",
            "timestamp": "1730117320",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x31f0e6c549f280a1483ea9d1a338bc652f73741c50d08b88efc23a536de00c81",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x15022ea086daf458da80c8c2392c3514c7b2e705ac0f6eed2cf7b1fe0c32879e",
                      "0xb07ef6acf4191a6083547d5ff5fb43b05d8645926c3badf870a7ddffbe3e040b"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerXrpOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "xrp_oracle_id": "0x31f0e6c549f280a1483ea9d1a338bc652f73741c50d08b88efc23a536de00c81"
        }
      },
      "hash": "e179010de3c86fdbe65a23f9a06bdce3",
      "version": 7
    },
    "invoke.registerYfiOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerYfiOracleNode": {
            "hash": "0x486cb04ad786c25c873426c03ca272a35054c90be4442e539b2765e5fa038e08",
            "blockNumber": "17174518",
            "timestamp": "1730117324",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x099a9d8f5155387acc6b7fa1bb51056049aa736929aee02313efefefbd70b5a5",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xd57712321e9c0e8ab79c619a250a1573f12597e6b95d0f1d81060b9f6d6256a1",
                      "0x997b4e63b6529d7609415e43845f9bbce4a5dfe477d6f9ea01aa4769580f69ce"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerYfiOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "yfi_oracle_id": "0x099a9d8f5155387acc6b7fa1bb51056049aa736929aee02313efefefbd70b5a5"
        }
      },
      "hash": "d120537c59ea0fc4a2abc70b6fca253b",
      "version": 7
    },
    "provision.perpsLowCapFactory": {
      "artifacts": {
        "imports": {
          "perpsLowCapFactory": {
            "url": "ipfs://QmczSX8hperhy7v2DNFkg44VtWA3JpN4eY37wRJHJVBv29",
            "tags": [
              "latest"
            ],
            "target": "synthetix-perps-market:3.9.0@andromeda",
            "preset": "andromeda",
            "contracts": {
              "AsyncOrderCancelModule": {
                "address": "0x5F949c18678bb62FF77034C6d2c8B4E7AAB2D63C",
                "abi": [
                  "error AcceptablePriceNotExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "error AccountLiquidatable(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error OrderNotValid()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error SettlementWindowExpired(uint256 timestamp, uint256 settlementTime, uint256 settlementExpiration)",
                  "error SettlementWindowNotOpen(uint256 timestamp, uint256 settlementTime)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event AccountCharged(uint128 accountId, int256 amount, uint256 accountDebt)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed accountId, uint256 desiredPrice, uint256 fillPrice, int128 sizeDelta, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function cancelOrder(uint128 accountId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xc78f038b16f9bbe2426977f6f0355752ca9115b3ed28a24d06fb27a173809217",
                "deployTxnBlockNumber": "17158784",
                "deployTimestamp": "1730085856",
                "sourceName": "contracts/modules/AsyncOrderCancelModule.sol",
                "contractName": "AsyncOrderCancelModule",
                "deployedOn": "contract.AsyncOrderCancelModule",
                "gasUsed": 2093128,
                "gasCost": "1000254"
              },
              "AsyncOrderModule": {
                "address": "0x74530D071D5540c21767cD7689a586B8D8Bf0c06",
                "abi": [
                  "error AccountLiquidatable(uint128 accountId)",
                  "error AccountNotFound(uint128 accountId)",
                  "error ExceedsMarketCreditCapacity(int256 delegatedCollateral, int256 newLockedCredit)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMargin(int256 availableMargin, uint256 minMargin)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error KeeperCostsNotSet()",
                  "error MaxOpenInterestReached(uint128 marketId, uint256 maxMarketSize, int256 newSideSize)",
                  "error MaxPositionsPerAccountReached(uint128 maxPositionsPerAccount)",
                  "error MaxUSDOpenInterestReached(uint128 marketId, uint256 maxMarketValue, int256 newSideSize, uint256 price)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PendingOrderExists()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error ZeroSizeOrder()",
                  "event OrderCommitted(uint128 indexed marketId, uint128 indexed accountId, uint8 orderType, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, uint256 expectedPriceTime, uint256 settlementTime, uint256 expirationTime, bytes32 indexed trackingCode, address sender)",
                  "event PreviousOrderExpired(uint128 indexed marketId, uint128 indexed accountId, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, bytes32 indexed trackingCode)",
                  "function commitOrder(tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) commitment) returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) retOrder, uint256 fees)",
                  "function computeOrderFees(uint128 marketId, int128 sizeDelta) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function computeOrderFeesWithPrice(uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function getOrder(uint128 accountId) view returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) order)",
                  "function getSettlementRewardCost(uint128 marketId, uint128 settlementStrategyId) view returns (uint256)",
                  "function requiredMarginForOrder(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 requiredMargin)",
                  "function requiredMarginForOrderWithPrice(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 requiredMargin)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x62b63c45be0e5a814a1345046055cb4f6f69184798fb2380a58c293446a01cd8",
                "deployTxnBlockNumber": "17158786",
                "deployTimestamp": "1730085860",
                "sourceName": "contracts/modules/AsyncOrderModule.sol",
                "contractName": "AsyncOrderModule",
                "deployedOn": "contract.AsyncOrderModule",
                "gasUsed": 3576529,
                "gasCost": "1000254"
              },
              "AsyncOrderSettlementPythModule": {
                "address": "0x7aC745102FbC47922cd2824d21c20b287514Af62",
                "abi": [
                  "error AcceptablePriceExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "error AccountLiquidatable(uint128 accountId)",
                  "error ExceedsMarketCreditCapacity(int256 delegatedCollateral, int256 newLockedCredit)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMargin(int256 availableMargin, uint256 minMargin)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error KeeperCostsNotSet()",
                  "error MaxOpenInterestReached(uint128 marketId, uint256 maxMarketSize, int256 newSideSize)",
                  "error MaxUSDOpenInterestReached(uint128 marketId, uint256 maxMarketValue, int256 newSideSize, uint256 price)",
                  "error OrderNotValid()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error SettlementWindowExpired(uint256 timestamp, uint256 settlementTime, uint256 settlementExpiration)",
                  "error SettlementWindowNotOpen(uint256 timestamp, uint256 settlementTime)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroSizeOrder()",
                  "event AccountCharged(uint128 accountId, int256 amount, uint256 accountDebt)",
                  "event InterestCharged(uint128 indexed accountId, uint256 interest)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed accountId, uint256 fillPrice, int256 pnl, int256 accruedFunding, int128 sizeDelta, int128 newSize, uint256 totalFees, uint256 referralFees, uint256 collectedFees, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function settleOrder(uint128 accountId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xf2a00b5e4f5a27d3ffe8c41a9233be762b9fbea655d89a68305049234082ebfe",
                "deployTxnBlockNumber": "17158788",
                "deployTimestamp": "1730085864",
                "sourceName": "contracts/modules/AsyncOrderSettlementPythModule.sol",
                "contractName": "AsyncOrderSettlementPythModule",
                "deployedOn": "contract.AsyncOrderSettlementPythModule",
                "gasUsed": 4057970,
                "gasCost": "1000254"
              },
              "CollateralConfigurationModule": {
                "address": "0x434C315c4D0760baE870e4277AE3Dbab5ee6E3Cc",
                "abi": [
                  "error InvalidDistributor(uint128 id, address distributor)",
                  "error InvalidDistributorContract(address distributor)",
                  "error InvalidId(uint128 id)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event CollateralConfigurationSet(uint128 indexed collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "event CollateralLiquidateRewardRatioSet(uint128 collateralLiquidateRewardRatioD18)",
                  "event RewardDistributorRegistered(address distributor)",
                  "function getCollateralConfiguration(uint128 collateralId) view returns (uint256 maxCollateralAmount)",
                  "function getCollateralConfigurationFull(uint128 collateralId) view returns (uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function getCollateralLiquidateRewardRatio() view returns (uint128 collateralLiquidateRewardRatioD18)",
                  "function getRegisteredDistributor(uint128 collateralId) view returns (address distributor, address[] poolDelegatedCollateralTypes)",
                  "function isRegistered(address distributor) view returns (bool)",
                  "function registerDistributor(address token, address distributor, uint128 collateralId, address[] poolDelegatedCollateralTypes)",
                  "function setCollateralConfiguration(uint128 collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function setCollateralLiquidateRewardRatio(uint128 collateralLiquidateRewardRatioD18)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xcfb3e13fcf203371793e3b86ea420789ebdcfe1b9f8fb3f20dc9b5184c3b1b0f",
                "deployTxnBlockNumber": "17158790",
                "deployTimestamp": "1730085868",
                "sourceName": "contracts/modules/CollateralConfigurationModule.sol",
                "contractName": "CollateralConfigurationModule",
                "deployedOn": "contract.CollateralConfigurationModule",
                "gasUsed": 904043,
                "gasCost": "1000255"
              },
              "CoreModule": {
                "address": "0x0c487767e6e0d598f48fc43150D2159aA84EA66e",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x6bb0b0d6231a6448cd54a6496254cae19d995be2d64585b2fc4207143353faa3",
                "sourceName": "contracts/modules/CoreModule.sol",
                "contractName": "CoreModule",
                "deployedOn": "contract.CoreModule",
                "gasUsed": 940299,
                "gasCost": "1000327"
              },
              "FeatureFlagModule": {
                "address": "0xD5C22967ff6e60c580f4e01d26d4B1B8B6C0dd68",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xb3d20a11fd73c9bea49ab488d2ad7bda5651223072cbadfb3438c71a9a520a56",
                "deployTxnBlockNumber": "15788490",
                "deployTimestamp": "1727345268",
                "sourceName": "contracts/modules/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule",
                "gasUsed": 765166,
                "gasCost": "1000258"
              },
              "GlobalPerpsMarketModule": {
                "address": "0x09C3D646F5699B1221C924E4922f23E739328ED6",
                "abi": [
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 highUtilizationInterestRateGradient)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidReferrerShareRatio(uint256 shareRatioD18)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event FeeCollectorSet(address feeCollector)",
                  "event InterestRateParametersSet(uint256 lowUtilizationInterestRateGradient, uint256 interestRateGradientBreakpoint, uint256 highUtilizationInterestRateGradient)",
                  "event InterestRateUpdated(uint128 indexed superMarketId, uint128 interestRate)",
                  "event KeeperCostNodeIdUpdated(bytes32 keeperCostNodeId)",
                  "event KeeperRewardGuardsSet(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "event PerAccountCapsSet(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "event ReferrerShareUpdated(address referrer, uint256 shareRatioD18)",
                  "function getFeeCollector() view returns (address feeCollector)",
                  "function getInterestRateParameters() view returns (uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function getKeeperCostNodeId() view returns (bytes32 keeperCostNodeId)",
                  "function getKeeperRewardGuards() view returns (uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function getMarkets() view returns (uint256[] marketIds)",
                  "function getPerAccountCaps() view returns (uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function getReferrerShare(address referrer) view returns (uint256 shareRatioD18)",
                  "function getSupportedCollaterals() view returns (uint256[] supportedCollaterals)",
                  "function globalCollateralValue(uint128 collateralId) view returns (uint256 collateralValue)",
                  "function setFeeCollector(address feeCollector)",
                  "function setInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function setKeeperRewardGuards(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function setPerAccountCaps(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function totalGlobalCollateralValue() view returns (uint256 totalCollateralValue)",
                  "function updateInterestRate()",
                  "function updateKeeperCostNodeId(bytes32 keeperCostNodeId)",
                  "function updateReferrerShare(address referrer, uint256 shareRatioD18)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0xca65cdb9952c1afb9441c1db492e4b4251d95c2f03bc59789ef8eb7325a6e3ce",
                "deployTxnBlockNumber": "17158792",
                "deployTimestamp": "1730085872",
                "sourceName": "contracts/modules/GlobalPerpsMarketModule.sol",
                "contractName": "GlobalPerpsMarketModule",
                "deployedOn": "contract.GlobalPerpsMarketModule",
                "gasUsed": 1867756,
                "gasCost": "1000255"
              },
              "LiquidationModule": {
                "address": "0x54ebCcAe67761096c26DC4036EEc74aEba08Df78",
                "abi": [
                  "error AccountHasOpenPositions(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidDistributor(uint128 id, address distributor)",
                  "error InvalidId(uint128 id)",
                  "error NotEligibleForLiquidation(uint128 accountId)",
                  "error NotEligibleForMarginLiquidation(uint128 accountId)",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PositionOutOfBounds()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event AccountFlaggedForLiquidation(uint128 indexed accountId, int256 availableMargin, uint256 requiredMaintenanceMargin, uint256 liquidationReward, uint256 flagReward)",
                  "event AccountLiquidationAttempt(uint128 indexed accountId, uint256 reward, bool fullLiquidation)",
                  "event AccountMarginLiquidation(uint128 indexed accountId, uint256 seizedMarginValue, uint256 liquidationReward)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 amountLiquidated, int128 currentPositionSize)",
                  "function canLiquidate(uint128 accountId) view returns (bool isEligible)",
                  "function canLiquidateMarginOnly(uint128 accountId) view returns (bool isEligible)",
                  "function flaggedAccounts() view returns (uint256[] accountIds)",
                  "function liquidate(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidateFlagged(uint256 maxNumberOfAccounts) returns (uint256 liquidationReward)",
                  "function liquidateFlaggedAccounts(uint128[] accountIds) returns (uint256 liquidationReward)",
                  "function liquidateMarginOnly(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidationCapacity(uint128 marketId) view returns (uint256 capacity, uint256 maxLiquidationInWindow, uint256 latestLiquidationTimestamp)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x4e434cb3dc937706963685528b63d73905c4ede8c98b95f16276aaf63ec8efc4",
                "deployTxnBlockNumber": "17158794",
                "deployTimestamp": "1730085876",
                "sourceName": "contracts/modules/LiquidationModule.sol",
                "contractName": "LiquidationModule",
                "deployedOn": "contract.LiquidationModule",
                "gasUsed": 4065636,
                "gasCost": "1000255"
              },
              "MarketConfigurationModule": {
                "address": "0x4B72e3bbCb5E40440F9f2550190F68211A7BA808",
                "abi": [
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "error Unauthorized(address addr)",
                  "event FundingParametersSet(uint128 indexed marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "event LiquidationParametersSet(uint128 indexed marketId, uint256 initialMarginRatioD18, uint256 maintenanceMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "event LockedOiRatioSet(uint128 indexed marketId, uint256 lockedOiRatioD18)",
                  "event MarketPriceDataUpdated(uint128 indexed marketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "event MaxLiquidationParametersSet(uint128 indexed marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "event MaxMarketSizeSet(uint128 indexed marketId, uint256 maxMarketSize)",
                  "event MaxMarketValueSet(uint128 indexed marketId, uint256 maxMarketValue)",
                  "event OrderFeesSet(uint128 indexed marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "event SettlementStrategyAdded(uint128 indexed marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed marketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy) returns (uint256 strategyId)",
                  "function getFundingParameters(uint128 marketId) view returns (uint256 skewScale, uint256 maxFundingVelocity)",
                  "function getLiquidationParameters(uint128 marketId) view returns (uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function getLockedOiRatio(uint128 marketId) view returns (uint256)",
                  "function getMaxLiquidationParameters(uint128 marketId) view returns (uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function getMaxMarketSize(uint128 marketId) view returns (uint256 maxMarketSize)",
                  "function getMaxMarketValue(uint128 marketId) view returns (uint256 maxMarketValue)",
                  "function getOrderFees(uint128 marketId) view returns (uint256 makerFee, uint256 takerFee)",
                  "function getPriceData(uint128 perpsMarketId) view returns (bytes32 feedId, uint256 strictStalenessTolerance)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) settlementStrategy)",
                  "function setFundingParameters(uint128 marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "function setLiquidationParameters(uint128 marketId, uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function setLockedOiRatio(uint128 marketId, uint256 lockedOiRatioD18)",
                  "function setMaxLiquidationParameters(uint128 marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function setMaxMarketSize(uint128 marketId, uint256 maxMarketSize)",
                  "function setMaxMarketValue(uint128 marketId, uint256 maxMarketValue)",
                  "function setOrderFees(uint128 marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "function updatePriceData(uint128 perpsMarketId, bytes32 feedId, uint256 strictStalenessTolerance)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x8c68584ebd1f3a94d6a17c8032726e2a8fd9ad9d432cb525177d3eba52634c56",
                "deployTxnBlockNumber": "17158796",
                "deployTimestamp": "1730085880",
                "sourceName": "contracts/modules/MarketConfigurationModule.sol",
                "contractName": "MarketConfigurationModule",
                "deployedOn": "contract.MarketConfigurationModule",
                "gasUsed": 1064187,
                "gasCost": "1000255"
              },
              "PerpsAccountModule": {
                "address": "0xe0b96a32577DfcadB456FfCb62136b82269E7537",
                "abi": [
                  "error AccountLiquidatable(uint128 accountId)",
                  "error AccountNotFound(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InsufficientCollateralAvailableForWithdraw(int256 withdrawableMarginUsd, uint256 requestedMarginUsd)",
                  "error InsufficientSynthCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InvalidAmountDelta(int256 amountDelta)",
                  "error InvalidDistributor(uint128 collateralId)",
                  "error InvalidId(uint128 id)",
                  "error InvalidMarket(uint128 marketId)",
                  "error KeeperCostsNotSet()",
                  "error MaxCollateralExceeded(uint128 collateralId, uint256 maxAmount, uint256 collateralAmount, uint256 depositAmount)",
                  "error MaxCollateralsPerAccountReached(uint128 maxCollateralsPerAccount)",
                  "error NonexistentDebt(uint128 accountId)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PendingOrderExists()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error SynthNotEnabledForCollateral(uint128 collateralId)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CollateralModified(uint128 indexed accountId, uint128 indexed collateralId, int256 amountDelta, address indexed sender)",
                  "event DebtPaid(uint128 indexed accountId, uint256 amount, address indexed sender)",
                  "event InterestRateUpdated(uint128 indexed superMarketId, uint128 interestRate)",
                  "function debt(uint128 accountId) view returns (uint256 accountDebt)",
                  "function getAccountCollateralIds(uint128 accountId) view returns (uint256[])",
                  "function getAccountOpenPositions(uint128 accountId) view returns (uint256[])",
                  "function getAvailableMargin(uint128 accountId) view returns (int256 availableMargin)",
                  "function getCollateralAmount(uint128 accountId, uint128 collateralId) view returns (uint256)",
                  "function getOpenPosition(uint128 accountId, uint128 marketId) view returns (int256 totalPnl, int256 accruedFunding, int128 positionSize, uint256 owedInterest)",
                  "function getOpenPositionSize(uint128 accountId, uint128 marketId) view returns (int128 positionSize)",
                  "function getRequiredMargins(uint128 accountId) view returns (uint256 requiredInitialMargin, uint256 requiredMaintenanceMargin, uint256 maxLiquidationReward)",
                  "function getWithdrawableMargin(uint128 accountId) view returns (int256 withdrawableMargin)",
                  "function modifyCollateral(uint128 accountId, uint128 collateralId, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint256 amount)",
                  "function totalAccountOpenInterest(uint128 accountId) view returns (uint256)",
                  "function totalCollateralValue(uint128 accountId) view returns (uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x8f283b3f49746051b18c405ab98610e7290e09b47b95af183057eed7745ffbf0",
                "deployTxnBlockNumber": "17158799",
                "deployTimestamp": "1730085886",
                "sourceName": "contracts/modules/PerpsAccountModule.sol",
                "contractName": "PerpsAccountModule",
                "deployedOn": "contract.PerpsAccountModule",
                "gasUsed": 3677383,
                "gasCost": "1000255"
              },
              "PerpsMarketFactoryModule": {
                "address": "0xD6b869e3D541b4597AC7efCaEAb7306E8bCE7181",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PerpsMarketAlreadyInitialized()",
                  "error PerpsMarketNotInitialized()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event FactoryInitialized(uint128 globalPerpsMarketId)",
                  "event MarketCreated(uint128 indexed perpsMarketId, string marketName, string marketSymbol)",
                  "function createMarket(uint128 requestedMarketId, string marketName, string marketSymbol) returns (uint128)",
                  "function initializeFactory(address synthetix, address spotMarket) returns (uint128)",
                  "function interestRate() view returns (uint128)",
                  "function minimumCredit(uint128 perpsMarketId) view returns (uint256)",
                  "function name(uint128 perpsMarketId) view returns (string)",
                  "function reportedDebt(uint128 perpsMarketId) view returns (uint256)",
                  "function setPerpsMarketName(string marketName)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function utilizationRate() view returns (uint256 rate, uint256 delegatedCollateral, uint256 lockedCredit)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x0d7ed99ab809d12799c07eb3ce92d67dc4554bee52ff0aa5c9fe8b77d9d2d253",
                "deployTxnBlockNumber": "17158803",
                "deployTimestamp": "1730085894",
                "sourceName": "contracts/modules/PerpsMarketFactoryModule.sol",
                "contractName": "PerpsMarketFactoryModule",
                "deployedOn": "contract.PerpsMarketFactoryModule",
                "gasUsed": 2055633,
                "gasCost": "1000256"
              },
              "PerpsMarketModule": {
                "address": "0x2fEA5e873F706320c237744c527514dE9D42bD39",
                "abi": [
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "function currentFundingRate(uint128 marketId) view returns (int256)",
                  "function currentFundingVelocity(uint128 marketId) view returns (int256)",
                  "function fillPrice(uint128 marketId, int128 orderSize, uint256 price) view returns (uint256)",
                  "function getMarketSummary(uint128 marketId) view returns (tuple(int256 skew, uint256 size, uint256 maxOpenInterest, int256 currentFundingRate, int256 currentFundingVelocity, uint256 indexPrice) summary)",
                  "function indexPrice(uint128 marketId) view returns (uint256)",
                  "function maxOpenInterest(uint128 marketId) view returns (uint256)",
                  "function metadata(uint128 marketId) view returns (string name, string symbol)",
                  "function size(uint128 marketId) view returns (uint256)",
                  "function skew(uint128 marketId) view returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x10706fa5d6533237748db058e325222f9bf38b2de37f734d5e6a4aee3bf54b66",
                "deployTxnBlockNumber": "17158805",
                "deployTimestamp": "1730085898",
                "sourceName": "contracts/modules/PerpsMarketModule.sol",
                "contractName": "PerpsMarketModule",
                "deployedOn": "contract.PerpsMarketModule",
                "gasUsed": 896870,
                "gasCost": "1000256"
              },
              "InitialProxy": {
                "address": "0x0aacb1DDCF65d8347e3a2585cD78b423987cA04d",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x0c487767e6e0d598f48fc43150D2159aA84EA66e",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xc185bf79fa04d3e66972046e220393e562066c122d0221aedc414a6f55075d91",
                "deployTxnBlockNumber": "16649495",
                "deployTimestamp": "1729067278",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 248149,
                "gasCost": "946739810"
              },
              "PerpsMarketRouter": {
                "address": "0x63806310e193c2afb04878f4028aa3ce6d402b38",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PerpsMarketAlreadyInitialized()",
                  "error PerpsMarketNotInitialized()",
                  "event FactoryInitialized(uint128 globalPerpsMarketId)",
                  "event MarketCreated(uint128 indexed perpsMarketId, string marketName, string marketSymbol)",
                  "function createMarket(uint128 requestedMarketId, string marketName, string marketSymbol) returns (uint128)",
                  "function initializeFactory(address synthetix, address spotMarket) returns (uint128)",
                  "function interestRate() view returns (uint128)",
                  "function minimumCredit(uint128 perpsMarketId) view returns (uint256)",
                  "function name(uint128 perpsMarketId) view returns (string)",
                  "function reportedDebt(uint128 perpsMarketId) view returns (uint256)",
                  "function setPerpsMarketName(string marketName)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function utilizationRate() view returns (uint256 rate, uint256 delegatedCollateral, uint256 lockedCredit)",
                  "error AccountLiquidatable(uint128 accountId)",
                  "error AccountNotFound(uint128 accountId)",
                  "error InsufficientCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InsufficientCollateralAvailableForWithdraw(int256 withdrawableMarginUsd, uint256 requestedMarginUsd)",
                  "error InsufficientSynthCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InvalidAmountDelta(int256 amountDelta)",
                  "error InvalidDistributor(uint128 collateralId)",
                  "error InvalidId(uint128 id)",
                  "error KeeperCostsNotSet()",
                  "error MaxCollateralExceeded(uint128 collateralId, uint256 maxAmount, uint256 collateralAmount, uint256 depositAmount)",
                  "error MaxCollateralsPerAccountReached(uint128 maxCollateralsPerAccount)",
                  "error NonexistentDebt(uint128 accountId)",
                  "error OverflowUint128ToInt128()",
                  "error PendingOrderExists()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error SynthNotEnabledForCollateral(uint128 collateralId)",
                  "event CollateralModified(uint128 indexed accountId, uint128 indexed collateralId, int256 amountDelta, address indexed sender)",
                  "event DebtPaid(uint128 indexed accountId, uint256 amount, address indexed sender)",
                  "event InterestRateUpdated(uint128 indexed superMarketId, uint128 interestRate)",
                  "function debt(uint128 accountId) view returns (uint256 accountDebt)",
                  "function getAccountCollateralIds(uint128 accountId) view returns (uint256[])",
                  "function getAccountOpenPositions(uint128 accountId) view returns (uint256[])",
                  "function getAvailableMargin(uint128 accountId) view returns (int256 availableMargin)",
                  "function getCollateralAmount(uint128 accountId, uint128 collateralId) view returns (uint256)",
                  "function getOpenPosition(uint128 accountId, uint128 marketId) view returns (int256 totalPnl, int256 accruedFunding, int128 positionSize, uint256 owedInterest)",
                  "function getOpenPositionSize(uint128 accountId, uint128 marketId) view returns (int128 positionSize)",
                  "function getRequiredMargins(uint128 accountId) view returns (uint256 requiredInitialMargin, uint256 requiredMaintenanceMargin, uint256 maxLiquidationReward)",
                  "function getWithdrawableMargin(uint128 accountId) view returns (int256 withdrawableMargin)",
                  "function modifyCollateral(uint128 accountId, uint128 collateralId, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint256 amount)",
                  "function totalAccountOpenInterest(uint128 accountId) view returns (uint256)",
                  "function totalCollateralValue(uint128 accountId) view returns (uint256)",
                  "function currentFundingRate(uint128 marketId) view returns (int256)",
                  "function currentFundingVelocity(uint128 marketId) view returns (int256)",
                  "function fillPrice(uint128 marketId, int128 orderSize, uint256 price) view returns (uint256)",
                  "function getMarketSummary(uint128 marketId) view returns (tuple(int256 skew, uint256 size, uint256 maxOpenInterest, int256 currentFundingRate, int256 currentFundingVelocity, uint256 indexPrice) summary)",
                  "function indexPrice(uint128 marketId) view returns (uint256)",
                  "function maxOpenInterest(uint128 marketId) view returns (uint256)",
                  "function metadata(uint128 marketId) view returns (string name, string symbol)",
                  "function size(uint128 marketId) view returns (uint256)",
                  "function skew(uint128 marketId) view returns (int256)",
                  "error ExceedsMarketCreditCapacity(int256 delegatedCollateral, int256 newLockedCredit)",
                  "error InsufficientMargin(int256 availableMargin, uint256 minMargin)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error MaxOpenInterestReached(uint128 marketId, uint256 maxMarketSize, int256 newSideSize)",
                  "error MaxPositionsPerAccountReached(uint128 maxPositionsPerAccount)",
                  "error MaxUSDOpenInterestReached(uint128 marketId, uint256 maxMarketValue, int256 newSideSize, uint256 price)",
                  "error OverflowInt256ToInt128()",
                  "error ZeroSizeOrder()",
                  "event OrderCommitted(uint128 indexed marketId, uint128 indexed accountId, uint8 orderType, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, uint256 expectedPriceTime, uint256 settlementTime, uint256 expirationTime, bytes32 indexed trackingCode, address sender)",
                  "event PreviousOrderExpired(uint128 indexed marketId, uint128 indexed accountId, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, bytes32 indexed trackingCode)",
                  "function commitOrder(tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) commitment) returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) retOrder, uint256 fees)",
                  "function computeOrderFees(uint128 marketId, int128 sizeDelta) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function computeOrderFeesWithPrice(uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function getOrder(uint128 accountId) view returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) order)",
                  "function getSettlementRewardCost(uint128 marketId, uint128 settlementStrategyId) view returns (uint256)",
                  "function requiredMarginForOrder(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 requiredMargin)",
                  "function requiredMarginForOrderWithPrice(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 requiredMargin)",
                  "error AcceptablePriceExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "error OrderNotValid()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error SettlementWindowExpired(uint256 timestamp, uint256 settlementTime, uint256 settlementExpiration)",
                  "error SettlementWindowNotOpen(uint256 timestamp, uint256 settlementTime)",
                  "event AccountCharged(uint128 accountId, int256 amount, uint256 accountDebt)",
                  "event InterestCharged(uint128 indexed accountId, uint256 interest)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed accountId, uint256 fillPrice, int256 pnl, int256 accruedFunding, int128 sizeDelta, int128 newSize, uint256 totalFees, uint256 referralFees, uint256 collectedFees, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function settleOrder(uint128 accountId)",
                  "error AcceptablePriceNotExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed accountId, uint256 desiredPrice, uint256 fillPrice, int128 sizeDelta, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function cancelOrder(uint128 accountId)",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error AccountHasOpenPositions(uint128 accountId)",
                  "error InvalidDistributor(uint128 id, address distributor)",
                  "error NotEligibleForLiquidation(uint128 accountId)",
                  "error NotEligibleForMarginLiquidation(uint128 accountId)",
                  "event AccountFlaggedForLiquidation(uint128 indexed accountId, int256 availableMargin, uint256 requiredMaintenanceMargin, uint256 liquidationReward, uint256 flagReward)",
                  "event AccountLiquidationAttempt(uint128 indexed accountId, uint256 reward, bool fullLiquidation)",
                  "event AccountMarginLiquidation(uint128 indexed accountId, uint256 seizedMarginValue, uint256 liquidationReward)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 amountLiquidated, int128 currentPositionSize)",
                  "function canLiquidate(uint128 accountId) view returns (bool isEligible)",
                  "function canLiquidateMarginOnly(uint128 accountId) view returns (bool isEligible)",
                  "function flaggedAccounts() view returns (uint256[] accountIds)",
                  "function liquidate(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidateFlagged(uint256 maxNumberOfAccounts) returns (uint256 liquidationReward)",
                  "function liquidateFlaggedAccounts(uint128[] accountIds) returns (uint256 liquidationReward)",
                  "function liquidateMarginOnly(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidationCapacity(uint128 marketId) view returns (uint256 capacity, uint256 maxLiquidationInWindow, uint256 latestLiquidationTimestamp)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "event FundingParametersSet(uint128 indexed marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "event LiquidationParametersSet(uint128 indexed marketId, uint256 initialMarginRatioD18, uint256 maintenanceMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "event LockedOiRatioSet(uint128 indexed marketId, uint256 lockedOiRatioD18)",
                  "event MarketPriceDataUpdated(uint128 indexed marketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "event MaxLiquidationParametersSet(uint128 indexed marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "event MaxMarketSizeSet(uint128 indexed marketId, uint256 maxMarketSize)",
                  "event MaxMarketValueSet(uint128 indexed marketId, uint256 maxMarketValue)",
                  "event OrderFeesSet(uint128 indexed marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "event SettlementStrategyAdded(uint128 indexed marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed marketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy) returns (uint256 strategyId)",
                  "function getFundingParameters(uint128 marketId) view returns (uint256 skewScale, uint256 maxFundingVelocity)",
                  "function getLiquidationParameters(uint128 marketId) view returns (uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function getLockedOiRatio(uint128 marketId) view returns (uint256)",
                  "function getMaxLiquidationParameters(uint128 marketId) view returns (uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function getMaxMarketSize(uint128 marketId) view returns (uint256 maxMarketSize)",
                  "function getMaxMarketValue(uint128 marketId) view returns (uint256 maxMarketValue)",
                  "function getOrderFees(uint128 marketId) view returns (uint256 makerFee, uint256 takerFee)",
                  "function getPriceData(uint128 perpsMarketId) view returns (bytes32 feedId, uint256 strictStalenessTolerance)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) settlementStrategy)",
                  "function setFundingParameters(uint128 marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "function setLiquidationParameters(uint128 marketId, uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function setLockedOiRatio(uint128 marketId, uint256 lockedOiRatioD18)",
                  "function setMaxLiquidationParameters(uint128 marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function setMaxMarketSize(uint128 marketId, uint256 maxMarketSize)",
                  "function setMaxMarketValue(uint128 marketId, uint256 maxMarketValue)",
                  "function setOrderFees(uint128 marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "function updatePriceData(uint128 perpsMarketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "error InvalidDistributorContract(address distributor)",
                  "event CollateralConfigurationSet(uint128 indexed collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "event CollateralLiquidateRewardRatioSet(uint128 collateralLiquidateRewardRatioD18)",
                  "event RewardDistributorRegistered(address distributor)",
                  "function getCollateralConfiguration(uint128 collateralId) view returns (uint256 maxCollateralAmount)",
                  "function getCollateralConfigurationFull(uint128 collateralId) view returns (uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function getCollateralLiquidateRewardRatio() view returns (uint128 collateralLiquidateRewardRatioD18)",
                  "function getRegisteredDistributor(uint128 collateralId) view returns (address distributor, address[] poolDelegatedCollateralTypes)",
                  "function isRegistered(address distributor) view returns (bool)",
                  "function registerDistributor(address token, address distributor, uint128 collateralId, address[] poolDelegatedCollateralTypes)",
                  "function setCollateralConfiguration(uint128 collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function setCollateralLiquidateRewardRatio(uint128 collateralLiquidateRewardRatioD18)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 highUtilizationInterestRateGradient)",
                  "error InvalidReferrerShareRatio(uint256 shareRatioD18)",
                  "event FeeCollectorSet(address feeCollector)",
                  "event InterestRateParametersSet(uint256 lowUtilizationInterestRateGradient, uint256 interestRateGradientBreakpoint, uint256 highUtilizationInterestRateGradient)",
                  "event KeeperCostNodeIdUpdated(bytes32 keeperCostNodeId)",
                  "event KeeperRewardGuardsSet(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "event PerAccountCapsSet(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "event ReferrerShareUpdated(address referrer, uint256 shareRatioD18)",
                  "function getFeeCollector() view returns (address feeCollector)",
                  "function getInterestRateParameters() view returns (uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function getKeeperCostNodeId() view returns (bytes32 keeperCostNodeId)",
                  "function getKeeperRewardGuards() view returns (uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function getMarkets() view returns (uint256[] marketIds)",
                  "function getPerAccountCaps() view returns (uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function getReferrerShare(address referrer) view returns (uint256 shareRatioD18)",
                  "function getSupportedCollaterals() view returns (uint256[] supportedCollaterals)",
                  "function globalCollateralValue(uint128 collateralId) view returns (uint256 collateralValue)",
                  "function setFeeCollector(address feeCollector)",
                  "function setInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function setKeeperRewardGuards(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function setPerAccountCaps(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function totalGlobalCollateralValue() view returns (uint256 totalCollateralValue)",
                  "function updateInterestRate()",
                  "function updateKeeperCostNodeId(bytes32 keeperCostNodeId)",
                  "function updateReferrerShare(address referrer, uint256 shareRatioD18)"
                ],
                "deployedOn": "router.PerpsMarketRouter",
                "deployTxnHash": "0x536effa9e5bae1973849e950e065a5c5719e5607a038d2a51792f59ba817bca2",
                "deployTxnBlockNumber": "17158808",
                "deployTimestamp": "1730085904",
                "contractName": "PerpsMarketRouter",
                "sourceName": "PerpsMarketRouter.sol",
                "gasUsed": 1267833,
                "gasCost": "1000256"
              },
              "PerpsMarketProxy": {
                "address": "0x0aacb1DDCF65d8347e3a2585cD78b423987cA04d",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PerpsMarketAlreadyInitialized()",
                  "error PerpsMarketNotInitialized()",
                  "event FactoryInitialized(uint128 globalPerpsMarketId)",
                  "event MarketCreated(uint128 indexed perpsMarketId, string marketName, string marketSymbol)",
                  "function createMarket(uint128 requestedMarketId, string marketName, string marketSymbol) returns (uint128)",
                  "function initializeFactory(address synthetix, address spotMarket) returns (uint128)",
                  "function interestRate() view returns (uint128)",
                  "function minimumCredit(uint128 perpsMarketId) view returns (uint256)",
                  "function name(uint128 perpsMarketId) view returns (string)",
                  "function reportedDebt(uint128 perpsMarketId) view returns (uint256)",
                  "function setPerpsMarketName(string marketName)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function utilizationRate() view returns (uint256 rate, uint256 delegatedCollateral, uint256 lockedCredit)",
                  "error AccountLiquidatable(uint128 accountId)",
                  "error AccountNotFound(uint128 accountId)",
                  "error InsufficientCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InsufficientCollateralAvailableForWithdraw(int256 withdrawableMarginUsd, uint256 requestedMarginUsd)",
                  "error InsufficientSynthCollateral(uint128 collateralId, uint256 collateralAmount, uint256 withdrawAmount)",
                  "error InvalidAmountDelta(int256 amountDelta)",
                  "error InvalidDistributor(uint128 collateralId)",
                  "error InvalidId(uint128 id)",
                  "error KeeperCostsNotSet()",
                  "error MaxCollateralExceeded(uint128 collateralId, uint256 maxAmount, uint256 collateralAmount, uint256 depositAmount)",
                  "error MaxCollateralsPerAccountReached(uint128 maxCollateralsPerAccount)",
                  "error NonexistentDebt(uint128 accountId)",
                  "error OverflowUint128ToInt128()",
                  "error PendingOrderExists()",
                  "error PriceFeedNotSet(uint128 marketId)",
                  "error SynthNotEnabledForCollateral(uint128 collateralId)",
                  "event CollateralModified(uint128 indexed accountId, uint128 indexed collateralId, int256 amountDelta, address indexed sender)",
                  "event DebtPaid(uint128 indexed accountId, uint256 amount, address indexed sender)",
                  "event InterestRateUpdated(uint128 indexed superMarketId, uint128 interestRate)",
                  "function debt(uint128 accountId) view returns (uint256 accountDebt)",
                  "function getAccountCollateralIds(uint128 accountId) view returns (uint256[])",
                  "function getAccountOpenPositions(uint128 accountId) view returns (uint256[])",
                  "function getAvailableMargin(uint128 accountId) view returns (int256 availableMargin)",
                  "function getCollateralAmount(uint128 accountId, uint128 collateralId) view returns (uint256)",
                  "function getOpenPosition(uint128 accountId, uint128 marketId) view returns (int256 totalPnl, int256 accruedFunding, int128 positionSize, uint256 owedInterest)",
                  "function getOpenPositionSize(uint128 accountId, uint128 marketId) view returns (int128 positionSize)",
                  "function getRequiredMargins(uint128 accountId) view returns (uint256 requiredInitialMargin, uint256 requiredMaintenanceMargin, uint256 maxLiquidationReward)",
                  "function getWithdrawableMargin(uint128 accountId) view returns (int256 withdrawableMargin)",
                  "function modifyCollateral(uint128 accountId, uint128 collateralId, int256 amountDelta)",
                  "function payDebt(uint128 accountId, uint256 amount)",
                  "function totalAccountOpenInterest(uint128 accountId) view returns (uint256)",
                  "function totalCollateralValue(uint128 accountId) view returns (uint256)",
                  "function currentFundingRate(uint128 marketId) view returns (int256)",
                  "function currentFundingVelocity(uint128 marketId) view returns (int256)",
                  "function fillPrice(uint128 marketId, int128 orderSize, uint256 price) view returns (uint256)",
                  "function getMarketSummary(uint128 marketId) view returns (tuple(int256 skew, uint256 size, uint256 maxOpenInterest, int256 currentFundingRate, int256 currentFundingVelocity, uint256 indexPrice) summary)",
                  "function indexPrice(uint128 marketId) view returns (uint256)",
                  "function maxOpenInterest(uint128 marketId) view returns (uint256)",
                  "function metadata(uint128 marketId) view returns (string name, string symbol)",
                  "function size(uint128 marketId) view returns (uint256)",
                  "function skew(uint128 marketId) view returns (int256)",
                  "error ExceedsMarketCreditCapacity(int256 delegatedCollateral, int256 newLockedCredit)",
                  "error InsufficientMargin(int256 availableMargin, uint256 minMargin)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error MaxOpenInterestReached(uint128 marketId, uint256 maxMarketSize, int256 newSideSize)",
                  "error MaxPositionsPerAccountReached(uint128 maxPositionsPerAccount)",
                  "error MaxUSDOpenInterestReached(uint128 marketId, uint256 maxMarketValue, int256 newSideSize, uint256 price)",
                  "error OverflowInt256ToInt128()",
                  "error ZeroSizeOrder()",
                  "event OrderCommitted(uint128 indexed marketId, uint128 indexed accountId, uint8 orderType, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, uint256 expectedPriceTime, uint256 settlementTime, uint256 expirationTime, bytes32 indexed trackingCode, address sender)",
                  "event PreviousOrderExpired(uint128 indexed marketId, uint128 indexed accountId, int128 sizeDelta, uint256 acceptablePrice, uint256 commitmentTime, bytes32 indexed trackingCode)",
                  "function commitOrder(tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) commitment) returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) retOrder, uint256 fees)",
                  "function computeOrderFees(uint128 marketId, int128 sizeDelta) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function computeOrderFeesWithPrice(uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 orderFees, uint256 fillPrice)",
                  "function getOrder(uint128 accountId) view returns (tuple(uint256 commitmentTime, tuple(uint128 marketId, uint128 accountId, int128 sizeDelta, uint128 settlementStrategyId, uint256 acceptablePrice, bytes32 trackingCode, address referrer) request) order)",
                  "function getSettlementRewardCost(uint128 marketId, uint128 settlementStrategyId) view returns (uint256)",
                  "function requiredMarginForOrder(uint128 accountId, uint128 marketId, int128 sizeDelta) view returns (uint256 requiredMargin)",
                  "function requiredMarginForOrderWithPrice(uint128 accountId, uint128 marketId, int128 sizeDelta, uint256 price) view returns (uint256 requiredMargin)",
                  "error AcceptablePriceExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "error OrderNotValid()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "error SettlementWindowExpired(uint256 timestamp, uint256 settlementTime, uint256 settlementExpiration)",
                  "error SettlementWindowNotOpen(uint256 timestamp, uint256 settlementTime)",
                  "event AccountCharged(uint128 accountId, int256 amount, uint256 accountDebt)",
                  "event InterestCharged(uint128 indexed accountId, uint256 interest)",
                  "event MarketUpdated(uint128 marketId, uint256 price, int256 skew, uint256 size, int256 sizeDelta, int256 currentFundingRate, int256 currentFundingVelocity, uint128 interestRate)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed accountId, uint256 fillPrice, int256 pnl, int256 accruedFunding, int128 sizeDelta, int128 newSize, uint256 totalFees, uint256 referralFees, uint256 collectedFees, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function settleOrder(uint128 accountId)",
                  "error AcceptablePriceNotExceeded(uint256 fillPrice, uint256 acceptablePrice)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed accountId, uint256 desiredPrice, uint256 fillPrice, int128 sizeDelta, uint256 settlementReward, bytes32 indexed trackingCode, address settler)",
                  "function cancelOrder(uint128 accountId)",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error AccountHasOpenPositions(uint128 accountId)",
                  "error InvalidDistributor(uint128 id, address distributor)",
                  "error NotEligibleForLiquidation(uint128 accountId)",
                  "error NotEligibleForMarginLiquidation(uint128 accountId)",
                  "event AccountFlaggedForLiquidation(uint128 indexed accountId, int256 availableMargin, uint256 requiredMaintenanceMargin, uint256 liquidationReward, uint256 flagReward)",
                  "event AccountLiquidationAttempt(uint128 indexed accountId, uint256 reward, bool fullLiquidation)",
                  "event AccountMarginLiquidation(uint128 indexed accountId, uint256 seizedMarginValue, uint256 liquidationReward)",
                  "event PositionLiquidated(uint128 indexed accountId, uint128 indexed marketId, uint256 amountLiquidated, int128 currentPositionSize)",
                  "function canLiquidate(uint128 accountId) view returns (bool isEligible)",
                  "function canLiquidateMarginOnly(uint128 accountId) view returns (bool isEligible)",
                  "function flaggedAccounts() view returns (uint256[] accountIds)",
                  "function liquidate(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidateFlagged(uint256 maxNumberOfAccounts) returns (uint256 liquidationReward)",
                  "function liquidateFlaggedAccounts(uint128[] accountIds) returns (uint256 liquidationReward)",
                  "function liquidateMarginOnly(uint128 accountId) returns (uint256 liquidationReward)",
                  "function liquidationCapacity(uint128 marketId) view returns (uint256 capacity, uint256 maxLiquidationInWindow, uint256 latestLiquidationTimestamp)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "event FundingParametersSet(uint128 indexed marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "event LiquidationParametersSet(uint128 indexed marketId, uint256 initialMarginRatioD18, uint256 maintenanceMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "event LockedOiRatioSet(uint128 indexed marketId, uint256 lockedOiRatioD18)",
                  "event MarketPriceDataUpdated(uint128 indexed marketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "event MaxLiquidationParametersSet(uint128 indexed marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "event MaxMarketSizeSet(uint128 indexed marketId, uint256 maxMarketSize)",
                  "event MaxMarketValueSet(uint128 indexed marketId, uint256 maxMarketValue)",
                  "event OrderFeesSet(uint128 indexed marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "event SettlementStrategyAdded(uint128 indexed marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed marketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy) returns (uint256 strategyId)",
                  "function getFundingParameters(uint128 marketId) view returns (uint256 skewScale, uint256 maxFundingVelocity)",
                  "function getLiquidationParameters(uint128 marketId) view returns (uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function getLockedOiRatio(uint128 marketId) view returns (uint256)",
                  "function getMaxLiquidationParameters(uint128 marketId) view returns (uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function getMaxMarketSize(uint128 marketId) view returns (uint256 maxMarketSize)",
                  "function getMaxMarketValue(uint128 marketId) view returns (uint256 maxMarketValue)",
                  "function getOrderFees(uint128 marketId) view returns (uint256 makerFee, uint256 takerFee)",
                  "function getPriceData(uint128 perpsMarketId) view returns (bytes32 feedId, uint256 strictStalenessTolerance)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) settlementStrategy)",
                  "function setFundingParameters(uint128 marketId, uint256 skewScale, uint256 maxFundingVelocity)",
                  "function setLiquidationParameters(uint128 marketId, uint256 initialMarginRatioD18, uint256 minimumInitialMarginRatioD18, uint256 maintenanceMarginScalarD18, uint256 flagRewardRatioD18, uint256 minimumPositionMargin)",
                  "function setLockedOiRatio(uint128 marketId, uint256 lockedOiRatioD18)",
                  "function setMaxLiquidationParameters(uint128 marketId, uint256 maxLiquidationLimitAccumulationMultiplier, uint256 maxSecondsInLiquidationWindow, uint256 maxLiquidationPd, address endorsedLiquidator)",
                  "function setMaxMarketSize(uint128 marketId, uint256 maxMarketSize)",
                  "function setMaxMarketValue(uint128 marketId, uint256 maxMarketValue)",
                  "function setOrderFees(uint128 marketId, uint256 makerFeeRatio, uint256 takerFeeRatio)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, uint256 settlementReward, bool disabled, uint256 commitmentPriceDelay) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "function updatePriceData(uint128 perpsMarketId, bytes32 feedId, uint256 strictStalenessTolerance)",
                  "error InvalidDistributorContract(address distributor)",
                  "event CollateralConfigurationSet(uint128 indexed collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "event CollateralLiquidateRewardRatioSet(uint128 collateralLiquidateRewardRatioD18)",
                  "event RewardDistributorRegistered(address distributor)",
                  "function getCollateralConfiguration(uint128 collateralId) view returns (uint256 maxCollateralAmount)",
                  "function getCollateralConfigurationFull(uint128 collateralId) view returns (uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function getCollateralLiquidateRewardRatio() view returns (uint128 collateralLiquidateRewardRatioD18)",
                  "function getRegisteredDistributor(uint128 collateralId) view returns (address distributor, address[] poolDelegatedCollateralTypes)",
                  "function isRegistered(address distributor) view returns (bool)",
                  "function registerDistributor(address token, address distributor, uint128 collateralId, address[] poolDelegatedCollateralTypes)",
                  "function setCollateralConfiguration(uint128 collateralId, uint256 maxCollateralAmount, uint256 upperLimitDiscount, uint256 lowerLimitDiscount, uint256 discountScalar)",
                  "function setCollateralLiquidateRewardRatio(uint128 collateralLiquidateRewardRatioD18)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 highUtilizationInterestRateGradient)",
                  "error InvalidReferrerShareRatio(uint256 shareRatioD18)",
                  "event FeeCollectorSet(address feeCollector)",
                  "event InterestRateParametersSet(uint256 lowUtilizationInterestRateGradient, uint256 interestRateGradientBreakpoint, uint256 highUtilizationInterestRateGradient)",
                  "event KeeperCostNodeIdUpdated(bytes32 keeperCostNodeId)",
                  "event KeeperRewardGuardsSet(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "event PerAccountCapsSet(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "event ReferrerShareUpdated(address referrer, uint256 shareRatioD18)",
                  "function getFeeCollector() view returns (address feeCollector)",
                  "function getInterestRateParameters() view returns (uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function getKeeperCostNodeId() view returns (bytes32 keeperCostNodeId)",
                  "function getKeeperRewardGuards() view returns (uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function getMarkets() view returns (uint256[] marketIds)",
                  "function getPerAccountCaps() view returns (uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function getReferrerShare(address referrer) view returns (uint256 shareRatioD18)",
                  "function getSupportedCollaterals() view returns (uint256[] supportedCollaterals)",
                  "function globalCollateralValue(uint128 collateralId) view returns (uint256 collateralValue)",
                  "function setFeeCollector(address feeCollector)",
                  "function setInterestRateParameters(uint128 lowUtilizationInterestRateGradient, uint128 interestRateGradientBreakpoint, uint128 highUtilizationInterestRateGradient)",
                  "function setKeeperRewardGuards(uint256 minKeeperRewardUsd, uint256 minKeeperProfitRatioD18, uint256 maxKeeperRewardUsd, uint256 maxKeeperScalingRatioD18)",
                  "function setPerAccountCaps(uint128 maxPositionsPerAccount, uint128 maxCollateralsPerAccount)",
                  "function totalGlobalCollateralValue() view returns (uint256 totalCollateralValue)",
                  "function updateInterestRate()",
                  "function updateKeeperCostNodeId(bytes32 keeperCostNodeId)",
                  "function updateReferrerShare(address referrer, uint256 shareRatioD18)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "PerpsAccountProxy": {
                "address": "0xbECa9E019564dd54197B5Cc6A0c0D031A745d8B3",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_account",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "settings": {
              "coreProxyOwner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "spotMarketPackage": "synthetix-spot-market:latest",
              "spotMarketPreset": "main",
              "synthetixPackage": "synthetix:latest",
              "synthetixPreset": "main",
              "superMarketId": "6"
            },
            "imports": {
              "spotMarket": {
                "url": "ipfs://QmR9p2GKEV4APcUBZYCsaKuvSN6SXQkvTy6WN4tc89fNaa",
                "contracts": {
                  "AsyncOrderConfigurationModule": {
                    "address": "0x8b4bf6A29d3390C28A0A521241122Fc4B06099bd",
                    "abi": [
                      "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                      "error InvalidSettlementWindowDuration(uint256 duration)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                      "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                      "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                      "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x92fbcb3ee357637cbbd1a4ab9cce98121e61a6e308bba93f0c42e47e9de487b5",
                    "deployTxnBlockNumber": "16649403",
                    "deployTimestamp": "1729067094",
                    "sourceName": "contracts/modules/AsyncOrderConfigurationModule.sol",
                    "contractName": "AsyncOrderConfigurationModule",
                    "deployedOn": "contract.AsyncOrderConfigurationModule",
                    "gasUsed": 896430,
                    "gasCost": "947973424"
                  },
                  "AsyncOrderModule": {
                    "address": "0x6b2B267Dd0bC45AFDe2143c29f7688c69fd1283e",
                    "abi": [
                      "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                      "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                      "error InvalidAsyncTransactionType(uint8 transactionType)",
                      "error InvalidClaim(uint256 asyncOrderId)",
                      "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                      "error InvalidMarket(uint128 marketId)",
                      "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                      "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                      "error OverflowInt256ToUint256()",
                      "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                      "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                      "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                      "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x693315980e8a68341fef8077340aa882a01fbaeb714c20e615935f6ec62cc66e",
                    "deployTxnBlockNumber": "16649405",
                    "deployTimestamp": "1729067098",
                    "sourceName": "contracts/modules/AsyncOrderModule.sol",
                    "contractName": "AsyncOrderModule",
                    "deployedOn": "contract.AsyncOrderModule",
                    "gasUsed": 1317242,
                    "gasCost": "949022906"
                  },
                  "AsyncOrderSettlementModule": {
                    "address": "0xc62f57336B2aF1129655A08c172Eb1748A08a7Ce",
                    "abi": [
                      "error InvalidClaim(uint256 asyncOrderId)",
                      "error InvalidSettlementStrategy(uint8 strategyType)",
                      "error InvalidVerificationResponse()",
                      "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                      "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                      "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint64()",
                      "error SettlementStrategyNotFound(uint8 strategyType)",
                      "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                      "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xffed0d260707d687b6a97124edb9b3e134a28dadac1c6d9c3165d572c03afc4c",
                    "deployTxnBlockNumber": "16649407",
                    "deployTimestamp": "1729067102",
                    "sourceName": "contracts/modules/AsyncOrderSettlementModule.sol",
                    "contractName": "AsyncOrderSettlementModule",
                    "deployedOn": "contract.AsyncOrderSettlementModule",
                    "gasUsed": 1963714,
                    "gasCost": "949054714"
                  },
                  "AtomicOrderModule": {
                    "address": "0x5807777F854cA7418dB57E9475dB4BE10073f0EA",
                    "abi": [
                      "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                      "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                      "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                      "error InvalidMarket(uint128 marketId)",
                      "error InvalidPrices()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                      "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x941bdf0a92cee462ad27cefa72bf024e975813211dd4fd824e28fe157a6f49a9",
                    "deployTxnBlockNumber": "16649409",
                    "deployTimestamp": "1729067106",
                    "sourceName": "contracts/modules/AtomicOrderModule.sol",
                    "contractName": "AtomicOrderModule",
                    "deployedOn": "contract.AtomicOrderModule",
                    "gasUsed": 2090754,
                    "gasCost": "950583162"
                  },
                  "CoreModule": {
                    "address": "0xC04a9239DC38A6AED425f5FF0fEc6Ac6266A27A7",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x80a640acf82e5583e3ff431f0704e7520b644d4e5ff5b962f7461c3e0d8d2de2",
                    "sourceName": "contracts/modules/CoreModule.sol",
                    "contractName": "CoreModule",
                    "deployedOn": "contract.CoreModule",
                    "gasUsed": 940287,
                    "gasCost": "1000316"
                  },
                  "FeatureFlagModule": {
                    "address": "0x6fb72afDeD3139Ae63e5b06BBabf402d9bFb1D89",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x65e12ab64e45a9a2464fa063a2df94de323812496596d35c1c03ca05c336786d",
                    "deployTxnBlockNumber": "16649411",
                    "deployTimestamp": "1729067110",
                    "sourceName": "contracts/modules/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 765166,
                    "gasCost": "954140088"
                  },
                  "MarketConfigurationModule": {
                    "address": "0x0773232F3C996723278177d6Bd6918F5a5F6aDCb",
                    "abi": [
                      "error InvalidCollateralLeverage(uint256)",
                      "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                      "error InvalidWrapperFees()",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                      "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                      "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                      "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                      "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                      "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                      "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                      "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                      "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                      "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                      "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                      "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                      "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                      "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                      "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                      "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                      "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                      "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                      "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                      "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                      "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x7eed3b8bef4ca685c8bf50ead5c83a4322ec5253687e5476f400c9b3ec83e856",
                    "deployTxnBlockNumber": "16649413",
                    "deployTimestamp": "1729067114",
                    "sourceName": "contracts/modules/MarketConfigurationModule.sol",
                    "contractName": "MarketConfigurationModule",
                    "deployedOn": "contract.MarketConfigurationModule",
                    "gasUsed": 720683,
                    "gasCost": "950191939"
                  },
                  "SpotMarketFactoryModule": {
                    "address": "0xdF262B2b9b7a08c38748F04Ecce7658Ad0620567",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidMarketOwner()",
                      "error InvalidSynthImplementation(uint256 synthImplementation)",
                      "error InvalidTransactionTypeIndex(uint128 txnType)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error NotNominated(address addr)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "error OverflowInt256ToUint256()",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                      "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                      "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                      "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                      "event SynthImplementationSet(address synthImplementation)",
                      "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                      "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                      "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                      "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                      "function acceptMarketOwnership(uint128 synthMarketId)",
                      "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function getSynth(uint128 marketId) view returns (address synthAddress)",
                      "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                      "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                      "function name(uint128 marketId) view returns (string marketName)",
                      "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "function renounceMarketNomination(uint128 synthMarketId)",
                      "function renounceMarketOwnership(uint128 synthMarketId)",
                      "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                      "function setDecayRate(uint128 marketId, uint256 rate)",
                      "function setSynthImplementation(address synthImplementation)",
                      "function setSynthetix(address synthetix)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                      "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function upgradeSynthImpl(uint128 marketId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x798365a74e71d5faf99af057b2c31f23be38523422352ede70151554c589f4e6",
                    "deployTxnBlockNumber": "16649416",
                    "deployTimestamp": "1729067120",
                    "sourceName": "contracts/modules/SpotMarketFactoryModule.sol",
                    "contractName": "SpotMarketFactoryModule",
                    "deployedOn": "contract.SpotMarketFactoryModule",
                    "gasUsed": 2327426,
                    "gasCost": "952365226"
                  },
                  "SynthTokenModule": {
                    "address": "0x06511E19F5299eFc2075aD67f786A606b114811E",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidDecayRate()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function advanceEpoch() returns (uint256)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address user) view returns (uint256)",
                      "function burn(address from, uint256 amount)",
                      "function decayRate() view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function setDecayRate(uint256 _rate)",
                      "function symbol() view returns (string)",
                      "function totalShares() view returns (uint256)",
                      "function totalSupply() view returns (uint256 supply)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x0b3938128ee6b4d587ee7554ff7e39b203b7ff14eedd04b92b0be442c723813a",
                    "deployTxnBlockNumber": "16649418",
                    "deployTimestamp": "1729067124",
                    "sourceName": "contracts/modules/token/SynthTokenModule.sol",
                    "contractName": "SynthTokenModule",
                    "deployedOn": "contract.SynthTokenModule",
                    "gasUsed": 1207447,
                    "gasCost": "951461249"
                  },
                  "WrapperModule": {
                    "address": "0xb2d84d5b0b8E6d5f2937A564f4cB7fb213BE51A2",
                    "abi": [
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                      "error InvalidCollateralType(address configuredCollateralType)",
                      "error InvalidMarket(uint128 marketId)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                      "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                      "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xea43330db33c49ed9c85af64203f2a42b3b9af2f7ab46ca2baf683c295a2fd62",
                    "deployTxnBlockNumber": "16649420",
                    "deployTimestamp": "1729067128",
                    "sourceName": "contracts/modules/WrapperModule.sol",
                    "contractName": "WrapperModule",
                    "deployedOn": "contract.WrapperModule",
                    "gasUsed": 1684906,
                    "gasCost": "952952392"
                  },
                  "InitialSpotMarketProxy": {
                    "address": "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0xC04a9239DC38A6AED425f5FF0fEc6Ac6266A27A7",
                      "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x0dabacb46c3b33b04c0709cfa33322c5f5af6898dcac1660c1cfcd8fd7276497",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialSpotMarketProxy",
                    "gasUsed": 248149,
                    "gasCost": "1000318"
                  },
                  "SpotMarketRouter": {
                    "address": "0x07463c0c2ba77a6b6a69170fb8c0e50cc5f588a4",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidMarketOwner()",
                      "error InvalidSynthImplementation(uint256 synthImplementation)",
                      "error InvalidTransactionTypeIndex(uint128 txnType)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "error OverflowInt256ToUint256()",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                      "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                      "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                      "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                      "event SynthImplementationSet(address synthImplementation)",
                      "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                      "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                      "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                      "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                      "function acceptMarketOwnership(uint128 synthMarketId)",
                      "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function getSynth(uint128 marketId) view returns (address synthAddress)",
                      "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                      "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                      "function name(uint128 marketId) view returns (string marketName)",
                      "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "function renounceMarketNomination(uint128 synthMarketId)",
                      "function renounceMarketOwnership(uint128 synthMarketId)",
                      "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                      "function setDecayRate(uint128 marketId, uint256 rate)",
                      "function setSynthImplementation(address synthImplementation)",
                      "function setSynthetix(address synthetix)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                      "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function upgradeSynthImpl(uint128 marketId)",
                      "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                      "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                      "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                      "error InvalidMarket(uint128 marketId)",
                      "error InvalidPrices()",
                      "error OverflowUint256ToInt256()",
                      "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                      "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                      "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                      "error InvalidAsyncTransactionType(uint8 transactionType)",
                      "error InvalidClaim(uint256 asyncOrderId)",
                      "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                      "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                      "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                      "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                      "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                      "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                      "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "error InvalidSettlementStrategy(uint8 strategyType)",
                      "error InvalidVerificationResponse()",
                      "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                      "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                      "error OverflowUint256ToUint64()",
                      "error SettlementStrategyNotFound(uint8 strategyType)",
                      "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                      "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error InvalidSettlementWindowDuration(uint256 duration)",
                      "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                      "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                      "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                      "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InvalidCollateralType(address configuredCollateralType)",
                      "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                      "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                      "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error InvalidCollateralLeverage(uint256)",
                      "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                      "error InvalidWrapperFees()",
                      "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                      "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                      "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                      "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                      "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                      "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                      "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                      "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                      "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                      "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                      "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                      "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                      "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                      "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                      "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                      "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                      "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                      "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                      "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                      "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                      "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "deployedOn": "router.SpotMarketRouter",
                    "deployTxnHash": "0xce42253cb002d071b3322781fbdfe72c88ed8d2457d9d415ddb7f7aa654346a0",
                    "deployTxnBlockNumber": "16649422",
                    "deployTimestamp": "1729067132",
                    "contractName": "SpotMarketRouter",
                    "sourceName": "SpotMarketRouter.sol",
                    "gasUsed": 879925,
                    "gasCost": "953679229"
                  },
                  "SynthRouter": {
                    "address": "0xcdfce502963a101d544e0b0c9641a53fd6cfdc80",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidDecayRate()",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function advanceEpoch() returns (uint256)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address user) view returns (uint256)",
                      "function burn(address from, uint256 amount)",
                      "function decayRate() view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function setDecayRate(uint256 _rate)",
                      "function symbol() view returns (string)",
                      "function totalShares() view returns (uint256)",
                      "function totalSupply() view returns (uint256 supply)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.SynthRouter",
                    "deployTxnHash": "0x1a842e8522d479fd05851136ab9e86540e57a8c8e8e9758c4b3eb5dd4fa4c006",
                    "deployTxnBlockNumber": "16649424",
                    "deployTimestamp": "1729067136",
                    "contractName": "SynthRouter",
                    "sourceName": "SynthRouter.sol",
                    "gasUsed": 381169,
                    "gasCost": "949559076"
                  },
                  "SpotMarketProxy": {
                    "address": "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidMarketOwner()",
                      "error InvalidSynthImplementation(uint256 synthImplementation)",
                      "error InvalidTransactionTypeIndex(uint128 txnType)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error OnlyMarketOwner(address marketOwner, address sender)",
                      "error OverflowInt256ToUint256()",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                      "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                      "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                      "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                      "event SynthImplementationSet(address synthImplementation)",
                      "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                      "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                      "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                      "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                      "function acceptMarketOwnership(uint128 synthMarketId)",
                      "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                      "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function getSynth(uint128 marketId) view returns (address synthAddress)",
                      "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                      "function indexPrice(uint128 marketId, uint128 transactionType, uint8 priceTolerance) view returns (uint256 price)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                      "function name(uint128 marketId) view returns (string marketName)",
                      "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "function renounceMarketNomination(uint128 synthMarketId)",
                      "function renounceMarketOwnership(uint128 synthMarketId)",
                      "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                      "function setDecayRate(uint128 marketId, uint256 rate)",
                      "function setSynthImplementation(address synthImplementation)",
                      "function setSynthetix(address synthetix)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                      "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                      "function upgradeSynthImpl(uint128 marketId)",
                      "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                      "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                      "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                      "error InvalidMarket(uint128 marketId)",
                      "error InvalidPrices()",
                      "error OverflowUint256ToInt256()",
                      "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                      "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                      "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                      "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                      "error InvalidAsyncTransactionType(uint8 transactionType)",
                      "error InvalidClaim(uint256 asyncOrderId)",
                      "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                      "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                      "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                      "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                      "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                      "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                      "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                      "error InvalidSettlementStrategy(uint8 strategyType)",
                      "error InvalidVerificationResponse()",
                      "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                      "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                      "error OverflowUint256ToUint64()",
                      "error SettlementStrategyNotFound(uint8 strategyType)",
                      "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                      "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error InvalidSettlementWindowDuration(uint256 duration)",
                      "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                      "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                      "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                      "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                      "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InvalidCollateralType(address configuredCollateralType)",
                      "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                      "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                      "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                      "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                      "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                      "error InvalidCollateralLeverage(uint256)",
                      "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                      "error InvalidWrapperFees()",
                      "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                      "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                      "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                      "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                      "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                      "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                      "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                      "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                      "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                      "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                      "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                      "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                      "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                      "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                      "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                      "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                      "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                      "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                      "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                      "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                      "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                      "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                      "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgradeSpotMarketProxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "settings": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "snax",
                  "synthetixPackage": "synthetix",
                  "synthetixPreset": "main"
                },
                "imports": {
                  "synthetix": {
                    "url": "ipfs://QmaoPV7jyHQF6ViTqPMvRFqGS3HWrXwr6Y1wCBtkai1Fbw",
                    "contracts": {
                      "AccountModule": {
                        "address": "0xd4DFE8F3b91007ec187f8b74A3cEEDBA7A0873f7",
                        "abi": [
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidAccountId(uint128 accountId)",
                          "error InvalidPermission(bytes32 permission)",
                          "error OnlyAccountTokenProxy(address origin)",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                          "error PositionOutOfBounds()",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "error ZeroAddress()",
                          "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                          "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "function createAccount() returns (uint128 accountId)",
                          "function createAccount(uint128 requestedAccountId)",
                          "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                          "function getAccountOwner(uint128 accountId) view returns (address)",
                          "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                          "function getAccountTokenAddress() view returns (address)",
                          "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                          "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function notifyAccountTransfer(address to, uint128 accountId)",
                          "function renouncePermission(uint128 accountId, bytes32 permission)",
                          "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x734f5d976bbfa5c0ec21808b4ff1b1b0532bdaaf2a07db1d08bde28c202bca66",
                        "deployTxnBlockNumber": "16649339",
                        "deployTimestamp": "1729066966",
                        "sourceName": "contracts/modules/core/AccountModule.sol",
                        "contractName": "AccountModule",
                        "deployedOn": "contract.AccountModule",
                        "gasUsed": 1225809,
                        "gasCost": "936592307"
                      },
                      "AccountTokenModule": {
                        "address": "0x6d448d821cbd5AA1A52dD3854ed0AEc2d1BF8832",
                        "abi": [
                          "error AlreadyInitialized()",
                          "error CannotSelfApprove(address addr)",
                          "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                          "error InvalidOwner(address addr)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidTransferRecipient(address addr)",
                          "error OverflowUint256ToUint128()",
                          "error TokenAlreadyMinted(uint256 id)",
                          "error TokenDoesNotExist(uint256 id)",
                          "error Unauthorized(address addr)",
                          "error ZeroAddress()",
                          "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                          "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                          "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                          "function approve(address to, uint256 tokenId)",
                          "function balanceOf(address holder) view returns (uint256 balance)",
                          "function burn(uint256 tokenId)",
                          "function getApproved(uint256 tokenId) view returns (address operator)",
                          "function initialize(string tokenName, string tokenSymbol, string uri)",
                          "function isApprovedForAll(address holder, address operator) view returns (bool)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address to, uint256 tokenId)",
                          "function name() view returns (string)",
                          "function ownerOf(uint256 tokenId) view returns (address)",
                          "function safeMint(address to, uint256 tokenId, bytes data)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                          "function setAllowance(uint256 tokenId, address spender)",
                          "function setApprovalForAll(address operator, bool approved)",
                          "function setBaseTokenURI(string uri)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "function symbol() view returns (string)",
                          "function tokenByIndex(uint256 index) view returns (uint256)",
                          "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                          "function tokenURI(uint256 tokenId) view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transferFrom(address from, address to, uint256 tokenId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xd2af7a26d94f40173e1efabe174b03163cfb551b29fa45c909b70878f3b292b4",
                        "deployTxnBlockNumber": "16649341",
                        "deployTimestamp": "1729066970",
                        "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                        "contractName": "AccountTokenModule",
                        "deployedOn": "contract.AccountTokenModule",
                        "gasUsed": 1787668,
                        "gasCost": "932975250"
                      },
                      "AssociateDebtModule": {
                        "address": "0xEe047Ca39AE1EF562f3D5F23c1B8A5b074955331",
                        "abi": [
                          "error AccountNotFound(uint128 accountId)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error MarketNotFound(uint128 marketId)",
                          "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error Unauthorized(address addr)",
                          "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                          "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x2cdc64893f97d21159360a5096ad3abe14df13349fee8361324c43c10f10e694",
                        "deployTxnBlockNumber": "16649344",
                        "deployTimestamp": "1729066976",
                        "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                        "contractName": "AssociateDebtModule",
                        "deployedOn": "contract.AssociateDebtModule",
                        "gasUsed": 2603996,
                        "gasCost": "933120208"
                      },
                      "AssociatedSystemsModule": {
                        "address": "0xC8440d8e46D3C06beD106C6f2F918F30182bEb06",
                        "abi": [
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "error Unauthorized(address addr)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xbdad45d38a1b1de1a6d9518ac7192e5bf5cf0c338a9f8c41fdbd33a30d9c6610",
                        "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                        "contractName": "AssociatedSystemsModule",
                        "deployedOn": "contract.AssociatedSystemsModule",
                        "gasUsed": 877153,
                        "gasCost": "1000305"
                      },
                      "CcipReceiverModule": {
                        "address": "0x290052592c38b55f827ec377B2a8023e734B815C",
                        "abi": [
                          "error InvalidMessage()",
                          "error NotCcipRouter(address)",
                          "error Unauthorized(address addr)",
                          "error UnsupportedNetwork(uint64)",
                          "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x0a1ac64516ad97aca7fe23966c6050476f7c839b286cf64a5e2338d8a9e7e7b2",
                        "deployTxnBlockNumber": "16649346",
                        "deployTimestamp": "1729066980",
                        "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                        "contractName": "CcipReceiverModule",
                        "deployedOn": "contract.CcipReceiverModule",
                        "gasUsed": 469476,
                        "gasCost": "936917569"
                      },
                      "CollateralConfigurationModule": {
                        "address": "0x98A58c2A364f5C9dA829a8738Ba8b192E7B706db",
                        "abi": [
                          "error EmptyRevertReason()",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowInt256ToUint256()",
                          "error PositionOutOfBounds()",
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                          "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                          "function getCollateralPrice(address collateralType) view returns (uint256)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x3050067c8dad45ed319ffc5d018760acea5008c4bcdab87d645144b585beb212",
                        "deployTxnBlockNumber": "16649348",
                        "deployTimestamp": "1729066984",
                        "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                        "contractName": "CollateralConfigurationModule",
                        "deployedOn": "contract.CollateralConfigurationModule",
                        "gasUsed": 872728,
                        "gasCost": "937172209"
                      },
                      "CollateralModule": {
                        "address": "0xE8Ae6cAC1aBbC0Eef81D85f8f5f4402f164300FD",
                        "abi": [
                          "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                          "error AccountNotFound(uint128 accountId)",
                          "error CollateralDepositDisabled(address collateralType)",
                          "error CollateralNotFound()",
                          "error EmptyRevertReason()",
                          "error FailedTransfer(address from, address to, uint256 value)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientAccountCollateral(uint256 amount)",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint256ToUint128()",
                          "error OverflowUint256ToUint64()",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PositionOutOfBounds()",
                          "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                          "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                          "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                          "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                          "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                          "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                          "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                          "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                          "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x9135ef7a5060b7e3b30af8aaf4cbea2747784ce00a8f74d3498f66fab944981d",
                        "deployTxnBlockNumber": "16649350",
                        "deployTimestamp": "1729066988",
                        "sourceName": "contracts/modules/core/CollateralModule.sol",
                        "contractName": "CollateralModule",
                        "deployedOn": "contract.CollateralModule",
                        "gasUsed": 1878022,
                        "gasCost": "937764119"
                      },
                      "CrossChainUSDModule": {
                        "address": "0x0Db649f56b99B15c70198C925CD374b95B6Df5E8",
                        "abi": [
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                          "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xd57eddd8ebbaaffdda7d1ccdedd8345b8cb7e1dba787af550943cc10b7be4830",
                        "deployTxnBlockNumber": "16649352",
                        "deployTimestamp": "1729066992",
                        "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                        "contractName": "CrossChainUSDModule",
                        "deployedOn": "contract.CrossChainUSDModule",
                        "gasUsed": 595289,
                        "gasCost": "934748763"
                      },
                      "FeatureFlagModule": {
                        "address": "0x57a24eafBCeDF9CEFD242b259517C84b9d72e3Ae",
                        "abi": [
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                          "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                          "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                          "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                          "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                          "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function getDeniers(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                          "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                          "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                          "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function setDeniers(bytes32 feature, address[] deniers)",
                          "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                          "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xb8ed47b80ee3a4301f24b809cb8376373e4d68fea596a8c4c7ab5a89228c5a68",
                        "deployTxnBlockNumber": "16649354",
                        "deployTimestamp": "1729066996",
                        "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                        "contractName": "FeatureFlagModule",
                        "deployedOn": "contract.FeatureFlagModule",
                        "gasUsed": 777054,
                        "gasCost": "935496418"
                      },
                      "IssueUSDModule": {
                        "address": "0x8C9126A0dD9e2B60a69a4957669C507ff1c07C69",
                        "abi": [
                          "error CollateralDepositDisabled(address collateralType)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error InsufficientDebt(int256 currentDebt)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error MarketNotFound(uint128 marketId)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PoolNotFound(uint128 poolId)",
                          "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x1c864f9da23ddbe73a793494ef991044b6588ae73c290a6e79b4535649f698d9",
                        "deployTxnBlockNumber": "16649356",
                        "deployTimestamp": "1729067000",
                        "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                        "contractName": "IssueUSDModule",
                        "deployedOn": "contract.IssueUSDModule",
                        "gasUsed": 2940922,
                        "gasCost": "937306460"
                      },
                      "LiquidationModule": {
                        "address": "0xC090A806CC37c4C6CA9fc8eb7b7098d78eE72b60",
                        "abi": [
                          "error AccountNotFound(uint128 accountId)",
                          "error CannotScaleEmptyMapping()",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                          "error InsufficientMappedAmount()",
                          "error InvalidParameter(string parameter, string reason)",
                          "error MarketNotFound(uint128 marketId)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MustBeVaultLiquidated()",
                          "error OverflowInt128ToUint128()",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint256ToUint64()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "error PositionOutOfBounds()",
                          "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                          "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                          "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x3f4c10c3063b131da4b40f91d2fef5bc8294293ea31a63c606131902ecc314d0",
                        "deployTxnBlockNumber": "16649358",
                        "deployTimestamp": "1729067004",
                        "sourceName": "contracts/modules/core/LiquidationModule.sol",
                        "contractName": "LiquidationModule",
                        "deployedOn": "contract.LiquidationModule",
                        "gasUsed": 4289682,
                        "gasCost": "935586433"
                      },
                      "MarketCollateralModule": {
                        "address": "0xD88de2Ee855f145ab1eCFfF8273661C3d59fc8ad",
                        "abi": [
                          "error CollateralNotFound()",
                          "error EmptyRevertReason()",
                          "error FailedTransfer(address from, address to, uint256 value)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                          "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint256ToInt256()",
                          "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                          "error Unauthorized(address addr)",
                          "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                          "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                          "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                          "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                          "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                          "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xc5c4642d703fe51a5736f64cd0b91f641d0b0b14d582596313c350ac2b529f9e",
                        "deployTxnBlockNumber": "16649360",
                        "deployTimestamp": "1729067008",
                        "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                        "contractName": "MarketCollateralModule",
                        "deployedOn": "contract.MarketCollateralModule",
                        "gasUsed": 1298300,
                        "gasCost": "938598453"
                      },
                      "MarketManagerModule": {
                        "address": "0x35B79eD956064338d3DF10abc215Ab128C6265BE",
                        "abi": [
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error FeatureUnavailable(bytes32 which)",
                          "error IncorrectMarketInterface(address market)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error Unauthorized(address addr)",
                          "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                          "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                          "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                          "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                          "function getMarketAddress(uint128 marketId) view returns (address)",
                          "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                          "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                          "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                          "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                          "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                          "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                          "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                          "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                          "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                          "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                          "function getOracleManager() view returns (address)",
                          "function getUsdToken() view returns (address)",
                          "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                          "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                          "function registerMarket(address market) returns (uint128 marketId)",
                          "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                          "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                          "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xe7d5907e9bc6931cfd5d6ec2ee85fd04e32746281b79230ec9d301536c5e90ae",
                        "deployTxnBlockNumber": "16649362",
                        "deployTimestamp": "1729067012",
                        "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                        "contractName": "MarketManagerModule",
                        "deployedOn": "contract.MarketManagerModule",
                        "gasUsed": 2730455,
                        "gasCost": "938162086"
                      },
                      "PoolConfigurationModule": {
                        "address": "0x39fBdCBa20E57BC672DDD9f5756Dc8b5Fabe526a",
                        "abi": [
                          "error PoolNotFound(uint128 poolId)",
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event PoolApprovedAdded(uint256 poolId)",
                          "event PoolApprovedRemoved(uint256 poolId)",
                          "event PreferredPoolSet(uint256 poolId)",
                          "function addApprovedPool(uint128 poolId)",
                          "function getApprovedPools() view returns (uint256[])",
                          "function getPreferredPool() view returns (uint128)",
                          "function removeApprovedPool(uint128 poolId)",
                          "function setPreferredPool(uint128 poolId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xfe15402ad6fe9cfd54a4da2874d181a8c516c025d984b5ec4740f2910cea30ec",
                        "deployTxnBlockNumber": "16649364",
                        "deployTimestamp": "1729067016",
                        "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                        "contractName": "PoolConfigurationModule",
                        "deployedOn": "contract.PoolConfigurationModule",
                        "gasUsed": 446271,
                        "gasCost": "938194121"
                      },
                      "PoolModule": {
                        "address": "0x65a62Dc05B66FD007d05f2E34085348A45c6a424",
                        "abi": [
                          "error CapacityLocked(uint256 marketId)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error MarketNotFound(uint128 marketId)",
                          "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error PoolAlreadyExists(uint128 poolId)",
                          "error PoolNotFound(uint128 poolId)",
                          "error Unauthorized(address addr)",
                          "error ZeroAddress()",
                          "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                          "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                          "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                          "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                          "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                          "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                          "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                          "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function acceptPoolOwnership(uint128 poolId)",
                          "function createPool(uint128 requestedPoolId, address owner)",
                          "function getMinLiquidityRatio() view returns (uint256)",
                          "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                          "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                          "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                          "function getPoolName(uint128 poolId) view returns (string poolName)",
                          "function getPoolOwner(uint128 poolId) view returns (address)",
                          "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                          "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                          "function renouncePoolNomination(uint128 poolId)",
                          "function renouncePoolOwnership(uint128 poolId)",
                          "function revokePoolNomination(uint128 poolId)",
                          "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                          "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                          "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                          "function setPoolName(uint128 poolId, string name)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x4a9563128d503b59b74d159ed8b1745ec4d75645cb505f1a53f4990267c38886",
                        "deployTxnBlockNumber": "16649366",
                        "deployTimestamp": "1729067020",
                        "sourceName": "contracts/modules/core/PoolModule.sol",
                        "contractName": "PoolModule",
                        "deployedOn": "contract.PoolModule",
                        "gasUsed": 3986001,
                        "gasCost": "941481539"
                      },
                      "RewardsManagerModule": {
                        "address": "0x4A3979b6dc29B311e8c27D4E2cdF1E35f89913b0",
                        "abi": [
                          "error AccountNotFound(uint128 accountId)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PositionOutOfBounds()",
                          "error RewardUnavailable(address distributor)",
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                          "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                          "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                          "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xbbc9ba761efa021f34153e39acaf3c8123e8d7a81f928be226b312cd978c2e16",
                        "deployTxnBlockNumber": "16649368",
                        "deployTimestamp": "1729067024",
                        "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                        "contractName": "RewardsManagerModule",
                        "deployedOn": "contract.RewardsManagerModule",
                        "gasUsed": 2642251,
                        "gasCost": "942593115"
                      },
                      "USDTokenModule": {
                        "address": "0x2F0f4304676B1399D970bac6488053F7014A80a6",
                        "abi": [
                          "error AlreadyInitialized()",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InsufficientBalance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error Unauthorized(address addr)",
                          "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                          "event Transfer(address indexed from, address indexed to, uint256 amount)",
                          "function allowance(address owner, address spender) view returns (uint256)",
                          "function approve(address spender, uint256 amount) returns (bool)",
                          "function balanceOf(address owner) view returns (uint256)",
                          "function burn(uint256 amount)",
                          "function burn(address target, uint256 amount)",
                          "function burnWithAllowance(address from, address spender, uint256 amount)",
                          "function decimals() view returns (uint8)",
                          "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                          "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                          "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address target, uint256 amount)",
                          "function name() view returns (string)",
                          "function setAllowance(address from, address spender, uint256 amount)",
                          "function symbol() view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transfer(address to, uint256 amount) returns (bool)",
                          "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0xca0f2c066651896de5930e5ee954bd0c03b025fa2c2a32eb8395c335a6d6905a",
                        "deployTxnBlockNumber": "16649371",
                        "deployTimestamp": "1729067030",
                        "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                        "contractName": "USDTokenModule",
                        "deployedOn": "contract.USDTokenModule",
                        "gasUsed": 1110294,
                        "gasCost": "939871566"
                      },
                      "UtilsModule": {
                        "address": "0xa76f3067888222b37a667814f696038b658B7368",
                        "abi": [
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowUint256ToUint64()",
                          "error Unauthorized(address addr)",
                          "error ValueAlreadyInSet()",
                          "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                          "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                          "function configureOracleManager(address oracleManagerAddress)",
                          "function getConfig(bytes32 k) view returns (bytes32 v)",
                          "function getConfigAddress(bytes32 k) view returns (address v)",
                          "function getConfigUint(bytes32 k) view returns (uint256 v)",
                          "function getTrustedForwarder() pure returns (address)",
                          "function isTrustedForwarder(address forwarder) pure returns (bool)",
                          "function setConfig(bytes32 k, bytes32 v)",
                          "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x1e9d8122afd7dc158660bf1f9bb8ea629ed274203f628129ae91b5f54fe5753e",
                        "deployTxnBlockNumber": "16649373",
                        "deployTimestamp": "1729067034",
                        "sourceName": "contracts/modules/core/UtilsModule.sol",
                        "contractName": "UtilsModule",
                        "deployedOn": "contract.UtilsModule",
                        "gasUsed": 759697,
                        "gasCost": "944385460"
                      },
                      "VaultModule": {
                        "address": "0xA24ECBF86E4cD4763084cF1f1E7709400cE8d3BC",
                        "abi": [
                          "error CapacityLocked(uint256 marketId)",
                          "error CollateralDepositDisabled(address collateralType)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientAccountCollateral(uint256 amount)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error InsufficientDelegation(uint256 minDelegation)",
                          "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                          "error InvalidCollateralAmount()",
                          "error InvalidLeverage(uint256 leverage)",
                          "error MarketNotFound(uint128 marketId)",
                          "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                          "error OverflowInt128ToUint128()",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                          "error PoolNotFound(uint128 poolId)",
                          "error PositionOutOfBounds()",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                          "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                          "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                          "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                          "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                          "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                          "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                          "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                          "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x939f10bb60d2dba483fa7c5c900ca69760fe55dad1191ecf1e26c9ea9e83a50a",
                        "deployTxnBlockNumber": "16649375",
                        "deployTimestamp": "1729067038",
                        "sourceName": "contracts/modules/core/VaultModule.sol",
                        "contractName": "VaultModule",
                        "deployedOn": "contract.VaultModule",
                        "gasUsed": 4244908,
                        "gasCost": "941449312"
                      },
                      "InitialModuleBundle": {
                        "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "sourceName": "contracts/modules/InitialModuleBundle.sol",
                        "contractName": "InitialModuleBundle",
                        "deployedOn": "contract.InitialModuleBundle",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "InitialCoreProxy": {
                        "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x828EED723cAF0A8F822249231266E38dF614923C",
                          "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x5913f591061763378a9209c9ea168efbfd1de19af4440dbfcf5a73004f091491",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialCoreProxy",
                        "gasUsed": 185358,
                        "gasCost": "1000317"
                      },
                      "AccountRouter": {
                        "address": "0x768f77f75c7c4b6b81758bf56ce0ab70762b37e6",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error AlreadyInitialized()",
                          "error CannotSelfApprove(address addr)",
                          "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                          "error InvalidOwner(address addr)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidTransferRecipient(address addr)",
                          "error OverflowUint256ToUint128()",
                          "error TokenAlreadyMinted(uint256 id)",
                          "error TokenDoesNotExist(uint256 id)",
                          "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                          "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                          "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                          "function approve(address to, uint256 tokenId)",
                          "function balanceOf(address holder) view returns (uint256 balance)",
                          "function burn(uint256 tokenId)",
                          "function getApproved(uint256 tokenId) view returns (address operator)",
                          "function initialize(string tokenName, string tokenSymbol, string uri)",
                          "function isApprovedForAll(address holder, address operator) view returns (bool)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address to, uint256 tokenId)",
                          "function name() view returns (string)",
                          "function ownerOf(uint256 tokenId) view returns (address)",
                          "function safeMint(address to, uint256 tokenId, bytes data)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                          "function setAllowance(uint256 tokenId, address spender)",
                          "function setApprovalForAll(address operator, bool approved)",
                          "function setBaseTokenURI(string uri)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "function symbol() view returns (string)",
                          "function tokenByIndex(uint256 index) view returns (uint256)",
                          "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                          "function tokenURI(uint256 tokenId) view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transferFrom(address from, address to, uint256 tokenId)"
                        ],
                        "deployedOn": "router.AccountRouter",
                        "deployTxnHash": "0xbac818a079f296ffb1759aaecef641f5471ebed0cf6829aba98ea826cbb07a0b",
                        "deployTxnBlockNumber": "16649378",
                        "deployTimestamp": "1729067044",
                        "contractName": "AccountRouter",
                        "sourceName": "AccountRouter.sol",
                        "gasUsed": 406486,
                        "gasCost": "949929423"
                      },
                      "CoreRouter": {
                        "address": "0xad3553dc909d1d72a290ae14a530a46c57bb4d3d",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                          "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                          "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                          "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                          "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                          "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function getDeniers(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                          "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                          "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                          "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function setDeniers(bytes32 feature, address[] deniers)",
                          "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                          "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidAccountId(uint128 accountId)",
                          "error InvalidPermission(bytes32 permission)",
                          "error OnlyAccountTokenProxy(address origin)",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                          "error PositionOutOfBounds()",
                          "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                          "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "function createAccount() returns (uint128 accountId)",
                          "function createAccount(uint128 requestedAccountId)",
                          "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                          "function getAccountOwner(uint128 accountId) view returns (address)",
                          "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                          "function getAccountTokenAddress() view returns (address)",
                          "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                          "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function notifyAccountTransfer(address to, uint128 accountId)",
                          "function renouncePermission(uint128 accountId, bytes32 permission)",
                          "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                          "error AccountNotFound(uint128 accountId)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error MarketNotFound(uint128 marketId)",
                          "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                          "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                          "error InvalidMessage()",
                          "error NotCcipRouter(address)",
                          "error UnsupportedNetwork(uint64)",
                          "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                          "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                          "error CollateralDepositDisabled(address collateralType)",
                          "error CollateralNotFound()",
                          "error FailedTransfer(address from, address to, uint256 value)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientAccountCollateral(uint256 amount)",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowUint256ToUint64()",
                          "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                          "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                          "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                          "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                          "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                          "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                          "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                          "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                          "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                          "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                          "function getCollateralPrice(address collateralType) view returns (uint256)",
                          "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                          "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                          "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                          "error InsufficientDebt(int256 currentDebt)",
                          "error PoolNotFound(uint128 poolId)",
                          "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "error CannotScaleEmptyMapping()",
                          "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                          "error InsufficientMappedAmount()",
                          "error MustBeVaultLiquidated()",
                          "error OverflowInt128ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                          "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                          "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                          "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                          "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                          "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                          "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                          "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                          "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                          "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "error IncorrectMarketInterface(address market)",
                          "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                          "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                          "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                          "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                          "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                          "function getMarketAddress(uint128 marketId) view returns (address)",
                          "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                          "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                          "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                          "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                          "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                          "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                          "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                          "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                          "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                          "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                          "function getOracleManager() view returns (address)",
                          "function getUsdToken() view returns (address)",
                          "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                          "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                          "function registerMarket(address market) returns (uint128 marketId)",
                          "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                          "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                          "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "event PoolApprovedAdded(uint256 poolId)",
                          "event PoolApprovedRemoved(uint256 poolId)",
                          "event PreferredPoolSet(uint256 poolId)",
                          "function addApprovedPool(uint128 poolId)",
                          "function getApprovedPools() view returns (uint256[])",
                          "function getPreferredPool() view returns (uint128)",
                          "function removeApprovedPool(uint128 poolId)",
                          "function setPreferredPool(uint128 poolId)",
                          "error CapacityLocked(uint256 marketId)",
                          "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                          "error PoolAlreadyExists(uint128 poolId)",
                          "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                          "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                          "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                          "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                          "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                          "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                          "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                          "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function acceptPoolOwnership(uint128 poolId)",
                          "function createPool(uint128 requestedPoolId, address owner)",
                          "function getMinLiquidityRatio() view returns (uint256)",
                          "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                          "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                          "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                          "function getPoolName(uint128 poolId) view returns (string poolName)",
                          "function getPoolOwner(uint128 poolId) view returns (address)",
                          "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                          "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                          "function renouncePoolNomination(uint128 poolId)",
                          "function renouncePoolOwnership(uint128 poolId)",
                          "function revokePoolNomination(uint128 poolId)",
                          "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                          "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                          "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                          "function setPoolName(uint128 poolId, string name)",
                          "error RewardUnavailable(address distributor)",
                          "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                          "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                          "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                          "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                          "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                          "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                          "function configureOracleManager(address oracleManagerAddress)",
                          "function getConfig(bytes32 k) view returns (bytes32 v)",
                          "function getConfigAddress(bytes32 k) view returns (address v)",
                          "function getConfigUint(bytes32 k) view returns (uint256 v)",
                          "function getTrustedForwarder() pure returns (address)",
                          "function isTrustedForwarder(address forwarder) pure returns (bool)",
                          "function setConfig(bytes32 k, bytes32 v)",
                          "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "error InsufficientDelegation(uint256 minDelegation)",
                          "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                          "error InvalidCollateralAmount()",
                          "error InvalidLeverage(uint256 leverage)",
                          "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                          "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                          "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                          "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                          "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                          "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                          "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                          "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                          "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                          "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                        ],
                        "deployedOn": "router.CoreRouter",
                        "deployTxnHash": "0x7a059a46a4b514a360ccf2260f8bc8baa33bf74f309a7ba1c0fa2952e8b30f6a",
                        "deployTxnBlockNumber": "16649380",
                        "deployTimestamp": "1729067048",
                        "contractName": "CoreRouter",
                        "sourceName": "CoreRouter.sol",
                        "gasUsed": 1318142,
                        "gasCost": "945143807"
                      },
                      "USDRouter": {
                        "address": "0x44d4a4796a7604419e4051d4ab1e060759db99fb",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                          "error AlreadyInitialized()",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InsufficientBalance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                          "event Transfer(address indexed from, address indexed to, uint256 amount)",
                          "function allowance(address owner, address spender) view returns (uint256)",
                          "function approve(address spender, uint256 amount) returns (bool)",
                          "function balanceOf(address owner) view returns (uint256)",
                          "function burn(uint256 amount)",
                          "function burn(address target, uint256 amount)",
                          "function burnWithAllowance(address from, address spender, uint256 amount)",
                          "function decimals() view returns (uint8)",
                          "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                          "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                          "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address target, uint256 amount)",
                          "function name() view returns (string)",
                          "function setAllowance(address from, address spender, uint256 amount)",
                          "function symbol() view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transfer(address to, uint256 amount) returns (bool)",
                          "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                        ],
                        "deployedOn": "router.USDRouter",
                        "deployTxnHash": "0xade8ab8e92554c274e7b22ab353c4fe32ed2754195a0dcce871f2f73f21dc611",
                        "deployTxnBlockNumber": "16649382",
                        "deployTimestamp": "1729067052",
                        "contractName": "USDRouter",
                        "sourceName": "USDRouter.sol",
                        "gasUsed": 398033,
                        "gasCost": "945780250"
                      },
                      "CoreProxy": {
                        "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error ValueAlreadyInSet()",
                          "error ValueNotInSet()",
                          "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                          "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                          "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                          "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                          "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                          "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function getDeniers(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                          "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                          "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                          "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                          "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                          "function setDeniers(bytes32 feature, address[] deniers)",
                          "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                          "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                          "error FeatureUnavailable(bytes32 which)",
                          "error InvalidAccountId(uint128 accountId)",
                          "error InvalidPermission(bytes32 permission)",
                          "error OnlyAccountTokenProxy(address origin)",
                          "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                          "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                          "error PositionOutOfBounds()",
                          "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                          "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                          "function createAccount() returns (uint128 accountId)",
                          "function createAccount(uint128 requestedAccountId)",
                          "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                          "function getAccountOwner(uint128 accountId) view returns (address)",
                          "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                          "function getAccountTokenAddress() view returns (address)",
                          "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                          "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                          "function notifyAccountTransfer(address to, uint128 accountId)",
                          "function renouncePermission(uint128 accountId, bytes32 permission)",
                          "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                          "error AccountNotFound(uint128 accountId)",
                          "error EmptyDistribution()",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                          "error MarketNotFound(uint128 marketId)",
                          "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                          "error OverflowInt256ToInt128()",
                          "error OverflowInt256ToUint256()",
                          "error OverflowUint128ToInt128()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint128()",
                          "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                          "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                          "error InvalidMessage()",
                          "error NotCcipRouter(address)",
                          "error UnsupportedNetwork(uint64)",
                          "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                          "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                          "error CollateralDepositDisabled(address collateralType)",
                          "error CollateralNotFound()",
                          "error FailedTransfer(address from, address to, uint256 value)",
                          "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                          "error InsufficientAccountCollateral(uint256 amount)",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error OverflowUint256ToUint64()",
                          "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                          "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                          "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                          "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                          "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                          "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                          "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                          "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                          "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                          "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                          "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                          "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                          "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                          "function getCollateralPrice(address collateralType) view returns (uint256)",
                          "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                          "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                          "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                          "error InsufficientDebt(int256 currentDebt)",
                          "error PoolNotFound(uint128 poolId)",
                          "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                          "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                          "error CannotScaleEmptyMapping()",
                          "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                          "error InsufficientMappedAmount()",
                          "error MustBeVaultLiquidated()",
                          "error OverflowInt128ToUint128()",
                          "error OverflowUint256ToUint32()",
                          "error OverflowUint32ToInt32()",
                          "error OverflowUint64ToInt64()",
                          "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                          "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                          "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                          "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                          "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                          "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                          "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                          "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                          "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                          "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                          "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                          "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                          "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                          "error IncorrectMarketInterface(address market)",
                          "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                          "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                          "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                          "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                          "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                          "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                          "function getMarketAddress(uint128 marketId) view returns (address)",
                          "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                          "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                          "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                          "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                          "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                          "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                          "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                          "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                          "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                          "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                          "function getOracleManager() view returns (address)",
                          "function getUsdToken() view returns (address)",
                          "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                          "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                          "function registerMarket(address market) returns (uint128 marketId)",
                          "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                          "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                          "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                          "event PoolApprovedAdded(uint256 poolId)",
                          "event PoolApprovedRemoved(uint256 poolId)",
                          "event PreferredPoolSet(uint256 poolId)",
                          "function addApprovedPool(uint128 poolId)",
                          "function getApprovedPools() view returns (uint256[])",
                          "function getPreferredPool() view returns (uint128)",
                          "function removeApprovedPool(uint128 poolId)",
                          "function setPreferredPool(uint128 poolId)",
                          "error CapacityLocked(uint256 marketId)",
                          "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                          "error PoolAlreadyExists(uint128 poolId)",
                          "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                          "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                          "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                          "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                          "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                          "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                          "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                          "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                          "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function acceptPoolOwnership(uint128 poolId)",
                          "function createPool(uint128 requestedPoolId, address owner)",
                          "function getMinLiquidityRatio() view returns (uint256)",
                          "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                          "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                          "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                          "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                          "function getPoolName(uint128 poolId) view returns (string poolName)",
                          "function getPoolOwner(uint128 poolId) view returns (address)",
                          "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                          "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                          "function renouncePoolNomination(uint128 poolId)",
                          "function renouncePoolOwnership(uint128 poolId)",
                          "function revokePoolNomination(uint128 poolId)",
                          "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                          "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                          "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                          "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                          "function setPoolName(uint128 poolId, string name)",
                          "error RewardUnavailable(address distributor)",
                          "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                          "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                          "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                          "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                          "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                          "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                          "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                          "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                          "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                          "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                          "function configureOracleManager(address oracleManagerAddress)",
                          "function getConfig(bytes32 k) view returns (bytes32 v)",
                          "function getConfigAddress(bytes32 k) view returns (address v)",
                          "function getConfigUint(bytes32 k) view returns (uint256 v)",
                          "function getTrustedForwarder() pure returns (address)",
                          "function isTrustedForwarder(address forwarder) pure returns (bool)",
                          "function setConfig(bytes32 k, bytes32 v)",
                          "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "error InsufficientDelegation(uint256 minDelegation)",
                          "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                          "error InvalidCollateralAmount()",
                          "error InvalidLeverage(uint256 leverage)",
                          "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                          "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                          "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                          "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                          "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                          "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                          "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                          "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                          "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                          "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "invoke.upgrade_core_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      },
                      "AccountProxy": {
                        "address": "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error AlreadyInitialized()",
                          "error CannotSelfApprove(address addr)",
                          "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                          "error InvalidOwner(address addr)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidTransferRecipient(address addr)",
                          "error OverflowUint256ToUint128()",
                          "error TokenAlreadyMinted(uint256 id)",
                          "error TokenDoesNotExist(uint256 id)",
                          "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                          "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                          "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                          "function approve(address to, uint256 tokenId)",
                          "function balanceOf(address holder) view returns (uint256 balance)",
                          "function burn(uint256 tokenId)",
                          "function getApproved(uint256 tokenId) view returns (address operator)",
                          "function initialize(string tokenName, string tokenSymbol, string uri)",
                          "function isApprovedForAll(address holder, address operator) view returns (bool)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address to, uint256 tokenId)",
                          "function name() view returns (string)",
                          "function ownerOf(uint256 tokenId) view returns (address)",
                          "function safeMint(address to, uint256 tokenId, bytes data)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId)",
                          "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                          "function setAllowance(uint256 tokenId, address spender)",
                          "function setApprovalForAll(address operator, bool approved)",
                          "function setBaseTokenURI(string uri)",
                          "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                          "function symbol() view returns (string)",
                          "function tokenByIndex(uint256 index) view returns (uint256)",
                          "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                          "function tokenURI(uint256 tokenId) view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transferFrom(address from, address to, uint256 tokenId)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                        "contractName": "UUPSProxyWithOwner",
                        "deployedOn": "invoke.init_account",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      },
                      "USDProxy": {
                        "address": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                          "error MissingAssociatedSystem(bytes32 id)",
                          "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                          "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                          "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                          "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                          "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                          "error AlreadyInitialized()",
                          "error InsufficientAllowance(uint256 required, uint256 existing)",
                          "error InsufficientBalance(uint256 required, uint256 existing)",
                          "error InvalidParameter(string parameter, string reason)",
                          "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                          "event Transfer(address indexed from, address indexed to, uint256 amount)",
                          "function allowance(address owner, address spender) view returns (uint256)",
                          "function approve(address spender, uint256 amount) returns (bool)",
                          "function balanceOf(address owner) view returns (uint256)",
                          "function burn(uint256 amount)",
                          "function burn(address target, uint256 amount)",
                          "function burnWithAllowance(address from, address spender, uint256 amount)",
                          "function decimals() view returns (uint8)",
                          "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                          "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                          "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                          "function isInitialized() view returns (bool)",
                          "function mint(address target, uint256 amount)",
                          "function name() view returns (string)",
                          "function setAllowance(address from, address spender, uint256 amount)",
                          "function symbol() view returns (string)",
                          "function totalSupply() view returns (uint256)",
                          "function transfer(address to, uint256 amount) returns (bool)",
                          "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                        "contractName": "UUPSProxyWithOwner",
                        "deployedOn": "invoke.init_usd",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmYi3NuhRQQVwHZLQd9KBCsg2HKeFP769mR6Yi2g2mA9cE",
                        "tags": [
                          "latest"
                        ],
                        "preset": "with-synthetix",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      },
                      "oracle_manager": {
                        "url": "ipfs://QmaSYrc3XvdZ2LhUDQ2njMCkHsfNT3nDLDDLJWwE8UaVkr",
                        "contracts": {
                          "NodeModule": {
                            "address": "0xE1681e5aC826043Ae6575ee1fD5E7064751c2fc5",
                            "abi": [
                              "error EmptyRevertReason()",
                              "error Errors(bytes[] errors)",
                              "error Errors(bytes[] revertReasons)",
                              "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                              "error InvalidParameter(string parameter, string reason)",
                              "error InvalidPrice(int256 price)",
                              "error NodeNotRegistered(bytes32 nodeId)",
                              "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                              "error OverflowInt256ToUint256()",
                              "error OverflowInt56ToInt24()",
                              "error OverflowUint256ToInt256()",
                              "error OverflowUint256ToUint160()",
                              "error OverflowUint56ToInt56()",
                              "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                              "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                              "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                              "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "0x1ca8b07aa6e171c4948031b71bfa2a8f9ffc7bbbbea847313177653956f58c31",
                            "deployTxnBlockNumber": "16649324",
                            "deployTimestamp": "1729066936",
                            "sourceName": "contracts/modules/NodeModule.sol",
                            "contractName": "NodeModule",
                            "deployedOn": "contract.NodeModule",
                            "gasUsed": 4820634,
                            "gasCost": "930730936"
                          },
                          "CoreModule": {
                            "address": "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                            "abi": [
                              "error ImplementationIsSterile(address implementation)",
                              "error NoChange()",
                              "error NotAContract(address contr)",
                              "error NotNominated(address addr)",
                              "error Unauthorized(address addr)",
                              "error UpgradeSimulationFailed()",
                              "error ZeroAddress()",
                              "event OwnerChanged(address oldOwner, address newOwner)",
                              "event OwnerNominated(address newOwner)",
                              "event Upgraded(address indexed self, address implementation)",
                              "function acceptOwnership()",
                              "function getImplementation() view returns (address)",
                              "function nominateNewOwner(address newNominatedOwner)",
                              "function nominatedOwner() view returns (address)",
                              "function owner() view returns (address)",
                              "function renounceNomination()",
                              "function simulateUpgradeTo(address newImplementation)",
                              "function upgradeTo(address newImplementation)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1729066942",
                            "sourceName": "contracts/modules/CoreModule.sol",
                            "contractName": "CoreModule",
                            "deployedOn": "contract.CoreModule",
                            "gasUsed": 0,
                            "gasCost": "0"
                          },
                          "InitialProxy": {
                            "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                            "abi": [
                              "error ImplementationIsSterile(address implementation)",
                              "error NoChange()",
                              "error NotAContract(address contr)",
                              "error NotNominated(address addr)",
                              "error Unauthorized(address addr)",
                              "error UpgradeSimulationFailed()",
                              "error ZeroAddress()",
                              "event OwnerChanged(address oldOwner, address newOwner)",
                              "event OwnerNominated(address newOwner)",
                              "event Upgraded(address indexed self, address implementation)",
                              "function acceptOwnership()",
                              "function getImplementation() view returns (address)",
                              "function nominateNewOwner(address newNominatedOwner)",
                              "function nominatedOwner() view returns (address)",
                              "function owner() view returns (address)",
                              "function renounceNomination()",
                              "function simulateUpgradeTo(address newImplementation)",
                              "function upgradeTo(address newImplementation)"
                            ],
                            "constructorArgs": [
                              "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                              "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                            ],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1729066944",
                            "sourceName": "contracts/Proxy.sol",
                            "contractName": "Proxy",
                            "deployedOn": "contract.InitialProxy",
                            "gasUsed": 0,
                            "gasCost": "0"
                          },
                          "OracleRouter": {
                            "address": "0x0a6a3a1553351a2a3e71f90e1b892794f2a2e64c",
                            "abi": [
                              "error ImplementationIsSterile(address implementation)",
                              "error NoChange()",
                              "error NotAContract(address contr)",
                              "error NotNominated(address addr)",
                              "error Unauthorized(address addr)",
                              "error UpgradeSimulationFailed()",
                              "error ZeroAddress()",
                              "event OwnerChanged(address oldOwner, address newOwner)",
                              "event OwnerNominated(address newOwner)",
                              "event Upgraded(address indexed self, address implementation)",
                              "function acceptOwnership()",
                              "function getImplementation() view returns (address)",
                              "function nominateNewOwner(address newNominatedOwner)",
                              "function nominatedOwner() view returns (address)",
                              "function owner() view returns (address)",
                              "function renounceNomination()",
                              "function simulateUpgradeTo(address newImplementation)",
                              "function upgradeTo(address newImplementation)",
                              "error EmptyRevertReason()",
                              "error Errors(bytes[] errors)",
                              "error Errors(bytes[] revertReasons)",
                              "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                              "error InvalidParameter(string parameter, string reason)",
                              "error InvalidPrice(int256 price)",
                              "error NodeNotRegistered(bytes32 nodeId)",
                              "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                              "error OverflowInt256ToUint256()",
                              "error OverflowInt56ToInt24()",
                              "error OverflowUint256ToInt256()",
                              "error OverflowUint256ToUint160()",
                              "error OverflowUint56ToInt56()",
                              "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                              "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                              "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                              "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                            ],
                            "deployedOn": "router.OracleRouter",
                            "deployTxnHash": "0xea0d86ad6ff5608eab445f132f01d2f905f7396ce6517efaafa91bea4f3b64e4",
                            "deployTxnBlockNumber": "16649330",
                            "deployTimestamp": "1729066948",
                            "contractName": "OracleRouter",
                            "sourceName": "OracleRouter.sol",
                            "gasUsed": 262878,
                            "gasCost": "933131741"
                          },
                          "Proxy": {
                            "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                            "abi": [
                              "error ImplementationIsSterile(address implementation)",
                              "error NoChange()",
                              "error NotAContract(address contr)",
                              "error NotNominated(address addr)",
                              "error Unauthorized(address addr)",
                              "error UpgradeSimulationFailed()",
                              "error ZeroAddress()",
                              "event OwnerChanged(address oldOwner, address newOwner)",
                              "event OwnerNominated(address newOwner)",
                              "event Upgraded(address indexed self, address implementation)",
                              "function acceptOwnership()",
                              "function getImplementation() view returns (address)",
                              "function nominateNewOwner(address newNominatedOwner)",
                              "function nominatedOwner() view returns (address)",
                              "function owner() view returns (address)",
                              "function renounceNomination()",
                              "function simulateUpgradeTo(address newImplementation)",
                              "function upgradeTo(address newImplementation)",
                              "error EmptyRevertReason()",
                              "error Errors(bytes[] errors)",
                              "error Errors(bytes[] revertReasons)",
                              "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                              "error InvalidParameter(string parameter, string reason)",
                              "error InvalidPrice(int256 price)",
                              "error NodeNotRegistered(bytes32 nodeId)",
                              "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                              "error OverflowInt256ToUint256()",
                              "error OverflowInt56ToInt24()",
                              "error OverflowUint256ToInt256()",
                              "error OverflowUint256ToUint160()",
                              "error OverflowUint56ToInt56()",
                              "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                              "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                              "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                              "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                              "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                              "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                            ],
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "",
                            "sourceName": "contracts/Proxy.sol",
                            "contractName": "Proxy",
                            "deployedOn": "invoke.upgrade_proxy",
                            "gasUsed": 0,
                            "gasCost": "0",
                            "highlight": true
                          }
                        },
                        "imports": {
                          "trusted_multicall_forwarder": {
                            "url": "ipfs://QmQdXmwU7gK9cPRt3opFcf55yFfNjbLCHmea7LStWnsH6b",
                            "tags": [
                              "latest"
                            ],
                            "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                            "preset": "with-oracle-manager",
                            "settings": {
                              "salt": "salt"
                            },
                            "contracts": {
                              "TrustedMulticallForwarder": {
                                "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                                "abi": [
                                  "constructor()",
                                  "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                                  "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                                  "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                                  "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                                  "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                                  "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                                  "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                                  "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                                  "function getBasefee() view returns (uint256 basefee)",
                                  "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                                  "function getBlockNumber() view returns (uint256 blockNumber)",
                                  "function getChainId() view returns (uint256 chainid)",
                                  "function getCurrentBlockCoinbase() view returns (address coinbase)",
                                  "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                                  "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                                  "function getEthBalance(address addr) view returns (uint256 balance)",
                                  "function getLastBlockHash() view returns (bytes32 blockHash)",
                                  "function getPrevRandao() view returns (uint256 prevrandao)",
                                  "function nonces(address owner) view returns (uint256)",
                                  "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                                  "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                                  "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                                  "event EIP712DomainChanged()",
                                  "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                                  "error AddressInsufficientBalance(address account)",
                                  "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                                  "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                                  "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                                  "error ERC2771UntrustfulTarget(address target, address forwarder)",
                                  "error FailedInnerCall()",
                                  "error InvalidAccountNonce(address account, uint256 currentNonce)",
                                  "error InvalidShortString()",
                                  "error StringTooLong(string str)"
                                ],
                                "constructorArgs": [],
                                "linkedLibraries": {},
                                "deployTxnHash": "",
                                "deployTxnBlockNumber": "",
                                "deployTimestamp": "1729066940",
                                "sourceName": "src/TrustedMulticallForwarder.sol",
                                "contractName": "TrustedMulticallForwarder",
                                "deployedOn": "contract.TrustedMulticallForwarder",
                                "gasUsed": 0,
                                "gasCost": "0"
                              }
                            },
                            "extras": {
                              "salt": "salt"
                            }
                          }
                        },
                        "settings": {
                          "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                          "salt": "oracle-manager-official"
                        },
                        "txns": {
                          "upgrade_proxy": {
                            "hash": "0x202d083402f6ee504921fa463b2dbb2fd506d047cc95e73904a675fcda5a0603",
                            "blockNumber": "16649332",
                            "timestamp": "1729066952",
                            "events": {
                              "Upgraded": [
                                {
                                  "name": "Upgraded",
                                  "args": [
                                    "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                                    "0x0a6a3a1553351A2A3e71F90e1B892794F2A2e64C"
                                  ]
                                }
                              ]
                            },
                            "deployedOn": "invoke.upgrade_proxy",
                            "gasUsed": 55368,
                            "gasCost": "936076092",
                            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                          }
                        },
                        "extras": {
                          "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                          "salt": "oracle-manager-official"
                        }
                      }
                    },
                    "settings": {
                      "account_token_name": "Synthetix Account",
                      "account_token_symbol": "SACCT",
                      "bundleSalt": "main",
                      "oracle_manager_package": "oracle-manager",
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "main",
                      "usd_token_name": "Synthetic USD Token v3",
                      "usd_token_symbol": "sUSD"
                    },
                    "txns": {
                      "register_const_one_oracle": {
                        "hash": "0x2baa0591174c004d4cf5f6ecce14a0d357d558ea242b7dd9f489a88103e1143b",
                        "events": {
                          "NodeRegistered": [
                            {
                              "name": "NodeRegistered",
                              "args": [
                                "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                                8,
                                "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                                []
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.register_const_one_oracle",
                        "gasUsed": 108489,
                        "gasCost": "1000318",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "upgrade_core_proxy": {
                        "hash": "0x3267b8dd6102327a45f96ff36a84e61e82adb5200b444d083c5daa87f27be03a",
                        "blockNumber": "16649385",
                        "timestamp": "1729067058",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                                "0xAd3553dc909D1D72A290ae14a530A46C57bb4D3d"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_core_proxy",
                        "gasUsed": 51203,
                        "gasCost": "945601052",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_burnUsd": {
                        "hash": "0x7087b881678eb12e6f6863f6ea29870a42433c72616bbdcba6e5a46c73313a3b",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6275726e55736400000000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_burnUsd",
                        "gasUsed": 56959,
                        "gasCost": "1000323",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_claimRewards": {
                        "hash": "0x20bd61d41b1be63384c93217591d71142f1bd15099d2827c27f54dd9768ac4d3",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x636c61696d526577617264730000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_claimRewards",
                        "gasUsed": 57019,
                        "gasCost": "1000322",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_createAccount": {
                        "hash": "0x8f2bd10b10a82848836679f365118b10813db0fc60e99e8ff7eb792f0a1854dd",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_createAccount",
                        "gasUsed": 57031,
                        "gasCost": "1000322",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_delegateCollateral": {
                        "hash": "0x5e9d60081eea0c6ad048d34640dba307a518c3b7b2cc7d9745a732219b6e403c",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_delegateCollateral",
                        "gasUsed": 57091,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_deposit": {
                        "hash": "0x0513e0e724ed24f32dc7a1a9b0b0b3cd42e5eb4e961f7e9006d691e65070806e",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6465706f73697400000000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_deposit",
                        "gasUsed": 56959,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_depositMarketCollateral": {
                        "hash": "0xcab8c6233dd9fe48e21b3ffa2c747e4224aa40cc2d71d627395bd416f7d05bec",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                        "gasUsed": 57151,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_depositMarketUsd": {
                        "hash": "0xed336b2c8be6acab9d4056f47fc368e220f5e3cab3316c95a2412f02dd53444b",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_depositMarketUsd",
                        "gasUsed": 57067,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_liquidate": {
                        "hash": "0x775cea26782e06292cd0f5d15463437a9efa9a19f81c7d5b486dd3ad0b607eb1",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6c69717569646174650000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_liquidate",
                        "gasUsed": 56983,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_liquidateVault": {
                        "hash": "0x6795708a5819e8ad9d54ab5ca382b90d8fbec48895738ec5fc84c3d477f0853d",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_liquidateVault",
                        "gasUsed": 57043,
                        "gasCost": "1000321",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_mintUsd": {
                        "hash": "0x1aa28aa9444a30ed09728dbed1a86c4ecb2cc37140e209abbaa62ce3e67879b7",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_mintUsd",
                        "gasUsed": 56959,
                        "gasCost": "1000324",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_withdraw": {
                        "hash": "0x76745b191844c7843b1e49d6a42d889e4dd7d9fdfac8308c90ec1ccde11baf0b",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x7769746864726177000000000000000000000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_withdraw",
                        "gasUsed": 56971,
                        "gasCost": "1000323",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_withdrawMarketCollateral": {
                        "hash": "0x38ef18c9a665af7164e3951e392b51f679c1e8fd2fe1479c567ad2d20031e701",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                        "gasUsed": 57163,
                        "gasCost": "1000322",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "enable_feature_withdrawMarketUsd": {
                        "hash": "0x543ca887549b2eadefd10046a56fccbfea6d28e7601d1ad5b9f5b66e76262696",
                        "events": {
                          "FeatureFlagAllowAllSet": [
                            {
                              "name": "FeatureFlagAllowAllSet",
                              "args": [
                                "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                                true
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                        "gasUsed": 57079,
                        "gasCost": "1000322",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "init_account": {
                        "hash": "0xc77f2d5b29d94e33e6fe2c485bbea010c30f2be170dd4a6073e9bd7ce8b39537",
                        "blockNumber": "16649389",
                        "timestamp": "1729067066",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                                "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                              ]
                            }
                          ],
                          "AssociatedSystemSet": [
                            {
                              "name": "AssociatedSystemSet",
                              "args": [
                                "0x6572633732310000000000000000000000000000000000000000000000000000",
                                "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                                "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                                "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.init_account",
                        "gasUsed": 80750,
                        "gasCost": "941134834",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "init_usd": {
                        "hash": "0x20f2eeac2a57f555e34d11b45eb88da7ec04144fc1a4893f35e00b91358530ce",
                        "blockNumber": "16649392",
                        "timestamp": "1729067072",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                                "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                              ]
                            }
                          ],
                          "AssociatedSystemSet": [
                            {
                              "name": "AssociatedSystemSet",
                              "args": [
                                "0x6572633230000000000000000000000000000000000000000000000000000000",
                                "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                                "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                                "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.init_usd",
                        "gasUsed": 96850,
                        "gasCost": "941615446",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "set_oracle_manager": {
                        "hash": "0xeb4c8bbf4df4f31f7e6470d8a05ab93d2fd8c934dceb6e1f8ea6125b240e0cb9",
                        "events": {},
                        "deployedOn": "invoke.set_oracle_manager",
                        "gasUsed": 54820,
                        "gasCost": "1000325",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      },
                      "configure_usd_collateral": {
                        "hash": "0x2604376b5f5bf98e8d9c59562480ca3305b7b4b419df622ca7ab80008935f347",
                        "events": {
                          "CollateralConfigured": [
                            {
                              "name": "CollateralConfigured",
                              "args": [
                                "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                                {
                                  "depositingEnabled": true,
                                  "issuanceRatioD18": "10000000000000000000",
                                  "liquidationRatioD18": "10000000000000000000",
                                  "liquidationRewardD18": "0",
                                  "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                                  "tokenAddress": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                                  "minDelegationD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                                }
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.configure_usd_collateral",
                        "gasUsed": 240637,
                        "gasCost": "1000324",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      }
                    },
                    "extras": {
                      "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                      "account_token_name": "Synthetix Account",
                      "account_token_symbol": "SACCT",
                      "bundleSalt": "main",
                      "oracle_manager_package": "oracle-manager",
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "main",
                      "usd_token_name": "Synthetic USD Token v3",
                      "usd_token_symbol": "sUSD"
                    }
                  }
                },
                "txns": {
                  "upgradeSpotMarketProxy": {
                    "hash": "0x8c25e4a5c99e0e998e9da0470092a0e3c97bd93a96329208588f192212ceb546",
                    "blockNumber": "16649426",
                    "timestamp": "1729067140",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xaD2fE7cd224c58871f541DAE01202F93928FEF72",
                            "0x07463c0c2ba77A6B6a69170Fb8c0E50CC5F588A4"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgradeSpotMarketProxy",
                    "gasUsed": 55585,
                    "gasCost": "950724163",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "addCreateSynthToFeatureFlag": {
                    "hash": "0x82a8c86f5a0e14670416819828d30d9e0774df83b023dee86b932ca5537c9964",
                    "events": {
                      "FeatureFlagAllowlistAdded": [
                        {
                          "name": "FeatureFlagAllowlistAdded",
                          "args": [
                            "0x63726561746553796e7468000000000000000000000000000000000000000000",
                            "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.addCreateSynthToFeatureFlag",
                    "gasUsed": 101751,
                    "gasCost": "1000316",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "addSpotMarketToFeatureFlag": {
                    "hash": "0x8485a13d2e27ef8d944e5e113a885e6060b70ee830465607e86d7b85d425600e",
                    "events": {
                      "FeatureFlagAllowlistAdded": [
                        {
                          "name": "FeatureFlagAllowlistAdded",
                          "args": [
                            "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                            "0xaD2fE7cd224c58871f541DAE01202F93928FEF72"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.addSpotMarketToFeatureFlag",
                    "gasUsed": 101643,
                    "gasCost": "1000325",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "setSynthImplementation": {
                    "hash": "0xfcaa7615223c60f845418265f66cf40a75458b69cd55e84638499ba899dd1093",
                    "blockNumber": "16649428",
                    "timestamp": "1729067144",
                    "events": {
                      "SynthImplementationSet": [
                        {
                          "name": "SynthImplementationSet",
                          "args": [
                            "0xcdfcE502963A101D544E0b0c9641a53fd6cfdC80"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.setSynthImplementation",
                    "gasUsed": 39108,
                    "gasCost": "954496463",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "setSynthetixSystem": {
                    "hash": "0x069c049a5441049a39db88371887cbfbe67c3d27e3098d90b2332fa640cbe22c",
                    "events": {
                      "SynthetixSystemSet": [
                        {
                          "name": "SynthetixSystemSet",
                          "args": [
                            "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.setSynthetixSystem",
                    "gasUsed": 124285,
                    "gasCost": "1000324",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  }
                },
                "extras": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "snax",
                  "synthetixPackage": "synthetix",
                  "synthetixPreset": "main"
                }
              },
              "synthetix": {
                "url": "ipfs://QmaoPV7jyHQF6ViTqPMvRFqGS3HWrXwr6Y1wCBtkai1Fbw",
                "contracts": {
                  "AccountModule": {
                    "address": "0xd4DFE8F3b91007ec187f8b74A3cEEDBA7A0873f7",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "error ZeroAddress()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x734f5d976bbfa5c0ec21808b4ff1b1b0532bdaaf2a07db1d08bde28c202bca66",
                    "deployTxnBlockNumber": "16649339",
                    "deployTimestamp": "1729066966",
                    "sourceName": "contracts/modules/core/AccountModule.sol",
                    "contractName": "AccountModule",
                    "deployedOn": "contract.AccountModule",
                    "gasUsed": 1225809,
                    "gasCost": "936592307"
                  },
                  "AccountTokenModule": {
                    "address": "0x6d448d821cbd5AA1A52dD3854ed0AEc2d1BF8832",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xd2af7a26d94f40173e1efabe174b03163cfb551b29fa45c909b70878f3b292b4",
                    "deployTxnBlockNumber": "16649341",
                    "deployTimestamp": "1729066970",
                    "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                    "contractName": "AccountTokenModule",
                    "deployedOn": "contract.AccountTokenModule",
                    "gasUsed": 1787668,
                    "gasCost": "932975250"
                  },
                  "AssociateDebtModule": {
                    "address": "0xEe047Ca39AE1EF562f3D5F23c1B8A5b074955331",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x2cdc64893f97d21159360a5096ad3abe14df13349fee8361324c43c10f10e694",
                    "deployTxnBlockNumber": "16649344",
                    "deployTimestamp": "1729066976",
                    "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                    "contractName": "AssociateDebtModule",
                    "deployedOn": "contract.AssociateDebtModule",
                    "gasUsed": 2603996,
                    "gasCost": "933120208"
                  },
                  "AssociatedSystemsModule": {
                    "address": "0xC8440d8e46D3C06beD106C6f2F918F30182bEb06",
                    "abi": [
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error Unauthorized(address addr)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xbdad45d38a1b1de1a6d9518ac7192e5bf5cf0c338a9f8c41fdbd33a30d9c6610",
                    "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                    "contractName": "AssociatedSystemsModule",
                    "deployedOn": "contract.AssociatedSystemsModule",
                    "gasUsed": 877153,
                    "gasCost": "1000305"
                  },
                  "CcipReceiverModule": {
                    "address": "0x290052592c38b55f827ec377B2a8023e734B815C",
                    "abi": [
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error Unauthorized(address addr)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x0a1ac64516ad97aca7fe23966c6050476f7c839b286cf64a5e2338d8a9e7e7b2",
                    "deployTxnBlockNumber": "16649346",
                    "deployTimestamp": "1729066980",
                    "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                    "contractName": "CcipReceiverModule",
                    "deployedOn": "contract.CcipReceiverModule",
                    "gasUsed": 469476,
                    "gasCost": "936917569"
                  },
                  "CollateralConfigurationModule": {
                    "address": "0x98A58c2A364f5C9dA829a8738Ba8b192E7B706db",
                    "abi": [
                      "error EmptyRevertReason()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error PositionOutOfBounds()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x3050067c8dad45ed319ffc5d018760acea5008c4bcdab87d645144b585beb212",
                    "deployTxnBlockNumber": "16649348",
                    "deployTimestamp": "1729066984",
                    "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                    "contractName": "CollateralConfigurationModule",
                    "deployedOn": "contract.CollateralConfigurationModule",
                    "gasUsed": 872728,
                    "gasCost": "937172209"
                  },
                  "CollateralModule": {
                    "address": "0xE8Ae6cAC1aBbC0Eef81D85f8f5f4402f164300FD",
                    "abi": [
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error AccountNotFound(uint128 accountId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x9135ef7a5060b7e3b30af8aaf4cbea2747784ce00a8f74d3498f66fab944981d",
                    "deployTxnBlockNumber": "16649350",
                    "deployTimestamp": "1729066988",
                    "sourceName": "contracts/modules/core/CollateralModule.sol",
                    "contractName": "CollateralModule",
                    "deployedOn": "contract.CollateralModule",
                    "gasUsed": 1878022,
                    "gasCost": "937764119"
                  },
                  "CrossChainUSDModule": {
                    "address": "0x0Db649f56b99B15c70198C925CD374b95B6Df5E8",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xd57eddd8ebbaaffdda7d1ccdedd8345b8cb7e1dba787af550943cc10b7be4830",
                    "deployTxnBlockNumber": "16649352",
                    "deployTimestamp": "1729066992",
                    "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                    "contractName": "CrossChainUSDModule",
                    "deployedOn": "contract.CrossChainUSDModule",
                    "gasUsed": 595289,
                    "gasCost": "934748763"
                  },
                  "FeatureFlagModule": {
                    "address": "0x57a24eafBCeDF9CEFD242b259517C84b9d72e3Ae",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xb8ed47b80ee3a4301f24b809cb8376373e4d68fea596a8c4c7ab5a89228c5a68",
                    "deployTxnBlockNumber": "16649354",
                    "deployTimestamp": "1729066996",
                    "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 777054,
                    "gasCost": "935496418"
                  },
                  "IssueUSDModule": {
                    "address": "0x8C9126A0dD9e2B60a69a4957669C507ff1c07C69",
                    "abi": [
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x1c864f9da23ddbe73a793494ef991044b6588ae73c290a6e79b4535649f698d9",
                    "deployTxnBlockNumber": "16649356",
                    "deployTimestamp": "1729067000",
                    "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                    "contractName": "IssueUSDModule",
                    "deployedOn": "contract.IssueUSDModule",
                    "gasUsed": 2940922,
                    "gasCost": "937306460"
                  },
                  "LiquidationModule": {
                    "address": "0xC090A806CC37c4C6CA9fc8eb7b7098d78eE72b60",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error CannotScaleEmptyMapping()",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint256ToUint64()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PositionOutOfBounds()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x3f4c10c3063b131da4b40f91d2fef5bc8294293ea31a63c606131902ecc314d0",
                    "deployTxnBlockNumber": "16649358",
                    "deployTimestamp": "1729067004",
                    "sourceName": "contracts/modules/core/LiquidationModule.sol",
                    "contractName": "LiquidationModule",
                    "deployedOn": "contract.LiquidationModule",
                    "gasUsed": 4289682,
                    "gasCost": "935586433"
                  },
                  "MarketCollateralModule": {
                    "address": "0xD88de2Ee855f145ab1eCFfF8273661C3d59fc8ad",
                    "abi": [
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "error Unauthorized(address addr)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xc5c4642d703fe51a5736f64cd0b91f641d0b0b14d582596313c350ac2b529f9e",
                    "deployTxnBlockNumber": "16649360",
                    "deployTimestamp": "1729067008",
                    "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                    "contractName": "MarketCollateralModule",
                    "deployedOn": "contract.MarketCollateralModule",
                    "gasUsed": 1298300,
                    "gasCost": "938598453"
                  },
                  "MarketManagerModule": {
                    "address": "0x35B79eD956064338d3DF10abc215Ab128C6265BE",
                    "abi": [
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IncorrectMarketInterface(address market)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xe7d5907e9bc6931cfd5d6ec2ee85fd04e32746281b79230ec9d301536c5e90ae",
                    "deployTxnBlockNumber": "16649362",
                    "deployTimestamp": "1729067012",
                    "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                    "contractName": "MarketManagerModule",
                    "deployedOn": "contract.MarketManagerModule",
                    "gasUsed": 2730455,
                    "gasCost": "938162086"
                  },
                  "PoolConfigurationModule": {
                    "address": "0x39fBdCBa20E57BC672DDD9f5756Dc8b5Fabe526a",
                    "abi": [
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xfe15402ad6fe9cfd54a4da2874d181a8c516c025d984b5ec4740f2910cea30ec",
                    "deployTxnBlockNumber": "16649364",
                    "deployTimestamp": "1729067016",
                    "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                    "contractName": "PoolConfigurationModule",
                    "deployedOn": "contract.PoolConfigurationModule",
                    "gasUsed": 446271,
                    "gasCost": "938194121"
                  },
                  "PoolModule": {
                    "address": "0x65a62Dc05B66FD007d05f2E34085348A45c6a424",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x4a9563128d503b59b74d159ed8b1745ec4d75645cb505f1a53f4990267c38886",
                    "deployTxnBlockNumber": "16649366",
                    "deployTimestamp": "1729067020",
                    "sourceName": "contracts/modules/core/PoolModule.sol",
                    "contractName": "PoolModule",
                    "deployedOn": "contract.PoolModule",
                    "gasUsed": 3986001,
                    "gasCost": "941481539"
                  },
                  "RewardsManagerModule": {
                    "address": "0x4A3979b6dc29B311e8c27D4E2cdF1E35f89913b0",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error RewardUnavailable(address distributor)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xbbc9ba761efa021f34153e39acaf3c8123e8d7a81f928be226b312cd978c2e16",
                    "deployTxnBlockNumber": "16649368",
                    "deployTimestamp": "1729067024",
                    "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                    "contractName": "RewardsManagerModule",
                    "deployedOn": "contract.RewardsManagerModule",
                    "gasUsed": 2642251,
                    "gasCost": "942593115"
                  },
                  "USDTokenModule": {
                    "address": "0x2F0f4304676B1399D970bac6488053F7014A80a6",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0xca0f2c066651896de5930e5ee954bd0c03b025fa2c2a32eb8395c335a6d6905a",
                    "deployTxnBlockNumber": "16649371",
                    "deployTimestamp": "1729067030",
                    "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                    "contractName": "USDTokenModule",
                    "deployedOn": "contract.USDTokenModule",
                    "gasUsed": 1110294,
                    "gasCost": "939871566"
                  },
                  "UtilsModule": {
                    "address": "0xa76f3067888222b37a667814f696038b658B7368",
                    "abi": [
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x1e9d8122afd7dc158660bf1f9bb8ea629ed274203f628129ae91b5f54fe5753e",
                    "deployTxnBlockNumber": "16649373",
                    "deployTimestamp": "1729067034",
                    "sourceName": "contracts/modules/core/UtilsModule.sol",
                    "contractName": "UtilsModule",
                    "deployedOn": "contract.UtilsModule",
                    "gasUsed": 759697,
                    "gasCost": "944385460"
                  },
                  "VaultModule": {
                    "address": "0xA24ECBF86E4cD4763084cF1f1E7709400cE8d3BC",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "error PoolNotFound(uint128 poolId)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x939f10bb60d2dba483fa7c5c900ca69760fe55dad1191ecf1e26c9ea9e83a50a",
                    "deployTxnBlockNumber": "16649375",
                    "deployTimestamp": "1729067038",
                    "sourceName": "contracts/modules/core/VaultModule.sol",
                    "contractName": "VaultModule",
                    "deployedOn": "contract.VaultModule",
                    "gasUsed": 4244908,
                    "gasCost": "941449312"
                  },
                  "InitialModuleBundle": {
                    "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/modules/InitialModuleBundle.sol",
                    "contractName": "InitialModuleBundle",
                    "deployedOn": "contract.InitialModuleBundle",
                    "gasUsed": 0,
                    "gasCost": "0"
                  },
                  "InitialCoreProxy": {
                    "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x828EED723cAF0A8F822249231266E38dF614923C",
                      "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "0x5913f591061763378a9209c9ea168efbfd1de19af4440dbfcf5a73004f091491",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialCoreProxy",
                    "gasUsed": 185358,
                    "gasCost": "1000317"
                  },
                  "AccountRouter": {
                    "address": "0x768f77f75c7c4b6b81758bf56ce0ab70762b37e6",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployedOn": "router.AccountRouter",
                    "deployTxnHash": "0xbac818a079f296ffb1759aaecef641f5471ebed0cf6829aba98ea826cbb07a0b",
                    "deployTxnBlockNumber": "16649378",
                    "deployTimestamp": "1729067044",
                    "contractName": "AccountRouter",
                    "sourceName": "AccountRouter.sol",
                    "gasUsed": 406486,
                    "gasCost": "949929423"
                  },
                  "CoreRouter": {
                    "address": "0xad3553dc909d1d72a290ae14a530a46c57bb4d3d",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "deployedOn": "router.CoreRouter",
                    "deployTxnHash": "0x7a059a46a4b514a360ccf2260f8bc8baa33bf74f309a7ba1c0fa2952e8b30f6a",
                    "deployTxnBlockNumber": "16649380",
                    "deployTimestamp": "1729067048",
                    "contractName": "CoreRouter",
                    "sourceName": "CoreRouter.sol",
                    "gasUsed": 1318142,
                    "gasCost": "945143807"
                  },
                  "USDRouter": {
                    "address": "0x44d4a4796a7604419e4051d4ab1e060759db99fb",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.USDRouter",
                    "deployTxnHash": "0xade8ab8e92554c274e7b22ab353c4fe32ed2754195a0dcce871f2f73f21dc611",
                    "deployTxnBlockNumber": "16649382",
                    "deployTimestamp": "1729067052",
                    "contractName": "USDRouter",
                    "sourceName": "USDRouter.sol",
                    "gasUsed": 398033,
                    "gasCost": "945780250"
                  },
                  "CoreProxy": {
                    "address": "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficentAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "AccountProxy": {
                    "address": "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "USDProxy": {
                    "address": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "imports": {
                  "trusted_multicall_forwarder": {
                    "url": "ipfs://QmYi3NuhRQQVwHZLQd9KBCsg2HKeFP769mR6Yi2g2mA9cE",
                    "tags": [
                      "latest"
                    ],
                    "preset": "with-synthetix",
                    "settings": {
                      "salt": "salt"
                    },
                    "contracts": {
                      "TrustedMulticallForwarder": {
                        "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                        "abi": [
                          "constructor()",
                          "error AddressInsufficientBalance(address account)",
                          "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                          "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                          "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                          "error ERC2771UntrustfulTarget(address target, address forwarder)",
                          "error FailedInnerCall()",
                          "error InvalidAccountNonce(address account, uint256 currentNonce)",
                          "error InvalidShortString()",
                          "error StringTooLong(string str)",
                          "event EIP712DomainChanged()",
                          "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                          "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                          "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                          "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                          "function getBasefee() view returns (uint256 basefee)",
                          "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                          "function getBlockNumber() view returns (uint256 blockNumber)",
                          "function getChainId() view returns (uint256 chainid)",
                          "function getCurrentBlockCoinbase() view returns (address coinbase)",
                          "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                          "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                          "function getEthBalance(address addr) view returns (uint256 balance)",
                          "function getLastBlockHash() view returns (bytes32 blockHash)",
                          "function getPrevRandao() view returns (uint256 prevrandao)",
                          "function nonces(address owner) view returns (uint256)",
                          "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "sourceName": "src/TrustedMulticallForwarder.sol",
                        "contractName": "TrustedMulticallForwarder",
                        "deployedOn": "contract.TrustedMulticallForwarder",
                        "gasUsed": 0,
                        "gasCost": "0"
                      }
                    },
                    "extras": {
                      "salt": "salt"
                    }
                  },
                  "oracle_manager": {
                    "url": "ipfs://QmaSYrc3XvdZ2LhUDQ2njMCkHsfNT3nDLDDLJWwE8UaVkr",
                    "contracts": {
                      "NodeModule": {
                        "address": "0xE1681e5aC826043Ae6575ee1fD5E7064751c2fc5",
                        "abi": [
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "0x1ca8b07aa6e171c4948031b71bfa2a8f9ffc7bbbbea847313177653956f58c31",
                        "deployTxnBlockNumber": "16649324",
                        "deployTimestamp": "1729066936",
                        "sourceName": "contracts/modules/NodeModule.sol",
                        "contractName": "NodeModule",
                        "deployedOn": "contract.NodeModule",
                        "gasUsed": 4820634,
                        "gasCost": "930730936"
                      },
                      "CoreModule": {
                        "address": "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1729066942",
                        "sourceName": "contracts/modules/CoreModule.sol",
                        "contractName": "CoreModule",
                        "deployedOn": "contract.CoreModule",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "InitialProxy": {
                        "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                          "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1729066944",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialProxy",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "OracleRouter": {
                        "address": "0x0a6a3a1553351a2a3e71f90e1b892794f2a2e64c",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployedOn": "router.OracleRouter",
                        "deployTxnHash": "0xea0d86ad6ff5608eab445f132f01d2f905f7396ce6517efaafa91bea4f3b64e4",
                        "deployTxnBlockNumber": "16649330",
                        "deployTimestamp": "1729066948",
                        "contractName": "OracleRouter",
                        "sourceName": "OracleRouter.sol",
                        "gasUsed": 262878,
                        "gasCost": "933131741"
                      },
                      "Proxy": {
                        "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error Errors(bytes[] revertReasons)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmQdXmwU7gK9cPRt3opFcf55yFfNjbLCHmea7LStWnsH6b",
                        "tags": [
                          "latest"
                        ],
                        "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                        "preset": "with-oracle-manager",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1729066940",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      }
                    },
                    "settings": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    },
                    "txns": {
                      "upgrade_proxy": {
                        "hash": "0x202d083402f6ee504921fa463b2dbb2fd506d047cc95e73904a675fcda5a0603",
                        "blockNumber": "16649332",
                        "timestamp": "1729066952",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                                "0x0a6a3a1553351A2A3e71F90e1B892794F2A2e64C"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 55368,
                        "gasCost": "936076092",
                        "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      }
                    },
                    "extras": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    }
                  }
                },
                "settings": {
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                },
                "txns": {
                  "register_const_one_oracle": {
                    "hash": "0x2baa0591174c004d4cf5f6ecce14a0d357d558ea242b7dd9f489a88103e1143b",
                    "events": {
                      "NodeRegistered": [
                        {
                          "name": "NodeRegistered",
                          "args": [
                            "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                            8,
                            "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                            []
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.register_const_one_oracle",
                    "gasUsed": 108489,
                    "gasCost": "1000318",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "upgrade_core_proxy": {
                    "hash": "0x3267b8dd6102327a45f96ff36a84e61e82adb5200b444d083c5daa87f27be03a",
                    "blockNumber": "16649385",
                    "timestamp": "1729067058",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                            "0xAd3553dc909D1D72A290ae14a530A46C57bb4D3d"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 51203,
                    "gasCost": "945601052",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_burnUsd": {
                    "hash": "0x7087b881678eb12e6f6863f6ea29870a42433c72616bbdcba6e5a46c73313a3b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6275726e55736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_burnUsd",
                    "gasUsed": 56959,
                    "gasCost": "1000323",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_claimRewards": {
                    "hash": "0x20bd61d41b1be63384c93217591d71142f1bd15099d2827c27f54dd9768ac4d3",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x636c61696d526577617264730000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_claimRewards",
                    "gasUsed": 57019,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_createAccount": {
                    "hash": "0x8f2bd10b10a82848836679f365118b10813db0fc60e99e8ff7eb792f0a1854dd",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_createAccount",
                    "gasUsed": 57031,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_delegateCollateral": {
                    "hash": "0x5e9d60081eea0c6ad048d34640dba307a518c3b7b2cc7d9745a732219b6e403c",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_delegateCollateral",
                    "gasUsed": 57091,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_deposit": {
                    "hash": "0x0513e0e724ed24f32dc7a1a9b0b0b3cd42e5eb4e961f7e9006d691e65070806e",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f73697400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_deposit",
                    "gasUsed": 56959,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_depositMarketCollateral": {
                    "hash": "0xcab8c6233dd9fe48e21b3ffa2c747e4224aa40cc2d71d627395bd416f7d05bec",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                    "gasUsed": 57151,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_depositMarketUsd": {
                    "hash": "0xed336b2c8be6acab9d4056f47fc368e220f5e3cab3316c95a2412f02dd53444b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketUsd",
                    "gasUsed": 57067,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_liquidate": {
                    "hash": "0x775cea26782e06292cd0f5d15463437a9efa9a19f81c7d5b486dd3ad0b607eb1",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174650000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidate",
                    "gasUsed": 56983,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_liquidateVault": {
                    "hash": "0x6795708a5819e8ad9d54ab5ca382b90d8fbec48895738ec5fc84c3d477f0853d",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateVault",
                    "gasUsed": 57043,
                    "gasCost": "1000321",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_mintUsd": {
                    "hash": "0x1aa28aa9444a30ed09728dbed1a86c4ecb2cc37140e209abbaa62ce3e67879b7",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_mintUsd",
                    "gasUsed": 56959,
                    "gasCost": "1000324",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdraw": {
                    "hash": "0x76745b191844c7843b1e49d6a42d889e4dd7d9fdfac8308c90ec1ccde11baf0b",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x7769746864726177000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdraw",
                    "gasUsed": 56971,
                    "gasCost": "1000323",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdrawMarketCollateral": {
                    "hash": "0x38ef18c9a665af7164e3951e392b51f679c1e8fd2fe1479c567ad2d20031e701",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                    "gasUsed": 57163,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "enable_feature_withdrawMarketUsd": {
                    "hash": "0x543ca887549b2eadefd10046a56fccbfea6d28e7601d1ad5b9f5b66e76262696",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                    "gasUsed": 57079,
                    "gasCost": "1000322",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "init_account": {
                    "hash": "0xc77f2d5b29d94e33e6fe2c485bbea010c30f2be170dd4a6073e9bd7ce8b39537",
                    "blockNumber": "16649389",
                    "timestamp": "1729067066",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                            "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633732310000000000000000000000000000000000000000000000000000",
                            "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                            "0x9EB560Cc26c2766929A41F8e46E87bd4b8b145d9",
                            "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 80750,
                    "gasCost": "941134834",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "init_usd": {
                    "hash": "0x20f2eeac2a57f555e34d11b45eb88da7ec04144fc1a4893f35e00b91358530ce",
                    "blockNumber": "16649392",
                    "timestamp": "1729067072",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633230000000000000000000000000000000000000000000000000000000",
                            "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            "0x44D4a4796a7604419E4051d4ab1E060759dB99FB"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 96850,
                    "gasCost": "941615446",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "set_oracle_manager": {
                    "hash": "0xeb4c8bbf4df4f31f7e6470d8a05ab93d2fd8c934dceb6e1f8ea6125b240e0cb9",
                    "events": {},
                    "deployedOn": "invoke.set_oracle_manager",
                    "gasUsed": 54820,
                    "gasCost": "1000325",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  },
                  "configure_usd_collateral": {
                    "hash": "0x2604376b5f5bf98e8d9c59562480ca3305b7b4b419df622ca7ab80008935f347",
                    "events": {
                      "CollateralConfigured": [
                        {
                          "name": "CollateralConfigured",
                          "args": [
                            "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                            {
                              "depositingEnabled": true,
                              "issuanceRatioD18": "10000000000000000000",
                              "liquidationRatioD18": "10000000000000000000",
                              "liquidationRewardD18": "0",
                              "oracleNodeId": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                              "tokenAddress": "0x682f0d17feDC62b2a0B91f8992243Bf44cAfeaaE",
                              "minDelegationD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                            }
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.configure_usd_collateral",
                    "gasUsed": 240637,
                    "gasCost": "1000324",
                    "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  }
                },
                "extras": {
                  "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                }
              }
            },
            "txns": {
              "upgrade_proxy": {
                "hash": "0x872e0bdedd438466fe3638e09e322cf93ecc98a84ca9d1b98927e68b11dee985",
                "blockNumber": "17158810",
                "timestamp": "1730085908",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x0aacb1DDCF65d8347e3a2585cD78b423987cA04d",
                        "0x63806310e193C2Afb04878F4028AA3CE6d402b38"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 55697,
                "gasCost": "1000256",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "addCreateMarketToFeatureFlag": {
                "hash": "0x1cf3a3021061e25cac893d02a7121817032bfdc48000635a3a3a25c4a786d490",
                "blockNumber": "16649503",
                "timestamp": "1729067294",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x6372656174654d61726b65740000000000000000000000000000000000000000",
                        "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.addCreateMarketToFeatureFlag",
                "gasUsed": 101807,
                "gasCost": "953645294",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "addPerpsMarketToFeatureFlag": {
                "hash": "0x8f222d566fdc4a7dac02659d15f4d33361054369127fa409f399ba562c5ba447",
                "blockNumber": "16649505",
                "timestamp": "1729067298",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                        "0x0aacb1DDCF65d8347e3a2585cD78b423987cA04d"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.addPerpsMarketToFeatureFlag",
                "gasUsed": 84543,
                "gasCost": "955215582",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "enableFeatureCreateAccount": {
                "hash": "0xc1138ac3e28137507675bd3613f79521d34e7aaeeb1b1beff6fee3ab3a9482d2",
                "blockNumber": "16649507",
                "timestamp": "1729067302",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enableFeatureCreateAccount",
                "gasUsed": 57241,
                "gasCost": "957098596",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "init_account": {
                "hash": "0x0f33da37e096403ad6591b6caa3f2e6d15469de7b10b9db50fd8072624724f02",
                "blockNumber": "16649510",
                "timestamp": "1729067308",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                        "0xbECa9E019564dd54197B5Cc6A0c0D031A745d8B3",
                        "0x768f77f75c7c4b6b81758bf56CE0AB70762b37E6"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_account",
                "gasUsed": 334865,
                "gasCost": "954221764",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              },
              "initializeFactory": {
                "hash": "0xbe0044573d65b76e64be303bab519ae1b9e193c69ac322c77983fa21f113b21c",
                "blockNumber": "16649512",
                "timestamp": "1729067312",
                "events": {
                  "FactoryInitialized": [
                    {
                      "name": "FactoryInitialized",
                      "args": [
                        "6"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.initializeFactory",
                "gasUsed": 275766,
                "gasCost": "954119614",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {
              "coreProxyOwner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "spotMarketPackage": "synthetix-spot-market:latest",
              "spotMarketPreset": "main",
              "synthetixPackage": "synthetix:latest",
              "synthetixPreset": "main",
              "superMarketId": "6"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.createAavePerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createAavePerpsMarket": {
            "hash": "0x4b827b72da8fd1d2521dddc2edb2d5453a154b63aad3df7b5d32500aaa283e48",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3300",
                    "Aave",
                    "AAVE"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createAavePerpsMarket",
            "gasUsed": 165836,
            "gasCost": "1000542",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2327c4bffe5f51ae4ba4f1f84bf60364",
      "version": 7
    },
    "invoke.createAdaPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createAdaPerpsMarket": {
            "hash": "0x7751d822dff70f5e5d5dc071365956fccb312850fcf61555f70e68e0e9434bca",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3400",
                    "Cardano",
                    "ADA"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createAdaPerpsMarket",
            "gasUsed": 165860,
            "gasCost": "1000540",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3357934c76296fdb2a41ec98a8f860b9",
      "version": 7
    },
    "invoke.createAlgoPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createAlgoPerpsMarket": {
            "hash": "0x2de3a9f3a5e0231dbf0970a1fa6b51f78a3c848c626c6f549d6190046a096953",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3500",
                    "Algorand",
                    "ALGO"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createAlgoPerpsMarket",
            "gasUsed": 165884,
            "gasCost": "1000537",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d348b1fde948adbefc126dc6303b9e85",
      "version": 7
    },
    "invoke.createAptPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createAptPerpsMarket": {
            "hash": "0x641fa316a2be1c2a0aaf2943357b6fb249524ce057e9234420a53d969ac99e99",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3600",
                    "Aptos",
                    "APT"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createAptPerpsMarket",
            "gasUsed": 165836,
            "gasCost": "1000537",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "aaa39b92f6f724b488488cc5f4b0da3d",
      "version": 7
    },
    "invoke.createAtomPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createAtomPerpsMarket": {
            "hash": "0xc340150697e19aff3c9437bfde8f7eaf286b2b873006037d05dfc83f5b5bdff6",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3700",
                    "Cosmos",
                    "ATOM"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createAtomPerpsMarket",
            "gasUsed": 165860,
            "gasCost": "1000536",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4be1cd012195fd50657463db55687fb9",
      "version": 7
    },
    "invoke.createAxsPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createAxsPerpsMarket": {
            "hash": "0x79ff1e825f908a79849e2e7ca670d0b740f2567904448a21b41cd805f5afb839",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3800",
                    "Axie Infinity",
                    "AXS"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createAxsPerpsMarket",
            "gasUsed": 165932,
            "gasCost": "1000540",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "93ea97598f977a71fda2dc0d12fcc652",
      "version": 7
    },
    "invoke.createBalPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createBalPerpsMarket": {
            "hash": "0x024b08b10e581e1bf055fa8877e0d4699362ec1e8f44bcc5ae8d9e3fde006641",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "3900",
                    "Balancer",
                    "BAL"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createBalPerpsMarket",
            "gasUsed": 165872,
            "gasCost": "1000543",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5e04a284e25f313005306b8112bf900a",
      "version": 7
    },
    "invoke.createBchPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createBchPerpsMarket": {
            "hash": "0x6b6a787c973e970020c95b165973b619041363fc055011befd30815b96aff37b",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4000",
                    "Bitcoin Cash",
                    "BCH"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createBchPerpsMarket",
            "gasUsed": 165920,
            "gasCost": "1000541",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e6c8f9e0758b6fffef3a760fd2c82a32",
      "version": 7
    },
    "invoke.createBlurPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createBlurPerpsMarket": {
            "hash": "0x776b8bc794535a2b6a3881d7d2f62a96a8b75920d1da6bc9f733abb99a68b363",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4100",
                    "Blur",
                    "BLUR"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createBlurPerpsMarket",
            "gasUsed": 165836,
            "gasCost": "1000539",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3114bd38dba86d1daa459ffd8f17337a",
      "version": 7
    },
    "invoke.createCompPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createCompPerpsMarket": {
            "hash": "0x2ac8cb8bbd612cff1a1b9d8aa18d5e2ff2eaa923d28ff535df7843614f04a842",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4200",
                    "Compound",
                    "COMP"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createCompPerpsMarket",
            "gasUsed": 165884,
            "gasCost": "1000537",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "68b786728d76639ac013a43ef7963822",
      "version": 7
    },
    "invoke.createCrvPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createCrvPerpsMarket": {
            "hash": "0xca9e11c72df4fedb89d140fa14bb4ecfff71ab0a1c52febc63a84da628082f6d",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4300",
                    "Curve Dao",
                    "CRV"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createCrvPerpsMarket",
            "gasUsed": 165884,
            "gasCost": "1000535",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c4ff8d74556feedf6f788606964eb1cc",
      "version": 7
    },
    "invoke.createDotPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createDotPerpsMarket": {
            "hash": "0xd62898c6943e804586bdb747b7945220fdf37955013ca186d820e5b4a526011a",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4400",
                    "Polkadot",
                    "DOT"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createDotPerpsMarket",
            "gasUsed": 165872,
            "gasCost": "1000533",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "59b1bf63ce48bcd18b2f473d4cfd6f3f",
      "version": 7
    },
    "invoke.createDydxPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createDydxPerpsMarket": {
            "hash": "0x0bba8734b0fbc69e3f3e92838149c78a09a0e566294e4ab45e178f64a3ea41f8",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4500",
                    "Dydx",
                    "DYDX"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createDydxPerpsMarket",
            "gasUsed": 165836,
            "gasCost": "1000532",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "59ddd5c69811bb96897dd32d8f417b0f",
      "version": 7
    },
    "invoke.createEosPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createEosPerpsMarket": {
            "hash": "0x9598e9a20496adedd2d9a3fbfec58f058ec153182a403debe120cf53ed44f423",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4600",
                    "Eos",
                    "EOS"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createEosPerpsMarket",
            "gasUsed": 165812,
            "gasCost": "1000531",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3b726c807f7f24102a8ddcac2ee8b813",
      "version": 7
    },
    "invoke.createEtcPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createEtcPerpsMarket": {
            "hash": "0xa0dc51825a7958c52c663fed6b9e20e7911357cc4deb0d788c9bf6e7bfe49465",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4700",
                    "Ethereum Classic",
                    "ETC"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createEtcPerpsMarket",
            "gasUsed": 165968,
            "gasCost": "1000529",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b652090284ef65b354017335f2c7fc37",
      "version": 7
    },
    "invoke.createEthbtcPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createEthbtcPerpsMarket": {
            "hash": "0xba24ec55afebce22b1e6be6be953e41a458835323774ff9c87b5350d84ecf1f4",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4800",
                    "Ether/Bitcoin Ratio",
                    "ETHBTC"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createEthbtcPerpsMarket",
            "gasUsed": 166040,
            "gasCost": "1000533",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bbf8f04f7fa9c9f19fa08ea853cd8fb7",
      "version": 7
    },
    "invoke.createFilPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createFilPerpsMarket": {
            "hash": "0xde87912346c6dd906755f0d5b4fa2263d0f4f34ba70de00ccf6d90b9cfeb9c74",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "4900",
                    "Filecoin",
                    "FIL"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createFilPerpsMarket",
            "gasUsed": 165872,
            "gasCost": "1000536",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4cfb4e12d840c2d3b0b45b48bcddeaf0",
      "version": 7
    },
    "invoke.createFlowPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createFlowPerpsMarket": {
            "hash": "0x44c4e5527408930a1d3a0ad6ee9f147fb2079cddbeb051fe19a538146456dd5d",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5000",
                    "Flow",
                    "FLOW"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createFlowPerpsMarket",
            "gasUsed": 165836,
            "gasCost": "1000534",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3cb692277dddaad61c270e81c7dee498",
      "version": 7
    },
    "invoke.createFxsPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createFxsPerpsMarket": {
            "hash": "0x677dc66e45da301f4955b3c76dbb98d775691171da9630546ad271d6a2d6c8d1",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5100",
                    "Fraxshare",
                    "FXS"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createFxsPerpsMarket",
            "gasUsed": 165884,
            "gasCost": "1000538",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "18243b31ee66dd57561a698e14840210",
      "version": 7
    },
    "invoke.createGrtPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createGrtPerpsMarket": {
            "hash": "0xcab1565a8c379f2b808d1473f758d382fccb3effbdef3d57bee2796c00c6b34d",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5200",
                    "The Graph",
                    "GRT"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createGrtPerpsMarket",
            "gasUsed": 165884,
            "gasCost": "1000542",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "eb70a124fdf333db0b76d6b811a67b2d",
      "version": 7
    },
    "invoke.createIcpPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createIcpPerpsMarket": {
            "hash": "0x7f51e1612ab0ae59d2c9669c049cc52ac970e84ea19df7b5c18dc1ccc2b70d67",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5300",
                    "Internet Computer",
                    "ICP"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createIcpPerpsMarket",
            "gasUsed": 165980,
            "gasCost": "1000542",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0a33be18d5d63437bece988ca7551129",
      "version": 7
    },
    "invoke.createImxPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createImxPerpsMarket": {
            "hash": "0x65acc3f96b236f8dfada34d6cc203b6a17340f8915d693e02e8afa23f477a7fc",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5400",
                    "Immutable",
                    "IMX"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createImxPerpsMarket",
            "gasUsed": 165884,
            "gasCost": "1000540",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7440d5b5051543525e680130143b2698",
      "version": 7
    },
    "invoke.createJtoPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createJtoPerpsMarket": {
            "hash": "0x03732cb3b4391c982084e5aa5dd714b67d70088ce78caacb66dc99af37cffb9f",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5500",
                    "Jito",
                    "JTO"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createJtoPerpsMarket",
            "gasUsed": 165824,
            "gasCost": "1000540",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6a92f8d4e5c68a893d28791229d2c2f8",
      "version": 7
    },
    "invoke.createJupPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createJupPerpsMarket": {
            "hash": "0xf8fc9a943c1bd0eabefa90596ecf03bbf971e11c2457b1f1a3b6f7f78612b498",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5600",
                    "Jupiter",
                    "JUP"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createJupPerpsMarket",
            "gasUsed": 165860,
            "gasCost": "1000538",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4031417b6b1f0ad00d9f040a136abf8a",
      "version": 7
    },
    "invoke.createLtcPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createLtcPerpsMarket": {
            "hash": "0x7e6d217fffd8f3330709579557c05afc352bcc2665c2cffc0b9901f39389a3ed",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5800",
                    "Litecoin",
                    "LTC"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createLtcPerpsMarket",
            "gasUsed": 165872,
            "gasCost": "1000535",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "63c5c11c70060893fe045bbbc50ae2de",
      "version": 7
    },
    "invoke.createNearPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createNearPerpsMarket": {
            "hash": "0x0a1f968feb71862c161e731170992860e03ee6523f6a45b1facf9f7b720b7df2",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6100",
                    "Near Protocol",
                    "NEAR"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createNearPerpsMarket",
            "gasUsed": 165944,
            "gasCost": "1000532",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6596486c723943a2a3a28f1787f646a9",
      "version": 7
    },
    "invoke.createPythPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createPythPerpsMarket": {
            "hash": "0xad77eb1f8ab691bbc3a4c64d94bf446df02d1712a9bd6c7fff2efd26277caceb",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6200",
                    "Pyth Network",
                    "PYTH"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createPythPerpsMarket",
            "gasUsed": 165932,
            "gasCost": "1000532",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a1f3762325c9de35a17f78ce1aae52aa",
      "version": 7
    },
    "invoke.createRndrPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createRndrPerpsMarket": {
            "hash": "0xfc58a0d9c22297d27f24647135e3de994b811a8d837a4ea4e1d1c1829be15be6",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6300",
                    "Render",
                    "RNDR"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createRndrPerpsMarket",
            "gasUsed": 165860,
            "gasCost": "1000531",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f499ed85ea827aa81928fd0942c893d6",
      "version": 7
    },
    "invoke.createSeiPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createSeiPerpsMarket": {
            "hash": "0x1996b646cf1bd8c1178cf94535f8411aa9b21be0067a06532785e23615f05737",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6400",
                    "Sei",
                    "SEI"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createSeiPerpsMarket",
            "gasUsed": 165800,
            "gasCost": "1000529",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "48d32ad12a7672dc68df19e2eab11e2d",
      "version": 7
    },
    "invoke.createShibPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createShibPerpsMarket": {
            "hash": "0x61e80e810dd66efefa61e9c599b1207f332f58443f8c1fc87005aa362f7339e0",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6500",
                    "Shiba Inu",
                    "SHIB"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createShibPerpsMarket",
            "gasUsed": 165896,
            "gasCost": "1000527",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cfa9d17cabaaeac495a8afaa25236708",
      "version": 7
    },
    "invoke.createStrkPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createStrkPerpsMarket": {
            "hash": "0xb131b0bcf6e29e14100befa0ce32099559f02a4bec050d4bfea4fdcf97d64415",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6600",
                    "Starknet",
                    "STRK"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createStrkPerpsMarket",
            "gasUsed": 165884,
            "gasCost": "1000525",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1d27b09ae3350bfed196cfef0475b7e1",
      "version": 7
    },
    "invoke.createSushiPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createSushiPerpsMarket": {
            "hash": "0x386f7851980169d6caeb226951479c7e947608aa0efe1fb5c4dd0e29eb7237f6",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6700",
                    "Sushiswap",
                    "SUSHI"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createSushiPerpsMarket",
            "gasUsed": 165908,
            "gasCost": "1000524",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cd996b2b3b043ef767b86a388808718d",
      "version": 7
    },
    "invoke.createTrxPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createTrxPerpsMarket": {
            "hash": "0x54395672e89cd59a6513daa870755e5d5d88e09f9fec297f6e589b71a82a3d6c",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6800",
                    "Tron",
                    "TRX"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createTrxPerpsMarket",
            "gasUsed": 165824,
            "gasCost": "1000522",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9ead7332e1d707497d38f340b472258e",
      "version": 7
    },
    "invoke.createUniPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createUniPerpsMarket": {
            "hash": "0xb42b9dcc394482ad263f8061202dfd79ba23a0838dbb61d199d10e5f4c124bff",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6900",
                    "Uniswap",
                    "UNI"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createUniPerpsMarket",
            "gasUsed": 165860,
            "gasCost": "1000520",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b4d0ffd7278ec0707d88fe49a78615d5",
      "version": 7
    },
    "invoke.createXlmPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createXlmPerpsMarket": {
            "hash": "0x03c4fa68903d617e3b8dc6527126484069d32dd2088399de0781604319ab21d0",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7000",
                    "Stellar",
                    "XLM"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createXlmPerpsMarket",
            "gasUsed": 165860,
            "gasCost": "1000519",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f9e1611104cdbcfcbbc51f12065438a6",
      "version": 7
    },
    "invoke.createXrpPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createXrpPerpsMarket": {
            "hash": "0xaff26f47e99623cd7d623f34203cf78d7d00831b72d888ed7ef4d5cd9f398a5a",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7100",
                    "Ripple",
                    "XRP"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createXrpPerpsMarket",
            "gasUsed": 165848,
            "gasCost": "1000517",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1ccbc56faf3d6edebef2181f4602aeae",
      "version": 7
    },
    "invoke.createYfiPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createYfiPerpsMarket": {
            "hash": "0xc046a67a7e766f10f6a99e7194d6a2a76e326be038a1226b567668d37a086e88",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7200",
                    "Yearn Finance",
                    "YFI"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createYfiPerpsMarket",
            "gasUsed": 165932,
            "gasCost": "1000515",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "48f0183a44bde57d9428b8f8ce5635fc",
      "version": 7
    },
    "invoke.setLowCapPerpsMarketName": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setLowCapPerpsMarketName": {
            "hash": "0x157c9fc0636eb70ac3b39287344a59339b49ad0e712df1b13dd5321bc5c4085a",
            "blockNumber": "16649520",
            "timestamp": "1729067328",
            "events": {},
            "deployedOn": "invoke.setLowCapPerpsMarketName",
            "gasUsed": 55858,
            "gasCost": "951069350",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c8f856d6a353a97930ebe8cd2c58de1b",
      "version": 7
    },
    "invoke.addPerpsAaveSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsAaveSettlementStrategy": {
            "hash": "0x8b4514c3e0f7d8932591a739ebd81acdf73267fbcbfee6e0d348dc37f913aabe",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsAaveSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000513",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "aave_pyth_settlement_strategy": "0"
        }
      },
      "hash": "93ee4c3c57ba5cb0deeaf24937c92e61",
      "version": 7
    },
    "invoke.addPerpsAdaSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsAdaSettlementStrategy": {
            "hash": "0x9d2ed8c7d66e8104eb3e357d837caae82b26ea44cd49be4f634ccb35c2823976",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsAdaSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000511",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ada_pyth_settlement_strategy": "0"
        }
      },
      "hash": "ab66aaae90ec001ffa9f84ca83239f57",
      "version": 7
    },
    "invoke.addPerpsAlgoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsAlgoSettlementStrategy": {
            "hash": "0x68b051c37c0660dd29b0ea9c6771c1f380f0d63d251173037f756acd87e0d356",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3500",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsAlgoSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000510",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "algo_pyth_settlement_strategy": "0"
        }
      },
      "hash": "a573ab797e8ec58106e751deeaca7a45",
      "version": 7
    },
    "invoke.addPerpsAptSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsAptSettlementStrategy": {
            "hash": "0x05c173ff692c820ed65ee63e900b19b2b3092aedf9f077a95391e85d4795deb3",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3600",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsAptSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000509",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "apt_pyth_settlement_strategy": "0"
        }
      },
      "hash": "7073fc11374c4df8847b29ebed4aacfe",
      "version": 7
    },
    "invoke.addPerpsAtomSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsAtomSettlementStrategy": {
            "hash": "0x97c3aefa65ce3f8cb28063eb3707d74518966c7b1c1745072cf8ab688dd8f6df",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3700",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsAtomSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000507",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "atom_pyth_settlement_strategy": "0"
        }
      },
      "hash": "2dbe0fe9f44de17a9087a80786b07144",
      "version": 7
    },
    "invoke.addPerpsAxsSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsAxsSettlementStrategy": {
            "hash": "0xf0284b573b08537e00b600e2323cf4c3f0e54ac30da78a3b7c57c6002ec5ab51",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3800",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsAxsSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000505",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "axs_pyth_settlement_strategy": "0"
        }
      },
      "hash": "5bafcc1f550951608d6ff7c79c40db30",
      "version": 7
    },
    "invoke.addPerpsBalSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsBalSettlementStrategy": {
            "hash": "0x6104f2d8ab8644c666df11e9d9c90040a057f148ea486ab0165fe664133c632b",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "3900",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsBalSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000504",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bal_pyth_settlement_strategy": "0"
        }
      },
      "hash": "1dcd7b67271e546604b80ac649ad8c0b",
      "version": 7
    },
    "invoke.addPerpsBchSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsBchSettlementStrategy": {
            "hash": "0x9a028311caa9536832718f123f72b5ac5f016fcc6b0995932552b532e85c65f1",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4000",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsBchSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000502",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "bch_pyth_settlement_strategy": "0"
        }
      },
      "hash": "b806b495a05830aa334762fd6971d893",
      "version": 7
    },
    "invoke.addPerpsBlurSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsBlurSettlementStrategy": {
            "hash": "0x434396c097cd28898b07b9aa75f5fbdcb8f9c5cf715ed644751c89311fe1f86e",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsBlurSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000501",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "blur_pyth_settlement_strategy": "0"
        }
      },
      "hash": "69a1ece23ac08dd5d03c5db41cae8b3e",
      "version": 7
    },
    "invoke.addPerpsCompSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsCompSettlementStrategy": {
            "hash": "0xe65717a968100a1323b9bd0e39dc3ab975c3bf113b0dbbfe77512223c9eaf085",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsCompSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000499",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "comp_pyth_settlement_strategy": "0"
        }
      },
      "hash": "17f211109369e9ca556dfbd808f09728",
      "version": 7
    },
    "invoke.addPerpsCrvSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsCrvSettlementStrategy": {
            "hash": "0x7e243a0e5a557546754dec3edd5739a87274283003eac946f8e7b03461b9a742",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsCrvSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000497",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "crv_pyth_settlement_strategy": "0"
        }
      },
      "hash": "9edd624f06182a02a3901ff5e4e6fad6",
      "version": 7
    },
    "invoke.addPerpsDotSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsDotSettlementStrategy": {
            "hash": "0x9201e773565b37bc9ece9c3b74b22041adb7d6f505f5c49321dac2c8f6d1e757",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsDotSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000495",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "dot_pyth_settlement_strategy": "0"
        }
      },
      "hash": "d3d5fde3c1e6c4ac61c8dc3dc2df5c02",
      "version": 7
    },
    "invoke.addPerpsDydxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsDydxSettlementStrategy": {
            "hash": "0xdb95d61b182f3e97ecbe8eaa50cc236e5883e37a7d8ab4cc13574a7fce6dab89",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4500",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsDydxSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000493",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "dydx_pyth_settlement_strategy": "0"
        }
      },
      "hash": "f73d346f9ddc20c7952150f4c2fc5369",
      "version": 7
    },
    "invoke.addPerpsEosSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsEosSettlementStrategy": {
            "hash": "0x2e8626efec5a132d4a84058eaba98a1e663082cc35d3cb2f1eed974e6cafc770",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4600",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsEosSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000491",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eos_pyth_settlement_strategy": "0"
        }
      },
      "hash": "4a5dd2034f2cd8953444f49f1e345338",
      "version": 7
    },
    "invoke.addPerpsEtcSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsEtcSettlementStrategy": {
            "hash": "0x3d016fa4e976c717a7e930bcafa833dd69a393d8650808877b8fc6f976a4487e",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4700",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsEtcSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000489",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "etc_pyth_settlement_strategy": "0"
        }
      },
      "hash": "7806bfa22cd29850f11445a0dd17160f",
      "version": 7
    },
    "invoke.addPerpsEthbtcSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsEthbtcSettlementStrategy": {
            "hash": "0xf197f8ff2244da7fdc58a3ade3a9167a42b32c798991bf3a65a79cb57015fe5e",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4800",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsEthbtcSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000488",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ethbtc_pyth_settlement_strategy": "0"
        }
      },
      "hash": "f05d1f2ec3173e4e04c17846dae6256d",
      "version": 7
    },
    "invoke.addPerpsFilSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsFilSettlementStrategy": {
            "hash": "0x05fb1ea9de2a38cf8eb8b31f769f1d09d12444b7217b3dbe92a55f558109239c",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "4900",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsFilSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000486",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "fil_pyth_settlement_strategy": "0"
        }
      },
      "hash": "b1281df741b14eb3b3487b891bc64f95",
      "version": 7
    },
    "invoke.addPerpsFlowSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsFlowSettlementStrategy": {
            "hash": "0xe094bb4b473503e67b2a557dd8d7e12bc6feda912b6a59ae22d9122467902046",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5000",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsFlowSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000485",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "flow_pyth_settlement_strategy": "0"
        }
      },
      "hash": "d80c022bcfd6087033f7588efa17e500",
      "version": 7
    },
    "invoke.addPerpsFxsSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsFxsSettlementStrategy": {
            "hash": "0xcc76620bde2606dda9d67625eead10867b896ba40ffde2454a59b6236987ac15",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsFxsSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000483",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "fxs_pyth_settlement_strategy": "0"
        }
      },
      "hash": "da0b3bf4e187e39745c363af26567aa7",
      "version": 7
    },
    "invoke.addPerpsGrtSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsGrtSettlementStrategy": {
            "hash": "0xbdc94290215d43c9affdbfd110ac21eb4c5f7cc5f916a060a61ec52863a633fa",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsGrtSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000481",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "grt_pyth_settlement_strategy": "0"
        }
      },
      "hash": "f81bc1d0928cf3fde87cdd8a67d56822",
      "version": 7
    },
    "invoke.addPerpsIcpSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsIcpSettlementStrategy": {
            "hash": "0x0e7091e154004733fdd739739a12212c496946421f448f9f76f02dc67675b89a",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsIcpSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000481",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "icp_pyth_settlement_strategy": "0"
        }
      },
      "hash": "8818c57552b3f2850cb301a997239845",
      "version": 7
    },
    "invoke.addPerpsImxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsImxSettlementStrategy": {
            "hash": "0x45ba437a0562c7ecaee05896a5bef98a2f79fbca0dcd5597a019f5e4014901a5",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsImxSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000480",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "imx_pyth_settlement_strategy": "0"
        }
      },
      "hash": "6f1d1ab4fdfc1a90e1a809ceac8aa472",
      "version": 7
    },
    "invoke.addPerpsJtoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsJtoSettlementStrategy": {
            "hash": "0xbf818ed2f2e4416c4c67d13b6b351e6120ceb9095ae849ed0b56319341dbb4ec",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5500",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsJtoSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000478",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "jto_pyth_settlement_strategy": "0"
        }
      },
      "hash": "bc03817afc88662eb58e0b6deb23a08d",
      "version": 7
    },
    "invoke.addPerpsJupSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsJupSettlementStrategy": {
            "hash": "0x50a3c8fc11a235ee2e67c234bfa87cea32306faf8155c0ebfe1f04678d03a8c8",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5600",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsJupSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000477",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "jup_pyth_settlement_strategy": "0"
        }
      },
      "hash": "5fa6d21d9e71edbf98e54c63560abba8",
      "version": 7
    },
    "invoke.addPerpsLtcSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsLtcSettlementStrategy": {
            "hash": "0xa2de41de3e3efac9cb721e5144cead57c6ed228a674015d7dd16497de7f16b4c",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5800",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsLtcSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000473",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ltc_pyth_settlement_strategy": "0"
        }
      },
      "hash": "e637153d279cffb1048ad3b5a7a57360",
      "version": 7
    },
    "invoke.addPerpsNearSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsNearSettlementStrategy": {
            "hash": "0xd2112e24799e0549b579f5b1e8286e6563141c3305af17171c60ad60c8784cfa",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsNearSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000469",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "near_pyth_settlement_strategy": "0"
        }
      },
      "hash": "e89e688a05d8f713ff98176475003470",
      "version": 7
    },
    "invoke.addPerpsPythSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsPythSettlementStrategy": {
            "hash": "0x71d7293d1c16fc049bbe4d7f0b482998318ecc09ccc5cdaf53d53c4444efa53a",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsPythSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000468",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pyth_pyth_settlement_strategy": "0"
        }
      },
      "hash": "511a13244924204e855fcaaa65886d36",
      "version": 7
    },
    "invoke.addPerpsRndrSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsRndrSettlementStrategy": {
            "hash": "0x8a71aea480d5c81847a68fc7fc9e6fd8c5d8140aaae3ce97afae15a8fa9c1e42",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsRndrSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000468",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "rndr_pyth_settlement_strategy": "0"
        }
      },
      "hash": "204f2f275de9e109d7cc7f94474dd93e",
      "version": 7
    },
    "invoke.addPerpsSeiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsSeiSettlementStrategy": {
            "hash": "0xae49fd1d6a221f80b84abffe188497f487e9cae0d095d3dd79fc8fd915eee9e1",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsSeiSettlementStrategy",
            "gasUsed": 118549,
            "gasCost": "1000467",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sei_pyth_settlement_strategy": "0"
        }
      },
      "hash": "5f415ebf3702825adba52817996059cf",
      "version": 7
    },
    "invoke.addPerpsShibSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsShibSettlementStrategy": {
            "hash": "0xa5618ffff5963ab60e356ac3b57515656da5e49c95f4319da04efefd184de958",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6500",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsShibSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000465",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "shib_pyth_settlement_strategy": "0"
        }
      },
      "hash": "4e6abd7ece55156fe442de1c33109d4c",
      "version": 7
    },
    "invoke.addPerpsStrkSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsStrkSettlementStrategy": {
            "hash": "0xf94a5f757b704332fcedc9b1ed7fbecd99d87c3d5fedd3fec2db59c294876263",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6600",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsStrkSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000463",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "strk_pyth_settlement_strategy": "0"
        }
      },
      "hash": "8fbc0b6b237271c3a8a15cfa47d4f362",
      "version": 7
    },
    "invoke.addPerpsSushiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsSushiSettlementStrategy": {
            "hash": "0x3ab90373b040d6b882286f165bb91daf71b323659184d388d7616f60f59b68a6",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6700",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsSushiSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000462",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sushi_pyth_settlement_strategy": "0"
        }
      },
      "hash": "1a35b1239dc8a0db9186cfc65c4a642f",
      "version": 7
    },
    "invoke.addPerpsTrxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsTrxSettlementStrategy": {
            "hash": "0x75d54dcd4f573ec316ce4308025f9ccc36047197b28d817cf47ce3ce55fd162d",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6800",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsTrxSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000460",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "trx_pyth_settlement_strategy": "0"
        }
      },
      "hash": "abf8ac631f5e752417033cf63857e6fe",
      "version": 7
    },
    "invoke.addPerpsUniSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsUniSettlementStrategy": {
            "hash": "0x483832413f8150681ae57bd20b9b1fcc9bbb364d07eba2ecc1ec0b7b7ccf758c",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6900",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsUniSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000459",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "uni_pyth_settlement_strategy": "0"
        }
      },
      "hash": "e5c1a8c07bd48e02cc152e1b20909efe",
      "version": 7
    },
    "invoke.addPerpsXlmSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsXlmSettlementStrategy": {
            "hash": "0x17b647f44c74b86cd478e97551ac668bdeaa144ef679ea4f59d3373850039824",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7000",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsXlmSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000457",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "xlm_pyth_settlement_strategy": "0"
        }
      },
      "hash": "f842b3abaa9b447c97174476255637cf",
      "version": 7
    },
    "invoke.addPerpsXrpSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsXrpSettlementStrategy": {
            "hash": "0xeab39f623f79cd2a692e935b223f20b2d8644115a9e5056b0a06cd06d60918a3",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsXrpSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000455",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "xrp_pyth_settlement_strategy": "0"
        }
      },
      "hash": "048ac89cebc3979b95a795abfa6eadca",
      "version": 7
    },
    "invoke.addPerpsYfiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsYfiSettlementStrategy": {
            "hash": "0xb43ddae9f7bc30d18635f0f4380621b1dd3ffe95d45deb76a3c9a7dc67ef85f4",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsYfiSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000453",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "yfi_pyth_settlement_strategy": "0"
        }
      },
      "hash": "4056a3dfd5c12b915f39cfa600d1fbe1",
      "version": 7
    },
    "invoke.setPerpsAaveFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAaveFundingParameters": {
            "hash": "0x061c2f145771d879547ad1e0c5ba4d0e06495f9d65166e59586b1fa6255d1073",
            "blockNumber": "16432729",
            "timestamp": "1728633746",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3300",
                    "360000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAaveFundingParameters",
            "gasUsed": 45036,
            "gasCost": "316864807",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4e59c09b3bb112ab05c27eb0bf6c9d09",
      "version": 7
    },
    "invoke.setPerpsAaveLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAaveLiquidationParameters": {
            "hash": "0x1625d668f58d9c2ee5f8b55ff7dae2a83b5aa6a4aa982f1f779ac2436dd1ffd9",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3300",
                    "3380000000000000000",
                    "380000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAaveLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000450",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dd4fa4d153d30bc25197635c0e771176",
      "version": 7
    },
    "invoke.setPerpsAaveLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAaveLockedOiRatio": {
            "hash": "0xca0268d87d926f3b6398a10a74dd879cdbff0dcea5860092839d2bd99cae123c",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAaveLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000448",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a96cb7be3835f1053b5270ffac9aa1c0",
      "version": 7
    },
    "invoke.setPerpsAaveMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAaveMaxLiquidationParameters": {
            "hash": "0xa71d56d0f3453c7f380528190ffe3815b5aeb86fff62428eb0e214f70f20c2cc",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAaveMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000446",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f54f520ca68fd2ad5e24e18bdb688cb4",
      "version": 7
    },
    "invoke.setPerpsAaveMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAaveMaxMarketSize": {
            "hash": "0x20a596f04266a4cf17e742597e05a68cae2f9e5e078eff78376e9c831b08e2bf",
            "blockNumber": "16432731",
            "timestamp": "1728633750",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3300",
                    "20600000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAaveMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "316547945",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4fd12dc07a81e3ec658b358a0b44b908",
      "version": 7
    },
    "invoke.setPerpsAaveMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAaveMaxMarketValue": {
            "hash": "0x436a9e1b95868138f6cdafbfca57817cde82d212067ef966d888c0e8f5a0c9cc",
            "blockNumber": "16432733",
            "timestamp": "1728633754",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3300",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAaveMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "316998217",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "31099c776c66de7579bfb6580563292a",
      "version": 7
    },
    "invoke.setPerpsAaveOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAaveOrderFees": {
            "hash": "0xc9f643c48ee0a07ab6a94c5b4fe5aaa71af03c63d01ec237ea351fa1e17ab926",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3300",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAaveOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000443",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "716c9f99baecae15dff7202f3ca369e3",
      "version": 7
    },
    "invoke.setPerpsAdaFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAdaFundingParameters": {
            "hash": "0xa7714eb52a0f939bb522d587649e3b9a9eab17591680349dba16c8f22ef37feb",
            "blockNumber": "16432735",
            "timestamp": "1728633758",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3400",
                    "300000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAdaFundingParameters",
            "gasUsed": 45048,
            "gasCost": "316461560",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "385bca9f2d282659b50ac6f04498b2e5",
      "version": 7
    },
    "invoke.setPerpsAdaLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAdaLiquidationParameters": {
            "hash": "0x6abae58bdc333afc3346bf832af845871062972da9d3a7108710ea330c9f370b",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3400",
                    "4350000000000000000",
                    "330000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAdaLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000440",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "277b9a4cf89ebe0a5ba3d9b8904aa42e",
      "version": 7
    },
    "invoke.setPerpsAdaLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAdaLockedOiRatio": {
            "hash": "0x326e2e7f4de9d11284b37628635e88951771eb466c2ca84c056f175fc6d18ce0",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAdaLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000439",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f7b08470b5fde77f828492152d3317f6",
      "version": 7
    },
    "invoke.setPerpsAdaMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAdaMaxLiquidationParameters": {
            "hash": "0x48b826c187b5ac6c62ded9767d980dcb57e87643189e57b460162a8dd96994ab",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAdaMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000438",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "962284a429bfa36e88c88bec297d3251",
      "version": 7
    },
    "invoke.setPerpsAdaMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAdaMaxMarketSize": {
            "hash": "0x4337dc349871f38536aa6d458a6e662ffd648b56183b0a3ebc4a35f27cddc393",
            "blockNumber": "16432737",
            "timestamp": "1728633762",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3400",
                    "8476200000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAdaMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "317089379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "16d43ffc1db864f9f09c27c42dfdc364",
      "version": 7
    },
    "invoke.setPerpsAdaMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAdaMaxMarketValue": {
            "hash": "0xc81cc5dcf6fd7577f9819e4e957563a447fbe9a56d3f226441bb6aad727c2c95",
            "blockNumber": "16432739",
            "timestamp": "1728633766",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3400",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAdaMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "317587479",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "87caddfb7d14c186fa6e53ab10da3ed1",
      "version": 7
    },
    "invoke.setPerpsAdaOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAdaOrderFees": {
            "hash": "0x2c3d3982d29f6dc89c6d0da1ee41f9436bea8c3b5fb5a2db44291f00c1277e60",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3400",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAdaOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000434",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7d5c050c03fb0b9e9e929de2faf826e9",
      "version": 7
    },
    "invoke.setPerpsAlgoFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAlgoFundingParameters": {
            "hash": "0xc6a48432e583e93151e982db955589ec37bb45450be7d1ecf92d5cb583b11e00",
            "blockNumber": "16432741",
            "timestamp": "1728633770",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3500",
                    "103875000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAlgoFundingParameters",
            "gasUsed": 45060,
            "gasCost": "318169219",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "28d863c3344f7391a8674e9718601340",
      "version": 7
    },
    "invoke.setPerpsAlgoLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAlgoLiquidationParameters": {
            "hash": "0xd30f6b1cb948895f1babbf49bfbb19608256de116e1d70bb32d1da598c852df0",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3500",
                    "5190000000000000000",
                    "360000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAlgoLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000431",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "046c35a16c7290913e9e6a2894835e95",
      "version": 7
    },
    "invoke.setPerpsAlgoLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAlgoLockedOiRatio": {
            "hash": "0xea6372a3348237383cd55d43364424cfe17bc95c271c567bc0d77c38eba84c55",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3500",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAlgoLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000429",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "efda80f17f762f7a74a33adb1cdd7f22",
      "version": 7
    },
    "invoke.setPerpsAlgoMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAlgoMaxLiquidationParameters": {
            "hash": "0x51b7737d72a702cf1c177f962f9e0f1ba402f4e2d1ddd401459cdc95d6d5da83",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3500",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAlgoMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000429",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e3766cf4ebde52ce39fd43787c584575",
      "version": 7
    },
    "invoke.setPerpsAlgoMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAlgoMaxMarketSize": {
            "hash": "0x577e918d6ee85766633fe282f3d5095c52ff2f1aaf578b847bb0050c7e3bf67f",
            "blockNumber": "16432743",
            "timestamp": "1728633774",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3500",
                    "5953850000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAlgoMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "318601031",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4661015beff1b3e049cbfa1820643bdc",
      "version": 7
    },
    "invoke.setPerpsAlgoMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAlgoMaxMarketValue": {
            "hash": "0x3309454ed205785e8afd70e1f40f5fe42d5b13b1be515fb63cd6af43412a0170",
            "blockNumber": "16432745",
            "timestamp": "1728633778",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3500",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAlgoMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "318659119",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "57e3a8e39485088390b318dfd773a449",
      "version": 7
    },
    "invoke.setPerpsAlgoOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAlgoOrderFees": {
            "hash": "0x7163b7f928440e844f04056ee0de0c0839d7592b08041f84ba94a7419029beed",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3500",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAlgoOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000425",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a92e07655fb31ee7663f8d9c142e8299",
      "version": 7
    },
    "invoke.setPerpsAptFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAptFundingParameters": {
            "hash": "0xf849ee9cb031eb02695481463bfa3bfdf470d49af146d7f7cfc7a9b3691d9f3a",
            "blockNumber": "16432747",
            "timestamp": "1728633782",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3600",
                    "6075000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAptFundingParameters",
            "gasUsed": 45060,
            "gasCost": "318355820",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c072c00d76262b40dab89365dcf6662e",
      "version": 7
    },
    "invoke.setPerpsAptLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAptLiquidationParameters": {
            "hash": "0xb2e52a064a2c1c3b4ec3717f499fa6eee2dfab4d994b24dd09de3bb8d61d666e",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3600",
                    "1000000000000000000",
                    "310000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAptLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000421",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ebaed18c4c10d26e6d75423013c27073",
      "version": 7
    },
    "invoke.setPerpsAptLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAptLockedOiRatio": {
            "hash": "0x138d373405d1e4214e5020f8cb3801d7760853801ca1b0a8580d9fc9362fc080",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3600",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAptLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000419",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0dd47f31d1b08f1070482e9b7c55dd72",
      "version": 7
    },
    "invoke.setPerpsAptMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAptMaxLiquidationParameters": {
            "hash": "0xaa7d64c0e037c4afbe6f6b90465c790e3d6b35ab0b6eaeee38138e0678571664",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3600",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAptMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000417",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2a65ad87aa4012ec07b6407c79c92136",
      "version": 7
    },
    "invoke.setPerpsAptMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAptMaxMarketSize": {
            "hash": "0x1f286034e167f5bf81abbc97773fcba24b411b229cfc6ce42141c02c4c6b6ec3",
            "blockNumber": "16432749",
            "timestamp": "1728633786",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3600",
                    "352300000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAptMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "319397317",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a2604c37405b40dc452a04b3cdde4669",
      "version": 7
    },
    "invoke.setPerpsAptMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAptMaxMarketValue": {
            "hash": "0x41604bf5e0d0907d1a42e72a9c5b500d193bb6060513db9d08ee66e65ad8d514",
            "blockNumber": "16432751",
            "timestamp": "1728633790",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3600",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAptMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "320351572",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ed1a2ba7f94a758133e8a07ac7286b06",
      "version": 7
    },
    "invoke.setPerpsAptOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAptOrderFees": {
            "hash": "0x83a5e5cee71bdb1eb09a3ff28d99833717ebbdb66eaf98855d634778a0e997c6",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3600",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAptOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000413",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9cddffbdacf7d0576d4f3a13ab072897",
      "version": 7
    },
    "invoke.setPerpsAtomFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAtomFundingParameters": {
            "hash": "0x83bd9c80a83f6d470507a49340e7607266f3e28f82adcd6eacac8519c97ea6da",
            "blockNumber": "16432757",
            "timestamp": "1728633802",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3700",
                    "11250000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAtomFundingParameters",
            "gasUsed": 45060,
            "gasCost": "320693468",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c1587890526dd7356ee9bfb9dfaae74a",
      "version": 7
    },
    "invoke.setPerpsAtomLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAtomLiquidationParameters": {
            "hash": "0x8a338a4315bb2724d39b23c5d3533ac87a93bed57b2ca1f380e6714d305fbb44",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3700",
                    "2490000000000000000",
                    "310000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAtomLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000411",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d6cae45e7e367fe4583b2f5c51fe43fb",
      "version": 7
    },
    "invoke.setPerpsAtomLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAtomLockedOiRatio": {
            "hash": "0x4e635b03f03e3c41700640726bc762290727ae7e5c0babcb298f2668190e9918",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3700",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAtomLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000410",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9a8ce7890bd3eeca36aa5a85b263746b",
      "version": 7
    },
    "invoke.setPerpsAtomMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAtomMaxLiquidationParameters": {
            "hash": "0x7cf421e91ae81dc147ea4fcd542cbdbbf0e47cdf8fcbb2e519efcf7552579fd4",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3700",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAtomMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000408",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fa53faf30bdb847c7161d52c25f57ce9",
      "version": 7
    },
    "invoke.setPerpsAtomMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAtomMaxMarketSize": {
            "hash": "0x0665b950205fba91503273d7b9a29ef828f2cb618e1c1e3376dcc79c49d8b1f5",
            "blockNumber": "16432759",
            "timestamp": "1728633806",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3700",
                    "329300000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAtomMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "320519640",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "79a066abc11c8ef8798ded6ab371c692",
      "version": 7
    },
    "invoke.setPerpsAtomMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAtomMaxMarketValue": {
            "hash": "0xe98919c8241af22a402ce15c91b8672a6f8541a358b4513f0f919ebd240dcab7",
            "blockNumber": "16432761",
            "timestamp": "1728633810",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3700",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAtomMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "319295221",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6423331a56820209f7f90cc12b4ef057",
      "version": 7
    },
    "invoke.setPerpsAtomOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAtomOrderFees": {
            "hash": "0x28ec31048cf9bbae24a3b61f607ef7955df5dcf5c47f5f80c4ac64acced74dcd",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3700",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAtomOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000404",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9b075394d7f69ec598767b4f35eaf516",
      "version": 7
    },
    "invoke.setPerpsAxsFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxsFundingParameters": {
            "hash": "0xf06434c0d3d66c2b429f35b760ba7d9597aaff2b1d7c0b5884e17dd4b346f5ce",
            "blockNumber": "16432770",
            "timestamp": "1728633828",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3800",
                    "4218750000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxsFundingParameters",
            "gasUsed": 45060,
            "gasCost": "322935488",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "71e94cf5599c14b396d1510df4cbc1b7",
      "version": 7
    },
    "invoke.setPerpsAxsLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxsLiquidationParameters": {
            "hash": "0x3fcb2af87c7c85ae60288efe3ad5b70065c359531bdb76df8be3a3c7c56e3e7f",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3800",
                    "880000000000000000",
                    "310000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxsLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000403",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d6f9852a4f4b0e552a3a16ccd5e5719b",
      "version": 7
    },
    "invoke.setPerpsAxsLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxsLockedOiRatio": {
            "hash": "0x66442632e3de2cb4b70416ea518212027f97b1565a8d10c73f320f31f045e0b9",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3800",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxsLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000401",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "01d252709362b6e46b4845b063112900",
      "version": 7
    },
    "invoke.setPerpsAxsMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxsMaxLiquidationParameters": {
            "hash": "0xe2d907e7fbd17efc4ceb7f22dcaf2120427ca6bbb6d3d860013ba3d2c91cbba4",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3800",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxsMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000400",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "df9c00d43702108cd6e7ba84a348712a",
      "version": 7
    },
    "invoke.setPerpsAxsMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxsMaxMarketSize": {
            "hash": "0x5058538a53a04f5a87369230529e24e25b3101654a3c9559ede97dd94df01400",
            "blockNumber": "16432773",
            "timestamp": "1728633834",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3800",
                    "162000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxsMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "322465480",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e851147fc428a23200a3928d6332295c",
      "version": 7
    },
    "invoke.setPerpsAxsMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxsMaxMarketValue": {
            "hash": "0xc94d95140d2dd041770ba552435d9dbe3e07079324fe376a3bf620c43a706d6b",
            "blockNumber": "16432775",
            "timestamp": "1728633838",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3800",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxsMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "321748817",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6ee197a6df8c3037ae9418e833e11438",
      "version": 7
    },
    "invoke.setPerpsAxsOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxsOrderFees": {
            "hash": "0x967a183b3be329de80e908fde874d835d7b6ab4db94ab230bad866115325ed14",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3800",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxsOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000394",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7a7cb2183b883fb2e0539240afd85e96",
      "version": 7
    },
    "invoke.setPerpsBalFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBalFundingParameters": {
            "hash": "0x270c0d6160e19327636a49fed31cc1275390bb570747d939bd559465ca6beb97",
            "blockNumber": "16432777",
            "timestamp": "1728633842",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "3900",
                    "1125000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBalFundingParameters",
            "gasUsed": 42248,
            "gasCost": "320493844",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cf578dbe5d19064205a02482a3731c40",
      "version": 7
    },
    "invoke.setPerpsBalLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBalLiquidationParameters": {
            "hash": "0xb763d25dcfeb313b29462ef210dc595235ce0395c9d15a36e838d4151a4e1cb6",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "3900",
                    "3940000000000000000",
                    "350000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBalLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000390",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ed9c27a87b3cf19008d5e705c6598bac",
      "version": 7
    },
    "invoke.setPerpsBalLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBalLockedOiRatio": {
            "hash": "0x8663cbe01cf5f0fe11b4a892baa63656eea336e758c03a011505c3bf1dcbc33a",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "3900",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBalLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000389",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8a2920b76b7e02392db90b2218ac14b1",
      "version": 7
    },
    "invoke.setPerpsBalMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBalMaxLiquidationParameters": {
            "hash": "0xd389fdbaa98dac93aa142d2fa0edf6a5605c5b724d03ac58f7b1f5318f509aca",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "3900",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBalMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000388",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5fbc39b54b3317a35a7115b2749e6a93",
      "version": 7
    },
    "invoke.setPerpsBalMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBalMaxMarketSize": {
            "hash": "0x9f4489142b268bfdef35f0bd29a356c5a8d54cec2ba72d9953d2a3d0b26359f4",
            "blockNumber": "16432779",
            "timestamp": "1728633846",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "3900",
                    "377600000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBalMaxMarketSize",
            "gasUsed": 39501,
            "gasCost": "320407729",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6ef904c1f3e9201e34ffcad0f3b29c17",
      "version": 7
    },
    "invoke.setPerpsBalMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBalMaxMarketValue": {
            "hash": "0x02100285a963a7ade1e45a85ec02a4fc834b0211d41db8b07468af84f404a985",
            "blockNumber": "16432781",
            "timestamp": "1728633850",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "3900",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBalMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "320592264",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1327ea4cdd88b225f921966741c46dd6",
      "version": 7
    },
    "invoke.setPerpsBalOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBalOrderFees": {
            "hash": "0xc43b0321504fa557e52f0d3f7591711c80bfee1389c4f817108c5c8a71e41c51",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "3900",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBalOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3eb8cafbc01668d108cab381782a6354",
      "version": 7
    },
    "invoke.setPerpsBchFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBchFundingParameters": {
            "hash": "0x6bec67a4b7dd2c86610c5607beb9e93d015c3c7fda27a4df08dd67bc9e47c165",
            "blockNumber": "16432783",
            "timestamp": "1728633854",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4000",
                    "168750000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBchFundingParameters",
            "gasUsed": 45048,
            "gasCost": "320514005",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b36fb8bc3b6048a16c091b6e5ef95a38",
      "version": 7
    },
    "invoke.setPerpsBchLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBchLiquidationParameters": {
            "hash": "0xe02c501a3c8010b321742006cbb8d040f6e2c079ff1ac7f4668be8cf9716836a",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4000",
                    "1600000000000000000",
                    "320000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBchLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000382",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bbc59622e6aa950942c86a6db8ffb6de",
      "version": 7
    },
    "invoke.setPerpsBchLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBchLockedOiRatio": {
            "hash": "0x054ae273cc5668fde789f83155fe67abd5dd7e70b20e87c914a3d8e88a70189c",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBchLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c9d5718e5111ee0a8beeecb0d95e9a22",
      "version": 7
    },
    "invoke.setPerpsBchMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBchMaxLiquidationParameters": {
            "hash": "0x0e07971f63a77457d65b1dedb5f3fc98be31e27a06d3ab93a1f1557e922d1255",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4000",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBchMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000379",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2fd97464b41b16ae019a0dea1f46ef6b",
      "version": 7
    },
    "invoke.setPerpsBchMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBchMaxMarketSize": {
            "hash": "0xc9fb324059e2edef10f73c5552fac7528ebc7761b57a14f039a24f71ce46f299",
            "blockNumber": "16432785",
            "timestamp": "1728633858",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4000",
                    "9350000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBchMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "320640092",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "39af00a5c82b6d178177820b792f852e",
      "version": 7
    },
    "invoke.setPerpsBchMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBchMaxMarketValue": {
            "hash": "0x69917a865e56d5db27be17017d91fa7123c4428e87587de50b4cc6523d62323b",
            "blockNumber": "16432787",
            "timestamp": "1728633862",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4000",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBchMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "321416185",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "928bde212dace37616d253490a759a88",
      "version": 7
    },
    "invoke.setPerpsBchOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBchOrderFees": {
            "hash": "0xbd89427977b9f98706365a5ee8d89aba97b3fe107de1cfb4de290b1225464e6c",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4000",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBchOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000375",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6561969667e6cd43b31096dd840afc29",
      "version": 7
    },
    "invoke.setPerpsBlurFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBlurFundingParameters": {
            "hash": "0x91b5280aee9c39991351f360d7b65d0f5e4a3cdbe9cc646a5b6e9fccabf02232",
            "blockNumber": "16432789",
            "timestamp": "1728633866",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4100",
                    "100000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBlurFundingParameters",
            "gasUsed": 45048,
            "gasCost": "320289573",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6580ed4760d3c6982e6946ad85390a22",
      "version": 7
    },
    "invoke.setPerpsBlurLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBlurLiquidationParameters": {
            "hash": "0x40b8cdab8976c75cdac42fa2a6ce6bf1036c4f6ae6bd444809341ae2af467885",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4100",
                    "1490000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBlurLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000373",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2d06406ee5ed7c24ac5c69dbbbeb116f",
      "version": 7
    },
    "invoke.setPerpsBlurLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBlurLockedOiRatio": {
            "hash": "0x84f07c9721264f86bbfdbc5e9598436ed6d742939f4e7847af6d4b3c3fee3161",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4100",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBlurLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000373",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3c875d75c92eca2f7cdc9cc331ead99b",
      "version": 7
    },
    "invoke.setPerpsBlurMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBlurMaxLiquidationParameters": {
            "hash": "0x575eb4e21f904edc150b88c9fab65de7f0fa51cb077c12da229a7baf6d4454bb",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBlurMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000372",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2ecc54c20069a3c1c2025271b1001231",
      "version": 7
    },
    "invoke.setPerpsBlurMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBlurMaxMarketSize": {
            "hash": "0xfad99a65623d1e9d90fa121fd5336480668411e6932378f3dcf1370e5dbb613d",
            "blockNumber": "16432791",
            "timestamp": "1728633870",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4100",
                    "3329150000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBlurMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "319315648",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "aaf677277384fe8708639a338fdb45aa",
      "version": 7
    },
    "invoke.setPerpsBlurMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBlurMaxMarketValue": {
            "hash": "0xdeecdef337388208eab8ab2fbb59e5341765e30d0e21f61db28d6c3a032412fb",
            "blockNumber": "16432793",
            "timestamp": "1728633874",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4100",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBlurMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "317565747",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ad6d84b8183c75d5e3bdee86c51c8e87",
      "version": 7
    },
    "invoke.setPerpsBlurOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBlurOrderFees": {
            "hash": "0x3bb6282be619dc9883cd70f813a45759d7655d0313ee916b4db77b40e439be2d",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4100",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBlurOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000370",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b0bffa932f2a526022f8fb1d6b37676d",
      "version": 7
    },
    "invoke.setPerpsCompFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCompFundingParameters": {
            "hash": "0x29b1fdada3e8ac21fdffa36b97c3eca7b9fd80fd2442e995b5642d63ac0b12d1",
            "blockNumber": "16432815",
            "timestamp": "1728633918",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4200",
                    "241876000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCompFundingParameters",
            "gasUsed": 45048,
            "gasCost": "319808023",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9f52cce8d129636a1bbc98851183401a",
      "version": 7
    },
    "invoke.setPerpsCompLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCompLiquidationParameters": {
            "hash": "0xe339fee1203ee91bf5ec4d39067bd8e352a08926c00f645adab13c37b640bdfb",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4200",
                    "1800000000000000000",
                    "410000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCompLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ab11b0b29377586b72cb6d2b0567b05c",
      "version": 7
    },
    "invoke.setPerpsCompLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCompLockedOiRatio": {
            "hash": "0x511537a9f6805803c217fce1bcbf334bb8467f6ba3879fd5129ad902c1fb8c22",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4200",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCompLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9301f80f8681fef20ea25ca97dd098a1",
      "version": 7
    },
    "invoke.setPerpsCompMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCompMaxLiquidationParameters": {
            "hash": "0x9a8317d99ad732f7e3481832a51cc464ea34538098cde110cb4b8412a03b5da5",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCompMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "574a58e90e763b70656dbc7752a48a80",
      "version": 7
    },
    "invoke.setPerpsCompMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCompMaxMarketSize": {
            "hash": "0x30720a8b426b5bf70679e116a1f6b5aa091d0c8ba9ee3dae1d8668e93a6a7e24",
            "blockNumber": "16432817",
            "timestamp": "1728633922",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4200",
                    "17000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCompMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318891015",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c28544a5caa0b1deaf8b878f8a8b4400",
      "version": 7
    },
    "invoke.setPerpsCompMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCompMaxMarketValue": {
            "hash": "0x251a8cd7b7dfb50b8ef0939dd80de5177c6e55cffc087144ab37530e037b253d",
            "blockNumber": "16432819",
            "timestamp": "1728633926",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4200",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCompMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "319361253",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c0b82d28b8b88f736ba0d8f7f600391b",
      "version": 7
    },
    "invoke.setPerpsCompOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCompOrderFees": {
            "hash": "0xcf892f8a587d4013c3c03d1faeb06fc0aaecfa675aa50ed8fb0055b963deb13f",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4200",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCompOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3e9a71f47bf9780d0eb9e69ce0b2294c",
      "version": 7
    },
    "invoke.setPerpsCrvFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCrvFundingParameters": {
            "hash": "0xed05877e069ba89b6c507e8e02fc44cfba25a1b2d0595c2a6f6e00f81d8c6dd1",
            "blockNumber": "16432821",
            "timestamp": "1728633930",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4300",
                    "240000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCrvFundingParameters",
            "gasUsed": 45048,
            "gasCost": "318764147",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "16f1225e37893fe2b6661d65b9085618",
      "version": 7
    },
    "invoke.setPerpsCrvLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCrvLiquidationParameters": {
            "hash": "0x3c64363bc35dea0999941c06590562e2dfa6ef32cb6fa68615018cfeb387a7cc",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4300",
                    "4560000000000000000",
                    "390000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCrvLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000358",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5442dfd81f0968c047bb331a6acdc38c",
      "version": 7
    },
    "invoke.setPerpsCrvLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCrvLockedOiRatio": {
            "hash": "0xa9fc7acec3370f271d7ad4798d9088c1e0af5fd4d047db921650e6be48e36c27",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCrvLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b395147ae878ea2508b856d51bc29928",
      "version": 7
    },
    "invoke.setPerpsCrvMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCrvMaxLiquidationParameters": {
            "hash": "0x86e07f90928f71d5afb1dd2bd876b85c81b432bb1b993734a0ccc77d3c8a3550",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCrvMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "81d480b77365e4a2cac27e2ad7f11b30",
      "version": 7
    },
    "invoke.setPerpsCrvMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCrvMaxMarketSize": {
            "hash": "0x105d75a221408f7e624330066b0ad21fe16c9413775d52b5bee74714893b4221",
            "blockNumber": "16432823",
            "timestamp": "1728633934",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4300",
                    "5814100000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCrvMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "319533837",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4baeb9b53784943ce703c27d4260e684",
      "version": 7
    },
    "invoke.setPerpsCrvMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCrvMaxMarketValue": {
            "hash": "0x1978223fdf5d0e6e23bf7e0996fc0f3777014105adc74db1bb1e52ed51ec3f4f",
            "blockNumber": "16432825",
            "timestamp": "1728633938",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4300",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCrvMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "318816552",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "81d1c0dc0b6a9686e251a0fb2c651051",
      "version": 7
    },
    "invoke.setPerpsCrvOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCrvOrderFees": {
            "hash": "0xa4eaa82c2bffc572c9ce8d3e804f93ff87c33b703f4e5b227278531770b510d4",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4300",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCrvOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000351",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a911a2b4084de5cb2e6bb7bfa8cc6130",
      "version": 7
    },
    "invoke.setPerpsDotFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDotFundingParameters": {
            "hash": "0x71c76efdedef9be249b0568feb7dc6ec92ae8bc66bcdf8c9f07e388dd0433b15",
            "blockNumber": "16432829",
            "timestamp": "1728633946",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4400",
                    "15000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDotFundingParameters",
            "gasUsed": 45048,
            "gasCost": "318598266",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ab2f19f9eba906bb5c55b4cdab1c55dc",
      "version": 7
    },
    "invoke.setPerpsDotLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDotLiquidationParameters": {
            "hash": "0x95c6d52007a895aa192527a939a622d9ea883644047624ea69ee29e7d7df214f",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4400",
                    "2090000000000000000",
                    "320000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDotLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000348",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a58f68c13318776df185bf7d3fe1ede8",
      "version": 7
    },
    "invoke.setPerpsDotLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDotLockedOiRatio": {
            "hash": "0xa1443ed5a18fdf52c83ad04f5e24b0e69476702d18768cfdef387879c1d59110",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDotLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000346",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ea23846e22ad98a4e7ce06f196590100",
      "version": 7
    },
    "invoke.setPerpsDotMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDotMaxLiquidationParameters": {
            "hash": "0x9c5e29a98cdb4f21e07a60308a242e0aebb8f1533e43cf52b58d84fe37da3d14",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDotMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000346",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7d6fe941aff6905543624a69d7e01581",
      "version": 7
    },
    "invoke.setPerpsDotMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDotMaxMarketSize": {
            "hash": "0xfcb4825a8c4b1a14cfac1e57882174ee5e1918d12c5ad17b405dff6ef95f8f53",
            "blockNumber": "16432831",
            "timestamp": "1728633950",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4400",
                    "724950000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDotMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318901328",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ebb772b6c9a1af920d74ceb27f78e2d5",
      "version": 7
    },
    "invoke.setPerpsDotMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDotMaxMarketValue": {
            "hash": "0x14521b1a6bd46b7cc472646a98d827ee377fe742bf5045f10acb2665539e02fc",
            "blockNumber": "16432833",
            "timestamp": "1728633954",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4400",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDotMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "319919583",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0d98c95fdfdfaf650779bf3fc174fe9a",
      "version": 7
    },
    "invoke.setPerpsDotOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDotOrderFees": {
            "hash": "0x9a846d34cd0ad39d4dfddc2a07f131524fc5dc73eae62f83500c8455c64cd5f2",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4400",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDotOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000343",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f67076706a2746f0705a256a27932667",
      "version": 7
    },
    "invoke.setPerpsDydxFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDydxFundingParameters": {
            "hash": "0x4ab5a201c82be9d4686fd83e42e5a78c2bc64cb4d567e873335e2f9e8ea1fa65",
            "blockNumber": "16432835",
            "timestamp": "1728633958",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4500",
                    "45000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDydxFundingParameters",
            "gasUsed": 45048,
            "gasCost": "320408100",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7fe11baabcd28fb3d29bb388d5e5c48e",
      "version": 7
    },
    "invoke.setPerpsDydxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDydxLiquidationParameters": {
            "hash": "0xcb3eace8837bbfbf1cbf442e48af138136ab99eb5dde5bc7dbe3f1478e9449e9",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4500",
                    "1450000000000000000",
                    "340000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDydxLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000341",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a3dcc92fbaf6cd2f758b1e85a8becc0d",
      "version": 7
    },
    "invoke.setPerpsDydxLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDydxLockedOiRatio": {
            "hash": "0xd18f89efebf1fbfe1c7e48c8b611044bdc667bdce1e5fba24786ab25030e29a0",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4500",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDydxLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000341",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f32b43ab2c50da6cdb4bab598071bc94",
      "version": 7
    },
    "invoke.setPerpsDydxMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDydxMaxLiquidationParameters": {
            "hash": "0x9552781328d0f26de88aab87324b1db98aa0db96874a1e25c0fc20ef2ede0a11",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4500",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDydxMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000341",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "92b414da99386df953daa78e138f629a",
      "version": 7
    },
    "invoke.setPerpsDydxMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDydxMaxMarketSize": {
            "hash": "0xf37c3cb47c3fb70f14979b88d2c77b70002300693c9b740487a845f48fe07723",
            "blockNumber": "16432837",
            "timestamp": "1728633962",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4500",
                    "1703200000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDydxMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "319544964",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d419ed299d91c0351ce864551e4f84ff",
      "version": 7
    },
    "invoke.setPerpsDydxMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDydxMaxMarketValue": {
            "hash": "0x5e253fc99303f49199bc695ee9fc372d44c60b3794d1cd2e14700b6769d869b9",
            "blockNumber": "16432839",
            "timestamp": "1728633966",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4500",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDydxMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "320082525",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1c5081977d7e2863410c810eb19e0d4f",
      "version": 7
    },
    "invoke.setPerpsDydxOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDydxOrderFees": {
            "hash": "0xec9c8586d1bc7d2b430f11357e674a8284dde052e0ff6f0a953d59e6ce0767df",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4500",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDydxOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000338",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6c0bd5cf6a0c7250f15fc25ed19844d3",
      "version": 7
    },
    "invoke.setPerpsEosFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEosFundingParameters": {
            "hash": "0xf82480a04c9d8865b6ee3313f51d3465f54ae03abac1bee6fea502c6ec57341e",
            "blockNumber": "16432844",
            "timestamp": "1728633976",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4600",
                    "72000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEosFundingParameters",
            "gasUsed": 45048,
            "gasCost": "318986940",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e9dd770fc3349eae59ee3afce8fb056f",
      "version": 7
    },
    "invoke.setPerpsEosLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEosLiquidationParameters": {
            "hash": "0x59989209c3df953bd1ea28f8568669555ffbec4b2619ed8635541e353b1d33d6",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4600",
                    "2470000000000000000",
                    "330000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEosLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000338",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8afb04eb45230f70252b03cd8cde350a",
      "version": 7
    },
    "invoke.setPerpsEosLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEosLockedOiRatio": {
            "hash": "0x68bc14fcaab536c89a8acf392bb799dea4acdcfb2cecd0e7364a1e061048ad1f",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4600",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEosLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000337",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f3f40f37d61e2a159b361da64fc3e7d8",
      "version": 7
    },
    "invoke.setPerpsEosMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEosMaxLiquidationParameters": {
            "hash": "0x2fd2c606ee716dddc7ebeb11362038b92ff713e4039384f44be5ac4bf863006b",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4600",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEosMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000335",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ffe06a5a4509aa8f5719728404a0ccdd",
      "version": 7
    },
    "invoke.setPerpsEosMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEosMaxMarketSize": {
            "hash": "0xd898bf8907bfc5c95df394955fc5c4fa6f223d32969086bee39e6ae62536c602",
            "blockNumber": "16432847",
            "timestamp": "1728633982",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4600",
                    "3182150000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEosMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "318266350",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7fe56cb1f9306586d523cb9b143bee25",
      "version": 7
    },
    "invoke.setPerpsEosOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEosOrderFees": {
            "hash": "0x00309a220dae5f87f1a8d41cb5d7c5109697ecc94ff27ffcd10f4bc96bddb0e5",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4600",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEosOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000333",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b9fe8f5d143532ec80f651a0dee562a9",
      "version": 7
    },
    "invoke.setPerpsEtcFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEtcFundingParameters": {
            "hash": "0xa0954d93c8b2c9aaf8acf9d9c7538044dab85f12ab867509d2900f21f482ec5e",
            "blockNumber": "16432851",
            "timestamp": "1728633990",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4700",
                    "3375000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEtcFundingParameters",
            "gasUsed": 45060,
            "gasCost": "318224871",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a773868b7f2b90a928cd1db66fbe61fd",
      "version": 7
    },
    "invoke.setPerpsEtcLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEtcLiquidationParameters": {
            "hash": "0x83c1ae3bc7722ffc90a1314f56cc540eb8dab33106dcbc5e860a3b3e56a9ad09",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4700",
                    "2710000000000000000",
                    "330000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEtcLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8d0be1bf70c34211c7ba454cd0fd94a7",
      "version": 7
    },
    "invoke.setPerpsEtcLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEtcLockedOiRatio": {
            "hash": "0x1f6f5506d7ae413b1adcde02b6b072eaab424c2cc80f6ee7950ae4c2805148b2",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4700",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEtcLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000330",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0c656f035433b04f968e78e2a5fdf8f2",
      "version": 7
    },
    "invoke.setPerpsEtcMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEtcMaxLiquidationParameters": {
            "hash": "0x127588ac253eaab7ffa41b0a7fbfe558f5538ae6c23e7fa16da3ff7b34ddfeef",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4700",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEtcMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000330",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "617327b760645bd47013611a8f92d5ec",
      "version": 7
    },
    "invoke.setPerpsEtcMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEtcMaxMarketSize": {
            "hash": "0x8613347a94469a5a63cad8e2b07b377f8513d5837e061c1cb1b4bce41c61d85e",
            "blockNumber": "16432853",
            "timestamp": "1728633994",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4700",
                    "80750000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEtcMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "317315049",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "292acaf73a8f97e7213425efc9913cb5",
      "version": 7
    },
    "invoke.setPerpsEtcMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEtcMaxMarketValue": {
            "hash": "0x978cacddedd44a7e066b681b00572583d3a8000ff5d2e14afc70d22fc9265325",
            "blockNumber": "16432855",
            "timestamp": "1728633998",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4700",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEtcMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "317714153",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4e2d8e1bbc423e75089ef6259f7150e9",
      "version": 7
    },
    "invoke.setPerpsEtcOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEtcOrderFees": {
            "hash": "0x1792321d1290b618114018288d596bf3ef35ef7eed61914b779ca9ddbfef09d3",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4700",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEtcOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000328",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c6aab4e7acef9178160b047757590ed5",
      "version": 7
    },
    "invoke.setPerpsEthbtcFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthbtcFundingParameters": {
            "hash": "0x901cc92597bd8ec8f9239243f5ceffb308f08e7c97c051376fd3ed0b63148a46",
            "blockNumber": "16432863",
            "timestamp": "1728634014",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4800",
                    "3400000000000000000000000000",
                    "4000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthbtcFundingParameters",
            "gasUsed": 45060,
            "gasCost": "318219678",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c28eee902ff1720a370f85405adf644b",
      "version": 7
    },
    "invoke.setPerpsEthbtcLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthbtcLiquidationParameters": {
            "hash": "0x133e5da33fe9b52a916b28430f0b4102194f37610009f3b6dadb18f1920d6a65",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4800",
                    "1390000000000000000",
                    "260000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthbtcLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000327",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f9783c303e33724322e3cef2ad3ae4c1",
      "version": 7
    },
    "invoke.setPerpsEthbtcLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthbtcLockedOiRatio": {
            "hash": "0x7257b72ad8535ea3c57f661643b5e330f41e5b4550a55f6449540e8fad0e22cc",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4800",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthbtcLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "714b30702e810aa14677ada3593e895a",
      "version": 7
    },
    "invoke.setPerpsEthbtcMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthbtcMaxLiquidationParameters": {
            "hash": "0x5f86804a15c72e8fd7286916b5ce76a55605c92dcf66007a7cfdabed49326151",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4800",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthbtcMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000324",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "05adf51e236cf413b6fbdb29784c99c1",
      "version": 7
    },
    "invoke.setPerpsEthbtcMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthbtcMaxMarketSize": {
            "hash": "0x8701754d1bf58d746860fe1ee076bc6f441a88a3256e2ddd748ace9961ea58d0",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4800",
                    "72226506000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthbtcMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "1000535",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6d9b5c799ee5b0fbe0655720120d83d7",
      "version": 7
    },
    "invoke.setPerpsEthbtcMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthbtcMaxMarketValue": {
            "hash": "0x19b5b158b1172cb923e44ef20da43825db4f078b559a13a060b736554b6db434",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4800",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthbtcMaxMarketValue",
            "gasUsed": 39536,
            "gasCost": "1000536",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "75319097783d07bb11778ba99a9d00b4",
      "version": 7
    },
    "invoke.setPerpsEthbtcOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthbtcOrderFees": {
            "hash": "0xb698487d6ee584aa748a5e48f69e0b5c1865d8cc9796b01a7a6a4fcfc8c1a948",
            "blockNumber": "15788520",
            "timestamp": "1727345328",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4800",
                    "1000000000000",
                    "500000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthbtcOrderFees",
            "gasUsed": 42214,
            "gasCost": "1000257",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5457c0b40d0d296f737d219f7d451dab",
      "version": 7
    },
    "invoke.setPerpsFilFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFilFundingParameters": {
            "hash": "0xa1338006620149ed55f51ee0bfb51fb5bca592f771fd2b85408c8fc3e08e1f94",
            "blockNumber": "16432867",
            "timestamp": "1728634022",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "4900",
                    "12750000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFilFundingParameters",
            "gasUsed": 45060,
            "gasCost": "318249160",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "05da1c1505dd14ba3174a97814e5d7c4",
      "version": 7
    },
    "invoke.setPerpsFilLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFilLiquidationParameters": {
            "hash": "0xe33ca0eb931e4a016db516e3098a2b2687d82a460607165f798535da46a033e8",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "4900",
                    "1810000000000000000",
                    "260000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFilLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "430990a81b58df38f6c63d3612b85e59",
      "version": 7
    },
    "invoke.setPerpsFilLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFilLockedOiRatio": {
            "hash": "0xe960cc209f8b791065b547b797765b72d087360b2e1a511fdcef0d6f9820b02a",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "4900",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFilLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a437039f618f05cb1ec17e462cb8b6be",
      "version": 7
    },
    "invoke.setPerpsFilMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFilMaxLiquidationParameters": {
            "hash": "0x09761258793d3b1f1e1d152f983ec65026f718dd5672d99881bffacf63d7912f",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "4900",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFilMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000326",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fa5b6e3ddb6328fbd63102beba7e6127",
      "version": 7
    },
    "invoke.setPerpsFilMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFilMaxMarketSize": {
            "hash": "0x8058d0b9be8cd8cd4607eccf8843c86031a167755dab8d097c1245c70cccfe16",
            "blockNumber": "16432869",
            "timestamp": "1728634026",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "4900",
                    "812100000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFilMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "319367269",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "98bb2200cc1f2bb0c7a8a0d7f87261c1",
      "version": 7
    },
    "invoke.setPerpsFilMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFilMaxMarketValue": {
            "hash": "0x0f6c79f8bd0c1b75f8efa315d1bc22eacb5a327de27a0414ffa441425306262e",
            "blockNumber": "16432871",
            "timestamp": "1728634030",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4900",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFilMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "320307716",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a8d9f64005bae925e7c965c5bac06c98",
      "version": 7
    },
    "invoke.setPerpsFilOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFilOrderFees": {
            "hash": "0x37bea5ef31db8e89f8de50442675beead127d2e630722b7e784dae7bf18f7fa4",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "4900",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFilOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000324",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "00cd1e317f61cb9b7d850c58dc34a917",
      "version": 7
    },
    "invoke.setPerpsFlowFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFlowFundingParameters": {
            "hash": "0xd040f88aa8a4a8b13d8eeb1db2058a4007073d9530ca1969ed8a9b9478cf106c",
            "blockNumber": "16432873",
            "timestamp": "1728634034",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5000",
                    "15000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFlowFundingParameters",
            "gasUsed": 42248,
            "gasCost": "319167309",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5a6fb997c0fb2bd4151353095de9ff0d",
      "version": 7
    },
    "invoke.setPerpsFlowLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFlowLiquidationParameters": {
            "hash": "0x1a75930a26f14989131be46fb877a2ad7affcd066edfa91f4ccff42876f46618",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5000",
                    "9280000000000000000",
                    "280000000000000000",
                    "100000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFlowLiquidationParameters",
            "gasUsed": 147145,
            "gasCost": "1000323",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f5e22034b209ec62e11b99b0a0d34285",
      "version": 7
    },
    "invoke.setPerpsFlowLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFlowLockedOiRatio": {
            "hash": "0xd6e8d3a194d82ca39b31e0b008cebcaf73a528a616afec268fb40ee7ffca6524",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFlowLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000323",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7c93c7566712bee2373b29413ec6645a",
      "version": 7
    },
    "invoke.setPerpsFlowMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFlowMaxLiquidationParameters": {
            "hash": "0x98f35affbaed1e03e78dde4f900c5146d1cf478f257e95d1be2205baa701b73d",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5000",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFlowMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000323",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "567a86a1c6794a4a01439dc24c1417fb",
      "version": 7
    },
    "invoke.setPerpsFlowMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFlowMaxMarketSize": {
            "hash": "0xf64737f4d75c3bf77f195fa6c1fa942e3c633b71bef6ff1a805006757b065495",
            "blockNumber": "16432875",
            "timestamp": "1728634038",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5000",
                    "1380350000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFlowMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "318602744",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dc7d9d5c13b94fd1973f09409ea053ec",
      "version": 7
    },
    "invoke.setPerpsFlowMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFlowMaxMarketValue": {
            "hash": "0x0f4a6791999c8bf18ce3f77f0d7d2350d5271cac1c718fc78cd2dbdd7c931506",
            "blockNumber": "16432877",
            "timestamp": "1728634042",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5000",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFlowMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "318982922",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2d183b5362427333792f1d4f07d78e5b",
      "version": 7
    },
    "invoke.setPerpsFlowOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFlowOrderFees": {
            "hash": "0xb156f9ee4fd596deeb15f5739bcda4cf13234f9dd1e6d85ef035342c933e3407",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5000",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFlowOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000321",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "114afd6107447cb655b7d708898b01f2",
      "version": 7
    },
    "invoke.setPerpsFxsFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFxsFundingParameters": {
            "hash": "0xd1662830ba2a92cd73f4d5b2fffb463bd9f0268ac9e103d5792c66adf3df22df",
            "blockNumber": "16432885",
            "timestamp": "1728634058",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5100",
                    "2104687000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFxsFundingParameters",
            "gasUsed": 45060,
            "gasCost": "315466621",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "af5c00dfe528537a5283a845eb544545",
      "version": 7
    },
    "invoke.setPerpsFxsLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFxsLiquidationParameters": {
            "hash": "0x739dbdfe76d0f4a4261638c28f09da6da649d1d92df45b1fc5c9d2868e5f34cb",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5100",
                    "2590000000000000000",
                    "340000000000000000",
                    "66660000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFxsLiquidationParameters",
            "gasUsed": 147145,
            "gasCost": "1000321",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d10455ae0fa124d9c034b74a5ea6cc3f",
      "version": 7
    },
    "invoke.setPerpsFxsLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFxsLockedOiRatio": {
            "hash": "0x02bc46879e6afb155538f07a747da28f13944627b787939cae23c1b867ba90c2",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5100",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFxsLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000321",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cf62e5fcba37cf2a7fc1ba66346a3a82",
      "version": 7
    },
    "invoke.setPerpsFxsMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFxsMaxLiquidationParameters": {
            "hash": "0xf96b58fbc9e3ce8bc1e10ffd97487029505011154f68b53902f440760844dad2",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFxsMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000321",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "423d51511a5f7f03a5fd6044a488ca71",
      "version": 7
    },
    "invoke.setPerpsFxsMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFxsMaxMarketSize": {
            "hash": "0xcfe9bd22164be768d780cb6fde8fada3ef750c6bf71b32cdde49279f327e356b",
            "blockNumber": "16432887",
            "timestamp": "1728634062",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5100",
                    "371700000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFxsMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "314875942",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e40f7c24ca32ecac9dce80024f0d789c",
      "version": 7
    },
    "invoke.setPerpsFxsMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFxsMaxMarketValue": {
            "hash": "0x85c830c84c0350fd6a0477aeed8a969b7d0604f98f3f68c4c1f224726b84eb71",
            "blockNumber": "16432889",
            "timestamp": "1728634066",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5100",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFxsMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "315569297",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "eb1fa68ee10988d1ec1118ca16687d5f",
      "version": 7
    },
    "invoke.setPerpsFxsOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFxsOrderFees": {
            "hash": "0x36462f817f65629f98a8300960d7c4a05857cb15640462db96fe07e221872663",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5100",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFxsOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000317",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8c3bd3b0ea24834b2a8746d2b0ffd994",
      "version": 7
    },
    "invoke.setPerpsGrtFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGrtFundingParameters": {
            "hash": "0xd22903b0537f2580684b28b14c8f5de2b60187cbbd9b37516a2ea9377278dc31",
            "blockNumber": "16432900",
            "timestamp": "1728634088",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5200",
                    "112500000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGrtFundingParameters",
            "gasUsed": 45060,
            "gasCost": "318895890",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "98b83bdf1c17214288a11d523a7976ff",
      "version": 7
    },
    "invoke.setPerpsGrtLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGrtLiquidationParameters": {
            "hash": "0x390b1093cbdeaf315a3757d0d9db354bf5cd00b1ea5dd1e672bb73489bd291ff",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5200",
                    "4220000000000000000",
                    "390000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGrtLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000316",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "976a05ab00049b174e778d8d560b2562",
      "version": 7
    },
    "invoke.setPerpsGrtLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGrtLockedOiRatio": {
            "hash": "0x5a406f5ce7aa89da4d9c1e3a48a543026b31af83ae7b01f986d76bbb529e5728",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5200",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGrtLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000316",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f8073f832e9f80405390211c4f05ca38",
      "version": 7
    },
    "invoke.setPerpsGrtMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGrtMaxLiquidationParameters": {
            "hash": "0x3cccd1ccec07dd5ac19ece7e65495f4902249077b23f0fa25d7ec6424102eec5",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGrtMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000316",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7bd6c34dcb6ffcd11ad5ee841ba823ea",
      "version": 7
    },
    "invoke.setPerpsGrtMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGrtMaxMarketSize": {
            "hash": "0x924f2676ce80bdcf15c522759018046d6f50c903735b0a789302981217c44219",
            "blockNumber": "16432903",
            "timestamp": "1728634094",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5200",
                    "4516800000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGrtMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "319870368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "43040d126ab91e0b553c29b9f0480c5b",
      "version": 7
    },
    "invoke.setPerpsGrtMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGrtMaxMarketValue": {
            "hash": "0x628f7200e3a71c60bba8bcb43b47b4834ea00c8870a250eb58a536df99dcca0c",
            "blockNumber": "16432906",
            "timestamp": "1728634100",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5200",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGrtMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "320424780",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2e7846e711e8f2ccf7d766e4a6bf8973",
      "version": 7
    },
    "invoke.setPerpsGrtOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGrtOrderFees": {
            "hash": "0xb19bb7bb4588153f44f2349de57387378c08f88c758a6a1c719fa9d73dbc3979",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5200",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGrtOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000315",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "547e922509332b07ee0efa9ec95fc709",
      "version": 7
    },
    "invoke.setPerpsIcpFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIcpFundingParameters": {
            "hash": "0x13ea8dac1f15fe620baff7b5085f27615e18acac668295bdc621f70d8df26615",
            "blockNumber": "16432908",
            "timestamp": "1728634104",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5300",
                    "3000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIcpFundingParameters",
            "gasUsed": 45048,
            "gasCost": "320592540",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "66986b9d4606ae585dc93b5928189d06",
      "version": 7
    },
    "invoke.setPerpsIcpLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIcpLiquidationParameters": {
            "hash": "0x93279631400068683767ed35ee96841bf4baae72fdcbf5819b0fef75cb409b9e",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5300",
                    "1860000000000000000",
                    "440000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIcpLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000314",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ed8163d534e1b23815e59547c243b186",
      "version": 7
    },
    "invoke.setPerpsIcpLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIcpLockedOiRatio": {
            "hash": "0x94ac30b53deeb1b619d8b1957eee90ced395559608977f27df1549695a8a596e",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIcpLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000314",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0ce2920c88bea59bd27cc0284ee87315",
      "version": 7
    },
    "invoke.setPerpsIcpMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIcpMaxLiquidationParameters": {
            "hash": "0xac487342269ad7862fa5f271854763ff2a2a9774f06e4944c0cc2955af4243aa",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIcpMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000313",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "126b880efdfd628f303ccd0edfe5b78a",
      "version": 7
    },
    "invoke.setPerpsIcpMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIcpMaxMarketSize": {
            "hash": "0xeb1c3418265d68261c1f73ab5a2117b6d6e27ed4e3724d7a33e66a39b96aef75",
            "blockNumber": "16432910",
            "timestamp": "1728634108",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5300",
                    "91100000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIcpMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "319459888",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f6ebda1a03ceace954a382b03b66569c",
      "version": 7
    },
    "invoke.setPerpsIcpMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIcpMaxMarketValue": {
            "hash": "0xd49e9acae210b94735fa4cad9a910057507ed7db4f1c4ccfc0f220e1d28069b5",
            "blockNumber": "16432912",
            "timestamp": "1728634112",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5300",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIcpMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "319118895",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5b1cc3e366a648146a6fa6a81e445502",
      "version": 7
    },
    "invoke.setPerpsIcpOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIcpOrderFees": {
            "hash": "0xc26941816e2356ee05d5d5b2fcb558df193d8ec74556a21dfe2c999d3d8d7473",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5300",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIcpOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7dc53315a2da7318a69675253777dde4",
      "version": 7
    },
    "invoke.setPerpsImxFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsImxFundingParameters": {
            "hash": "0x899a01544bf82cd87ed41a18fbd3d65966f13372395952f12c2c1601e3945f59",
            "blockNumber": "16432914",
            "timestamp": "1728634116",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5400",
                    "8400000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsImxFundingParameters",
            "gasUsed": 45048,
            "gasCost": "318311503",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a7bba19e5dadb7a8af61f96cce0d1002",
      "version": 7
    },
    "invoke.setPerpsImxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsImxLiquidationParameters": {
            "hash": "0xdbbac3c835e70ee4ecf252bb2ea1b9b837788e4bb587a546725857ab04fde78b",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5400",
                    "1950000000000000000",
                    "400000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsImxLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "089d5e587a0ba29a17d9d04e3ec3f26b",
      "version": 7
    },
    "invoke.setPerpsImxLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsImxLockedOiRatio": {
            "hash": "0x76c50d97c334e972753d8d481d75cd3dbf711bc2a28adef71f0298d7e654b0b3",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsImxLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "839cbcf9396c0a1873989b9662f6b8a0",
      "version": 7
    },
    "invoke.setPerpsImxMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsImxMaxLiquidationParameters": {
            "hash": "0x19665fabf90c1bb20a8810b24553b3acd6bcd9e7c51a916ab7528acddb34d0fa",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsImxMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000310",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "87589f8efff22661e8b11dbc50ce58d1",
      "version": 7
    },
    "invoke.setPerpsImxMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsImxMaxMarketSize": {
            "hash": "0x7b9b0f9f19664963fbe7519e48863e3051478cada80e46d4b14357b8032dffe9",
            "blockNumber": "16432916",
            "timestamp": "1728634120",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5400",
                    "508750000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsImxMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "316788201",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "866d4d81bb02140a7b594205f39ae35e",
      "version": 7
    },
    "invoke.setPerpsImxMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsImxMaxMarketValue": {
            "hash": "0x0318a629ac73fb1832118d4840bf1e38725a935810ed46559a9cb2ca3f7860e4",
            "blockNumber": "16432918",
            "timestamp": "1728634124",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5400",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsImxMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "316268335",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7c86c4c8e131022ac4cb9dce839b5d7f",
      "version": 7
    },
    "invoke.setPerpsImxOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsImxOrderFees": {
            "hash": "0x2d1160a1fa7ca0e9ef338b08b891962c67357e2c82105912d20a3a8741709795",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5400",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsImxOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000309",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "24c6ecb6d08d66521e8d5d1912dcc663",
      "version": 7
    },
    "invoke.setPerpsJtoFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJtoFundingParameters": {
            "hash": "0x526a1be1f4954ed15e23ba13ff6edabab4f7fba31de3ddb928d9ad6bb2758d45",
            "blockNumber": "16432926",
            "timestamp": "1728634140",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5500",
                    "8000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJtoFundingParameters",
            "gasUsed": 45048,
            "gasCost": "317712317",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fd6555ee183a8beeb2813d44940e854c",
      "version": 7
    },
    "invoke.setPerpsJtoLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJtoLiquidationParameters": {
            "hash": "0xae6b86ceb7e29f2fa3285275f6e2ce59eec35a69b69b571d2f9190d8a7a88952",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5500",
                    "1490000000000000000",
                    "380000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJtoLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000308",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3cb4452acafbe3ff6b5b487c0abe44bb",
      "version": 7
    },
    "invoke.setPerpsJtoLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJtoLockedOiRatio": {
            "hash": "0xfc50f0c6c9e8563e91ff7faf3890f6555fa31a62975b82f1495bc78dc18a6a29",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5500",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJtoLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000307",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "32d78bf989900a93a4e69eb2551a0fa9",
      "version": 7
    },
    "invoke.setPerpsJtoMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJtoMaxLiquidationParameters": {
            "hash": "0xca430ebc320244bab043f0efa64989332513d5e0425a69e754ccba596726fab3",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5500",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJtoMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000307",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c87d0e6308453d70bfec7a2cb35b2b84",
      "version": 7
    },
    "invoke.setPerpsJtoMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJtoMaxMarketSize": {
            "hash": "0x95450ece7f7c1058faa273b8d1f692fff4e38fff7006ebd6069a1d48b85d084e",
            "blockNumber": "16432929",
            "timestamp": "1728634146",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5500",
                    "369800000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJtoMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318681577",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8cd32ede8f178df8c496f646a0a310de",
      "version": 7
    },
    "invoke.setPerpsJtoMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJtoMaxMarketValue": {
            "hash": "0x65f4f037d65753e6a580fd2ba535fdaf9efa9eb86902b4a051ef4f52239e6fd1",
            "blockNumber": "16432931",
            "timestamp": "1728634150",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5500",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJtoMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "320815084",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7e1a5340b1c5d2b386d8741deb32abd4",
      "version": 7
    },
    "invoke.setPerpsJtoOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJtoOrderFees": {
            "hash": "0xcaef1a0025e7efcaae2709ff52451c65961f9deedaca68d69aa028b0847a7e43",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5500",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJtoOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000306",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "68d612a29ab84d81b7b831021b5cce5a",
      "version": 7
    },
    "invoke.setPerpsJupFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJupFundingParameters": {
            "hash": "0xaae67098f49771091357acbef446110da6fe81d102719137e73388b36c5eb7b9",
            "blockNumber": "16432933",
            "timestamp": "1728634154",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5600",
                    "33750000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJupFundingParameters",
            "gasUsed": 45060,
            "gasCost": "319708514",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "268954f2ff0254d7662f7a2b4920adc4",
      "version": 7
    },
    "invoke.setPerpsJupLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJupLiquidationParameters": {
            "hash": "0xd7439f6ca4af09ec2950793283d3fdcb0257eea3143dc3eb923319323a8610d9",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5600",
                    "3350000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJupLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000306",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "22bf7c91c910d0a035989031a49afc90",
      "version": 7
    },
    "invoke.setPerpsJupLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJupLockedOiRatio": {
            "hash": "0xd7126242c024c4fdd1f8b2deeb3cc3a865ec83b4d735be8d1c8cc89b1c3bded4",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5600",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJupLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1048504489c89457641cf7528b1fd1ff",
      "version": 7
    },
    "invoke.setPerpsJupMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJupMaxLiquidationParameters": {
            "hash": "0xd1aa0cbbb88b0b40d9b461bd3bff992487dd3208709228f0d8248a8a3106b016",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5600",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJupMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "50e306bee3996d07d246c47a36178f54",
      "version": 7
    },
    "invoke.setPerpsJupMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJupMaxMarketSize": {
            "hash": "0x86bcfb4bc26da93ad86ef7727703f623a57ffb45b13b50cc6738370871b00432",
            "blockNumber": "16432935",
            "timestamp": "1728634158",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5600",
                    "967850000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJupMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "319812127",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cbb409a022cbe52e53e64540630be9f0",
      "version": 7
    },
    "invoke.setPerpsJupMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJupMaxMarketValue": {
            "hash": "0x5a16f282489b3cf831e91d137b3c97e8e3d360481f743a974229d03e0ca1d71a",
            "blockNumber": "16432937",
            "timestamp": "1728634162",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5600",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJupMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "320027857",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "aa8190b838ee7b184f4312b05ccc25b4",
      "version": 7
    },
    "invoke.setPerpsJupOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJupOrderFees": {
            "hash": "0x6c68a0072faa52b832670b6da8730c9eba2ffa409a60370ae54ff495e4299038",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5600",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJupOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "95522e27fee93f4c3be2c4226a4a1129",
      "version": 7
    },
    "invoke.setPerpsLtcFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLtcFundingParameters": {
            "hash": "0x06fe69c64ca05b3b8e6dc96d5ea8dff4955c0b478c8f35820ab2995ac8822acb",
            "blockNumber": "16432954",
            "timestamp": "1728634196",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5800",
                    "1687500000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLtcFundingParameters",
            "gasUsed": 42260,
            "gasCost": "317783206",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7207e1b6b341204ac692fa780bbca0d9",
      "version": 7
    },
    "invoke.setPerpsLtcLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLtcLiquidationParameters": {
            "hash": "0x8a05f8ae28aa49d2d6815836fb375b91c92bec53704f7fd831c019cafcbc08ee",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5800",
                    "5000000000000000",
                    "400000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLtcLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "66436e9f452728e6b7963ab5b79a793c",
      "version": 7
    },
    "invoke.setPerpsLtcLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLtcLockedOiRatio": {
            "hash": "0x8be7157539133d789f4b4baf86f7107cb2f72e0e0b62ce16d92f2eaad6f2ec07",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5800",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLtcLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "52a8c2df63820477ae8e42e60ef2bd10",
      "version": 7
    },
    "invoke.setPerpsLtcMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLtcMaxLiquidationParameters": {
            "hash": "0x68d61a0ae7ff068f9cfd5cda00cd0c924519d73929db135e906962cc6fd57f6c",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5800",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLtcMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ea2dec37b77ea710b087ca41ed97f9e9",
      "version": 7
    },
    "invoke.setPerpsLtcMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLtcMaxMarketSize": {
            "hash": "0x05059b93557cced2b868f8c865be3bbac67e55d78b17c362927b1d4f0c301f3c",
            "blockNumber": "16432956",
            "timestamp": "1728634200",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5800",
                    "45400000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLtcMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318164388",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "acfe69748feb051e6d0496d1357f8e65",
      "version": 7
    },
    "invoke.setPerpsLtcMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLtcMaxMarketValue": {
            "hash": "0x51c316779a6a974e9173d34b674c1918449ef656d9eb061c840548635cb6bed9",
            "blockNumber": "16432958",
            "timestamp": "1728634204",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5800",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLtcMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "318383741",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "173fdf1e5596a5d940d4be9e9a584cbe",
      "version": 7
    },
    "invoke.setPerpsLtcOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLtcOrderFees": {
            "hash": "0x0b01b3f2fd25fd74a468c0310729e9dfe57ec4097c10a1ff5f9298f5ffd0ea47",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5800",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLtcOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "23548f715eeded4c6f85a5c29fdbc1d2",
      "version": 7
    },
    "invoke.setPerpsNearFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNearFundingParameters": {
            "hash": "0x67c19fc348121d0403199d12e0bed66f018e7d9cc3388d86e9211596f552dbc9",
            "blockNumber": "16432969",
            "timestamp": "1728634226",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6100",
                    "11718750000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNearFundingParameters",
            "gasUsed": 45060,
            "gasCost": "319640654",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ec8c068236a59ccb4e0941f017b574ec",
      "version": 7
    },
    "invoke.setPerpsNearLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNearLiquidationParameters": {
            "hash": "0x531090ea611a6ab06db5fc86e8e7c07ee31bd6b04017a745bcee72e722c49cd8",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6100",
                    "3350000000000000000",
                    "360000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNearLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1adc7b77bb7ffe5120991d786e561ae6",
      "version": 7
    },
    "invoke.setPerpsNearLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNearLockedOiRatio": {
            "hash": "0x21ac1fbdac421a11f82d286e4ca536c3ac2a5b50c107f0f7f21e36e83e8d653c",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6100",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNearLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4b9224ffb6a1a3e60f2b23f20120f552",
      "version": 7
    },
    "invoke.setPerpsNearMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNearMaxLiquidationParameters": {
            "hash": "0x80d87306437d2d47a4aa339510cb66abd39810700c3d4694adaaa9f6c4b86fe5",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNearMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bf2cc5a135152c73eb14b91c26be50ea",
      "version": 7
    },
    "invoke.setPerpsNearMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNearMaxMarketSize": {
            "hash": "0x506278f78eade0bce91868e82db1cc8dc175d001f768c5a3487a9a9c6a0a77f3",
            "blockNumber": "16432971",
            "timestamp": "1728634230",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6100",
                    "596400000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNearMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318860240",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "44d9792ede6f026989bf8b4c50115b51",
      "version": 7
    },
    "invoke.setPerpsNearMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNearMaxMarketValue": {
            "hash": "0xebaaf9a4607fb57ef1761bd4bd8cde68bfbb960c74eabff37a7e5e28f9fc45ab",
            "blockNumber": "16432973",
            "timestamp": "1728634234",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6100",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNearMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "317492973",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c213a2bdf4da605542e9a7340b903636",
      "version": 7
    },
    "invoke.setPerpsNearOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNearOrderFees": {
            "hash": "0x62872aa51079121a8ad1443f20ed0be820d8e14af4793b180644aafea60a927f",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6100",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNearOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000303",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7b1a30cd27475ad96d758407652c7514",
      "version": 7
    },
    "invoke.setPerpsPriceAave": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceAave": {
            "hash": "0xa78ddca3f8a1e1d23748678de9e6850a37443bb096fc9262c85c9581a5b03f7f",
            "blockNumber": "17174554",
            "timestamp": "1730117396",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3300",
                    "0x4c443d37d5f369861dc29280fc6c68c1f79e3c597f682eeb1c8580679932029d",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceAave",
            "gasUsed": 39771,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ea501ce8769ebc6b9f3a6fb9c1ecb696",
      "version": 7
    },
    "invoke.setPerpsPriceAda": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceAda": {
            "hash": "0xd08a5169251c6388b12343e8d3a74dd36fed5c17083a583a498ffc73265c46f1",
            "blockNumber": "17174557",
            "timestamp": "1730117402",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3400",
                    "0x017d02774d24bd3dea6bcd3e8fff53cf52ae37cf3c31a2bb387a5d2e4c81bcb8",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceAda",
            "gasUsed": 39771,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "945ddaeefd63908458391628483904b5",
      "version": 7
    },
    "invoke.setPerpsPriceAlgo": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceAlgo": {
            "hash": "0xe5ee2554bdefd8a7d8a35379a0232da030a239400e490eb44ed1e94f6f21aeb6",
            "blockNumber": "17174559",
            "timestamp": "1730117406",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3500",
                    "0xa10195b650b54f488406a9fe4d521c4b794c2103f52312f9a73a2505896968e0",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceAlgo",
            "gasUsed": 39771,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "31bb6f3f0abed3644e16e3dfc60316a8",
      "version": 7
    },
    "invoke.setPerpsPriceApt": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceApt": {
            "hash": "0x21df6aa74b46f418482e84409860d41d670d9a8172005dccde34261c4d953e42",
            "blockNumber": "17174561",
            "timestamp": "1730117410",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3600",
                    "0x75a04aca68bdb7776a596132e302ecde961ad4087ea9e0ae114547a2abc73a96",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceApt",
            "gasUsed": 39771,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "44969881719e3e1778262b562acd9c44",
      "version": 7
    },
    "invoke.setPerpsPriceAtom": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceAtom": {
            "hash": "0xd457cff720b14acaeb5b402e61d84fdbe1b564973e3a1381d82ff78dbf630d5e",
            "blockNumber": "17174567",
            "timestamp": "1730117422",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3700",
                    "0x5935824af7bf7d73cf04489d38b24426afd80d57ea5d47049d9295dc9870fd43",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceAtom",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b3377a782891558a084098f3e5d82993",
      "version": 7
    },
    "invoke.setPerpsPriceAxs": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceAxs": {
            "hash": "0xc0929bac80e4b8a1a79e6a35db5bc2e56b8a1dc2073e9b33e5172f74099c3760",
            "blockNumber": "17174573",
            "timestamp": "1730117434",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3800",
                    "0x33ec6ffbcd3d67bc9e6adf23e4c821ccf625ffbe5a15a9174bf18d2f0b06268c",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceAxs",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "688658f5f186b4491bb13d20f64ce565",
      "version": 7
    },
    "invoke.setPerpsPriceBal": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceBal": {
            "hash": "0x3db82e47b8a8b41a582a3d326aac6277303baba2e11f5a239368bf71a7e05b74",
            "blockNumber": "17174575",
            "timestamp": "1730117438",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "3900",
                    "0xa7d0f072dcb76901053e8f835137da5a415bd393279e971d31015c55f34dcff0",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceBal",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7404ec11316e52d24c0cbfd9849083e3",
      "version": 7
    },
    "invoke.setPerpsPriceBch": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceBch": {
            "hash": "0x8640adf27c3ca14d7f2ef78effb030282bcc37715a54d4ef98be14874ae57456",
            "blockNumber": "17174577",
            "timestamp": "1730117442",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4000",
                    "0x8cfaa6bb923668df3331cabb70b3234a05b1cbd7b3f80f7d06784de9d3a15523",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceBch",
            "gasUsed": 39771,
            "gasCost": "1000363",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f79b33616aa1e43c94134b3829cd5106",
      "version": 7
    },
    "invoke.setPerpsPriceBlur": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceBlur": {
            "hash": "0xab70883223bd54b43a98d9a2763cc55ba198acb1e9d956c304a445d64eee35a3",
            "blockNumber": "17174579",
            "timestamp": "1730117446",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4100",
                    "0x0e34d973f4252ebc9aa56de1d1cf7f2d51cc6f65682f92d4c62c806812c30348",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceBlur",
            "gasUsed": 39771,
            "gasCost": "1000363",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2d90cef471b4038e009d5f5792953b29",
      "version": 7
    },
    "invoke.setPerpsPriceComp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceComp": {
            "hash": "0xa5d03f2a2dbe56dba3ad51be1b7556c4ff4c1d3ec2c051d3d83430520d823f21",
            "blockNumber": "17174589",
            "timestamp": "1730117466",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4200",
                    "0x1ed9041c17b0ffb0f3b83d49ba2a401a6b5ea4c57c74e95c6682b2804b3e0359",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceComp",
            "gasUsed": 39771,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f2032a125c947cb3ac4ead58ed14766d",
      "version": 7
    },
    "invoke.setPerpsPriceCrv": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceCrv": {
            "hash": "0x84bf51ab3e92429a7b701e9a721f43314b7139b7e15f612e456d3c024589ac94",
            "blockNumber": "17174591",
            "timestamp": "1730117470",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4300",
                    "0x60df08b4a3ea7c43f42d92480a54ce6e88ea124def902af734d676041ef454a0",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceCrv",
            "gasUsed": 39771,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9f1052fe65715a3b56d3ad30a04f0581",
      "version": 7
    },
    "invoke.setPerpsPriceDot": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceDot": {
            "hash": "0xa25b3fd0aebe166ef8f4314e8aaa4082303ef674817a48cc15b7e24730d1b693",
            "blockNumber": "17174596",
            "timestamp": "1730117480",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4400",
                    "0x93552ab5ec8eaec6491242d48ad055f7fe2b904b0ceeb0f211ce946757e00bd5",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceDot",
            "gasUsed": 39771,
            "gasCost": "1000362",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5df900e73ca013cbd68d247ac957e597",
      "version": 7
    },
    "invoke.setPerpsPriceDydx": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceDydx": {
            "hash": "0x52d6d51d7e8cf09240457694913304f09d267b0528418e4e09176044e308dd20",
            "blockNumber": "17174599",
            "timestamp": "1730117486",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4500",
                    "0x93ee9238a3e704ed5e065fd99052e6c5122b9a081d9da6ca83cff2cd96b79375",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceDydx",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7dba69e40fbf4d52aa83c624b9adb140",
      "version": 7
    },
    "invoke.setPerpsPriceEos": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceEos": {
            "hash": "0xd6f492c75fd4435351778f74712dc3bf2edab6c90a8c5bb55edf366a261fd04c",
            "blockNumber": "17174608",
            "timestamp": "1730117504",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4600",
                    "0xe496c5a9745043a1827303a14954582d2364284f37730479b9140231d395b243",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceEos",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3ef7e767f0f6c00527d1affeed1b42df",
      "version": 7
    },
    "invoke.setPerpsPriceEtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceEtc": {
            "hash": "0x65b280a3bc06a6ed1c9fb4b136158da0730331caf5bb083ea41d78ebce63a212",
            "blockNumber": "17174611",
            "timestamp": "1730117510",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4700",
                    "0xb844e647ba2faa7fcb3385684a34c5798ac3e62aa8ef26d4997f0224b9938ed9",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceEtc",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ecb5e6b4b34c8cb8f4b76742a4cfcc4b",
      "version": 7
    },
    "invoke.setPerpsPriceEthbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceEthbtc": {
            "hash": "0x9046679e440177ea0309a21ac43196694061df417d3e7deb80a94a064b3d995e",
            "blockNumber": "17174615",
            "timestamp": "1730117518",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4800",
                    "0x20258bba5101aac70fd7bfbe72ee94f35e60f2e6fc903341824d5e116beaff3a",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceEthbtc",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "23536d381c974adea91146f06e8dd788",
      "version": 7
    },
    "invoke.setPerpsPriceFil": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceFil": {
            "hash": "0xb99c3adf7a10181f731680de42aa74feac3963ed71affeb9a4b6cd19a37303d3",
            "blockNumber": "17174620",
            "timestamp": "1730117528",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "4900",
                    "0x2ec565bd3d47a23d9b8a01d89afebb842224613105a1a169995af24a90ccb33e",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceFil",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5ee068e41f6494d75984f6f89dceadf2",
      "version": 7
    },
    "invoke.setPerpsPriceFlow": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceFlow": {
            "hash": "0xba9b2c714609e972f7e2a45a6ea0830abad5757eb7d9e575c08250bedbf62ee8",
            "blockNumber": "17174844",
            "timestamp": "1730117976",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5000",
                    "0x382ea67143c5f5ac64f1b869d516ce525bd0f76d1e6e72d2c9dccc629cc11561",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceFlow",
            "gasUsed": 39771,
            "gasCost": "1000318",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6dda7840fb5e68192ba7a71fa3005749",
      "version": 7
    },
    "invoke.setPerpsPriceFxs": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceFxs": {
            "hash": "0xe7e9d49f2b44927c909339de8ea6d07f402953a7fd12e90c37bea73ab0f169a1",
            "blockNumber": "17174623",
            "timestamp": "1730117534",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5100",
                    "0x24a376e1ca18b514d506338b4b72b4a4bc75647568121223b7b80ae914f80dfd",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceFxs",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "06103731c4b873485f03cc46b3e4ef91",
      "version": 7
    },
    "invoke.setPerpsPriceGrt": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceGrt": {
            "hash": "0x87ddc7bcd957f897b3765cdb029cb09ea88f80d8d4ec5c7896ea327fbe2a23c0",
            "blockNumber": "17174628",
            "timestamp": "1730117544",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5200",
                    "0x186584614ebde9668ea9fbd942c60397e27dab9f9433a97c2980f25f002f3b10",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceGrt",
            "gasUsed": 39759,
            "gasCost": "1000359",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a70c541a627b926ae9259b635dc43d54",
      "version": 7
    },
    "invoke.setPerpsPriceIcp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceIcp": {
            "hash": "0x0a8dde90c627c86f42ef1a734ad388089742c5f6144db1d3dea98d9a359857f2",
            "blockNumber": "17174630",
            "timestamp": "1730117548",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5300",
                    "0x43d313681c1f19233879e6a5e56b3a69c0aa4f2f24e5f48c2faad94972757e7a",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceIcp",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c9e7b3ae1eea341c28a3b5bd05c3c419",
      "version": 7
    },
    "invoke.setPerpsPriceImx": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceImx": {
            "hash": "0xb90950427dacb3cf118cea51cceb43c73bb5a5424048d351195f2eb15f54dfe1",
            "blockNumber": "17174632",
            "timestamp": "1730117552",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5400",
                    "0x337493bcd57fbf5f360a615403d5ed992bf7e5ce2dea8a264dd66de9a700e8e8",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceImx",
            "gasUsed": 39759,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b47356f20e1a6c1f632c087a9be7e951",
      "version": 7
    },
    "invoke.setPerpsPriceJto": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceJto": {
            "hash": "0xe01dd1249d8c9693f4e3a147100aa4a7bbbf7352a1ea86166e239516b7ed69c7",
            "blockNumber": "17174638",
            "timestamp": "1730117564",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5500",
                    "0x6f2c4c8414cf47730c88bbead98f0c5939d357d9950739ba6de5bdb206e8a092",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceJto",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c58f8df67f726dd03baaaaa182548525",
      "version": 7
    },
    "invoke.setPerpsPriceJup": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceJup": {
            "hash": "0x1f74851157fb0fcacef0d50ae5d5c8fe87a06d0cbfeb7bf1a0c642cd60173a24",
            "blockNumber": "17174640",
            "timestamp": "1730117568",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5600",
                    "0x907c4993a9c30698887e5ec5370cf24ea84ade41d0033c301ad330512b8cbf26",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceJup",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ddc3cf194da0c8e8eb23ce6a5d5eb77a",
      "version": 7
    },
    "invoke.setPerpsPriceLtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceLtc": {
            "hash": "0x710e5a4ed66c8fdfd09da0e86392276b6d2a20fbd2a7f40439c1189b09434533",
            "blockNumber": "17174646",
            "timestamp": "1730117580",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5800",
                    "0x9bc97f01548fa9cf9ad463d579f7d9194e837e4ac2cc3852e96da139b4dd232c",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceLtc",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "81003df783ecebd16a73565176bfc2c8",
      "version": 7
    },
    "invoke.setPerpsPriceNear": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceNear": {
            "hash": "0xd651930c1ec1efeb68e0a876b4af75a9a42e63d272e8d9207928a36759779bab",
            "blockNumber": "17174851",
            "timestamp": "1730117990",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6100",
                    "0x3d04113cb2b82719011da6bb644575c6c83b27a97dd4ae36bd47fd8e4370f63f",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceNear",
            "gasUsed": 39771,
            "gasCost": "1000319",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "957d94380cffc765974fb999a5bc57ff",
      "version": 7
    },
    "invoke.setPerpsPricePyth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPricePyth": {
            "hash": "0x0c26599ea67dc5f0006489e94161b6f841f0bbc68ae67e6987bc3faf7255179f",
            "blockNumber": "17174672",
            "timestamp": "1730117632",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6200",
                    "0xfe8a456bca19e452bf807b5ad0e4b7d55c2353ec7f5a1dd23672dc58fab90539",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPricePyth",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c5f26f415e9ecc28f6581a817c68b77a",
      "version": 7
    },
    "invoke.setPerpsPriceRndr": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceRndr": {
            "hash": "0xa7eec0db302c9b18eedafd148fcdb18194fd8c1d0b363e67bcf33dc431671f0f",
            "blockNumber": "17174676",
            "timestamp": "1730117640",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6300",
                    "0xb04e06c4be2997e52efe0789ef28aa4a968b7fb0f7e356832829f347ea912c6c",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceRndr",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "280de27109f410d08cb14eb4fe7c281e",
      "version": 7
    },
    "invoke.setPerpsPriceSei": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceSei": {
            "hash": "0x9cc56c5fdfbc8991e79039819e0f97f2000de27116ab8048eef359c6bfab0e98",
            "blockNumber": "17174682",
            "timestamp": "1730117652",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6400",
                    "0x07c96d055614b8b1eb3fd8ded27207d9d21f9093a48aa7be135bcc5ebb14bc5f",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceSei",
            "gasUsed": 42559,
            "gasCost": "1000363",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "42f8fe863932bf100afe5a77807e3f5b",
      "version": 7
    },
    "invoke.setPerpsPriceShib": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceShib": {
            "hash": "0xd5f4d0e7369c69d3888b6756de3028775984f8df492021bcbc4423eee71986f9",
            "blockNumber": "17174684",
            "timestamp": "1730117656",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6500",
                    "0x829ccc3beb13d5788d0cd915e3d560462b0b6698d1f8b3730c44a295fc190457",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceShib",
            "gasUsed": 39771,
            "gasCost": "1000363",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "348ee2c3abdb2cb3347c9093a1ae05d4",
      "version": 7
    },
    "invoke.setPerpsPriceStrk": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceStrk": {
            "hash": "0x9d87d14e36a975cf46ad22ca1d34beff13d59ff4322c4608045f46aee5784a3e",
            "blockNumber": "17174691",
            "timestamp": "1730117670",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6600",
                    "0xbae0fca08a5abafcc87dca7dc235f5b1aec76a008d3d26db80fbc2077837c438",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceStrk",
            "gasUsed": 39759,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "adf1e374c13499bf93c5784f793a0dd8",
      "version": 7
    },
    "invoke.setPerpsPriceSushi": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceSushi": {
            "hash": "0x61cdf3cfeb4c9874a638f76ba5f3ad309f4915228afb9c6ac09b176099e075b3",
            "blockNumber": "17174697",
            "timestamp": "1730117682",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6700",
                    "0x49ed80809a36eaea07b1fc66bc6125bcd1ac9a84a5d8b4e970616b975ab4a587",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceSushi",
            "gasUsed": 39771,
            "gasCost": "1000365",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "856fcf014b9a6786c2012b68d9d2a920",
      "version": 7
    },
    "invoke.setPerpsPriceTrx": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceTrx": {
            "hash": "0x7b7772fc8359e44c02fde4eef1bdf06b84b7d61e0c481231fab17f8107d5c781",
            "blockNumber": "17174706",
            "timestamp": "1730117700",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6800",
                    "0x1020228d24f0ce203fdf7bb98de43154a8c2321522e1b399aa0c1c302466f0ed",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceTrx",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "29c33f74aaac36ceaf382c1919eae523",
      "version": 7
    },
    "invoke.setPerpsPriceUni": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceUni": {
            "hash": "0xabe41eb29951863c44ac97f9b0c3b12fa262c86ef0bfc52d57eda551e4cce1aa",
            "blockNumber": "17174708",
            "timestamp": "1730117704",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6900",
                    "0x94ad5d79e05fae9c56b06899d518208df453cb2509b8d564036920cc68b87d4a",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceUni",
            "gasUsed": 39771,
            "gasCost": "1000363",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a6fab7646c5cd7df402f9b65b4926f09",
      "version": 7
    },
    "invoke.setPerpsPriceXlm": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceXlm": {
            "hash": "0x116b3d496ece76be56fbf6ec284c5cbe6bfac1433626f95c6fd0efc374352cb6",
            "blockNumber": "17174731",
            "timestamp": "1730117750",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7000",
                    "0xd395b3a82c393546588965c0fd419d72a208a64f8fb18f73a47affe060947d78",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceXlm",
            "gasUsed": 39771,
            "gasCost": "1000351",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a7a2ce92658e15318363b816a3e32367",
      "version": 7
    },
    "invoke.setPerpsPriceXrp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceXrp": {
            "hash": "0xaf34e61207624cf8494f95b9813fcf85a484dfb40df71d3a61f7a6d467a9a4d9",
            "blockNumber": "17174734",
            "timestamp": "1730117756",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7100",
                    "0x31f0e6c549f280a1483ea9d1a338bc652f73741c50d08b88efc23a536de00c81",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceXrp",
            "gasUsed": 39771,
            "gasCost": "1000350",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "38739af49607e78d093f86ae4fbd002e",
      "version": 7
    },
    "invoke.setPerpsPriceYfi": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceYfi": {
            "hash": "0x28d4ac010c1e9047e16d3c2e614fdf1ced067fa878cb47f6afcd4ee3caaed6b5",
            "blockNumber": "17174737",
            "timestamp": "1730117762",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7200",
                    "0x099a9d8f5155387acc6b7fa1bb51056049aa736929aee02313efefefbd70b5a5",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceYfi",
            "gasUsed": 39771,
            "gasCost": "1000351",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6e3487e7f4d874d5c6f1d70864220fff",
      "version": 7
    },
    "invoke.setPerpsPythFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPythFundingParameters": {
            "hash": "0xf211b2f57f865251399d86bce8f86706bc30dda5d686763c36fa91b035423339",
            "blockNumber": "16432988",
            "timestamp": "1728634264",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6200",
                    "60000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPythFundingParameters",
            "gasUsed": 45048,
            "gasCost": "316051342",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "650a33a9b98ca251e7cb09090d68ab20",
      "version": 7
    },
    "invoke.setPerpsPythLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPythLiquidationParameters": {
            "hash": "0x0f62476d2d68de0fcf46e203f683196caf2d904c457f784a1fbb764539b1a422",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6200",
                    "840000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPythLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6b8cdcac93caa5155165b467e7db9b38",
      "version": 7
    },
    "invoke.setPerpsPythLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPythLockedOiRatio": {
            "hash": "0xd56e6188e9f0186f7459de949e8c002ad23b92ef62ea7e97463d44004aaf7afb",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6200",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPythLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "573ecf6db4f14e232bf6a38e279bc632",
      "version": 7
    },
    "invoke.setPerpsPythMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPythMaxLiquidationParameters": {
            "hash": "0xdf9a46f53a51902a24900bfe7eebf24a76da411a5526c3eadef93522803fd082",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPythMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "616cbb3e54c3ead294a0d7ed65543ff9",
      "version": 7
    },
    "invoke.setPerpsPythMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPythMaxMarketSize": {
            "hash": "0x4518efea31e7ac4683b42d56df4d1901f132c2aa9db15803d16df4da9d417852",
            "blockNumber": "16432990",
            "timestamp": "1728634268",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6200",
                    "2277900000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPythMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "316834201",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dd00a77214a9ffce450921ec2f775bc7",
      "version": 7
    },
    "invoke.setPerpsPythMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPythMaxMarketValue": {
            "hash": "0xd17f4945b52dd915a3c5da6070d78c33aaee2f85b568ae1399d4c0d3df4a1091",
            "blockNumber": "16432992",
            "timestamp": "1728634272",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6200",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPythMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "317753972",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1392a7a8bb6a39c05df3a9c2e1ab1cdd",
      "version": 7
    },
    "invoke.setPerpsPythOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPythOrderFees": {
            "hash": "0xe12a9535569c466ef5d1ff6def464076cb2839d665c7b8d87f741c3cd89b9258",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6200",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPythOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "66f3c0b92b3c38d7068b6f53d32b1ff6",
      "version": 7
    },
    "invoke.setPerpsRndrFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRndrFundingParameters": {
            "hash": "0xd76ccf7ceb4e80e2c0c0fe940d0e24e1202e53c1df22d6ef054d740bd7b0455c",
            "blockNumber": "16432994",
            "timestamp": "1728634276",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6300",
                    "3750000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRndrFundingParameters",
            "gasUsed": 42260,
            "gasCost": "318417539",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ffb95f07311c614f781749be12d933eb",
      "version": 7
    },
    "invoke.setPerpsRndrLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRndrLiquidationParameters": {
            "hash": "0x006d36f1c2269b26d4880ead7a6ac5534e3538c72e46b903b190d2352008db37",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6300",
                    "5090000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRndrLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3b4152280acc5657b346c87638a886b4",
      "version": 7
    },
    "invoke.setPerpsRndrLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRndrLockedOiRatio": {
            "hash": "0xd0f57498f666a0299d425052c7643af2625189ffc168caa283be85939cb9cb2c",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRndrLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a55aa1e1beaac21bebbcca427d4836d2",
      "version": 7
    },
    "invoke.setPerpsRndrMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRndrMaxLiquidationParameters": {
            "hash": "0xc3430ba17352aa400b2d004515656edb3c9cd230273f71956b08beb8c1036dc2",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRndrMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1652e78ae993991be2757a613e7d0ff5",
      "version": 7
    },
    "invoke.setPerpsRndrMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRndrMaxMarketSize": {
            "hash": "0xef974ec856fa87d808b3f080fb68a63f5d1917151a83bf13d770bbc85213e898",
            "blockNumber": "12526006",
            "timestamp": "1720820300",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6300",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRndrMaxMarketSize",
            "gasUsed": 34617,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3e192b087b2a862bb07fb4e0b9ae6b81",
      "version": 7
    },
    "invoke.setPerpsRndrMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRndrMaxMarketValue": {
            "hash": "0xf6ad701706dd4143ec0c67ba3208d2c967f4f0cfd1e511cae7bc9887a5068cf2",
            "blockNumber": "12526008",
            "timestamp": "1720820304",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6300",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRndrMaxMarketValue",
            "gasUsed": 34640,
            "gasCost": "1000263",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a81de2de99758f838fcc045498952e9f",
      "version": 7
    },
    "invoke.setPerpsRndrOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRndrOrderFees": {
            "hash": "0x259831c6629666041bfab811de1b214b913f27ce75b5455eda161d441e9c167f",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6300",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRndrOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "eaeff165998b19204d7657dcd498b8f3",
      "version": 7
    },
    "invoke.setPerpsSeiFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSeiFundingParameters": {
            "hash": "0xf5da816634aac12b20c444ae48813916e40458c79c4fec43ace8533f895b4fc4",
            "blockNumber": "16432998",
            "timestamp": "1728634284",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6400",
                    "71000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSeiFundingParameters",
            "gasUsed": 45036,
            "gasCost": "318195057",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3babddb3be13cc30a6ccbcc3e3436e01",
      "version": 7
    },
    "invoke.setPerpsSeiLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSeiLiquidationParameters": {
            "hash": "0xfe8bd09a89a2bc45be698c2cbbacd1fe554083fb486fbe147cb6a1274439198c",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6400",
                    "5130000000000000000",
                    "390000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSeiLiquidationParameters",
            "gasUsed": 147121,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "afbb9db4259e3be48028d401b9dd1c60",
      "version": 7
    },
    "invoke.setPerpsSeiLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSeiLockedOiRatio": {
            "hash": "0x9b688a5913fe5c6a549bb8cfff751a3498990bc0cb141ba54f3e1a387d0af19b",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSeiLockedOiRatio",
            "gasUsed": 56544,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "46f4900900c1c4721fb47a18de53b77f",
      "version": 7
    },
    "invoke.setPerpsSeiMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSeiMaxLiquidationParameters": {
            "hash": "0x14a9a27c61ed9fe383a543503e7d18b1c5cbee97893c1b3990c5528d25a3c0f9",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSeiMaxLiquidationParameters",
            "gasUsed": 124692,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2bdcaa48c26eab380a79afba204599a8",
      "version": 7
    },
    "invoke.setPerpsSeiMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSeiMaxMarketSize": {
            "hash": "0xea0449e2d2abf9b53cbc15b871dfefa472df70516b3328e7d87aa8bea60ae442",
            "blockNumber": "16433001",
            "timestamp": "1728634290",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6400",
                    "3496500000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSeiMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318538261",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4a9c8c1f3a9339cb9659db1bd34cad6b",
      "version": 7
    },
    "invoke.setPerpsSeiMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSeiMaxMarketValue": {
            "hash": "0x91fe749aef388bb32df2944f1bc0f88d6fb5d52bb8383569e929b8e2f757cf3a",
            "blockNumber": "16433003",
            "timestamp": "1728634294",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6400",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSeiMaxMarketValue",
            "gasUsed": 39578,
            "gasCost": "317562502",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fbe3bd539b36be55095f8e38364f3a1d",
      "version": 7
    },
    "invoke.setPerpsSeiOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSeiOrderFees": {
            "hash": "0xf7dfd1552119b4c1eb8d8d730effccc733ee9e83e508c24a3b9808f8f4b68412",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6400",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSeiOrderFees",
            "gasUsed": 79192,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c2196f71f23ecb68dc0af0ae90c4aa9a",
      "version": 7
    },
    "invoke.setPerpsShibFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsShibFundingParameters": {
            "hash": "0x98800194fcf829e46893062f9906ab8e2c854986ab1f632b329aba878f4c7c46",
            "blockNumber": "16433005",
            "timestamp": "1728634298",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6500",
                    "3750000000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsShibFundingParameters",
            "gasUsed": 45072,
            "gasCost": "316158744",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fdd0946faecb1ad50311bf7484e7eda8",
      "version": 7
    },
    "invoke.setPerpsShibLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsShibLiquidationParameters": {
            "hash": "0x51ad901bc04ae728f07d276a97ce351c46dd458fead025ac1ff8068a4d35560c",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6500",
                    "2200000000000000000",
                    "320000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsShibLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b0c8f477bf978bb1322f36ac53e58932",
      "version": 7
    },
    "invoke.setPerpsShibLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsShibLockedOiRatio": {
            "hash": "0x9f19a87f265be3ebc00336c80c7c73a4112d034447e1a9ec37185949cd0409d2",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6500",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsShibLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2f61b524547f411e7bd38924f59fd22e",
      "version": 7
    },
    "invoke.setPerpsShibMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsShibMaxLiquidationParameters": {
            "hash": "0x462648d314db7077ad881de4d1f0610deb74bf5c0ddb9694ab35803bc0d73b01",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6500",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsShibMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d80d3af2a06741dd70c4d46a19201b31",
      "version": 7
    },
    "invoke.setPerpsShibMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsShibMaxMarketSize": {
            "hash": "0x000b997418f615073468bbd7c31ec171251a2a5e62bd1ff89b90437a8bfa4b21",
            "blockNumber": "16433007",
            "timestamp": "1728634302",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6500",
                    "168208578650000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsShibMaxMarketSize",
            "gasUsed": 39549,
            "gasCost": "315526650",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ff94ccd9d39346a452a9c03412760d8f",
      "version": 7
    },
    "invoke.setPerpsShibMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsShibMaxMarketValue": {
            "hash": "0xde5382ddd508c2e739c031ea81e8bbc3ee8e81035417b86d9b97d368d3a9619b",
            "blockNumber": "16433009",
            "timestamp": "1728634306",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6500",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsShibMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "315768413",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ed3aa896882ef6ba56fb38d9b787b1cc",
      "version": 7
    },
    "invoke.setPerpsShibOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsShibOrderFees": {
            "hash": "0x6691b09531b4db90397c17a4007fdc404cfe416df382216c01c8aba1e58daa86",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6500",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsShibOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "26a5f6a29165f4f0e763c1af78fa32d4",
      "version": 7
    },
    "invoke.setPerpsStrkFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStrkFundingParameters": {
            "hash": "0x4214750a576c734f492adb8a93c73aee0debee15f54eff0edd61261c0c19e328",
            "blockNumber": "16433020",
            "timestamp": "1728634328",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6600",
                    "40000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStrkFundingParameters",
            "gasUsed": 45048,
            "gasCost": "316497757",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "30b03afc579810531ae483b5e2fc02e8",
      "version": 7
    },
    "invoke.setPerpsStrkLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStrkLiquidationParameters": {
            "hash": "0xd1e03f4ce5c3b53080e652fcb1c3d1e611eef9dc2859d72c3bf6bbedaf396906",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6600",
                    "890000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStrkLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000297",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6e9194429b0acdb229536a58dda0040f",
      "version": 7
    },
    "invoke.setPerpsStrkLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStrkLockedOiRatio": {
            "hash": "0x2842d80a34fa40fe0d20df46aa424f07f7b17c08f8412a9316892e2d7e65e5db",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6600",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStrkLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8327f0b4e5d5eddbb29a646fe5373bbc",
      "version": 7
    },
    "invoke.setPerpsStrkMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStrkMaxLiquidationParameters": {
            "hash": "0x55706cb2a3e4c4e38b04b856c2905e5a2ee80204dde7fdb0a90f3b58217169af",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6600",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStrkMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000297",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "da577e79e4b31bcc29c90d05161cb3e9",
      "version": 7
    },
    "invoke.setPerpsStrkMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStrkMaxMarketSize": {
            "hash": "0x358fc56b678c7072f11fdfa100ed16050dccc2c30cd9a954207a2582f056f364",
            "blockNumber": "16433022",
            "timestamp": "1728634332",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6600",
                    "1904850000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStrkMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "317104516",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bc00c775e0c58ed3796eb2ef5e662a1f",
      "version": 7
    },
    "invoke.setPerpsStrkMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStrkMaxMarketValue": {
            "hash": "0xada742e17e701b3150a124ef04c8fc9bbe5aad7d0b0a6f249307284fab1cb72f",
            "blockNumber": "16433024",
            "timestamp": "1728634336",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6600",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStrkMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "317183404",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ac009088e3c01a429e4adf002371c95d",
      "version": 7
    },
    "invoke.setPerpsStrkOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStrkOrderFees": {
            "hash": "0x9055b45be640d10848a5a34b4c7590f40a4105881275b2350d36a6016c2c1588",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6600",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStrkOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "116e700eee8003f7e082870732404233",
      "version": 7
    },
    "invoke.setPerpsSushiFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSushiFundingParameters": {
            "hash": "0xdfb5ee98f3f926fc730e64d94aa4cf68a0c08487828439ae122f8f1c2ff9e4dc",
            "blockNumber": "16433041",
            "timestamp": "1728634370",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6700",
                    "16000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSushiFundingParameters",
            "gasUsed": 45048,
            "gasCost": "315030785",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6154abffe6905c643491a90c03e0f17d",
      "version": 7
    },
    "invoke.setPerpsSushiLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSushiLiquidationParameters": {
            "hash": "0xd263aa1c66b2955004d86a81a2e7916a5c8154dfe70b9dd60f7a1729fa36f42d",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6700",
                    "1370000000000000000",
                    "400000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSushiLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "afb55021eba271530e8438a43db8830a",
      "version": 7
    },
    "invoke.setPerpsSushiLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSushiLockedOiRatio": {
            "hash": "0x970bc2258c3f22730c3892558c2fa17621c51451dd660b8ffd939144c29ec922",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6700",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSushiLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000296",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "266f55de1ab28ccc60dca3eaa6ce8388",
      "version": 7
    },
    "invoke.setPerpsSushiMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSushiMaxLiquidationParameters": {
            "hash": "0x52e50c71214347c6df15919ff351a96e8239ac19f0b240ffa3ae56eacb1bda56",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6700",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSushiMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "642db00c88059ee86bf091a0ea4074e6",
      "version": 7
    },
    "invoke.setPerpsSushiMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSushiMaxMarketSize": {
            "hash": "0x30cee0137d19355cf1c852f416cc45944c500f7838f7d0ae78b131137f63efd2",
            "blockNumber": "16433044",
            "timestamp": "1728634376",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6700",
                    "1018050000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSushiMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "314344725",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e4a43e96d1f0fbfea23d875ca3c8f894",
      "version": 7
    },
    "invoke.setPerpsSushiMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSushiMaxMarketValue": {
            "hash": "0x6f530324daf901b38450111d4d25f4bf6d39410a5d5dd9de101746dbc789e386",
            "blockNumber": "16433046",
            "timestamp": "1728634380",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6700",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSushiMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "314808847",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "24aa8f61f3cd12117b8e7c6b9884aadd",
      "version": 7
    },
    "invoke.setPerpsSushiOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSushiOrderFees": {
            "hash": "0x9ae49fd24e785913bdef53073386d1797a57c1cb9d60996a71aabb46ecd272b0",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6700",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSushiOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5d8f54dc692618472e7c1d20462623c1",
      "version": 7
    },
    "invoke.setPerpsTrxFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTrxFundingParameters": {
            "hash": "0xf93ae81251f3d47536924a1f20159d5614cdd1653754abde49caaf6f237ec442",
            "blockNumber": "16433068",
            "timestamp": "1728634424",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6800",
                    "806250000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTrxFundingParameters",
            "gasUsed": 45072,
            "gasCost": "314587065",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0e4395ba078c65052772518917c9f398",
      "version": 7
    },
    "invoke.setPerpsTrxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTrxLiquidationParameters": {
            "hash": "0xcc31f9a705358c5fcfbe8db77da0f3e43eb8335f7e368c91c72c650eda4eb668",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6800",
                    "1880000000000000000",
                    "280000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTrxLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "05163c2dc0bac666d0681b7286f290d0",
      "version": 7
    },
    "invoke.setPerpsTrxLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTrxLockedOiRatio": {
            "hash": "0xc12038cad6692af27dba841d439dd7b0daeec52542a210d34f111b73d067ece5",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6800",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTrxLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1780ceb27ca374dbbdb098075928072e",
      "version": 7
    },
    "invoke.setPerpsTrxMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTrxMaxLiquidationParameters": {
            "hash": "0x356b15f7e5a0d6e91630f4e3bc27a927da4f1b8c8607230c0bc76da7734aa24f",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6800",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTrxMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d3257320c34252ec1fbe0d745e4c6163",
      "version": 7
    },
    "invoke.setPerpsTrxMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTrxMaxMarketSize": {
            "hash": "0x26c220021abe7f9f8de99dc03c477041cfd841665693b46051e363c6f5667c67",
            "blockNumber": "16433070",
            "timestamp": "1728634428",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6800",
                    "19348600000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTrxMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "314847985",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "18203d99eaabd67a65d442a0e0c0f251",
      "version": 7
    },
    "invoke.setPerpsTrxMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTrxMaxMarketValue": {
            "hash": "0x0571c53efb99ca54bffbd7dc0890e2502a78ffa1d3899e6eacab27fc97079809",
            "blockNumber": "16433072",
            "timestamp": "1728634432",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6800",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTrxMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "315399872",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fc99552d24b474c041315c9e4dde484d",
      "version": 7
    },
    "invoke.setPerpsTrxOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTrxOrderFees": {
            "hash": "0x14c0de4d16638bfbe865f2395dd7c7f93f20667d8d3bb1bb1e9ce4176302fb2e",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6800",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTrxOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000293",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f115f31874dd682873a911cbe4e20307",
      "version": 7
    },
    "invoke.setPerpsUniFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsUniFundingParameters": {
            "hash": "0x44c24982a06af076d1c8dcd8e048b2a06b082ccc7cf0fac0d927946f0fad53b2",
            "blockNumber": "16433074",
            "timestamp": "1728634436",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6900",
                    "4500000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsUniFundingParameters",
            "gasUsed": 45060,
            "gasCost": "316683452",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6bae5acc8506c3fed3ad31d08fbfae62",
      "version": 7
    },
    "invoke.setPerpsUniLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsUniLiquidationParameters": {
            "hash": "0xc1752840a997489102bb6d9da2121e4ddadd6f692b424db25f9ca5a2736317d2",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6900",
                    "770000000000000000",
                    "310000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsUniLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000292",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ac1164598d4efe694e9dc662246eabe4",
      "version": 7
    },
    "invoke.setPerpsUniLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsUniLockedOiRatio": {
            "hash": "0x7f038e7d289acd9530f757fb6dee46c986db0594f4a8a3d1e05861f9b1591f8c",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6900",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsUniLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000293",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "589c4ac88f660e3e8f365c51b9386c29",
      "version": 7
    },
    "invoke.setPerpsUniMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsUniMaxMarketSize": {
            "hash": "0x0e3e64963b84ceab060d58c4b605fbd0eec06958949ad373d5e2dd5839dc4ab2",
            "blockNumber": "16433076",
            "timestamp": "1728634440",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6900",
                    "209100000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsUniMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "316735706",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b885870471687dd53b4b9b5bc64361ec",
      "version": 7
    },
    "invoke.setPerpsUniMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsUniMaxMarketValue": {
            "hash": "0x08778e08dc41f01ecee86d0c9513bc25e9ac0c722e53c088fabc622054709674",
            "blockNumber": "16433078",
            "timestamp": "1728634444",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6900",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsUniMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "317206194",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "113fe8b50a1219ed03b03da64cf3ec14",
      "version": 7
    },
    "invoke.setPerpsUniOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsUniOrderFees": {
            "hash": "0x34f2d4de0fafe3e52a890b3885004c1ec1da2e2100b96abbde923fc1d7effdfb",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6900",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsUniOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "44b35d5dde287d285d9cbbd0590d6d16",
      "version": 7
    },
    "invoke.setPerpsXlmFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXlmFundingParameters": {
            "hash": "0xac3573ee734d348398107429cc8a78525a94255bd8de48369e9127ecc2b89eab",
            "blockNumber": "16433085",
            "timestamp": "1728634458",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7000",
                    "333000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXlmFundingParameters",
            "gasUsed": 45048,
            "gasCost": "319265003",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9085578dee3760d654023fceeda22021",
      "version": 7
    },
    "invoke.setPerpsXlmLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXlmLiquidationParameters": {
            "hash": "0xa4c67f869d44936d7d610063cde1d00185108989641cfc2b1ac37c7d93a451d0",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7000",
                    "1400000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXlmLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "86fdf452b7e5fe214b2c9bb770fda241",
      "version": 7
    },
    "invoke.setPerpsXlmLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXlmLockedOiRatio": {
            "hash": "0x9ca57bb47674205024dcb34bd415c52a79b0d227ab7a955d00b6d859fb2ab3d6",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXlmLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "39fc8c17f16868a4ea0085786f6f7127",
      "version": 7
    },
    "invoke.setPerpsXlmMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXlmMaxLiquidationParameters": {
            "hash": "0x2e6ff5768087342a6ae4455303a78944679b6208d7cc0d7cf8c14270336ad0b3",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7000",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXlmMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "26fcf85a79e090ba7e7c5eab443706c4",
      "version": 7
    },
    "invoke.setPerpsXlmMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXlmMaxMarketSize": {
            "hash": "0xf36202f7eafc6a5cb9a1b4970807f4f900a36dbb07355508dd270f4d2c5d52b1",
            "blockNumber": "16433087",
            "timestamp": "1728634462",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7000",
                    "16384500000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXlmMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "319309742",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "df45418d6da5da91b1fa9ac8c12ae25d",
      "version": 7
    },
    "invoke.setPerpsXlmMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXlmMaxMarketValue": {
            "hash": "0x599711d7efae1e14465445021eba0046d352d95a53c825314d03a909ebc93b84",
            "blockNumber": "16433089",
            "timestamp": "1728634466",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7000",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXlmMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "319553603",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0c39b619b18068f0b4dfb3e96552d91c",
      "version": 7
    },
    "invoke.setPerpsXlmOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXlmOrderFees": {
            "hash": "0x760fac3a37340655a84c7171e6e4f138000ecb6733dae586d7aacc410cb1c2f9",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7000",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXlmOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fd466a0ea5a6b61f394cf84af86bbef1",
      "version": 7
    },
    "invoke.setPerpsXrpFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXrpFundingParameters": {
            "hash": "0x9060046853cc07c2f9ca636622aae1bdefe7464f098704e8066b1c4ad63d367f",
            "blockNumber": "16433091",
            "timestamp": "1728634470",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7100",
                    "400000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXrpFundingParameters",
            "gasUsed": 42260,
            "gasCost": "319065173",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "cd4920f3334383170a9dd5768be68553",
      "version": 7
    },
    "invoke.setPerpsXrpLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXrpLiquidationParameters": {
            "hash": "0x16d95da826a61c91cda3a8fbf29b0fa71bac5846c380418cf22e4435877fb78f",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7100",
                    "2570000000000000000",
                    "330000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXrpLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "395bb72e48a13e55af11f0c8b1cfde76",
      "version": 7
    },
    "invoke.setPerpsXrpLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXrpLockedOiRatio": {
            "hash": "0xc521704b7c0b812960ae41614dbee1888fda99b39573909316bfa2fa1e9a390c",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7100",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXrpLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b256728fe365829195d2fc441f608417",
      "version": 7
    },
    "invoke.setPerpsXrpMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXrpMaxLiquidationParameters": {
            "hash": "0xfbc3eee76ffad9ba2866c3ed8db6fa58b4b65695825fd9d51e6f5505ca672cf5",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXrpMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8696091355353953652ac984859c102b",
      "version": 7
    },
    "invoke.setPerpsXrpMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXrpMaxMarketSize": {
            "hash": "0x8aea67878dbddeb88cb278253baac5214340db8c5a7f3a009afd1d1ef63db372",
            "blockNumber": "16433093",
            "timestamp": "1728634474",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7100",
                    "5646550000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXrpMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "318567747",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1fedebf478a3a5fbfb214165dc1f3b2f",
      "version": 7
    },
    "invoke.setPerpsXrpMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXrpMaxMarketValue": {
            "hash": "0x0fe58f725aae26e8731c6f87c228ccd3e68891f4dc5cca7c5e717d444bdb24f1",
            "blockNumber": "16433095",
            "timestamp": "1728634478",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7100",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXrpMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "319022250",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bfca211c2a2f066365150fd3aace7645",
      "version": 7
    },
    "invoke.setPerpsXrpOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXrpOrderFees": {
            "hash": "0x973f0cbcda6885941dcc83446f0153bd3e73651da3bd6aee823e57bd43a7fbd9",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7100",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXrpOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5f8a0b11d5bf256f7a5cf2bb8b68f3b5",
      "version": 7
    },
    "invoke.setPerpsYfiFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsYfiFundingParameters": {
            "hash": "0x30a3c0606549ce0b7762e8b3ad03a9767532b9d0f38dc8a0996bf3ba03b7deb0",
            "blockNumber": "16433097",
            "timestamp": "1728634482",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7200",
                    "2125000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsYfiFundingParameters",
            "gasUsed": 42236,
            "gasCost": "319110409",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "52bcc73ad21757156571987d789c128d",
      "version": 7
    },
    "invoke.setPerpsYfiLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsYfiLiquidationParameters": {
            "hash": "0x096362817e1cbf69b336b471a64d87c6e5b39440642825c8027f20bd28163b09",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7200",
                    "1490000000000000000",
                    "390000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsYfiLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "00c871fb353ec339a8335767c05e151b",
      "version": 7
    },
    "invoke.setPerpsYfiLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsYfiLockedOiRatio": {
            "hash": "0xbff6a33316ebf037a701574444123d37ec494769ab0e1f854df505ac3efee8d7",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7200",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsYfiLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5a0c1f44aeb121e4411ac4729c1c0c9f",
      "version": 7
    },
    "invoke.setPerpsYfiMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsYfiMaxLiquidationParameters": {
            "hash": "0x40b88fd2b1f2fdee42063b288356faefed92d48d7f2d8e0b2492a448ec6a57a0",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsYfiMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5d71f28db197eb54c334f69a54fd0b12",
      "version": 7
    },
    "invoke.setPerpsYfiMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsYfiMaxMarketSize": {
            "hash": "0x7cf3ab7dfed4d734517b7ba7fdeab8f0311bd758d13e5ebabc009cefe7ce756a",
            "blockNumber": "16433099",
            "timestamp": "1728634486",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7200",
                    "150000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsYfiMaxMarketSize",
            "gasUsed": 39501,
            "gasCost": "320945807",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0b92a91eeed5885bcdca8b1648e3c0ff",
      "version": 7
    },
    "invoke.setPerpsYfiMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsYfiMaxMarketValue": {
            "hash": "0x79271cf6625d650fda453c40648d9b9a56073adb35b333fb3da54d8db694f540",
            "blockNumber": "16433101",
            "timestamp": "1728634490",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7200",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsYfiMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "320007728",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9974489f791dd170ffc36da6b9f48b8d",
      "version": 7
    },
    "invoke.setPerpsYfiOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsYfiOrderFees": {
            "hash": "0xfb78a7ead4061e53fdddd9f450369da517b02a1fb33d22358bf0d83111d66d8c",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7200",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsYfiOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000290",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "baa3cb50523cb942c17b986d79cbee48",
      "version": 7
    },
    "invoke.setPerpsAaveSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAaveSettlementStrategy": {
            "hash": "0x386766c72b3ac40052f3f63a78efb54b775f2cb36a2cc5b781c82843b22334c1",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e47445",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAaveSettlementStrategy",
            "gasUsed": 144996,
            "gasCost": "1000291",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "15be1ee06a8ee307cc176053ecdd55c6",
      "version": 7
    },
    "invoke.setPerpsAdaSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAdaSettlementStrategy": {
            "hash": "0xc1dad3aae90f11c0adb759c05932564ca0077dfc75f4f00afb8df84e36c17b26",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x2a01deaec9e51a579277b34b122399984d0bbf57e2458a7e42fecd2829867a0d",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAdaSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000291",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4d0ab986e041bf586198a8aab1a80388",
      "version": 7
    },
    "invoke.setPerpsAlgoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAlgoSettlementStrategy": {
            "hash": "0xd963b1c4a50465cf6755ce6953fa5468cb54d32930aa84aeb64c878225ade9a6",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3500",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xfa17ceaf30d19ba51112fdcc750cc83454776f47fb0112e4af07f15f4bb1ebc0",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAlgoSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000291",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "56065c8ce9d373b81ccdb5868483907d",
      "version": 7
    },
    "invoke.setPerpsAptSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAptSettlementStrategy": {
            "hash": "0xc72d3d4c66eabfc3ca19d83bfc8c6fcc1b80b438874eecd04119221a0ff9e832",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3600",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAptSettlementStrategy",
            "gasUsed": 144984,
            "gasCost": "1000291",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d315452a6e541ef4ec02f507ffbf9c50",
      "version": 7
    },
    "invoke.setPerpsAtomSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAtomSettlementStrategy": {
            "hash": "0x3cc094e62caf36fd66d9b585dd4514c54e2f6dcdefd5f41d16623e59fc4a3b34",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3700",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb00b60f88b03a6a625a8d1c048c3f66653edf217439983d037e7222c4e612819",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAtomSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000291",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "35aa27f82d92f427312a51491d8b6c45",
      "version": 7
    },
    "invoke.setPerpsAxsSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsAxsSettlementStrategy": {
            "hash": "0x72434b570a9d4b3e5f24830b393354df6fc4a7dc51df8890027bc6de607222d3",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3800",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb7e3904c08ddd9c0c10c6d207d390fd19e87eb6aab96304f571ed94caebdefa0",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsAxsSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000292",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dc2f53ec3d3b28b744a761f9272b43ca",
      "version": 7
    },
    "invoke.setPerpsBalSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBalSettlementStrategy": {
            "hash": "0x14f6c255ec8b3a3c56e62dca65e4016c6b04415f9b4263a0c9fcbc114cfa2700",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "3900",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x07ad7b4a7662d19a6bc675f6b467172d2f3947fa653ca97555a9b20236406628",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBalSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000292",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ef23e4618b5e768cf31cd0e32556aa64",
      "version": 7
    },
    "invoke.setPerpsBchSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBchSettlementStrategy": {
            "hash": "0xe5dbc9d4612d0aa3f5d79a6a0ac8cbae2fa6e05e31173ac5967ce822e3ef7e55",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4000",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x3dd2b63686a450ec7290df3a1e0b583c0481f651351edfa7636f39aed55cf8a3",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBchSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000292",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d447fa6f9670f516262262cacf24f806",
      "version": 7
    },
    "invoke.setPerpsBlurSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsBlurSettlementStrategy": {
            "hash": "0xc37fc586c8061bd9fd9f3aab38a4490e06ee4e715639f9443824295b3bd1cb20",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x856aac602516addee497edf6f50d39e8c95ae5fb0da1ed434a8c2ab9c3e877e9",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsBlurSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000291",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "55d24bc91e493370b5b87fc50c789267",
      "version": 7
    },
    "invoke.setPerpsCompSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCompSettlementStrategy": {
            "hash": "0x3542e23819bb28bb5d97314c3cea903652278873db35b885802fb4c50ae2f64c",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x4a8e42861cabc5ecb50996f92e7cfa2bce3fd0a2423b0c44c9b423fb2bd25478",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCompSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000292",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "02b983c50ca26993b3702405b6ee155b",
      "version": 7
    },
    "invoke.setPerpsCrvSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsCrvSettlementStrategy": {
            "hash": "0x31221ff82ee65bb476f8897026ce6be5047389242d2481e95ddb8595e0e455f1",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xa19d04ac696c7a6616d291c7e5d1377cc8be437c327b75adb5dc1bad745fcae8",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsCrvSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000292",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bf87d51c335160e5872da8b3f0cb5feb",
      "version": 7
    },
    "invoke.setPerpsDotSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDotSettlementStrategy": {
            "hash": "0x04eff112e3df57b137dfd89943c473d38b81735ee2e35d15d2b0638350f79639",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xca3eed9b267293f6595901c734c7525ce8ef49adafe8284606ceb307afa2ca5b",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDotSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000292",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1d0b9ce55e2965fd77c48045eaad875c",
      "version": 7
    },
    "invoke.setPerpsDydxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsDydxSettlementStrategy": {
            "hash": "0xb7e750f60b0ca38ff4251ea7acca2cf120f1b417eb6eb5eabf6469c763143999",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4500",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x6489800bb8974169adfe35937bf6736507097d13c190d760c557108c7e93a81b",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsDydxSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000293",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4e38cca1648bd6bda2e0ba94b148b1b3",
      "version": 7
    },
    "invoke.setPerpsEosSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEosSettlementStrategy": {
            "hash": "0x4d541c9b718f73837986a57705a3bd63a4d892ff8f423b3bc9756866464c7a1b",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4600",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x06ade621dbc31ed0fc9255caaab984a468abe84164fb2ccc76f02a4636d97e31",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEosSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000293",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "72b70fd1907df49d25d7ec59901c87a3",
      "version": 7
    },
    "invoke.setPerpsEtcSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEtcSettlementStrategy": {
            "hash": "0xe5b583c34ea74074dfe860a7815fe09b6c3ae9aad4d6afe8d66c57fa72e74da6",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4700",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x7f5cc8d963fc5b3d2ae41fe5685ada89fd4f14b435f8050f28c7fd409f40c2d8",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEtcSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1b80d7998b8f1fb2e1255bf4390ecd37",
      "version": 7
    },
    "invoke.setPerpsEthbtcSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEthbtcSettlementStrategy": {
            "hash": "0x453819e5b23db46a6dbd19be6a221adb4b55b1a52eb5386745b868eec81cb249",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4800",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEthbtcSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2ffec2ea6506d156b76513f69388d7e0",
      "version": 7
    },
    "invoke.setPerpsFilSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFilSettlementStrategy": {
            "hash": "0x663807b6ee688f8562e90257affd67ad0420667000d0c399075ee5106ef0e594",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "4900",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFilSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8a777f7f820c29f5ee3df8c93400aaf7",
      "version": 7
    },
    "invoke.setPerpsFlowSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFlowSettlementStrategy": {
            "hash": "0x02d8efd6425db2b527c602cc29e92338d45648899fe212fa8a5edfa53d932995",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5000",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x2fb245b9a84554a0f15aa123cbb5f64cd263b59e9a87d80148cbffab50c69f30",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFlowSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1146e5f0e85df4cb320434a3b3e2efdd",
      "version": 7
    },
    "invoke.setPerpsFxsSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsFxsSettlementStrategy": {
            "hash": "0x64bcbb4a70442814a6e9005192724c672f36d9662386b54eb583f265f4558932",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x735f591e4fed988cd38df74d8fcedecf2fe8d9111664e0fd500db9aa78b316b1",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsFxsSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5faaf6e0edbe8bbd2815dd687935c792",
      "version": 7
    },
    "invoke.setPerpsGrtSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsGrtSettlementStrategy": {
            "hash": "0x9cb2cb017528571925e37a90ebdeb0410a65ae971316fda3d323ebc8501c7770",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x4d1f8dae0d96236fb98e8f47471a366ec3b1732b47041781934ca3a9bb2f35e7",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsGrtSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "43cd057fef35e58a039faab340acb3c2",
      "version": 7
    },
    "invoke.setPerpsIcpSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIcpSettlementStrategy": {
            "hash": "0x310163739847fa469e0907bb90d20b02d157323568b3cfd921e63325060b4c57",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xc9907d786c5821547777780a1e4f89484f3417cb14dd244f2b0a34ea7a554d67",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIcpSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b5c27d6ce36605b3d2cead95b420d19f",
      "version": 7
    },
    "invoke.setPerpsImxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsImxSettlementStrategy": {
            "hash": "0xd5f799e418c26a1f484095ae8b24d9c3f4f7798a269afa5476d67b963a532b17",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x941320a8989414874de5aa2fc340a75d5ed91fdff1613dd55f83844d52ea63a2",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsImxSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "140726bceb9c6228612c01bdfe5f11c3",
      "version": 7
    },
    "invoke.setPerpsJtoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJtoSettlementStrategy": {
            "hash": "0x9e9c9b330b9166b1e645141d088888f34babda0add36eadd600588b916711706",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5500",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb43660a5f790c69354b0729a5ef9d50d68f1df92107540210b9cccba1f947cc2",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJtoSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "76ce71978a4ae26b5c573dc97b1b135b",
      "version": 7
    },
    "invoke.setPerpsJupSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsJupSettlementStrategy": {
            "hash": "0x29342c23fae91462b75a2bbf1be55a87a0d75e6fbe2ccf9a071a7caffc9cd96f",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5600",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x0a0408d619e9380abad35060f9192039ed5042fa6f82301d0e48bb52be830996",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsJupSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6e5d7a0f12a385b22dce454347b08a03",
      "version": 7
    },
    "invoke.setPerpsLtcSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLtcSettlementStrategy": {
            "hash": "0x93bb3fe106f80b917da4d03b55472c1ff91d062ebd62b8980f50a8f87ab2907a",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5800",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x6e3f3fa8253588df9326580180233eb791e03b443a3ba7a1d892e73874e19a54",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLtcSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4c800d4403fed1fa3a71b0148174e412",
      "version": 7
    },
    "invoke.setPerpsNearSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNearSettlementStrategy": {
            "hash": "0x74b62f8703849835fe93b1e3933a6f6ed6021306d65da3a7d89175700b011aea",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xc415de8d2eba7db216527dff4b60e8f3a5311c740dadb233e13e12547e226750",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNearSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b2f71eff1a75b1bdad6f1fc4719520d3",
      "version": 7
    },
    "invoke.setPerpsPythSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPythSettlementStrategy": {
            "hash": "0x32a07710c4d297a81fc7a43b5c53ea5f0acf9cbd6a2923fff6fdfa30018144d0",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x0bbf28e9a841a1cc788f6a361b17ca072d0ea3098a1e5df1c3922d06719579ff",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPythSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bb03e964e224c30ad7dbcccbc0a7fd1f",
      "version": 7
    },
    "invoke.setPerpsRndrSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRndrSettlementStrategy": {
            "hash": "0xbbdc44863bdc2b8e157b81353d7eac2b6744dee88f7f8f778f7f041d9b471ea4",
            "blockNumber": "13596906",
            "timestamp": "1722962100",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRndrSettlementStrategy",
            "gasUsed": 62608,
            "gasCost": "10917231",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "afb5eaa6ece54a9c6d61034fa3c79968",
      "version": 7
    },
    "invoke.setPerpsSeiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSeiSettlementStrategy": {
            "hash": "0x482bbccd04982d609826ecddd2edc3550b40727d88816f0a182875e758562395",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x53614f1cb0c031d4af66c04cb9c756234adad0e1cee85303795091499a4084eb",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSeiSettlementStrategy",
            "gasUsed": 144996,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "70329fbe0baa3610386b6d02e0456178",
      "version": 7
    },
    "invoke.setPerpsShibSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsShibSettlementStrategy": {
            "hash": "0xac1d590cf23cdc2b4b0c27b5b8f1e9ae1b268b263e0fc925d1b3c67b46c45542",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6500",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xf0d57deca57b3da2fe63a493f4c25925fdfd8edf834b20f93e1f84dbd1504d4a",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsShibSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b0a1332a23a8d572593e11f41222fce8",
      "version": 7
    },
    "invoke.setPerpsStrkSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsStrkSettlementStrategy": {
            "hash": "0x0efb5da1e244b42c5c82b1d7cefdfc232532da3bffe26073e43760d3d192c39d",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6600",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x6a182399ff70ccf3e06024898942028204125a819e519a335ffa4579e66cd870",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsStrkSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d19cba88caa3390d9e040905d58a8916",
      "version": 7
    },
    "invoke.setPerpsSushiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSushiSettlementStrategy": {
            "hash": "0x8c63f90257858b3d2c93a9ab26857efc1b6dff4dc19bc36c2bb31b118cb87e55",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6700",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x26e4f737fde0263a9eea10ae63ac36dcedab2aaf629261a994e1eeb6ee0afe53",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSushiSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4f4ae2ce1aa913951f95ff07055fcccb",
      "version": 7
    },
    "invoke.setPerpsTrxSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsTrxSettlementStrategy": {
            "hash": "0x7dbfd5370fdafdba8282f25bc6f8d3e4657867fd7308fdaa2de70c522ffaca5a",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6800",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x67aed5a24fdad045475e7195c98a98aea119c763f272d4523f5bac93a4f33c2b",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsTrxSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7ba27c49a5ec83b9b2dc823adb3a332d",
      "version": 7
    },
    "invoke.setPerpsUniSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsUniSettlementStrategy": {
            "hash": "0x917d91971dcb92bf9b8dd8f1f7373ffe719da9c551798751327d782795d671e1",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6900",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x78d185a741d07edb3412b09008b7c5cfb9bbbd7d568bf00ba737b456ba171501",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsUniSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000294",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ae184338dac65c025ee60e3036f99793",
      "version": 7
    },
    "invoke.setPerpsXlmSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXlmSettlementStrategy": {
            "hash": "0xee875080b1be14519dce466fa9c33d8e79f7fab7822cf75d6c2f27d063dc17c9",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7000",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb7a8eba68a997cd0210c2e1e4ee811ad2d174b3611c22d9ebf16f4cb7e9ba850",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXlmSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000293",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a65d8b19ea17d30628e50b409ea7bd41",
      "version": 7
    },
    "invoke.setPerpsXrpSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsXrpSettlementStrategy": {
            "hash": "0xa1bc779fdc9afb216747a4cc01301783e39f94109a293d41a8683d93496d9496",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xec5d399846a9209f3fe5881d70aae9268c94339ff9817e8d18ff19fa05eea1c8",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsXrpSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000291",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c0ec7c1a165a48028804e4ff0af9be95",
      "version": 7
    },
    "invoke.setPerpsYfiSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsYfiSettlementStrategy": {
            "hash": "0xf8ef1deb587a1c21a6f79d5018c13bc798812b309e911f5842cfb7c92f25a5b5",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x425f4b198ab2504936886c1e93511bb6720fbcf2045a4f3c0723bb213846022f",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsYfiSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000291",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4a89c89e194e02eacb50b7c94c0bb752",
      "version": 7
    },
    "invoke.createLdoPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createLdoPerpsMarket": {
            "hash": "0x4b2668d1f4a59febfd48cb18f05d3939ceb1a19bb699189d7c8c38cee9838ea7",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "5700",
                    "Lido dao",
                    "LDO"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createLdoPerpsMarket",
            "gasUsed": 165872,
            "gasCost": "1000536",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1a60f48e6b6de0cd69da16589fd905b7",
      "version": 7
    },
    "invoke.createMemePerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createMemePerpsMarket": {
            "hash": "0x2bfc9610fa3aef0babc6d63d5eb60c3a8e02692b45b86c0b7aff0fd13943016c",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "6000",
                    "Meme coin",
                    "MEME"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createMemePerpsMarket",
            "gasUsed": 165896,
            "gasCost": "1000534",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "29e1aff550e53f54527e4be0fc955db8",
      "version": 7
    },
    "invoke.addPerpsLdoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsLdoSettlementStrategy": {
            "hash": "0x602dd906f3ebded74c7a25c77fbeacd9a0e41dea36f79709a5fa035972cd140b",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "5700",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsLdoSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000475",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "ldo_pyth_settlement_strategy": "0"
        }
      },
      "hash": "f542b27c62ab664437608ec5d990ad1c",
      "version": 7
    },
    "invoke.addPerpsMemeSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsMemeSettlementStrategy": {
            "hash": "0x895ffc19300008f58929357cfdb936ad5f8751674a48d94f047aa654c4df5a19",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "6000",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsMemeSettlementStrategy",
            "gasUsed": 118561,
            "gasCost": "1000471",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "meme_pyth_settlement_strategy": "0"
        }
      },
      "hash": "422e2d5e32801d53119400be9b84bef0",
      "version": 7
    },
    "invoke.setPerpsEosMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEosMaxMarketValue": {
            "hash": "0x9213f4dab593d9cda746961092609952256ec71ba18c10ddd2baacb3f017841e",
            "blockNumber": "16432849",
            "timestamp": "1728633986",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "4600",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEosMaxMarketValue",
            "gasUsed": 39590,
            "gasCost": "318202962",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4329ea5faf95da26708cf43fd31a4984",
      "version": 7
    },
    "invoke.setPerpsLdoFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLdoFundingParameters": {
            "hash": "0xea6726c300cdf2e69fcda08eb35a9c230189519a0ad4a916536f03250fecce04",
            "blockNumber": "16432939",
            "timestamp": "1728634166",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "5700",
                    "21000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLdoFundingParameters",
            "gasUsed": 45048,
            "gasCost": "319380061",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1d5eef8fdfc1d13dffe8325d21039255",
      "version": 7
    },
    "invoke.setPerpsLdoLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLdoLiquidationParameters": {
            "hash": "0xe98f713c394ec46bd46849feca62184c9d138c0ccafa1de38e15928dbeac2781",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "5700",
                    "1250000000000000000",
                    "340000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLdoLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3a66053304885fd4d0bf42002611292a",
      "version": 7
    },
    "invoke.setPerpsLdoLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLdoLockedOiRatio": {
            "hash": "0x4a955c011c6f77511a4e0ea54cae4395b385e102dddc53bae890edfaea4e768a",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "5700",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLdoLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000303",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "65f6b58b4444ce0d2f8584caa9ff0645",
      "version": 7
    },
    "invoke.setPerpsLdoMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLdoMaxLiquidationParameters": {
            "hash": "0x0bc01e1a4ac2e3275d86281cb90cf152661f55aceced4c885be29965712cf588",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "5700",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLdoMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000303",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3c760b1ff0ca778588ba67c13f6c7d0c",
      "version": 7
    },
    "invoke.setPerpsLdoMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLdoMaxMarketSize": {
            "hash": "0x4ffca7b358bf79840cb00a9169b73edeb1a20466493d03047f140a296fa3dda8",
            "blockNumber": "16432942",
            "timestamp": "1728634172",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "5700",
                    "695300000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLdoMaxMarketSize",
            "gasUsed": 39513,
            "gasCost": "318695325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0ae5f6f1bd8bcfcc82e3dbcba0be7bab",
      "version": 7
    },
    "invoke.setPerpsLdoMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLdoMaxMarketValue": {
            "hash": "0x4ac5b2b9b8a323200e85138fa21aeac4821e4922978bf547445756a79682969e",
            "blockNumber": "16432944",
            "timestamp": "1728634176",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "5700",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLdoMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "317802159",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6ec3c0c5946bb1337c030141200d5d40",
      "version": 7
    },
    "invoke.setPerpsLdoOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLdoOrderFees": {
            "hash": "0x4a726ca126b9c1f026319092128676bc65e33fd927916761e100f1ca69130880",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "5700",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLdoOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "67e2693f65dc48fd502c14b53a1e4e66",
      "version": 7
    },
    "invoke.setPerpsMemeFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMemeFundingParameters": {
            "hash": "0x2f25934bc911c0f6c304cb1b797a16fd8232b7ede3959c0859351a5927e31870",
            "blockNumber": "16432963",
            "timestamp": "1728634214",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "6000",
                    "1300000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMemeFundingParameters",
            "gasUsed": 45060,
            "gasCost": "319559408",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5eafbc052faf76324ec34568c4f390d3",
      "version": 7
    },
    "invoke.setPerpsMemeLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMemeLiquidationParameters": {
            "hash": "0xf82568747c937069ed7733cb0efef1d99a287e93eaba3d9103765e477b91f5c6",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "6000",
                    "1320000000000000000",
                    "370000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMemeLiquidationParameters",
            "gasUsed": 147133,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "25ca6ce0ad0fd461e5ddb3ec74caab84",
      "version": 7
    },
    "invoke.setPerpsMemeLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMemeLockedOiRatio": {
            "hash": "0xd863010da6496307c3998a0cc7e5b83f289c3319015a5c4aa8a028170178c32a",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "6000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMemeLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c6d3a991ec4b39533261a4a2dfc35a7a",
      "version": 7
    },
    "invoke.setPerpsMemeMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMemeMaxLiquidationParameters": {
            "hash": "0xf8a2ef070c26f5925d369418df7da29db34ce020a3144305abab5e0099c132c3",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6000",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMemeMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000305",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8dc6442a74b4e9910b96f290a6224869",
      "version": 7
    },
    "invoke.setPerpsMemeMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMemeMaxMarketSize": {
            "hash": "0x5d783c77cb20db53a3378b647661ec0a1e108e5122ed138c6025c208b9e8f411",
            "blockNumber": "16432965",
            "timestamp": "1728634218",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "6000",
                    "73846350000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMemeMaxMarketSize",
            "gasUsed": 39525,
            "gasCost": "320522471",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "80764b97acc4faa0c784fab6ed5303bb",
      "version": 7
    },
    "invoke.setPerpsMemeMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMemeMaxMarketValue": {
            "hash": "0x5085540b5134a1e8c8813c39c4c12e0e4cc18b31c1bc9f7397409b3280cd9cc5",
            "blockNumber": "16432967",
            "timestamp": "1728634222",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "6000",
                    "500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMemeMaxMarketValue",
            "gasUsed": 39602,
            "gasCost": "319689503",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "12d0db9fdf8779dec6f2fc73abdf1373",
      "version": 7
    },
    "invoke.setPerpsMemeOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMemeOrderFees": {
            "hash": "0x97b0a6dba3b4cd6e85f8fe4fe151c9dd956cc404120bc8f04553ebca6f8f11fb",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "6000",
                    "200000000000000",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMemeOrderFees",
            "gasUsed": 79204,
            "gasCost": "1000304",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3bfdbd311ed8af12cb2fb51cb709ec92",
      "version": 7
    },
    "invoke.setPerpsPriceLdo": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceLdo": {
            "hash": "0x66fbce50784f684df9c068f729690436fe4e7d30fc57e94b6782dd34dc953d3a",
            "blockNumber": "17174642",
            "timestamp": "1730117572",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "5700",
                    "0x63513ea9761d6cbad27aa7e255b09fc25a238180be68f2d63fc80554fc94761b",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceLdo",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dbfabdf11084a44e9d79c978783c739f",
      "version": 7
    },
    "invoke.setPerpsPriceMeme": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceMeme": {
            "hash": "0x7dd791382ad715fb7e46f706a1a454c79a6096386682360bc563dc47e91f2007",
            "blockNumber": "17174650",
            "timestamp": "1730117588",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "6000",
                    "0xea8f082528b875706b9558f094b1484f547818bcd70ea5fb0bf48927dbaf9c15",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceMeme",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3821fe4bc13f336e03758d53ed895ce2",
      "version": 7
    },
    "invoke.setPerpsUniMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsUniMaxLiquidationParameters": {
            "hash": "0xa818bb3fca4e3c3f25308210b86515468023caea1858a063d8c059d38a5b10fc",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "6900",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsUniMaxLiquidationParameters",
            "gasUsed": 124704,
            "gasCost": "1000292",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "81dc7a2199ad40dfd7e1dc189707e405",
      "version": 7
    },
    "invoke.setPerpsLdoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsLdoSettlementStrategy": {
            "hash": "0x45ca4a9ff9e4de2d7b653abdcb8fd9e0c002ec1e3784954d79fac11d471d9601",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "5700",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xc63e2a7f37a04e5e614c07238bedb25dcc38927fba8fe890597a593c0b2fa4ad",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsLdoSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4088eced6df9cb7bd238a5c8646c23b2",
      "version": 7
    },
    "invoke.setPerpsMemeSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMemeSettlementStrategy": {
            "hash": "0x74f057c0cb753a5ab7d73b795b64015565013f4888189be9589876047c1df6a2",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "6000",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xcd2cee36951a571e035db0dfad138e6ecdb06b517cc3373cd7db5d3609b7927c",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMemeSettlementStrategy",
            "gasUsed": 145008,
            "gasCost": "1000295",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2aa304b254621c3b0777f7e1ccee644b",
      "version": 7
    },
    "setting.perps_keeper_flag_tx_size": {
      "artifacts": {
        "settings": {
          "perps_keeper_flag_tx_size": "3000"
        }
      },
      "hash": "d1f85e2296aa86069eadabe8be441265",
      "version": 7
    },
    "setting.perps_keeper_liquidate_tx_size": {
      "artifacts": {
        "settings": {
          "perps_keeper_liquidate_tx_size": "5050"
        }
      },
      "hash": "9233686e082a9bccc2db411ba7c9c009",
      "version": 7
    },
    "setting.perps_keeper_settle_tx_size": {
      "artifacts": {
        "settings": {
          "perps_keeper_settle_tx_size": "5000"
        }
      },
      "hash": "76e80b50221daeac0b2d5e9580005132",
      "version": 7
    },
    "setting.statausdc_issuance_ratio": {
      "artifacts": {
        "settings": {
          "statausdc_issuance_ratio": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
        }
      },
      "hash": "c58bed99bbb29bc55be4aca797032c53",
      "version": 7
    },
    "setting.statausdc_liquidation_ratio": {
      "artifacts": {
        "settings": {
          "statausdc_liquidation_ratio": "1100000000000000000"
        }
      },
      "hash": "109f80ca4fb572bb6f910537ee0e25cf",
      "version": 7
    },
    "setting.statausdc_liquidation_reward": {
      "artifacts": {
        "settings": {
          "statausdc_liquidation_reward": "1000000000000000000"
        }
      },
      "hash": "845fb85d1e0ccaf6b0afd054626bbe97",
      "version": 7
    },
    "setting.statausdc_min_delegation": {
      "artifacts": {
        "settings": {
          "statausdc_min_delegation": "100000000000000000000"
        }
      },
      "hash": "ad27ad0c2fad068c59a31bad017dda13",
      "version": 7
    },
    "setting.stataBasUSDC_address": {
      "artifacts": {
        "settings": {
          "stataBasUSDC_address": "0xB3f05d39504dA95876EA0174D25Ae51Ac2422a70"
        }
      },
      "hash": "9c5de72c359455bb69eb5c68ebba424e",
      "version": 7
    },
    "setting.commitment_price_delay": {
      "artifacts": {
        "settings": {
          "commitment_price_delay": "2"
        }
      },
      "hash": "dc88d99e217842b1532ccb97f443b6c1",
      "version": 7
    },
    "setting.pyth_feed_id_snx": {
      "artifacts": {
        "settings": {
          "pyth_feed_id_snx": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3"
        }
      },
      "hash": "17469af564340e6ed8cd0790eedf9dcb",
      "version": 7
    },
    "setting.settlement_reward": {
      "artifacts": {
        "settings": {
          "settlement_reward": "1000000000000000000"
        }
      },
      "hash": "845fb85d1e0ccaf6b0afd054626bbe97",
      "version": 7
    },
    "var.perps_aave_market_settings": {
      "artifacts": {
        "settings": {
          "aave_perps_market_id": "3300",
          "aave_perps_market_skew_scale": "360000000000000000000000",
          "aave_perps_market_max_funding_velocity": "9000000000000000000",
          "aave_perps_maker_fee_ratio": "200000000000000",
          "aave_perps_taker_fee_ratio": "1000000000000000",
          "aave_perps_max_market_size": "20600000000000000000000",
          "aave_perps_max_market_value": "2000000000000000000000000",
          "aave_perps_initial_margin_ratio": "3380000000000000000",
          "aave_perps_maintenance_margin_scalar": "380000000000000000",
          "aave_perps_minimum_initial_margin_ratio": "50000000000000000",
          "aave_perps_flag_reward_ratio_d18": "300000000000000",
          "aave_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "aave_perps_max_seconds_in_liquidation_window": "30",
          "aave_perps_minimum_position_margin": "50000000000000000000",
          "aave_perps_locked_oi_ratio": "500000000000000000",
          "aave_perps_max_liquidation_pd": "500000000000000",
          "aave_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "8539ce210312aa34200c0e91ff32537f",
      "version": 7
    },
    "var.perps_ada_market_settings": {
      "artifacts": {
        "settings": {
          "ada_perps_market_id": "3400",
          "ada_perps_market_skew_scale": "300000000000000000000000000",
          "ada_perps_market_max_funding_velocity": "9000000000000000000",
          "ada_perps_maker_fee_ratio": "200000000000000",
          "ada_perps_taker_fee_ratio": "1000000000000000",
          "ada_perps_max_market_size": "8476200000000000000000000",
          "ada_perps_max_market_value": "2000000000000000000000000",
          "ada_perps_initial_margin_ratio": "4350000000000000000",
          "ada_perps_maintenance_margin_scalar": "330000000000000000",
          "ada_perps_minimum_initial_margin_ratio": "50000000000000000",
          "ada_perps_flag_reward_ratio_d18": "300000000000000",
          "ada_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ada_perps_max_seconds_in_liquidation_window": "30",
          "ada_perps_minimum_position_margin": "50000000000000000000",
          "ada_perps_locked_oi_ratio": "500000000000000000",
          "ada_perps_max_liquidation_pd": "500000000000000",
          "ada_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "f798f770f17d62097c5eb40f2f68ca80",
      "version": 7
    },
    "var.perps_algo_market_settings": {
      "artifacts": {
        "settings": {
          "algo_perps_market_id": "3500",
          "algo_perps_market_skew_scale": "103875000000000000000000000",
          "algo_perps_market_max_funding_velocity": "9000000000000000000",
          "algo_perps_maker_fee_ratio": "200000000000000",
          "algo_perps_taker_fee_ratio": "1000000000000000",
          "algo_perps_max_market_size": "5953850000000000000000000",
          "algo_perps_max_market_value": "500000000000000000000000",
          "algo_perps_initial_margin_ratio": "5190000000000000000",
          "algo_perps_maintenance_margin_scalar": "360000000000000000",
          "algo_perps_minimum_initial_margin_ratio": "50000000000000000",
          "algo_perps_flag_reward_ratio_d18": "300000000000000",
          "algo_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "algo_perps_max_seconds_in_liquidation_window": "30",
          "algo_perps_minimum_position_margin": "50000000000000000000",
          "algo_perps_locked_oi_ratio": "500000000000000000",
          "algo_perps_max_liquidation_pd": "500000000000000",
          "algo_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "9c44c14742b3b1657d4e079f57c8cc5e",
      "version": 7
    },
    "var.perps_apt_market_settings": {
      "artifacts": {
        "settings": {
          "apt_perps_market_id": "3600",
          "apt_perps_market_skew_scale": "6075000000000000000000000",
          "apt_perps_market_max_funding_velocity": "9000000000000000000",
          "apt_perps_maker_fee_ratio": "200000000000000",
          "apt_perps_taker_fee_ratio": "1000000000000000",
          "apt_perps_max_market_size": "352300000000000000000000",
          "apt_perps_max_market_value": "2000000000000000000000000",
          "apt_perps_initial_margin_ratio": "1000000000000000000",
          "apt_perps_maintenance_margin_scalar": "310000000000000000",
          "apt_perps_minimum_initial_margin_ratio": "50000000000000000",
          "apt_perps_flag_reward_ratio_d18": "300000000000000",
          "apt_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "apt_perps_max_seconds_in_liquidation_window": "30",
          "apt_perps_minimum_position_margin": "50000000000000000000",
          "apt_perps_locked_oi_ratio": "500000000000000000",
          "apt_perps_max_liquidation_pd": "500000000000000",
          "apt_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "55266f41a62f1eabaf538fecd538756a",
      "version": 7
    },
    "var.perps_arb_market_settings": {
      "artifacts": {
        "settings": {
          "arb_perps_market_id": "1600",
          "arb_perps_market_skew_scale": "82000000000000000000000000",
          "arb_perps_market_max_funding_velocity": "9000000000000000000",
          "arb_perps_maker_fee_ratio": "200000000000000",
          "arb_perps_taker_fee_ratio": "1000000000000000",
          "arb_perps_max_market_size": "2000000000000000000000000",
          "arb_perps_max_market_value": "1000000000000000000000000",
          "arb_perps_initial_margin_ratio": "4160000000000000000",
          "arb_perps_maintenance_margin_scalar": "380000000000000000",
          "arb_perps_minimum_initial_margin_ratio": "33333000000000000",
          "arb_perps_flag_reward_ratio_d18": "300000000000000",
          "arb_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "arb_perps_max_seconds_in_liquidation_window": "30",
          "arb_perps_minimum_position_margin": "50000000000000000000",
          "arb_perps_locked_oi_ratio": "500000000000000000",
          "arb_perps_max_liquidation_pd": "500000000000000",
          "arb_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "025bbc5cb4ae5012e2e0aff719bcd67f",
      "version": 7
    },
    "var.perps_arkm_market_settings": {
      "artifacts": {
        "settings": {
          "arkm_perps_market_id": "2600",
          "arkm_perps_market_skew_scale": "11000000000000000000000000",
          "arkm_perps_market_max_funding_velocity": "9000000000000000000",
          "arkm_perps_maker_fee_ratio": "200000000000000",
          "arkm_perps_taker_fee_ratio": "1000000000000000",
          "arkm_perps_max_market_size": "400000000000000000000000",
          "arkm_perps_max_market_value": "500000000000000000000000",
          "arkm_perps_initial_margin_ratio": "4430000000000000000",
          "arkm_perps_maintenance_margin_scalar": "440000000000000000",
          "arkm_perps_minimum_initial_margin_ratio": "50000000000000000",
          "arkm_perps_flag_reward_ratio_d18": "300000000000000",
          "arkm_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "arkm_perps_max_seconds_in_liquidation_window": "30",
          "arkm_perps_minimum_position_margin": "50000000000000000000",
          "arkm_perps_locked_oi_ratio": "500000000000000000",
          "arkm_perps_max_liquidation_pd": "500000000000000",
          "arkm_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "92a9b35c5ef60a1aec5839f7e4896e0b",
      "version": 7
    },
    "var.perps_atom_market_settings": {
      "artifacts": {
        "settings": {
          "atom_perps_market_id": "3700",
          "atom_perps_market_skew_scale": "11250000000000000000000000",
          "atom_perps_market_max_funding_velocity": "9000000000000000000",
          "atom_perps_maker_fee_ratio": "200000000000000",
          "atom_perps_taker_fee_ratio": "1000000000000000",
          "atom_perps_max_market_size": "329300000000000000000000",
          "atom_perps_max_market_value": "1000000000000000000000000",
          "atom_perps_initial_margin_ratio": "2490000000000000000",
          "atom_perps_maintenance_margin_scalar": "310000000000000000",
          "atom_perps_minimum_initial_margin_ratio": "50000000000000000",
          "atom_perps_flag_reward_ratio_d18": "300000000000000",
          "atom_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "atom_perps_max_seconds_in_liquidation_window": "30",
          "atom_perps_minimum_position_margin": "50000000000000000000",
          "atom_perps_locked_oi_ratio": "500000000000000000",
          "atom_perps_max_liquidation_pd": "500000000000000",
          "atom_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "1fa69fea898290bd03dd57f066aecf0a",
      "version": 7
    },
    "var.perps_avax_market_settings": {
      "artifacts": {
        "settings": {
          "avax_perps_market_id": "900",
          "avax_perps_market_skew_scale": "2500000000000000000000000",
          "avax_perps_market_max_funding_velocity": "9000000000000000000",
          "avax_perps_maker_fee_ratio": "200000000000000",
          "avax_perps_taker_fee_ratio": "1000000000000000",
          "avax_perps_max_market_size": "100000000000000000000000",
          "avax_perps_max_market_value": "2000000000000000000000000",
          "avax_perps_initial_margin_ratio": "9080000000000000000",
          "avax_perps_maintenance_margin_scalar": "360000000000000000",
          "avax_perps_minimum_initial_margin_ratio": "20000000000000000",
          "avax_perps_flag_reward_ratio_d18": "300000000000000",
          "avax_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "avax_perps_max_seconds_in_liquidation_window": "30",
          "avax_perps_minimum_position_margin": "50000000000000000000",
          "avax_perps_locked_oi_ratio": "500000000000000000",
          "avax_perps_max_liquidation_pd": "500000000000000",
          "avax_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "86f56840be98ef59c31b543b248a874d",
      "version": 7
    },
    "var.perps_axl_market_settings": {
      "artifacts": {
        "settings": {
          "axl_perps_market_id": "3200",
          "axl_perps_market_skew_scale": "10125000000000000000000000",
          "axl_perps_market_max_funding_velocity": "9000000000000000000",
          "axl_perps_maker_fee_ratio": "200000000000000",
          "axl_perps_taker_fee_ratio": "1000000000000000",
          "axl_perps_max_market_size": "1000000000000000000000000",
          "axl_perps_max_market_value": "500000000000000000000000",
          "axl_perps_initial_margin_ratio": "2850000000000000000",
          "axl_perps_maintenance_margin_scalar": "340000000000000000",
          "axl_perps_minimum_initial_margin_ratio": "50000000000000000",
          "axl_perps_flag_reward_ratio_d18": "300000000000000",
          "axl_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "axl_perps_max_seconds_in_liquidation_window": "30",
          "axl_perps_minimum_position_margin": "50000000000000000000",
          "axl_perps_locked_oi_ratio": "500000000000000000",
          "axl_perps_max_liquidation_pd": "500000000000000",
          "axl_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "483fc011872a450610f0bd9a6cface87",
      "version": 7
    },
    "var.perps_axs_market_settings": {
      "artifacts": {
        "settings": {
          "axs_perps_market_id": "3800",
          "axs_perps_market_skew_scale": "4218750000000000000000000",
          "axs_perps_market_max_funding_velocity": "9000000000000000000",
          "axs_perps_maker_fee_ratio": "200000000000000",
          "axs_perps_taker_fee_ratio": "1000000000000000",
          "axs_perps_max_market_size": "162000000000000000000000",
          "axs_perps_max_market_value": "500000000000000000000000",
          "axs_perps_initial_margin_ratio": "880000000000000000",
          "axs_perps_maintenance_margin_scalar": "310000000000000000",
          "axs_perps_minimum_initial_margin_ratio": "50000000000000000",
          "axs_perps_flag_reward_ratio_d18": "300000000000000",
          "axs_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "axs_perps_max_seconds_in_liquidation_window": "30",
          "axs_perps_minimum_position_margin": "50000000000000000000",
          "axs_perps_locked_oi_ratio": "500000000000000000",
          "axs_perps_max_liquidation_pd": "500000000000000",
          "axs_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "4f932b65e70284cb5912958e8d51f28b",
      "version": 7
    },
    "var.perps_bal_market_settings": {
      "artifacts": {
        "settings": {
          "bal_perps_market_id": "3900",
          "bal_perps_market_skew_scale": "1125000000000000000000000",
          "bal_perps_market_max_funding_velocity": "9000000000000000000",
          "bal_perps_maker_fee_ratio": "200000000000000",
          "bal_perps_taker_fee_ratio": "1000000000000000",
          "bal_perps_max_market_size": "377600000000000000000000",
          "bal_perps_max_market_value": "500000000000000000000000",
          "bal_perps_initial_margin_ratio": "3940000000000000000",
          "bal_perps_maintenance_margin_scalar": "350000000000000000",
          "bal_perps_minimum_initial_margin_ratio": "50000000000000000",
          "bal_perps_flag_reward_ratio_d18": "300000000000000",
          "bal_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "bal_perps_max_seconds_in_liquidation_window": "30",
          "bal_perps_minimum_position_margin": "50000000000000000000",
          "bal_perps_locked_oi_ratio": "500000000000000000",
          "bal_perps_max_liquidation_pd": "500000000000000",
          "bal_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "80919f4a4b486e200f771e92d7b994ab",
      "version": 7
    },
    "var.perps_bch_market_settings": {
      "artifacts": {
        "settings": {
          "bch_perps_market_id": "4000",
          "bch_perps_market_skew_scale": "168750000000000000000000",
          "bch_perps_market_max_funding_velocity": "9000000000000000000",
          "bch_perps_maker_fee_ratio": "200000000000000",
          "bch_perps_taker_fee_ratio": "1000000000000000",
          "bch_perps_max_market_size": "9350000000000000000000",
          "bch_perps_max_market_value": "2000000000000000000000000",
          "bch_perps_initial_margin_ratio": "1600000000000000000",
          "bch_perps_maintenance_margin_scalar": "320000000000000000",
          "bch_perps_minimum_initial_margin_ratio": "50000000000000000",
          "bch_perps_flag_reward_ratio_d18": "300000000000000",
          "bch_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "bch_perps_max_seconds_in_liquidation_window": "30",
          "bch_perps_minimum_position_margin": "50000000000000000000",
          "bch_perps_locked_oi_ratio": "500000000000000000",
          "bch_perps_max_liquidation_pd": "500000000000000",
          "bch_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "2c47c9ed1a23c1c91002bdc10fb25250",
      "version": 7
    },
    "var.perps_blur_market_settings": {
      "artifacts": {
        "settings": {
          "blur_perps_market_id": "4100",
          "blur_perps_market_skew_scale": "100000000000000000000000000",
          "blur_perps_market_max_funding_velocity": "9000000000000000000",
          "blur_perps_maker_fee_ratio": "200000000000000",
          "blur_perps_taker_fee_ratio": "1000000000000000",
          "blur_perps_max_market_size": "3329150000000000000000000",
          "blur_perps_max_market_value": "500000000000000000000000",
          "blur_perps_initial_margin_ratio": "1490000000000000000",
          "blur_perps_maintenance_margin_scalar": "370000000000000000",
          "blur_perps_minimum_initial_margin_ratio": "50000000000000000",
          "blur_perps_flag_reward_ratio_d18": "300000000000000",
          "blur_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "blur_perps_max_seconds_in_liquidation_window": "30",
          "blur_perps_minimum_position_margin": "50000000000000000000",
          "blur_perps_locked_oi_ratio": "500000000000000000",
          "blur_perps_max_liquidation_pd": "500000000000000",
          "blur_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "f61d507447abfd812ae6f2a6db77d17a",
      "version": 7
    },
    "var.perps_bnb_market_settings": {
      "artifacts": {
        "settings": {
          "bnb_perps_market_id": "1800",
          "bnb_perps_market_skew_scale": "375000000000000000000000",
          "bnb_perps_market_max_funding_velocity": "9000000000000000000",
          "bnb_perps_maker_fee_ratio": "200000000000000",
          "bnb_perps_taker_fee_ratio": "1000000000000000",
          "bnb_perps_max_market_size": "7000000000000000000000",
          "bnb_perps_max_market_value": "2000000000000000000000000",
          "bnb_perps_initial_margin_ratio": "10720000000000000000",
          "bnb_perps_maintenance_margin_scalar": "350000000000000000",
          "bnb_perps_minimum_initial_margin_ratio": "20000000000000000",
          "bnb_perps_flag_reward_ratio_d18": "300000000000000",
          "bnb_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "bnb_perps_max_seconds_in_liquidation_window": "30",
          "bnb_perps_minimum_position_margin": "50000000000000000000",
          "bnb_perps_locked_oi_ratio": "500000000000000000",
          "bnb_perps_max_liquidation_pd": "500000000000000",
          "bnb_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "3d98706a969e66f33bb4a6120d6baaec",
      "version": 7
    },
    "var.perps_bome_market_settings": {
      "artifacts": {
        "settings": {
          "bome_perps_market_id": "2900",
          "bome_perps_market_skew_scale": "3750000000000000000000000000",
          "bome_perps_market_max_funding_velocity": "9000000000000000000",
          "bome_perps_maker_fee_ratio": "200000000000000",
          "bome_perps_taker_fee_ratio": "1000000000000000",
          "bome_perps_max_market_size": "229513950000000000000000000",
          "bome_perps_max_market_value": "1000000000000000000000000",
          "bome_perps_initial_margin_ratio": "1440000000000000000",
          "bome_perps_maintenance_margin_scalar": "380000000000000000",
          "bome_perps_minimum_initial_margin_ratio": "50000000000000000",
          "bome_perps_flag_reward_ratio_d18": "300000000000000",
          "bome_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "bome_perps_max_seconds_in_liquidation_window": "30",
          "bome_perps_minimum_position_margin": "50000000000000000000",
          "bome_perps_locked_oi_ratio": "500000000000000000",
          "bome_perps_max_liquidation_pd": "500000000000000",
          "bome_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "b879f55b6d76a9840ebe7f8d626c209c",
      "version": 7
    },
    "var.perps_bonk_market_settings": {
      "artifacts": {
        "settings": {
          "bonk_perps_market_id": "1400",
          "bonk_perps_market_skew_scale": "1600000000000000000000000000000",
          "bonk_perps_market_max_funding_velocity": "9000000000000000000",
          "bonk_perps_maker_fee_ratio": "200000000000000",
          "bonk_perps_taker_fee_ratio": "1000000000000000",
          "bonk_perps_max_market_size": "135525228000000000000000000000",
          "bonk_perps_max_market_value": "2000000000000000000000000",
          "bonk_perps_initial_margin_ratio": "2550000000000000000",
          "bonk_perps_maintenance_margin_scalar": "370000000000000000",
          "bonk_perps_minimum_initial_margin_ratio": "50000000000000000",
          "bonk_perps_flag_reward_ratio_d18": "300000000000000",
          "bonk_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "bonk_perps_max_seconds_in_liquidation_window": "30",
          "bonk_perps_minimum_position_margin": "50000000000000000000",
          "bonk_perps_locked_oi_ratio": "500000000000000000",
          "bonk_perps_max_liquidation_pd": "500000000000000",
          "bonk_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "1018ed685b1399a7e75f710eb2399477",
      "version": 7
    },
    "var.perps_btc_market_settings": {
      "artifacts": {
        "settings": {
          "btc_perps_market_id": "200",
          "btc_perps_market_skew_scale": "35000000000000000000000",
          "btc_perps_market_max_funding_velocity": "4000000000000000000",
          "btc_perps_maker_fee_ratio": "1000000000000",
          "btc_perps_taker_fee_ratio": "500000000000000",
          "btc_perps_max_market_size": "1200000000000000000000",
          "btc_perps_max_market_value": "50000000000000000000000000",
          "btc_perps_initial_margin_ratio": "1540000000000000000",
          "btc_perps_maintenance_margin_scalar": "280000000000000000",
          "btc_perps_minimum_initial_margin_ratio": "20000000000000000",
          "btc_perps_flag_reward_ratio_d18": "300000000000000",
          "btc_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "btc_perps_max_seconds_in_liquidation_window": "30",
          "btc_perps_minimum_position_margin": "50000000000000000000",
          "btc_perps_locked_oi_ratio": "250000000000000000",
          "btc_perps_max_liquidation_pd": "500000000000000",
          "btc_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "137f45268a1ba2dd9a236b635c5017be",
      "version": 7
    },
    "var.perps_collateral_USD_settings": {
      "artifacts": {
        "settings": {
          "usd_max_collateral_amount": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
          "usd_upper_limit_discount": "0",
          "usd_lower_limit_discount": "0",
          "usd_discount_scalar": "0"
        }
      },
      "hash": "9e9baada28207bca9532a219c0f0c3dc",
      "version": 7
    },
    "var.perps_comp_market_settings": {
      "artifacts": {
        "settings": {
          "comp_perps_market_id": "4200",
          "comp_perps_market_skew_scale": "241876000000000000000000",
          "comp_perps_market_max_funding_velocity": "9000000000000000000",
          "comp_perps_maker_fee_ratio": "200000000000000",
          "comp_perps_taker_fee_ratio": "1000000000000000",
          "comp_perps_max_market_size": "17000000000000000000000",
          "comp_perps_max_market_value": "500000000000000000000000",
          "comp_perps_initial_margin_ratio": "1800000000000000000",
          "comp_perps_maintenance_margin_scalar": "410000000000000000",
          "comp_perps_minimum_initial_margin_ratio": "50000000000000000",
          "comp_perps_flag_reward_ratio_d18": "300000000000000",
          "comp_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "comp_perps_max_seconds_in_liquidation_window": "30",
          "comp_perps_minimum_position_margin": "50000000000000000000",
          "comp_perps_locked_oi_ratio": "500000000000000000",
          "comp_perps_max_liquidation_pd": "500000000000000",
          "comp_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "ac988e3a0234b5dc34e502056029f9e9",
      "version": 7
    },
    "var.perps_crv_market_settings": {
      "artifacts": {
        "settings": {
          "crv_perps_market_id": "4300",
          "crv_perps_market_skew_scale": "240000000000000000000000000",
          "crv_perps_market_max_funding_velocity": "9000000000000000000",
          "crv_perps_maker_fee_ratio": "200000000000000",
          "crv_perps_taker_fee_ratio": "1000000000000000",
          "crv_perps_max_market_size": "5814100000000000000000000",
          "crv_perps_max_market_value": "1000000000000000000000000",
          "crv_perps_initial_margin_ratio": "4560000000000000000",
          "crv_perps_maintenance_margin_scalar": "390000000000000000",
          "crv_perps_minimum_initial_margin_ratio": "50000000000000000",
          "crv_perps_flag_reward_ratio_d18": "300000000000000",
          "crv_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "crv_perps_max_seconds_in_liquidation_window": "30",
          "crv_perps_minimum_position_margin": "50000000000000000000",
          "crv_perps_locked_oi_ratio": "500000000000000000",
          "crv_perps_max_liquidation_pd": "500000000000000",
          "crv_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "32e28433fa2e2e0f50d508ce2e472e1e",
      "version": 7
    },
    "var.perps_doge_market_settings": {
      "artifacts": {
        "settings": {
          "doge_perps_market_id": "800",
          "doge_perps_market_skew_scale": "1578000000000000000000000000",
          "doge_perps_market_max_funding_velocity": "9000000000000000000",
          "doge_perps_maker_fee_ratio": "200000000000000",
          "doge_perps_taker_fee_ratio": "1000000000000000",
          "doge_perps_max_market_size": "25000000000000000000000000",
          "doge_perps_max_market_value": "2000000000000000000000000",
          "doge_perps_initial_margin_ratio": "6900000000000000000",
          "doge_perps_maintenance_margin_scalar": "300000000000000000",
          "doge_perps_minimum_initial_margin_ratio": "20000000000000000",
          "doge_perps_flag_reward_ratio_d18": "300000000000000",
          "doge_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "doge_perps_max_seconds_in_liquidation_window": "30",
          "doge_perps_minimum_position_margin": "50000000000000000000",
          "doge_perps_locked_oi_ratio": "500000000000000000",
          "doge_perps_max_liquidation_pd": "500000000000000",
          "doge_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "6f2807d3ec1f1b85cb4b6b93f8324a1e",
      "version": 7
    },
    "var.perps_dot_market_settings": {
      "artifacts": {
        "settings": {
          "dot_perps_market_id": "4400",
          "dot_perps_market_skew_scale": "15000000000000000000000000",
          "dot_perps_market_max_funding_velocity": "9000000000000000000",
          "dot_perps_maker_fee_ratio": "200000000000000",
          "dot_perps_taker_fee_ratio": "1000000000000000",
          "dot_perps_max_market_size": "724950000000000000000000",
          "dot_perps_max_market_value": "2000000000000000000000000",
          "dot_perps_initial_margin_ratio": "2090000000000000000",
          "dot_perps_maintenance_margin_scalar": "320000000000000000",
          "dot_perps_minimum_initial_margin_ratio": "50000000000000000",
          "dot_perps_flag_reward_ratio_d18": "300000000000000",
          "dot_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "dot_perps_max_seconds_in_liquidation_window": "30",
          "dot_perps_minimum_position_margin": "50000000000000000000",
          "dot_perps_locked_oi_ratio": "500000000000000000",
          "dot_perps_max_liquidation_pd": "500000000000000",
          "dot_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "6398b21a979625d3e78ebcabf5a6b41c",
      "version": 7
    },
    "var.perps_dydx_market_settings": {
      "artifacts": {
        "settings": {
          "dydx_perps_market_id": "4500",
          "dydx_perps_market_skew_scale": "45000000000000000000000000",
          "dydx_perps_market_max_funding_velocity": "9000000000000000000",
          "dydx_perps_maker_fee_ratio": "200000000000000",
          "dydx_perps_taker_fee_ratio": "1000000000000000",
          "dydx_perps_max_market_size": "1703200000000000000000000",
          "dydx_perps_max_market_value": "1000000000000000000000000",
          "dydx_perps_initial_margin_ratio": "1450000000000000000",
          "dydx_perps_maintenance_margin_scalar": "340000000000000000",
          "dydx_perps_minimum_initial_margin_ratio": "50000000000000000",
          "dydx_perps_flag_reward_ratio_d18": "300000000000000",
          "dydx_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "dydx_perps_max_seconds_in_liquidation_window": "30",
          "dydx_perps_minimum_position_margin": "50000000000000000000",
          "dydx_perps_locked_oi_ratio": "500000000000000000",
          "dydx_perps_max_liquidation_pd": "500000000000000",
          "dydx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "d09b5bb18ebdf328c6ec8dc7523a58f3",
      "version": 7
    },
    "var.perps_ena_market_settings": {
      "artifacts": {
        "settings": {
          "ena_perps_market_id": "700",
          "ena_perps_market_skew_scale": "102000000000000000000000000",
          "ena_perps_market_max_funding_velocity": "9000000000000000000",
          "ena_perps_maker_fee_ratio": "200000000000000",
          "ena_perps_taker_fee_ratio": "1000000000000000",
          "ena_perps_max_market_size": "3000000000000000000000000",
          "ena_perps_max_market_value": "1000000000000000000000000",
          "ena_perps_initial_margin_ratio": "3460000000000000000",
          "ena_perps_maintenance_margin_scalar": "380000000000000000",
          "ena_perps_minimum_initial_margin_ratio": "50000000000000000",
          "ena_perps_flag_reward_ratio_d18": "300000000000000",
          "ena_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ena_perps_max_seconds_in_liquidation_window": "30",
          "ena_perps_minimum_position_margin": "50000000000000000000",
          "ena_perps_locked_oi_ratio": "500000000000000000",
          "ena_perps_max_liquidation_pd": "500000000000000",
          "ena_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "af0d982e6ab871c1f07aec4d9cafd321",
      "version": 7
    },
    "var.perps_eos_market_settings": {
      "artifacts": {
        "settings": {
          "eos_perps_market_id": "4600",
          "eos_perps_market_skew_scale": "72000000000000000000000000",
          "eos_perps_market_max_funding_velocity": "9000000000000000000",
          "eos_perps_maker_fee_ratio": "200000000000000",
          "eos_perps_taker_fee_ratio": "1000000000000000",
          "eos_perps_max_market_size": "3182150000000000000000000",
          "eos_perps_max_market_value": "1000000000000000000000000",
          "eos_perps_initial_margin_ratio": "2470000000000000000",
          "eos_perps_maintenance_margin_scalar": "330000000000000000",
          "eos_perps_minimum_initial_margin_ratio": "50000000000000000",
          "eos_perps_flag_reward_ratio_d18": "300000000000000",
          "eos_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "eos_perps_max_seconds_in_liquidation_window": "30",
          "eos_perps_minimum_position_margin": "50000000000000000000",
          "eos_perps_locked_oi_ratio": "500000000000000000",
          "eos_perps_max_liquidation_pd": "500000000000000",
          "eos_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "ab89af7593ebc502d8a874f787b5937b",
      "version": 7
    },
    "var.perps_etc_market_settings": {
      "artifacts": {
        "settings": {
          "etc_perps_market_id": "4700",
          "etc_perps_market_skew_scale": "3375000000000000000000000",
          "etc_perps_market_max_funding_velocity": "9000000000000000000",
          "etc_perps_maker_fee_ratio": "200000000000000",
          "etc_perps_taker_fee_ratio": "1000000000000000",
          "etc_perps_max_market_size": "80750000000000000000000",
          "etc_perps_max_market_value": "1000000000000000000000000",
          "etc_perps_initial_margin_ratio": "2710000000000000000",
          "etc_perps_maintenance_margin_scalar": "330000000000000000",
          "etc_perps_minimum_initial_margin_ratio": "50000000000000000",
          "etc_perps_flag_reward_ratio_d18": "300000000000000",
          "etc_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "etc_perps_max_seconds_in_liquidation_window": "30",
          "etc_perps_minimum_position_margin": "50000000000000000000",
          "etc_perps_locked_oi_ratio": "500000000000000000",
          "etc_perps_max_liquidation_pd": "500000000000000",
          "etc_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "75032ae7d463522f1785d8fcdc0e6b37",
      "version": 7
    },
    "var.perps_eth_market_settings": {
      "artifacts": {
        "settings": {
          "eth_perps_market_id": "100",
          "eth_perps_market_skew_scale": "350000000000000000000000",
          "eth_perps_market_max_funding_velocity": "4000000000000000000",
          "eth_perps_maker_fee_ratio": "1000000000000",
          "eth_perps_taker_fee_ratio": "500000000000000",
          "eth_perps_max_market_size": "30700000000000000000000",
          "eth_perps_max_market_value": "50000000000000000000000000",
          "eth_perps_initial_margin_ratio": "1160000000000000000",
          "eth_perps_maintenance_margin_scalar": "280000000000000000",
          "eth_perps_minimum_initial_margin_ratio": "20000000000000000",
          "eth_perps_flag_reward_ratio_d18": "300000000000000",
          "eth_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "eth_perps_max_seconds_in_liquidation_window": "30",
          "eth_perps_minimum_position_margin": "50000000000000000000",
          "eth_perps_locked_oi_ratio": "250000000000000000",
          "eth_perps_max_liquidation_pd": "500000000000000",
          "eth_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "e5dcc522ea13dc839a275ee40c3c956b",
      "version": 7
    },
    "var.perps_ethbtc_market_settings": {
      "artifacts": {
        "settings": {
          "ethbtc_perps_market_id": "4800",
          "ethbtc_perps_market_skew_scale": "3400000000000000000000000000",
          "ethbtc_perps_market_max_funding_velocity": "4000000000000000000",
          "ethbtc_perps_maker_fee_ratio": "1000000000000",
          "ethbtc_perps_taker_fee_ratio": "500000000000000",
          "ethbtc_perps_max_market_size": "72226506000000000000000000",
          "ethbtc_perps_max_market_value": "2000000000000000000000000",
          "ethbtc_perps_initial_margin_ratio": "1390000000000000000",
          "ethbtc_perps_maintenance_margin_scalar": "260000000000000000",
          "ethbtc_perps_minimum_initial_margin_ratio": "20000000000000000",
          "ethbtc_perps_flag_reward_ratio_d18": "300000000000000",
          "ethbtc_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ethbtc_perps_max_seconds_in_liquidation_window": "30",
          "ethbtc_perps_minimum_position_margin": "50000000000000000000",
          "ethbtc_perps_locked_oi_ratio": "500000000000000000",
          "ethbtc_perps_max_liquidation_pd": "500000000000000",
          "ethbtc_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "7d7770a737ff6ca670a587ce1e469bde",
      "version": 7
    },
    "var.perps_ethfi_market_settings": {
      "artifacts": {
        "settings": {
          "ethfi_perps_market_id": "3000",
          "ethfi_perps_market_skew_scale": "16500000000000000000000000",
          "ethfi_perps_market_max_funding_velocity": "9000000000000000000",
          "ethfi_perps_maker_fee_ratio": "200000000000000",
          "ethfi_perps_taker_fee_ratio": "1000000000000000",
          "ethfi_perps_max_market_size": "300000000000000000000000",
          "ethfi_perps_max_market_value": "500000000000000000000000",
          "ethfi_perps_initial_margin_ratio": "2120000000000000000",
          "ethfi_perps_maintenance_margin_scalar": "380000000000000000",
          "ethfi_perps_minimum_initial_margin_ratio": "50000000000000000",
          "ethfi_perps_flag_reward_ratio_d18": "300000000000000",
          "ethfi_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ethfi_perps_max_seconds_in_liquidation_window": "30",
          "ethfi_perps_minimum_position_margin": "50000000000000000000",
          "ethfi_perps_locked_oi_ratio": "500000000000000000",
          "ethfi_perps_max_liquidation_pd": "500000000000000",
          "ethfi_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "d5c64145445b019b3f5d2bb110845638",
      "version": 7
    },
    "var.perps_fil_market_settings": {
      "artifacts": {
        "settings": {
          "fil_perps_market_id": "4900",
          "fil_perps_market_skew_scale": "12750000000000000000000000",
          "fil_perps_market_max_funding_velocity": "9000000000000000000",
          "fil_perps_maker_fee_ratio": "200000000000000",
          "fil_perps_taker_fee_ratio": "1000000000000000",
          "fil_perps_max_market_size": "812100000000000000000000",
          "fil_perps_max_market_value": "2000000000000000000000000",
          "fil_perps_initial_margin_ratio": "1810000000000000000",
          "fil_perps_maintenance_margin_scalar": "260000000000000000",
          "fil_perps_minimum_initial_margin_ratio": "50000000000000000",
          "fil_perps_flag_reward_ratio_d18": "300000000000000",
          "fil_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "fil_perps_max_seconds_in_liquidation_window": "30",
          "fil_perps_minimum_position_margin": "50000000000000000000",
          "fil_perps_locked_oi_ratio": "500000000000000000",
          "fil_perps_max_liquidation_pd": "500000000000000",
          "fil_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "6e4bb315fb5f471f2c604468fe563564",
      "version": 7
    },
    "var.perps_flow_market_settings": {
      "artifacts": {
        "settings": {
          "flow_perps_market_id": "5000",
          "flow_perps_market_skew_scale": "15000000000000000000000000",
          "flow_perps_market_max_funding_velocity": "9000000000000000000",
          "flow_perps_maker_fee_ratio": "200000000000000",
          "flow_perps_taker_fee_ratio": "1000000000000000",
          "flow_perps_max_market_size": "1380350000000000000000000",
          "flow_perps_max_market_value": "500000000000000000000000",
          "flow_perps_initial_margin_ratio": "9280000000000000000",
          "flow_perps_maintenance_margin_scalar": "280000000000000000",
          "flow_perps_minimum_initial_margin_ratio": "100000000000000000",
          "flow_perps_flag_reward_ratio_d18": "300000000000000",
          "flow_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "flow_perps_max_seconds_in_liquidation_window": "30",
          "flow_perps_minimum_position_margin": "50000000000000000000",
          "flow_perps_locked_oi_ratio": "500000000000000000",
          "flow_perps_max_liquidation_pd": "500000000000000",
          "flow_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "410eb9418193ed08e2bd6f0d70c77826",
      "version": 7
    },
    "var.perps_ftm_market_settings": {
      "artifacts": {
        "settings": {
          "ftm_perps_market_id": "1500",
          "ftm_perps_market_skew_scale": "118000000000000000000000000",
          "ftm_perps_market_max_funding_velocity": "9000000000000000000",
          "ftm_perps_maker_fee_ratio": "200000000000000",
          "ftm_perps_taker_fee_ratio": "1000000000000000",
          "ftm_perps_max_market_size": "4655350000000000000000000",
          "ftm_perps_max_market_value": "2000000000000000000000000",
          "ftm_perps_initial_margin_ratio": "5580000000000000000",
          "ftm_perps_maintenance_margin_scalar": "380000000000000000",
          "ftm_perps_minimum_initial_margin_ratio": "33333000000000000",
          "ftm_perps_flag_reward_ratio_d18": "300000000000000",
          "ftm_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ftm_perps_max_seconds_in_liquidation_window": "30",
          "ftm_perps_minimum_position_margin": "50000000000000000000",
          "ftm_perps_locked_oi_ratio": "500000000000000000",
          "ftm_perps_max_liquidation_pd": "500000000000000",
          "ftm_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "ffe9b11befe3920e79c101278d89106e",
      "version": 7
    },
    "var.perps_fxs_market_settings": {
      "artifacts": {
        "settings": {
          "fxs_perps_market_id": "5100",
          "fxs_perps_market_skew_scale": "2104687000000000000000000",
          "fxs_perps_market_max_funding_velocity": "9000000000000000000",
          "fxs_perps_maker_fee_ratio": "200000000000000",
          "fxs_perps_taker_fee_ratio": "1000000000000000",
          "fxs_perps_max_market_size": "371700000000000000000000",
          "fxs_perps_max_market_value": "500000000000000000000000",
          "fxs_perps_initial_margin_ratio": "2590000000000000000",
          "fxs_perps_maintenance_margin_scalar": "340000000000000000",
          "fxs_perps_minimum_initial_margin_ratio": "66660000000000000",
          "fxs_perps_flag_reward_ratio_d18": "300000000000000",
          "fxs_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "fxs_perps_max_seconds_in_liquidation_window": "30",
          "fxs_perps_minimum_position_margin": "50000000000000000000",
          "fxs_perps_locked_oi_ratio": "500000000000000000",
          "fxs_perps_max_liquidation_pd": "500000000000000",
          "fxs_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "8c48c644a2fd93c62ffb7ea7829a9cee",
      "version": 7
    },
    "var.perps_gala_market_settings": {
      "artifacts": {
        "settings": {
          "gala_perps_market_id": "2700",
          "gala_perps_market_skew_scale": "1125000000000000000000000000",
          "gala_perps_market_max_funding_velocity": "9000000000000000000",
          "gala_perps_maker_fee_ratio": "200000000000000",
          "gala_perps_taker_fee_ratio": "1000000000000000",
          "gala_perps_max_market_size": "36165750000000000000000000",
          "gala_perps_max_market_value": "500000000000000000000000",
          "gala_perps_initial_margin_ratio": "1290000000000000000",
          "gala_perps_maintenance_margin_scalar": "350000000000000000",
          "gala_perps_minimum_initial_margin_ratio": "50000000000000000",
          "gala_perps_flag_reward_ratio_d18": "300000000000000",
          "gala_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "gala_perps_max_seconds_in_liquidation_window": "30",
          "gala_perps_minimum_position_margin": "50000000000000000000",
          "gala_perps_locked_oi_ratio": "500000000000000000",
          "gala_perps_max_liquidation_pd": "500000000000000",
          "gala_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "b69ba905db607a3aa54cd00b3a48c19a",
      "version": 7
    },
    "var.perps_gmx_market_settings": {
      "artifacts": {
        "settings": {
          "gmx_perps_market_id": "2200",
          "gmx_perps_market_skew_scale": "250000000000000000000000",
          "gmx_perps_market_max_funding_velocity": "9000000000000000000",
          "gmx_perps_maker_fee_ratio": "200000000000000",
          "gmx_perps_taker_fee_ratio": "1000000000000000",
          "gmx_perps_max_market_size": "35000000000000000000000",
          "gmx_perps_max_market_value": "500000000000000000000000",
          "gmx_perps_initial_margin_ratio": "1270000000000000000",
          "gmx_perps_maintenance_margin_scalar": "440000000000000000",
          "gmx_perps_minimum_initial_margin_ratio": "50000000000000000",
          "gmx_perps_flag_reward_ratio_d18": "300000000000000",
          "gmx_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "gmx_perps_max_seconds_in_liquidation_window": "30",
          "gmx_perps_minimum_position_margin": "50000000000000000000",
          "gmx_perps_locked_oi_ratio": "500000000000000000",
          "gmx_perps_max_liquidation_pd": "500000000000000",
          "gmx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "ebfacec581fee589eddb2141ee5c8805",
      "version": 7
    },
    "var.perps_grt_market_settings": {
      "artifacts": {
        "settings": {
          "grt_perps_market_id": "5200",
          "grt_perps_market_skew_scale": "112500000000000000000000000",
          "grt_perps_market_max_funding_velocity": "9000000000000000000",
          "grt_perps_maker_fee_ratio": "200000000000000",
          "grt_perps_taker_fee_ratio": "1000000000000000",
          "grt_perps_max_market_size": "4516800000000000000000000",
          "grt_perps_max_market_value": "500000000000000000000000",
          "grt_perps_initial_margin_ratio": "4220000000000000000",
          "grt_perps_maintenance_margin_scalar": "390000000000000000",
          "grt_perps_minimum_initial_margin_ratio": "50000000000000000",
          "grt_perps_flag_reward_ratio_d18": "300000000000000",
          "grt_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "grt_perps_max_seconds_in_liquidation_window": "30",
          "grt_perps_minimum_position_margin": "50000000000000000000",
          "grt_perps_locked_oi_ratio": "500000000000000000",
          "grt_perps_max_liquidation_pd": "500000000000000",
          "grt_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "537325482b0e9feb4e2f17f938f06e15",
      "version": 7
    },
    "var.perps_icp_market_settings": {
      "artifacts": {
        "settings": {
          "icp_perps_market_id": "5300",
          "icp_perps_market_skew_scale": "3000000000000000000000000",
          "icp_perps_market_max_funding_velocity": "9000000000000000000",
          "icp_perps_maker_fee_ratio": "200000000000000",
          "icp_perps_taker_fee_ratio": "1000000000000000",
          "icp_perps_max_market_size": "91100000000000000000000",
          "icp_perps_max_market_value": "500000000000000000000000",
          "icp_perps_initial_margin_ratio": "1860000000000000000",
          "icp_perps_maintenance_margin_scalar": "440000000000000000",
          "icp_perps_minimum_initial_margin_ratio": "50000000000000000",
          "icp_perps_flag_reward_ratio_d18": "300000000000000",
          "icp_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "icp_perps_max_seconds_in_liquidation_window": "30",
          "icp_perps_minimum_position_margin": "50000000000000000000",
          "icp_perps_locked_oi_ratio": "500000000000000000",
          "icp_perps_max_liquidation_pd": "500000000000000",
          "icp_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "0f3e7bf46c6f2f001884f52e4fa7c427",
      "version": 7
    },
    "var.perps_imx_market_settings": {
      "artifacts": {
        "settings": {
          "imx_perps_market_id": "5400",
          "imx_perps_market_skew_scale": "8400000000000000000000000",
          "imx_perps_market_max_funding_velocity": "9000000000000000000",
          "imx_perps_maker_fee_ratio": "200000000000000",
          "imx_perps_taker_fee_ratio": "1000000000000000",
          "imx_perps_max_market_size": "508750000000000000000000",
          "imx_perps_max_market_value": "500000000000000000000000",
          "imx_perps_initial_margin_ratio": "1950000000000000000",
          "imx_perps_maintenance_margin_scalar": "400000000000000000",
          "imx_perps_minimum_initial_margin_ratio": "50000000000000000",
          "imx_perps_flag_reward_ratio_d18": "300000000000000",
          "imx_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "imx_perps_max_seconds_in_liquidation_window": "30",
          "imx_perps_minimum_position_margin": "50000000000000000000",
          "imx_perps_locked_oi_ratio": "500000000000000000",
          "imx_perps_max_liquidation_pd": "500000000000000",
          "imx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "030059b816ee390c11272c4c4de8300c",
      "version": 7
    },
    "var.perps_inj_market_settings": {
      "artifacts": {
        "settings": {
          "inj_perps_market_id": "2100",
          "inj_perps_market_skew_scale": "2250000000000000000000000",
          "inj_perps_market_max_funding_velocity": "9000000000000000000",
          "inj_perps_maker_fee_ratio": "200000000000000",
          "inj_perps_taker_fee_ratio": "1000000000000000",
          "inj_perps_max_market_size": "73500000000000000000000",
          "inj_perps_max_market_value": "1000000000000000000000000",
          "inj_perps_initial_margin_ratio": "1310000000000000000",
          "inj_perps_maintenance_margin_scalar": "460000000000000000",
          "inj_perps_minimum_initial_margin_ratio": "50000000000000000",
          "inj_perps_flag_reward_ratio_d18": "300000000000000",
          "inj_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "inj_perps_max_seconds_in_liquidation_window": "30",
          "inj_perps_minimum_position_margin": "50000000000000000000",
          "inj_perps_locked_oi_ratio": "500000000000000000",
          "inj_perps_max_liquidation_pd": "500000000000000",
          "inj_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "83efe484b5351d94dec1e04809ce342b",
      "version": 7
    },
    "var.perps_jto_market_settings": {
      "artifacts": {
        "settings": {
          "jto_perps_market_id": "5500",
          "jto_perps_market_skew_scale": "8000000000000000000000000",
          "jto_perps_market_max_funding_velocity": "9000000000000000000",
          "jto_perps_maker_fee_ratio": "200000000000000",
          "jto_perps_taker_fee_ratio": "1000000000000000",
          "jto_perps_max_market_size": "369800000000000000000000",
          "jto_perps_max_market_value": "500000000000000000000000",
          "jto_perps_initial_margin_ratio": "1490000000000000000",
          "jto_perps_maintenance_margin_scalar": "380000000000000000",
          "jto_perps_minimum_initial_margin_ratio": "50000000000000000",
          "jto_perps_flag_reward_ratio_d18": "300000000000000",
          "jto_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "jto_perps_max_seconds_in_liquidation_window": "30",
          "jto_perps_minimum_position_margin": "50000000000000000000",
          "jto_perps_locked_oi_ratio": "500000000000000000",
          "jto_perps_max_liquidation_pd": "500000000000000",
          "jto_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "61448eeaa1fcb4c3ccf9429bb64f88c2",
      "version": 7
    },
    "var.perps_jup_market_settings": {
      "artifacts": {
        "settings": {
          "jup_perps_market_id": "5600",
          "jup_perps_market_skew_scale": "33750000000000000000000000",
          "jup_perps_market_max_funding_velocity": "9000000000000000000",
          "jup_perps_maker_fee_ratio": "200000000000000",
          "jup_perps_taker_fee_ratio": "1000000000000000",
          "jup_perps_max_market_size": "967850000000000000000000",
          "jup_perps_max_market_value": "500000000000000000000000",
          "jup_perps_initial_margin_ratio": "3350000000000000000",
          "jup_perps_maintenance_margin_scalar": "370000000000000000",
          "jup_perps_minimum_initial_margin_ratio": "50000000000000000",
          "jup_perps_flag_reward_ratio_d18": "300000000000000",
          "jup_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "jup_perps_max_seconds_in_liquidation_window": "30",
          "jup_perps_minimum_position_margin": "50000000000000000000",
          "jup_perps_locked_oi_ratio": "500000000000000000",
          "jup_perps_max_liquidation_pd": "500000000000000",
          "jup_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "fbe60ad1ee4fd2b4693c555fa69fb84e",
      "version": 7
    },
    "var.perps_ldo_market_settings": {
      "artifacts": {
        "settings": {
          "ldo_perps_market_id": "5700",
          "ldo_perps_market_skew_scale": "21000000000000000000000000",
          "ldo_perps_market_max_funding_velocity": "9000000000000000000",
          "ldo_perps_maker_fee_ratio": "200000000000000",
          "ldo_perps_taker_fee_ratio": "1000000000000000",
          "ldo_perps_max_market_size": "695300000000000000000000",
          "ldo_perps_max_market_value": "500000000000000000000000",
          "ldo_perps_initial_margin_ratio": "1250000000000000000",
          "ldo_perps_maintenance_margin_scalar": "340000000000000000",
          "ldo_perps_minimum_initial_margin_ratio": "50000000000000000",
          "ldo_perps_flag_reward_ratio_d18": "300000000000000",
          "ldo_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ldo_perps_max_seconds_in_liquidation_window": "30",
          "ldo_perps_minimum_position_margin": "50000000000000000000",
          "ldo_perps_locked_oi_ratio": "500000000000000000",
          "ldo_perps_max_liquidation_pd": "500000000000000",
          "ldo_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "c0722c0a8d3f588f1a9dc95957b948a8",
      "version": 7
    },
    "var.perps_link_market_settings": {
      "artifacts": {
        "settings": {
          "link_perps_market_id": "1900",
          "link_perps_market_skew_scale": "5625000000000000000000000",
          "link_perps_market_max_funding_velocity": "9000000000000000000",
          "link_perps_maker_fee_ratio": "200000000000000",
          "link_perps_taker_fee_ratio": "1000000000000000",
          "link_perps_max_market_size": "265650000000000000000000",
          "link_perps_max_market_value": "2000000000000000000000000",
          "link_perps_initial_margin_ratio": "6730000000000000000",
          "link_perps_maintenance_margin_scalar": "370000000000000000",
          "link_perps_minimum_initial_margin_ratio": "20000000000000000",
          "link_perps_flag_reward_ratio_d18": "300000000000000",
          "link_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "link_perps_max_seconds_in_liquidation_window": "30",
          "link_perps_minimum_position_margin": "50000000000000000000",
          "link_perps_locked_oi_ratio": "500000000000000000",
          "link_perps_max_liquidation_pd": "500000000000000",
          "link_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "e6e185a99f67da7403a2ab6864b34e2c",
      "version": 7
    },
    "var.perps_ltc_market_settings": {
      "artifacts": {
        "settings": {
          "ltc_perps_market_id": "5800",
          "ltc_perps_market_skew_scale": "1687500000000000000000000",
          "ltc_perps_market_max_funding_velocity": "9000000000000000000",
          "ltc_perps_maker_fee_ratio": "200000000000000",
          "ltc_perps_taker_fee_ratio": "1000000000000000",
          "ltc_perps_max_market_size": "45400000000000000000000",
          "ltc_perps_max_market_value": "2000000000000000000000000",
          "ltc_perps_initial_margin_ratio": "5000000000000000",
          "ltc_perps_maintenance_margin_scalar": "400000000000000000",
          "ltc_perps_minimum_initial_margin_ratio": "20000000000000000",
          "ltc_perps_flag_reward_ratio_d18": "300000000000000",
          "ltc_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ltc_perps_max_seconds_in_liquidation_window": "30",
          "ltc_perps_minimum_position_margin": "50000000000000000000",
          "ltc_perps_locked_oi_ratio": "500000000000000000",
          "ltc_perps_max_liquidation_pd": "500000000000000",
          "ltc_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "fe420ba7f490c4b80f666b772ac73c41",
      "version": 7
    },
    "var.perps_matic_market_settings": {
      "artifacts": {
        "settings": {
          "matic_perps_market_id": "1700",
          "matic_perps_market_skew_scale": "84000000000000000000000000",
          "matic_perps_market_max_funding_velocity": "9000000000000000000",
          "matic_perps_maker_fee_ratio": "200000000000000",
          "matic_perps_taker_fee_ratio": "1000000000000000",
          "matic_perps_max_market_size": "0",
          "matic_perps_max_market_value": "0",
          "matic_perps_initial_margin_ratio": "4410000000000000000",
          "matic_perps_maintenance_margin_scalar": "260000000000000000",
          "matic_perps_minimum_initial_margin_ratio": "20000000000000000",
          "matic_perps_flag_reward_ratio_d18": "300000000000000",
          "matic_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "matic_perps_max_seconds_in_liquidation_window": "30",
          "matic_perps_minimum_position_margin": "50000000000000000000",
          "matic_perps_locked_oi_ratio": "500000000000000000",
          "matic_perps_max_liquidation_pd": "500000000000000",
          "matic_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "75dec4fe7b0e22a36c8a83173cde516b",
      "version": 7
    },
    "var.perps_meme_market_settings": {
      "artifacts": {
        "settings": {
          "meme_perps_market_id": "6000",
          "meme_perps_market_skew_scale": "1300000000000000000000000000",
          "meme_perps_market_max_funding_velocity": "9000000000000000000",
          "meme_perps_maker_fee_ratio": "200000000000000",
          "meme_perps_taker_fee_ratio": "1000000000000000",
          "meme_perps_max_market_size": "73846350000000000000000000",
          "meme_perps_max_market_value": "500000000000000000000000",
          "meme_perps_initial_margin_ratio": "1320000000000000000",
          "meme_perps_maintenance_margin_scalar": "370000000000000000",
          "meme_perps_minimum_initial_margin_ratio": "50000000000000000",
          "meme_perps_flag_reward_ratio_d18": "300000000000000",
          "meme_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "meme_perps_max_seconds_in_liquidation_window": "30",
          "meme_perps_minimum_position_margin": "50000000000000000000",
          "meme_perps_locked_oi_ratio": "500000000000000000",
          "meme_perps_max_liquidation_pd": "500000000000000",
          "meme_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "4259979d4895a1e97d9fea7ecb397590",
      "version": 7
    },
    "var.perps_near_market_settings": {
      "artifacts": {
        "settings": {
          "near_perps_market_id": "6100",
          "near_perps_market_skew_scale": "11718750000000000000000000",
          "near_perps_market_max_funding_velocity": "9000000000000000000",
          "near_perps_maker_fee_ratio": "200000000000000",
          "near_perps_taker_fee_ratio": "1000000000000000",
          "near_perps_max_market_size": "596400000000000000000000",
          "near_perps_max_market_value": "2000000000000000000000000",
          "near_perps_initial_margin_ratio": "3350000000000000000",
          "near_perps_maintenance_margin_scalar": "360000000000000000",
          "near_perps_minimum_initial_margin_ratio": "50000000000000000",
          "near_perps_flag_reward_ratio_d18": "300000000000000",
          "near_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "near_perps_max_seconds_in_liquidation_window": "30",
          "near_perps_minimum_position_margin": "50000000000000000000",
          "near_perps_locked_oi_ratio": "500000000000000000",
          "near_perps_max_liquidation_pd": "500000000000000",
          "near_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "8283d4be518f0afa41bda6d30ec520df",
      "version": 7
    },
    "var.perps_op_market_settings": {
      "artifacts": {
        "settings": {
          "op_perps_market_id": "1000",
          "op_perps_market_skew_scale": "24000000000000000000000000",
          "op_perps_market_max_funding_velocity": "9000000000000000000",
          "op_perps_maker_fee_ratio": "200000000000000",
          "op_perps_taker_fee_ratio": "1000000000000000",
          "op_perps_max_market_size": "750000000000000000000000",
          "op_perps_max_market_value": "1000000000000000000000000",
          "op_perps_initial_margin_ratio": "2270000000000000000",
          "op_perps_maintenance_margin_scalar": "380000000000000000",
          "op_perps_minimum_initial_margin_ratio": "40000000000000000",
          "op_perps_flag_reward_ratio_d18": "300000000000000",
          "op_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "op_perps_max_seconds_in_liquidation_window": "30",
          "op_perps_minimum_position_margin": "50000000000000000000",
          "op_perps_locked_oi_ratio": "500000000000000000",
          "op_perps_max_liquidation_pd": "500000000000000",
          "op_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "33c9228bbed3fbed3d557a99a9cdd12d",
      "version": 7
    },
    "var.perps_ordi_market_settings": {
      "artifacts": {
        "settings": {
          "ordi_perps_market_id": "1100",
          "ordi_perps_market_skew_scale": "1305000000000000000000000",
          "ordi_perps_market_max_funding_velocity": "9000000000000000000",
          "ordi_perps_maker_fee_ratio": "200000000000000",
          "ordi_perps_taker_fee_ratio": "1000000000000000",
          "ordi_perps_max_market_size": "82100000000000000000000",
          "ordi_perps_max_market_value": "2000000000000000000000000",
          "ordi_perps_initial_margin_ratio": "3020000000000000000",
          "ordi_perps_maintenance_margin_scalar": "380000000000000000",
          "ordi_perps_minimum_initial_margin_ratio": "20000000000000000",
          "ordi_perps_flag_reward_ratio_d18": "300000000000000",
          "ordi_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ordi_perps_max_seconds_in_liquidation_window": "30",
          "ordi_perps_minimum_position_margin": "50000000000000000000",
          "ordi_perps_locked_oi_ratio": "500000000000000000",
          "ordi_perps_max_liquidation_pd": "500000000000000",
          "ordi_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "a9a75939e5f752cf34d64dd10880b4e6",
      "version": 7
    },
    "var.perps_pendle_market_settings": {
      "artifacts": {
        "settings": {
          "pendle_perps_market_id": "2000",
          "pendle_perps_market_skew_scale": "6000000000000000000000000",
          "pendle_perps_market_max_funding_velocity": "9000000000000000000",
          "pendle_perps_maker_fee_ratio": "200000000000000",
          "pendle_perps_taker_fee_ratio": "1000000000000000",
          "pendle_perps_max_market_size": "200000000000000000000000",
          "pendle_perps_max_market_value": "500000000000000000000000",
          "pendle_perps_initial_margin_ratio": "2450000000000000000",
          "pendle_perps_maintenance_margin_scalar": "370000000000000000",
          "pendle_perps_minimum_initial_margin_ratio": "50000000000000000",
          "pendle_perps_flag_reward_ratio_d18": "300000000000000",
          "pendle_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "pendle_perps_max_seconds_in_liquidation_window": "30",
          "pendle_perps_minimum_position_margin": "50000000000000000000",
          "pendle_perps_locked_oi_ratio": "500000000000000000",
          "pendle_perps_max_liquidation_pd": "500000000000000",
          "pendle_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "f6677aae46757ae37e2bebb3b0952882",
      "version": 7
    },
    "var.perps_pepe_market_settings": {
      "artifacts": {
        "settings": {
          "pepe_perps_market_id": "1200",
          "pepe_perps_market_skew_scale": "12600000000000000000000000000000",
          "pepe_perps_market_max_funding_velocity": "9000000000000000000",
          "pepe_perps_maker_fee_ratio": "200000000000000",
          "pepe_perps_taker_fee_ratio": "1000000000000000",
          "pepe_perps_max_market_size": "360000000000000000000000000000",
          "pepe_perps_max_market_value": "1500000000000000000000000",
          "pepe_perps_initial_margin_ratio": "4880000000000000000",
          "pepe_perps_maintenance_margin_scalar": "430000000000000000",
          "pepe_perps_minimum_initial_margin_ratio": "40000000000000000",
          "pepe_perps_flag_reward_ratio_d18": "300000000000000",
          "pepe_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "pepe_perps_max_seconds_in_liquidation_window": "30",
          "pepe_perps_minimum_position_margin": "50000000000000000000",
          "pepe_perps_locked_oi_ratio": "500000000000000000",
          "pepe_perps_max_liquidation_pd": "500000000000000",
          "pepe_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "1ff8f806229ffd72454334963bf403da",
      "version": 7
    },
    "var.perps_pyth_market_settings": {
      "artifacts": {
        "settings": {
          "pyth_perps_market_id": "6200",
          "pyth_perps_market_skew_scale": "60000000000000000000000000",
          "pyth_perps_market_max_funding_velocity": "9000000000000000000",
          "pyth_perps_maker_fee_ratio": "200000000000000",
          "pyth_perps_taker_fee_ratio": "1000000000000000",
          "pyth_perps_max_market_size": "2277900000000000000000000",
          "pyth_perps_max_market_value": "500000000000000000000000",
          "pyth_perps_initial_margin_ratio": "840000000000000000",
          "pyth_perps_maintenance_margin_scalar": "370000000000000000",
          "pyth_perps_minimum_initial_margin_ratio": "50000000000000000",
          "pyth_perps_flag_reward_ratio_d18": "300000000000000",
          "pyth_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "pyth_perps_max_seconds_in_liquidation_window": "30",
          "pyth_perps_minimum_position_margin": "50000000000000000000",
          "pyth_perps_locked_oi_ratio": "500000000000000000",
          "pyth_perps_max_liquidation_pd": "500000000000000",
          "pyth_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "1a7be4911213f1a1cc87c40e7e12aa9d",
      "version": 7
    },
    "var.perps_rndr_market_settings": {
      "artifacts": {
        "settings": {
          "rndr_perps_market_id": "6300",
          "rndr_perps_market_skew_scale": "3750000000000000000000000",
          "rndr_perps_market_max_funding_velocity": "9000000000000000000",
          "rndr_perps_maker_fee_ratio": "200000000000000",
          "rndr_perps_taker_fee_ratio": "1000000000000000",
          "rndr_perps_max_market_size": "0",
          "rndr_perps_max_market_value": "0",
          "rndr_perps_initial_margin_ratio": "5090000000000000000",
          "rndr_perps_maintenance_margin_scalar": "370000000000000000",
          "rndr_perps_minimum_initial_margin_ratio": "50000000000000000",
          "rndr_perps_flag_reward_ratio_d18": "300000000000000",
          "rndr_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "rndr_perps_max_seconds_in_liquidation_window": "30",
          "rndr_perps_minimum_position_margin": "50000000000000000000",
          "rndr_perps_locked_oi_ratio": "500000000000000000",
          "rndr_perps_max_liquidation_pd": "500000000000000",
          "rndr_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "d11d192a3e35e3931dbc64bbc260b613",
      "version": 7
    },
    "var.perps_rune_market_settings": {
      "artifacts": {
        "settings": {
          "rune_perps_market_id": "1300",
          "rune_perps_market_skew_scale": "6000000000000000000000000",
          "rune_perps_market_max_funding_velocity": "9000000000000000000",
          "rune_perps_maker_fee_ratio": "200000000000000",
          "rune_perps_taker_fee_ratio": "1000000000000000",
          "rune_perps_max_market_size": "300000000000000000000000",
          "rune_perps_max_market_value": "1000000000000000000000000",
          "rune_perps_initial_margin_ratio": "5390000000000000000",
          "rune_perps_maintenance_margin_scalar": "360000000000000000",
          "rune_perps_minimum_initial_margin_ratio": "50000000000000000",
          "rune_perps_flag_reward_ratio_d18": "300000000000000",
          "rune_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "rune_perps_max_seconds_in_liquidation_window": "30",
          "rune_perps_minimum_position_margin": "50000000000000000000",
          "rune_perps_locked_oi_ratio": "500000000000000000",
          "rune_perps_max_liquidation_pd": "500000000000000",
          "rune_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "b1258baf52ba1f1b15a19dad5318b41d",
      "version": 7
    },
    "var.perps_sei_market_settings": {
      "artifacts": {
        "settings": {
          "sei_perps_market_id": "6400",
          "sei_perps_market_skew_scale": "71000000000000000000000000",
          "sei_perps_market_max_funding_velocity": "9000000000000000000",
          "sei_perps_maker_fee_ratio": "200000000000000",
          "sei_perps_taker_fee_ratio": "1000000000000000",
          "sei_perps_max_market_size": "3496500000000000000000000",
          "sei_perps_max_market_value": "1000000000000000000000000",
          "sei_perps_initial_margin_ratio": "5130000000000000000",
          "sei_perps_maintenance_margin_scalar": "390000000000000000",
          "sei_perps_minimum_initial_margin_ratio": "50000000000000000",
          "sei_perps_flag_reward_ratio_d18": "300000000000000",
          "sei_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "sei_perps_max_seconds_in_liquidation_window": "30",
          "sei_perps_minimum_position_margin": "50000000000000000000",
          "sei_perps_locked_oi_ratio": "500000000000000000",
          "sei_perps_max_liquidation_pd": "500000000000000",
          "sei_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "636d9e17a44fc8d51f09ffe9735e30c5",
      "version": 7
    },
    "var.perps_shib_market_settings": {
      "artifacts": {
        "settings": {
          "shib_perps_market_id": "6500",
          "shib_perps_market_skew_scale": "3750000000000000000000000000000",
          "shib_perps_market_max_funding_velocity": "9000000000000000000",
          "shib_perps_maker_fee_ratio": "200000000000000",
          "shib_perps_taker_fee_ratio": "1000000000000000",
          "shib_perps_max_market_size": "168208578650000000000000000000",
          "shib_perps_max_market_value": "2000000000000000000000000",
          "shib_perps_initial_margin_ratio": "2200000000000000000",
          "shib_perps_maintenance_margin_scalar": "320000000000000000",
          "shib_perps_minimum_initial_margin_ratio": "50000000000000000",
          "shib_perps_flag_reward_ratio_d18": "300000000000000",
          "shib_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "shib_perps_max_seconds_in_liquidation_window": "30",
          "shib_perps_minimum_position_margin": "50000000000000000000",
          "shib_perps_locked_oi_ratio": "500000000000000000",
          "shib_perps_max_liquidation_pd": "500000000000000",
          "shib_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "917484c6bde71f6b6633657b07e09081",
      "version": 7
    },
    "var.perps_snx_market_settings": {
      "artifacts": {
        "settings": {
          "snx_perps_market_id": "300",
          "snx_perps_market_skew_scale": "10200000000000000000000000",
          "snx_perps_market_max_funding_velocity": "9000000000000000000",
          "snx_perps_maker_fee_ratio": "200000000000000",
          "snx_perps_taker_fee_ratio": "1000000000000000",
          "snx_perps_max_market_size": "500000000000000000000000",
          "snx_perps_max_market_value": "500000000000000000000000",
          "snx_perps_initial_margin_ratio": "2820000000000000000",
          "snx_perps_maintenance_margin_scalar": "390000000000000000",
          "snx_perps_minimum_initial_margin_ratio": "50000000000000000",
          "snx_perps_flag_reward_ratio_d18": "300000000000000",
          "snx_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "snx_perps_max_seconds_in_liquidation_window": "30",
          "snx_perps_minimum_position_margin": "50000000000000000000",
          "snx_perps_locked_oi_ratio": "500000000000000000",
          "snx_perps_max_liquidation_pd": "500000000000000",
          "snx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "ac1c677659bc0286d4f7995f3c6796eb",
      "version": 7
    },
    "var.perps_sol_market_settings": {
      "artifacts": {
        "settings": {
          "sol_perps_market_id": "400",
          "sol_perps_market_skew_scale": "2812500000000000000000000",
          "sol_perps_market_max_funding_velocity": "9000000000000000000",
          "sol_perps_maker_fee_ratio": "1000000000000",
          "sol_perps_taker_fee_ratio": "800000000000000",
          "sol_perps_max_market_size": "205550000000000000000000",
          "sol_perps_max_market_value": "20000000000000000000000000",
          "sol_perps_initial_margin_ratio": "4900000000000000000",
          "sol_perps_maintenance_margin_scalar": "330000000000000000",
          "sol_perps_minimum_initial_margin_ratio": "20000000000000000",
          "sol_perps_flag_reward_ratio_d18": "300000000000000",
          "sol_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "sol_perps_max_seconds_in_liquidation_window": "30",
          "sol_perps_minimum_position_margin": "50000000000000000000",
          "sol_perps_locked_oi_ratio": "500000000000000000",
          "sol_perps_max_liquidation_pd": "500000000000000",
          "sol_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "8c103884195df2a2377fda6458b7e3e0",
      "version": 7
    },
    "var.perps_strk_market_settings": {
      "artifacts": {
        "settings": {
          "strk_perps_market_id": "6600",
          "strk_perps_market_skew_scale": "40000000000000000000000000",
          "strk_perps_market_max_funding_velocity": "9000000000000000000",
          "strk_perps_maker_fee_ratio": "200000000000000",
          "strk_perps_taker_fee_ratio": "1000000000000000",
          "strk_perps_max_market_size": "1904850000000000000000000",
          "strk_perps_max_market_value": "500000000000000000000000",
          "strk_perps_initial_margin_ratio": "890000000000000000",
          "strk_perps_maintenance_margin_scalar": "370000000000000000",
          "strk_perps_minimum_initial_margin_ratio": "50000000000000000",
          "strk_perps_flag_reward_ratio_d18": "300000000000000",
          "strk_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "strk_perps_max_seconds_in_liquidation_window": "30",
          "strk_perps_minimum_position_margin": "50000000000000000000",
          "strk_perps_locked_oi_ratio": "500000000000000000",
          "strk_perps_max_liquidation_pd": "500000000000000",
          "strk_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "d661e90b0980f66b0cee77d47dc6833c",
      "version": 7
    },
    "var.perps_stx_market_settings": {
      "artifacts": {
        "settings": {
          "stx_perps_market_id": "3100",
          "stx_perps_market_skew_scale": "22500000000000000000000000",
          "stx_perps_market_max_funding_velocity": "9000000000000000000",
          "stx_perps_maker_fee_ratio": "200000000000000",
          "stx_perps_taker_fee_ratio": "1000000000000000",
          "stx_perps_max_market_size": "849150000000000000000000",
          "stx_perps_max_market_value": "1000000000000000000000000",
          "stx_perps_initial_margin_ratio": "2610000000000000000",
          "stx_perps_maintenance_margin_scalar": "430000000000000000",
          "stx_perps_minimum_initial_margin_ratio": "50000000000000000",
          "stx_perps_flag_reward_ratio_d18": "300000000000000",
          "stx_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "stx_perps_max_seconds_in_liquidation_window": "30",
          "stx_perps_minimum_position_margin": "50000000000000000000",
          "stx_perps_locked_oi_ratio": "500000000000000000",
          "stx_perps_max_liquidation_pd": "500000000000000",
          "stx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "25fe1fa4287a775046df583d8c570e48",
      "version": 7
    },
    "var.perps_sui_market_settings": {
      "artifacts": {
        "settings": {
          "sui_perps_market_id": "2400",
          "sui_perps_market_skew_scale": "55000000000000000000000000",
          "sui_perps_market_max_funding_velocity": "9000000000000000000",
          "sui_perps_maker_fee_ratio": "200000000000000",
          "sui_perps_taker_fee_ratio": "1000000000000000",
          "sui_perps_max_market_size": "1559950000000000000000000",
          "sui_perps_max_market_value": "2000000000000000000000000",
          "sui_perps_initial_margin_ratio": "1960000000000000000",
          "sui_perps_maintenance_margin_scalar": "340000000000000000",
          "sui_perps_minimum_initial_margin_ratio": "50000000000000000",
          "sui_perps_flag_reward_ratio_d18": "300000000000000",
          "sui_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "sui_perps_max_seconds_in_liquidation_window": "30",
          "sui_perps_minimum_position_margin": "50000000000000000000",
          "sui_perps_locked_oi_ratio": "500000000000000000",
          "sui_perps_max_liquidation_pd": "500000000000000",
          "sui_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "9daf25b870e7b9a3235c69ac2cba3989",
      "version": 7
    },
    "var.perps_sushi_market_settings": {
      "artifacts": {
        "settings": {
          "sushi_perps_market_id": "6700",
          "sushi_perps_market_skew_scale": "16000000000000000000000000",
          "sushi_perps_market_max_funding_velocity": "9000000000000000000",
          "sushi_perps_maker_fee_ratio": "200000000000000",
          "sushi_perps_taker_fee_ratio": "1000000000000000",
          "sushi_perps_max_market_size": "1018050000000000000000000",
          "sushi_perps_max_market_value": "500000000000000000000000",
          "sushi_perps_initial_margin_ratio": "1370000000000000000",
          "sushi_perps_maintenance_margin_scalar": "400000000000000000",
          "sushi_perps_minimum_initial_margin_ratio": "50000000000000000",
          "sushi_perps_flag_reward_ratio_d18": "300000000000000",
          "sushi_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "sushi_perps_max_seconds_in_liquidation_window": "30",
          "sushi_perps_minimum_position_margin": "50000000000000000000",
          "sushi_perps_locked_oi_ratio": "500000000000000000",
          "sushi_perps_max_liquidation_pd": "500000000000000",
          "sushi_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "da0e0362b4bb2a1ee7578ebe7c84d877",
      "version": 7
    },
    "var.perps_tao_market_settings": {
      "artifacts": {
        "settings": {
          "tao_perps_market_id": "2800",
          "tao_perps_market_skew_scale": "32500000000000000000000",
          "tao_perps_market_max_funding_velocity": "9000000000000000000",
          "tao_perps_maker_fee_ratio": "200000000000000",
          "tao_perps_taker_fee_ratio": "1000000000000000",
          "tao_perps_max_market_size": "2450000000000000000000",
          "tao_perps_max_market_value": "1000000000000000000000000",
          "tao_perps_initial_margin_ratio": "2890000000000000000",
          "tao_perps_maintenance_margin_scalar": "370000000000000000",
          "tao_perps_minimum_initial_margin_ratio": "50000000000000000",
          "tao_perps_flag_reward_ratio_d18": "300000000000000",
          "tao_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "tao_perps_max_seconds_in_liquidation_window": "30",
          "tao_perps_minimum_position_margin": "50000000000000000000",
          "tao_perps_locked_oi_ratio": "500000000000000000",
          "tao_perps_max_liquidation_pd": "500000000000000",
          "tao_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "95285c022031495eb936e58fffca5946",
      "version": 7
    },
    "var.perps_tia_market_settings": {
      "artifacts": {
        "settings": {
          "tia_perps_market_id": "2300",
          "tia_perps_market_skew_scale": "6000000000000000000000000",
          "tia_perps_market_max_funding_velocity": "9000000000000000000",
          "tia_perps_maker_fee_ratio": "200000000000000",
          "tia_perps_taker_fee_ratio": "1000000000000000",
          "tia_perps_max_market_size": "279500000000000000000000",
          "tia_perps_max_market_value": "1000000000000000000000000",
          "tia_perps_initial_margin_ratio": "2240000000000000000",
          "tia_perps_maintenance_margin_scalar": "380000000000000000",
          "tia_perps_minimum_initial_margin_ratio": "50000000000000000",
          "tia_perps_flag_reward_ratio_d18": "300000000000000",
          "tia_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "tia_perps_max_seconds_in_liquidation_window": "30",
          "tia_perps_minimum_position_margin": "50000000000000000000",
          "tia_perps_locked_oi_ratio": "500000000000000000",
          "tia_perps_max_liquidation_pd": "500000000000000",
          "tia_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "b7912affcef3087e9f15662150d3bcec",
      "version": 7
    },
    "var.perps_ton_market_settings": {
      "artifacts": {
        "settings": {
          "ton_perps_market_id": "2500",
          "ton_perps_market_skew_scale": "12000000000000000000000000",
          "ton_perps_market_max_funding_velocity": "9000000000000000000",
          "ton_perps_maker_fee_ratio": "200000000000000",
          "ton_perps_taker_fee_ratio": "1000000000000000",
          "ton_perps_max_market_size": "576800000000000000000000",
          "ton_perps_max_market_value": "2000000000000000000000000",
          "ton_perps_initial_margin_ratio": "2890000000000000000",
          "ton_perps_maintenance_margin_scalar": "370000000000000000",
          "ton_perps_minimum_initial_margin_ratio": "50000000000000000",
          "ton_perps_flag_reward_ratio_d18": "300000000000000",
          "ton_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "ton_perps_max_seconds_in_liquidation_window": "30",
          "ton_perps_minimum_position_margin": "50000000000000000000",
          "ton_perps_locked_oi_ratio": "500000000000000000",
          "ton_perps_max_liquidation_pd": "500000000000000",
          "ton_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "fd7ab8e38fd5ba7158400c842f224d10",
      "version": 7
    },
    "var.perps_trx_market_settings": {
      "artifacts": {
        "settings": {
          "trx_perps_market_id": "6800",
          "trx_perps_market_skew_scale": "806250000000000000000000000",
          "trx_perps_market_max_funding_velocity": "9000000000000000000",
          "trx_perps_maker_fee_ratio": "200000000000000",
          "trx_perps_taker_fee_ratio": "1000000000000000",
          "trx_perps_max_market_size": "19348600000000000000000000",
          "trx_perps_max_market_value": "2000000000000000000000000",
          "trx_perps_initial_margin_ratio": "1880000000000000000",
          "trx_perps_maintenance_margin_scalar": "280000000000000000",
          "trx_perps_minimum_initial_margin_ratio": "50000000000000000",
          "trx_perps_flag_reward_ratio_d18": "300000000000000",
          "trx_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "trx_perps_max_seconds_in_liquidation_window": "30",
          "trx_perps_minimum_position_margin": "50000000000000000000",
          "trx_perps_locked_oi_ratio": "500000000000000000",
          "trx_perps_max_liquidation_pd": "500000000000000",
          "trx_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "e73d23bfdf7151e2c3888d568e4a1818",
      "version": 7
    },
    "var.perps_uni_market_settings": {
      "artifacts": {
        "settings": {
          "uni_perps_market_id": "6900",
          "uni_perps_market_skew_scale": "4500000000000000000000000",
          "uni_perps_market_max_funding_velocity": "9000000000000000000",
          "uni_perps_maker_fee_ratio": "200000000000000",
          "uni_perps_taker_fee_ratio": "1000000000000000",
          "uni_perps_max_market_size": "209100000000000000000000",
          "uni_perps_max_market_value": "1000000000000000000000000",
          "uni_perps_initial_margin_ratio": "770000000000000000",
          "uni_perps_maintenance_margin_scalar": "310000000000000000",
          "uni_perps_minimum_initial_margin_ratio": "50000000000000000",
          "uni_perps_flag_reward_ratio_d18": "300000000000000",
          "uni_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "uni_perps_max_seconds_in_liquidation_window": "30",
          "uni_perps_minimum_position_margin": "50000000000000000000",
          "uni_perps_locked_oi_ratio": "500000000000000000",
          "uni_perps_max_liquidation_pd": "500000000000000",
          "uni_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "58ca228254f3922a07f2557bab6309b3",
      "version": 7
    },
    "var.perps_w_market_settings": {
      "artifacts": {
        "settings": {
          "w_perps_market_id": "600",
          "w_perps_market_skew_scale": "59062500000000000000000000",
          "w_perps_market_max_funding_velocity": "9000000000000000000",
          "w_perps_maker_fee_ratio": "200000000000000",
          "w_perps_taker_fee_ratio": "1000000000000000",
          "w_perps_max_market_size": "2000000000000000000000000",
          "w_perps_max_market_value": "500000000000000000000000",
          "w_perps_initial_margin_ratio": "3870000000000000000",
          "w_perps_maintenance_margin_scalar": "350000000000000000",
          "w_perps_minimum_initial_margin_ratio": "50000000000000000",
          "w_perps_flag_reward_ratio_d18": "300000000000000",
          "w_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "w_perps_max_seconds_in_liquidation_window": "30",
          "w_perps_minimum_position_margin": "50000000000000000000",
          "w_perps_locked_oi_ratio": "500000000000000000",
          "w_perps_max_liquidation_pd": "500000000000000",
          "w_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "32ac9117dc9c2bc702d861db402e1f49",
      "version": 7
    },
    "var.perps_wif_market_settings": {
      "artifacts": {
        "settings": {
          "wif_perps_market_id": "500",
          "wif_perps_market_skew_scale": "30000000000000000000000000",
          "wif_perps_market_max_funding_velocity": "9000000000000000000",
          "wif_perps_maker_fee_ratio": "200000000000000",
          "wif_perps_taker_fee_ratio": "1000000000000000",
          "wif_perps_max_market_size": "1500000000000000000000000",
          "wif_perps_max_market_value": "2000000000000000000000000",
          "wif_perps_initial_margin_ratio": "5990000000000000000",
          "wif_perps_maintenance_margin_scalar": "400000000000000000",
          "wif_perps_minimum_initial_margin_ratio": "40000000000000000",
          "wif_perps_flag_reward_ratio_d18": "300000000000000",
          "wif_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "wif_perps_max_seconds_in_liquidation_window": "30",
          "wif_perps_minimum_position_margin": "50000000000000000000",
          "wif_perps_locked_oi_ratio": "500000000000000000",
          "wif_perps_max_liquidation_pd": "500000000000000",
          "wif_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "4310cfb20fd278af42521f991d17b669",
      "version": 7
    },
    "var.perps_xlm_market_settings": {
      "artifacts": {
        "settings": {
          "xlm_perps_market_id": "7000",
          "xlm_perps_market_skew_scale": "333000000000000000000000000",
          "xlm_perps_market_max_funding_velocity": "9000000000000000000",
          "xlm_perps_maker_fee_ratio": "200000000000000",
          "xlm_perps_taker_fee_ratio": "1000000000000000",
          "xlm_perps_max_market_size": "16384500000000000000000000",
          "xlm_perps_max_market_value": "1000000000000000000000000",
          "xlm_perps_initial_margin_ratio": "1400000000000000000",
          "xlm_perps_maintenance_margin_scalar": "370000000000000000",
          "xlm_perps_minimum_initial_margin_ratio": "50000000000000000",
          "xlm_perps_flag_reward_ratio_d18": "300000000000000",
          "xlm_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "xlm_perps_max_seconds_in_liquidation_window": "30",
          "xlm_perps_minimum_position_margin": "50000000000000000000",
          "xlm_perps_locked_oi_ratio": "500000000000000000",
          "xlm_perps_max_liquidation_pd": "500000000000000",
          "xlm_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "880321b135a9f5ef74a762a7d5b0d337",
      "version": 7
    },
    "var.perps_xrp_market_settings": {
      "artifacts": {
        "settings": {
          "xrp_perps_market_id": "7100",
          "xrp_perps_market_skew_scale": "400000000000000000000000000",
          "xrp_perps_market_max_funding_velocity": "9000000000000000000",
          "xrp_perps_maker_fee_ratio": "200000000000000",
          "xrp_perps_taker_fee_ratio": "1000000000000000",
          "xrp_perps_max_market_size": "5646550000000000000000000",
          "xrp_perps_max_market_value": "2000000000000000000000000",
          "xrp_perps_initial_margin_ratio": "2570000000000000000",
          "xrp_perps_maintenance_margin_scalar": "330000000000000000",
          "xrp_perps_minimum_initial_margin_ratio": "50000000000000000",
          "xrp_perps_flag_reward_ratio_d18": "300000000000000",
          "xrp_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "xrp_perps_max_seconds_in_liquidation_window": "30",
          "xrp_perps_minimum_position_margin": "50000000000000000000",
          "xrp_perps_locked_oi_ratio": "500000000000000000",
          "xrp_perps_max_liquidation_pd": "500000000000000",
          "xrp_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "eaebad76b67e5a4a292c0c517138fea3",
      "version": 7
    },
    "var.perps_yfi_market_settings": {
      "artifacts": {
        "settings": {
          "yfi_perps_market_id": "7200",
          "yfi_perps_market_skew_scale": "2125000000000000000000",
          "yfi_perps_market_max_funding_velocity": "9000000000000000000",
          "yfi_perps_maker_fee_ratio": "200000000000000",
          "yfi_perps_taker_fee_ratio": "1000000000000000",
          "yfi_perps_max_market_size": "150000000000000000000",
          "yfi_perps_max_market_value": "500000000000000000000000",
          "yfi_perps_initial_margin_ratio": "1490000000000000000",
          "yfi_perps_maintenance_margin_scalar": "390000000000000000",
          "yfi_perps_minimum_initial_margin_ratio": "50000000000000000",
          "yfi_perps_flag_reward_ratio_d18": "300000000000000",
          "yfi_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "yfi_perps_max_seconds_in_liquidation_window": "30",
          "yfi_perps_minimum_position_margin": "50000000000000000000",
          "yfi_perps_locked_oi_ratio": "500000000000000000",
          "yfi_perps_max_liquidation_pd": "500000000000000",
          "yfi_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "5db2aacde5e53831e24f56e489cfc3e5",
      "version": 7
    },
    "var.pyth_feeds": {
      "artifacts": {
        "settings": {
          "description": "https://pyth.network/developers/price-feed-ids#pyth-evm-mainnet",
          "pyth_feed_id_aave": "0x2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e47445",
          "pyth_feed_id_ada": "0x2a01deaec9e51a579277b34b122399984d0bbf57e2458a7e42fecd2829867a0d",
          "pyth_feed_id_algo": "0xfa17ceaf30d19ba51112fdcc750cc83454776f47fb0112e4af07f15f4bb1ebc0",
          "pyth_feed_id_apt": "0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5",
          "pyth_feed_id_arb": "0x3fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf5",
          "pyth_feed_id_arkm": "0x7677dd124dee46cfcd46ff03cf405fb0ed94b1f49efbea3444aadbda939a7ad3",
          "pyth_feed_id_atom": "0xb00b60f88b03a6a625a8d1c048c3f66653edf217439983d037e7222c4e612819",
          "pyth_feed_id_avax": "0x93da3352f9f1d105fdfe4971cfa80e9dd777bfc5d0f683ebb6e1294b92137bb7",
          "pyth_feed_id_axl": "0x60144b1d5c9e9851732ad1d9760e3485ef80be39b984f6bf60f82b28a2b7f126",
          "pyth_feed_id_axs": "0xb7e3904c08ddd9c0c10c6d207d390fd19e87eb6aab96304f571ed94caebdefa0",
          "pyth_feed_id_bal": "0x07ad7b4a7662d19a6bc675f6b467172d2f3947fa653ca97555a9b20236406628",
          "pyth_feed_id_bch": "0x3dd2b63686a450ec7290df3a1e0b583c0481f651351edfa7636f39aed55cf8a3",
          "pyth_feed_id_blur": "0x856aac602516addee497edf6f50d39e8c95ae5fb0da1ed434a8c2ab9c3e877e9",
          "pyth_feed_id_bnb": "0x2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f",
          "pyth_feed_id_bome": "0x30e4780570973e438fdb3f1b7ad22618b2fc7333b65c7853a7ca144c39052f7a",
          "pyth_feed_id_bonk": "0x72b021217ca3fe68922a19aaf990109cb9d84e9ad004b4d2025ad6f529314419",
          "pyth_feed_id_btc": "0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43",
          "pyth_feed_id_cbbtc": "0x2817d7bfe5c64b8ea956e9a26f573ef64e72e4d7891f2d6af9bcc93f7aff9a97",
          "pyth_feed_id_cbeth": "0x15ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce5717",
          "pyth_feed_id_comp": "0x4a8e42861cabc5ecb50996f92e7cfa2bce3fd0a2423b0c44c9b423fb2bd25478",
          "pyth_feed_id_crv": "0xa19d04ac696c7a6616d291c7e5d1377cc8be437c327b75adb5dc1bad745fcae8",
          "pyth_feed_id_doge": "0xdcef50dd0a4cd2dcc17e45df1676dcb336a11a61c69df7a0299b0150c672d25c",
          "pyth_feed_id_dot": "0xca3eed9b267293f6595901c734c7525ce8ef49adafe8284606ceb307afa2ca5b",
          "pyth_feed_id_dydx": "0x6489800bb8974169adfe35937bf6736507097d13c190d760c557108c7e93a81b",
          "pyth_feed_id_eigen": "0xc65db025687356496e8653d0d6608eec64ce2d96e2e28c530e574f0e4f712380",
          "pyth_feed_id_ena": "0xb7910ba7322db020416fcac28b48c01212fd9cc8fbcbaf7d30477ed8605f6bd4",
          "pyth_feed_id_eos": "0x06ade621dbc31ed0fc9255caaab984a468abe84164fb2ccc76f02a4636d97e31",
          "pyth_feed_id_etc": "0x7f5cc8d963fc5b3d2ae41fe5685ada89fd4f14b435f8050f28c7fd409f40c2d8",
          "pyth_feed_id_eth": "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
          "pyth_feed_id_ethbtc": "0xc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a",
          "pyth_feed_id_ethfi": "0xb27578a9654246cb0a2950842b92330e9ace141c52b63829cc72d5c45a5a595a",
          "pyth_feed_id_fil": "0x150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e",
          "pyth_feed_id_flow": "0x2fb245b9a84554a0f15aa123cbb5f64cd263b59e9a87d80148cbffab50c69f30",
          "pyth_feed_id_ftm": "0x5c6c0d2386e3352356c3ab84434fafb5ea067ac2678a38a338c4a69ddc4bdb0c",
          "pyth_feed_id_fxs": "0x735f591e4fed988cd38df74d8fcedecf2fe8d9111664e0fd500db9aa78b316b1",
          "pyth_feed_id_gala": "0x0781209c28fda797616212b7f94d77af3a01f3e94a5d421760aef020cf2bcb51",
          "pyth_feed_id_gmx": "0xb962539d0fcb272a494d65ea56f94851c2bcf8823935da05bd628916e2e9edbf",
          "pyth_feed_id_grt": "0x4d1f8dae0d96236fb98e8f47471a366ec3b1732b47041781934ca3a9bb2f35e7",
          "pyth_feed_id_icp": "0xc9907d786c5821547777780a1e4f89484f3417cb14dd244f2b0a34ea7a554d67",
          "pyth_feed_id_imx": "0x941320a8989414874de5aa2fc340a75d5ed91fdff1613dd55f83844d52ea63a2",
          "pyth_feed_id_inj": "0x7a5bc1d2b56ad029048cd63964b3ad2776eadf812edc1a43a31406cb54bff592",
          "pyth_feed_id_io": "0x82595d1509b770fa52681e260af4dda9752b87316d7c048535d8ead3fa856eb1",
          "pyth_feed_id_jto": "0xb43660a5f790c69354b0729a5ef9d50d68f1df92107540210b9cccba1f947cc2",
          "pyth_feed_id_jup": "0x0a0408d619e9380abad35060f9192039ed5042fa6f82301d0e48bb52be830996",
          "pyth_feed_id_ldo": "0xc63e2a7f37a04e5e614c07238bedb25dcc38927fba8fe890597a593c0b2fa4ad",
          "pyth_feed_id_link": "0x8ac0c70fff57e9aefdf5edf44b51d62c2d433653cbb2cf5cc06bb115af04d221",
          "pyth_feed_id_ltc": "0x6e3f3fa8253588df9326580180233eb791e03b443a3ba7a1d892e73874e19a54",
          "pyth_feed_id_meme": "0xcd2cee36951a571e035db0dfad138e6ecdb06b517cc3373cd7db5d3609b7927c",
          "pyth_feed_id_mew": "0x514aed52ca5294177f20187ae883cec4a018619772ddce41efcc36a6448f5d5d",
          "pyth_feed_id_mkr": "0x9375299e31c0deb9c6bc378e6329aab44cb48ec655552a70d4b9050346a30378",
          "pyth_feed_id_near": "0xc415de8d2eba7db216527dff4b60e8f3a5311c740dadb233e13e12547e226750",
          "pyth_feed_id_not": "0x75ec6f04d4bded6afdc1440689be4402dd1e23d2ff2c21e081871eb2739ceb36",
          "pyth_feed_id_op": "0x385f64d993f7b77d8182ed5003d97c60aa3361f3cecfe711544d2d59165e9bdf",
          "pyth_feed_id_ordi": "0x193c739db502aadcef37c2589738b1e37bdb257d58cf1ab3c7ebc8e6df4e3ec0",
          "pyth_feed_id_pendle": "0x9a4df90b25497f66b1afb012467e316e801ca3d839456db028892fe8c70c8016",
          "pyth_feed_id_people": "0xb7fe919d83815ca6074c82a3286b1cd6ffb7d3136e323cd2b1ef706cfc7e5945",
          "pyth_feed_id_pepe": "0xd69731a2e74ac1ce884fc3890f7ee324b6deb66147055249568869ed700882e4",
          "pyth_feed_id_pol": "0xffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd70472",
          "pyth_feed_id_popcat": "0xb9312a7ee50e189ef045aa3c7842e099b061bd9bdc99ac645956c3b660dc8cce",
          "pyth_feed_id_pyth": "0x0bbf28e9a841a1cc788f6a361b17ca072d0ea3098a1e5df1c3922d06719579ff",
          "pyth_feed_id_render": "0x3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d",
          "pyth_feed_id_rndr": "0x3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d",
          "pyth_feed_id_rune": "0x5fcf71143bb70d41af4fa9aa1287e2efd3c5911cee59f909f915c9f61baacb1e",
          "pyth_feed_id_sats": "0x40440d18fb5ad809e2825ce7dfc035cfa57135c13062a04addafe0c7f54425e0",
          "pyth_feed_id_sei": "0x53614f1cb0c031d4af66c04cb9c756234adad0e1cee85303795091499a4084eb",
          "pyth_feed_id_shib": "0xf0d57deca57b3da2fe63a493f4c25925fdfd8edf834b20f93e1f84dbd1504d4a",
          "pyth_feed_id_snx": "0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3",
          "pyth_feed_id_sol": "0xef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d",
          "pyth_feed_id_strk": "0x6a182399ff70ccf3e06024898942028204125a819e519a335ffa4579e66cd870",
          "pyth_feed_id_stx": "0xec7a775f46379b5e943c3526b1c8d54cd49749176b0b98e02dde68d1bd335c17",
          "pyth_feed_id_sui": "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744",
          "pyth_feed_id_sushi": "0x26e4f737fde0263a9eea10ae63ac36dcedab2aaf629261a994e1eeb6ee0afe53",
          "pyth_feed_id_tao": "0x410f41de235f2db824e562ea7ab2d3d3d4ff048316c61d629c0b93f58584e1af",
          "pyth_feed_id_tia": "0x09f7c1d7dfbb7df2b8fe3d3d87ee94a2259d212da4f30c1f0540d066dfa44723",
          "pyth_feed_id_ton": "0x8963217838ab4cf5cadc172203c1f0b763fbaa45f346d8ee50ba994bbcac3026",
          "pyth_feed_id_trx": "0x67aed5a24fdad045475e7195c98a98aea119c763f272d4523f5bac93a4f33c2b",
          "pyth_feed_id_uni": "0x78d185a741d07edb3412b09008b7c5cfb9bbbd7d568bf00ba737b456ba171501",
          "pyth_feed_id_w": "0xeff7446475e218517566ea99e72a4abec2e1bd8498b43b7d8331e29dcb059389",
          "pyth_feed_id_weth": "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
          "pyth_feed_id_wif": "0x4ca4beeca86f0d164160323817a4e42b10010a724c2217c6ee41b54cd4cc61fc",
          "pyth_feed_id_wld": "0xd6835ad1f773de4a378115eb6824bd0c0e42d84d1c84d9750e853fb6b6c7794a",
          "pyth_feed_id_wsteth": "0x6df640f3b8963d8f8358f791f352b8364513f6ab1cca5ed3f1f7b5448980e784",
          "pyth_feed_id_xlm": "0xb7a8eba68a997cd0210c2e1e4ee811ad2d174b3611c22d9ebf16f4cb7e9ba850",
          "pyth_feed_id_xrp": "0xec5d399846a9209f3fe5881d70aae9268c94339ff9817e8d18ff19fa05eea1c8",
          "pyth_feed_id_yfi": "0x425f4b198ab2504936886c1e93511bb6720fbcf2045a4f3c0723bb213846022f",
          "pyth_feed_id_zro": "0x3bd860bea28bf982fa06bcf358118064bb114086cc03993bd76197eaab0b8018"
        }
      },
      "hash": "4d048d053c8da31dda4c7b53cb40bd3c",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setCollateralConfiguration_USD": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setCollateralConfiguration_USD": {
            "hash": "0x1bcdacc527db40cd7310effed490ea507b6eef9d7aa1d0138ef970ed5775ea8d",
            "blockNumber": "15788510",
            "timestamp": "1727345308",
            "events": {
              "CollateralConfigurationSet": [
                {
                  "name": "CollateralConfigurationSet",
                  "args": [
                    "0",
                    "115792089237316195423570985008687907853269984665640564039457584007913129639935",
                    "0",
                    "0",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setCollateralConfiguration_USD",
            "gasUsed": 69944,
            "gasCost": "1000259",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "257a166213552c7154f54f8a34172032",
      "version": 7
    },
    "setting.default_staleness_tolerance": {
      "artifacts": {
        "settings": {
          "default_staleness_tolerance": "60"
        }
      },
      "hash": "c85e06d9961059219500923347f33fea",
      "version": 7
    },
    "setting.settlement_delay": {
      "artifacts": {
        "settings": {
          "settlement_delay": "2"
        }
      },
      "hash": "dc88d99e217842b1532ccb97f443b6c1",
      "version": 7
    },
    "setting.settlement_window_duration": {
      "artifacts": {
        "settings": {
          "settlement_window_duration": "60"
        }
      },
      "hash": "c85e06d9961059219500923347f33fea",
      "version": 7
    },
    "setting.strict_staleness_tolerance": {
      "artifacts": {
        "settings": {
          "strict_staleness_tolerance": "60"
        }
      },
      "hash": "c85e06d9961059219500923347f33fea",
      "version": 7
    },
    "setting.oracle_manager_package": {
      "artifacts": {
        "settings": {
          "oracle_manager_package": "oracle-manager:3.8.1"
        }
      },
      "hash": "0b5c7c3cf64363f8d116378b7d2154e9",
      "version": 7
    },
    "clone.oracle_manager": {
      "artifacts": {
        "imports": {
          "oracle_manager": {
            "url": "ipfs://QmaSYrc3XvdZ2LhUDQ2njMCkHsfNT3nDLDDLJWwE8UaVkr",
            "tags": [
              "latest"
            ],
            "target": "oracle-manager:3.8.1@main",
            "preset": "main",
            "contracts": {
              "NodeModule": {
                "address": "0xE1681e5aC826043Ae6575ee1fD5E7064751c2fc5",
                "abi": [
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error Errors(bytes[] revertReasons)",
                  "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidPrice(int256 price)",
                  "error NodeNotRegistered(bytes32 nodeId)",
                  "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowInt56ToInt24()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint160()",
                  "error OverflowUint56ToInt56()",
                  "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                  "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                  "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                  "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "0x1ca8b07aa6e171c4948031b71bfa2a8f9ffc7bbbbea847313177653956f58c31",
                "deployTxnBlockNumber": "16649324",
                "deployTimestamp": "1729066936",
                "sourceName": "contracts/modules/NodeModule.sol",
                "contractName": "NodeModule",
                "deployedOn": "contract.NodeModule",
                "gasUsed": 4820634,
                "gasCost": "930730936"
              },
              "CoreModule": {
                "address": "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "1729066942",
                "sourceName": "contracts/modules/CoreModule.sol",
                "contractName": "CoreModule",
                "deployedOn": "contract.CoreModule",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "InitialProxy": {
                "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x90849A86E8C57D2962c4a0Deda3F83Ae4f59ad19",
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "1729066944",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "OracleRouter": {
                "address": "0x0a6a3a1553351a2a3e71f90e1b892794f2a2e64c",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error Errors(bytes[] revertReasons)",
                  "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidPrice(int256 price)",
                  "error NodeNotRegistered(bytes32 nodeId)",
                  "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowInt56ToInt24()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint160()",
                  "error OverflowUint56ToInt56()",
                  "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                  "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                  "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                  "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                ],
                "deployedOn": "router.OracleRouter",
                "deployTxnHash": "0xea0d86ad6ff5608eab445f132f01d2f905f7396ce6517efaafa91bea4f3b64e4",
                "deployTxnBlockNumber": "16649330",
                "deployTimestamp": "1729066948",
                "contractName": "OracleRouter",
                "sourceName": "OracleRouter.sol",
                "gasUsed": 262878,
                "gasCost": "933131741"
              },
              "Proxy": {
                "address": "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error Errors(bytes[] revertReasons)",
                  "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidPrice(int256 price)",
                  "error NodeNotRegistered(bytes32 nodeId)",
                  "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowInt56ToInt24()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint160()",
                  "error OverflowUint56ToInt56()",
                  "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                  "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                  "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                  "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmQdXmwU7gK9cPRt3opFcf55yFfNjbLCHmea7LStWnsH6b",
                "tags": [
                  "latest"
                ],
                "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                "preset": "with-oracle-manager",
                "settings": {
                  "salt": "salt"
                },
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1729066940",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                },
                "extras": {
                  "salt": "salt"
                }
              }
            },
            "settings": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "oracle-manager-official"
            },
            "txns": {
              "upgrade_proxy": {
                "hash": "0x202d083402f6ee504921fa463b2dbb2fd506d047cc95e73904a675fcda5a0603",
                "blockNumber": "16649332",
                "timestamp": "1729066952",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xD4E93f8a0aBc321ECC5b4bFBb501cb968e121F21",
                        "0x0a6a3a1553351A2A3e71F90e1B892794F2A2e64C"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 55368,
                "gasCost": "936076092",
                "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
              }
            },
            "extras": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "oracle-manager-official"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.CoreProxy_initOrUpgradeToken_USDToken": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_initOrUpgradeToken_USDToken": {
            "hash": "0x55022ab9573c6f89452f230d68a46ec09adbcc9646d70f5b689a37608a063be4",
            "blockNumber": "16649400",
            "timestamp": "1729067088",
            "events": {},
            "deployedOn": "invoke.CoreProxy_initOrUpgradeToken_USDToken",
            "gasUsed": 65753,
            "gasCost": "949428869",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "687ae4b17abd3e01d504a6258515ab99",
      "version": 7
    },
    "var.perps_eigen_market_settings": {
      "artifacts": {
        "settings": {
          "eigen_perps_market_id": "7300",
          "eigen_perps_market_skew_scale": "4000000000000000000000000",
          "eigen_perps_market_max_funding_velocity": "9000000000000000000",
          "eigen_perps_maker_fee_ratio": "0",
          "eigen_perps_taker_fee_ratio": "1000000000000000",
          "eigen_perps_max_market_size": "268820000000000000000000",
          "eigen_perps_max_market_value": "1000000000000000000000000",
          "eigen_perps_initial_margin_ratio": "910000000000000000",
          "eigen_perps_maintenance_margin_scalar": "334000000000000000",
          "eigen_perps_minimum_initial_margin_ratio": "50000000000000000",
          "eigen_perps_flag_reward_ratio_d18": "300000000000000",
          "eigen_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "eigen_perps_max_seconds_in_liquidation_window": "30",
          "eigen_perps_minimum_position_margin": "50000000000000000000",
          "eigen_perps_locked_oi_ratio": "500000000000000000",
          "eigen_perps_max_liquidation_pd": "500000000000000",
          "eigen_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "72cbc5e2155d48727766324a59adc0c7",
      "version": 7
    },
    "var.perps_io_market_settings": {
      "artifacts": {
        "settings": {
          "io_perps_market_id": "7400",
          "io_perps_market_skew_scale": "6000000000000000000000000",
          "io_perps_market_max_funding_velocity": "9000000000000000000",
          "io_perps_maker_fee_ratio": "0",
          "io_perps_taker_fee_ratio": "1000000000000000",
          "io_perps_max_market_size": "477550000000000000000000",
          "io_perps_max_market_value": "1000000000000000000000000",
          "io_perps_initial_margin_ratio": "694000000000000000",
          "io_perps_maintenance_margin_scalar": "334000000000000000",
          "io_perps_minimum_initial_margin_ratio": "50000000000000000",
          "io_perps_flag_reward_ratio_d18": "300000000000000",
          "io_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "io_perps_max_seconds_in_liquidation_window": "30",
          "io_perps_minimum_position_margin": "50000000000000000000",
          "io_perps_locked_oi_ratio": "500000000000000000",
          "io_perps_max_liquidation_pd": "500000000000000",
          "io_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "a8be2c95470942536889190bbfef22cd",
      "version": 7
    },
    "var.perps_mew_market_settings": {
      "artifacts": {
        "settings": {
          "mew_perps_market_id": "7500",
          "mew_perps_market_skew_scale": "2500000000000000000000000000",
          "mew_perps_market_max_funding_velocity": "9000000000000000000",
          "mew_perps_maker_fee_ratio": "0",
          "mew_perps_taker_fee_ratio": "1000000000000000",
          "mew_perps_max_market_size": "123319770000000000000000000",
          "mew_perps_max_market_value": "1000000000000000000000000",
          "mew_perps_initial_margin_ratio": "1597000000000000000",
          "mew_perps_maintenance_margin_scalar": "328000000000000000",
          "mew_perps_minimum_initial_margin_ratio": "50000000000000000",
          "mew_perps_flag_reward_ratio_d18": "300000000000000",
          "mew_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "mew_perps_max_seconds_in_liquidation_window": "30",
          "mew_perps_minimum_position_margin": "50000000000000000000",
          "mew_perps_locked_oi_ratio": "500000000000000000",
          "mew_perps_max_liquidation_pd": "500000000000000",
          "mew_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "778f92b7792d168c2ed97464bc5c4709",
      "version": 7
    },
    "var.perps_mkr_market_settings": {
      "artifacts": {
        "settings": {
          "mkr_perps_market_id": "7600",
          "mkr_perps_market_skew_scale": "9000000000000000000000",
          "mkr_perps_market_max_funding_velocity": "9000000000000000000",
          "mkr_perps_maker_fee_ratio": "0",
          "mkr_perps_taker_fee_ratio": "1000000000000000",
          "mkr_perps_max_market_size": "1200000000000000000000",
          "mkr_perps_max_market_value": "2000000000000000000000000",
          "mkr_perps_initial_margin_ratio": "1200000000000000000",
          "mkr_perps_maintenance_margin_scalar": "330000000000000000",
          "mkr_perps_minimum_initial_margin_ratio": "50000000000000000",
          "mkr_perps_flag_reward_ratio_d18": "300000000000000",
          "mkr_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "mkr_perps_max_seconds_in_liquidation_window": "30",
          "mkr_perps_minimum_position_margin": "50000000000000000000",
          "mkr_perps_locked_oi_ratio": "500000000000000000",
          "mkr_perps_max_liquidation_pd": "500000000000000",
          "mkr_perps_endorsed_liquidator": "0x95A61Fa7454CA5f6A3CE01724e306Cd14a22D306"
        }
      },
      "hash": "2c4aacb85dc2932952b942dc40d05026",
      "version": 7
    },
    "var.perps_not_market_settings": {
      "artifacts": {
        "settings": {
          "not_perps_market_id": "7700",
          "not_perps_market_skew_scale": "5000000000000000000000000000",
          "not_perps_market_max_funding_velocity": "9000000000000000000",
          "not_perps_maker_fee_ratio": "0",
          "not_perps_taker_fee_ratio": "1000000000000000",
          "not_perps_max_market_size": "118077700000000000000000000",
          "not_perps_max_market_value": "1000000000000000000000000",
          "not_perps_initial_margin_ratio": "1140000000000000000",
          "not_perps_maintenance_margin_scalar": "345000000000000000",
          "not_perps_minimum_initial_margin_ratio": "50000000000000000",
          "not_perps_flag_reward_ratio_d18": "300000000000000",
          "not_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "not_perps_max_seconds_in_liquidation_window": "30",
          "not_perps_minimum_position_margin": "50000000000000000000",
          "not_perps_locked_oi_ratio": "500000000000000000",
          "not_perps_max_liquidation_pd": "500000000000000",
          "not_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "4c7b2261645b799ce0599cfb75b86f2d",
      "version": 7
    },
    "var.perps_people_market_settings": {
      "artifacts": {
        "settings": {
          "people_perps_market_id": "7800",
          "people_perps_market_skew_scale": "500000000000000000000000000",
          "people_perps_market_max_funding_velocity": "9000000000000000000",
          "people_perps_maker_fee_ratio": "0",
          "people_perps_taker_fee_ratio": "1000000000000000",
          "people_perps_max_market_size": "11341730000000000000000000",
          "people_perps_max_market_value": "1000000000000000000000000",
          "people_perps_initial_margin_ratio": "2403000000000000000",
          "people_perps_maintenance_margin_scalar": "334000000000000000",
          "people_perps_minimum_initial_margin_ratio": "50000000000000000",
          "people_perps_flag_reward_ratio_d18": "300000000000000",
          "people_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "people_perps_max_seconds_in_liquidation_window": "30",
          "people_perps_minimum_position_margin": "50000000000000000000",
          "people_perps_locked_oi_ratio": "500000000000000000",
          "people_perps_max_liquidation_pd": "500000000000000",
          "people_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "368a6615ccbcb2f2b2317ec8aab3ffba",
      "version": 7
    },
    "var.perps_pol_market_settings": {
      "artifacts": {
        "settings": {
          "pol_perps_market_id": "7900",
          "pol_perps_market_skew_scale": "75000000000000000000000000",
          "pol_perps_market_max_funding_velocity": "9000000000000000000",
          "pol_perps_maker_fee_ratio": "0",
          "pol_perps_taker_fee_ratio": "1000000000000000",
          "pol_perps_max_market_size": "7500000000000000000000000",
          "pol_perps_max_market_value": "3000000000000000000000000",
          "pol_perps_initial_margin_ratio": "1800000000000000000",
          "pol_perps_maintenance_margin_scalar": "370000000000000000",
          "pol_perps_minimum_initial_margin_ratio": "20000000000000000",
          "pol_perps_flag_reward_ratio_d18": "300000000000000",
          "pol_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "pol_perps_max_seconds_in_liquidation_window": "30",
          "pol_perps_minimum_position_margin": "50000000000000000000",
          "pol_perps_locked_oi_ratio": "500000000000000000",
          "pol_perps_max_liquidation_pd": "500000000000000",
          "pol_perps_endorsed_liquidator": "0x95A61Fa7454CA5f6A3CE01724e306Cd14a22D306"
        }
      },
      "hash": "87603d05a80a1e342b0c8bd8b47e4aae",
      "version": 7
    },
    "var.perps_popcat_market_settings": {
      "artifacts": {
        "settings": {
          "popcat_perps_market_id": "8000",
          "popcat_perps_market_skew_scale": "20250000000000000000000000",
          "popcat_perps_market_max_funding_velocity": "9000000000000000000",
          "popcat_perps_maker_fee_ratio": "0",
          "popcat_perps_taker_fee_ratio": "1000000000000000",
          "popcat_perps_max_market_size": "711490000000000000000000",
          "popcat_perps_max_market_value": "1000000000000000000000000",
          "popcat_perps_initial_margin_ratio": "2808000000000000000",
          "popcat_perps_maintenance_margin_scalar": "328000000000000000",
          "popcat_perps_minimum_initial_margin_ratio": "50000000000000000",
          "popcat_perps_flag_reward_ratio_d18": "300000000000000",
          "popcat_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "popcat_perps_max_seconds_in_liquidation_window": "30",
          "popcat_perps_minimum_position_margin": "50000000000000000000",
          "popcat_perps_locked_oi_ratio": "500000000000000000",
          "popcat_perps_max_liquidation_pd": "500000000000000",
          "popcat_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "761aa0ea134c83b07ee5991c2598ea94",
      "version": 7
    },
    "var.perps_render_market_settings": {
      "artifacts": {
        "settings": {
          "render_perps_market_id": "8100",
          "render_perps_market_skew_scale": "2250000000000000000000000",
          "render_perps_market_max_funding_velocity": "9000000000000000000",
          "render_perps_maker_fee_ratio": "0",
          "render_perps_taker_fee_ratio": "1000000000000000",
          "render_perps_max_market_size": "179630000000000000000000",
          "render_perps_max_market_value": "1000000000000000000000000",
          "render_perps_initial_margin_ratio": "1467000000000000000",
          "render_perps_maintenance_margin_scalar": "325000000000000000",
          "render_perps_minimum_initial_margin_ratio": "50000000000000000",
          "render_perps_flag_reward_ratio_d18": "300000000000000",
          "render_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "render_perps_max_seconds_in_liquidation_window": "30",
          "render_perps_minimum_position_margin": "50000000000000000000",
          "render_perps_locked_oi_ratio": "500000000000000000",
          "render_perps_max_liquidation_pd": "500000000000000",
          "render_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "d6dd2fc10a0ad227e440645eb48f466c",
      "version": 7
    },
    "var.perps_sats_market_settings": {
      "artifacts": {
        "settings": {
          "sats_perps_market_id": "8200",
          "sats_perps_market_skew_scale": "100000000000000000000000000000000",
          "sats_perps_market_max_funding_velocity": "9000000000000000000",
          "sats_perps_maker_fee_ratio": "0",
          "sats_perps_taker_fee_ratio": "1000000000000000",
          "sats_perps_max_market_size": "3332222592470000000000000000000",
          "sats_perps_max_market_value": "1000000000000000000000000",
          "sats_perps_initial_margin_ratio": "907000000000000000",
          "sats_perps_maintenance_margin_scalar": "345000000000000000",
          "sats_perps_minimum_initial_margin_ratio": "50000000000000000",
          "sats_perps_flag_reward_ratio_d18": "300000000000000",
          "sats_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "sats_perps_max_seconds_in_liquidation_window": "30",
          "sats_perps_minimum_position_margin": "50000000000000000000",
          "sats_perps_locked_oi_ratio": "500000000000000000",
          "sats_perps_max_liquidation_pd": "500000000000000",
          "sats_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "9216d9695dd8f7d9a3acf7c4a19598c7",
      "version": 7
    },
    "var.perps_wld_market_settings": {
      "artifacts": {
        "settings": {
          "wld_perps_market_id": "8300",
          "wld_perps_market_skew_scale": "20000000000000000000000000",
          "wld_perps_market_max_funding_velocity": "9000000000000000000",
          "wld_perps_maker_fee_ratio": "0",
          "wld_perps_taker_fee_ratio": "1000000000000000",
          "wld_perps_max_market_size": "428600000000000000000000",
          "wld_perps_max_market_value": "1000000000000000000000000",
          "wld_perps_initial_margin_ratio": "1168000000000000000",
          "wld_perps_maintenance_margin_scalar": "335000000000000000",
          "wld_perps_minimum_initial_margin_ratio": "50000000000000000",
          "wld_perps_flag_reward_ratio_d18": "300000000000000",
          "wld_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "wld_perps_max_seconds_in_liquidation_window": "30",
          "wld_perps_minimum_position_margin": "50000000000000000000",
          "wld_perps_locked_oi_ratio": "500000000000000000",
          "wld_perps_max_liquidation_pd": "500000000000000",
          "wld_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "0ece86c15eb9ef095aa78f1fbf033dcd",
      "version": 7
    },
    "var.perps_zro_market_settings": {
      "artifacts": {
        "settings": {
          "zro_perps_market_id": "8400",
          "zro_perps_market_skew_scale": "4250000000000000000000000",
          "zro_perps_market_max_funding_velocity": "9000000000000000000",
          "zro_perps_maker_fee_ratio": "0",
          "zro_perps_taker_fee_ratio": "1000000000000000",
          "zro_perps_max_market_size": "237850000000000000000000",
          "zro_perps_max_market_value": "1000000000000000000000000",
          "zro_perps_initial_margin_ratio": "1037000000000000000",
          "zro_perps_maintenance_margin_scalar": "334000000000000000",
          "zro_perps_minimum_initial_margin_ratio": "50000000000000000",
          "zro_perps_flag_reward_ratio_d18": "300000000000000",
          "zro_perps_max_liquidation_limit_accumulation_multiplier": "1500000000000000000",
          "zro_perps_max_seconds_in_liquidation_window": "30",
          "zro_perps_minimum_position_margin": "50000000000000000000",
          "zro_perps_locked_oi_ratio": "500000000000000000",
          "zro_perps_max_liquidation_pd": "500000000000000",
          "zro_perps_endorsed_liquidator": "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
        }
      },
      "hash": "343f0ad1040d1b9e606321f14352cbf5",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_eigen": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_eigen": {
            "hash": "0xcb2dd74247cd7fc5b2cfb66a09052c8f70e310644b323c2fc68ee688643805ee",
            "blockNumber": "16656415",
            "timestamp": "1729081118",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x9705bf502a0a6792473eb84862bfdae5d3a8cfa8ca110b061b24f37f7cec673a",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729c65db025687356496e8653d0d6608eec64ce2d96e2e28c530e574f0e4f7123800000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_eigen",
            "gasUsed": 146222,
            "gasCost": "1799464860",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eigen_pyth_oracle_id": "0x9705bf502a0a6792473eb84862bfdae5d3a8cfa8ca110b061b24f37f7cec673a"
        }
      },
      "hash": "14d09ad8326045d5a4a7ff596e557413",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_io": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_io": {
            "hash": "0xb8accbddc09565269a5c60223bf6fe387d304e0a58f2ec38351c92e73f614a08",
            "blockNumber": "16656417",
            "timestamp": "1729081122",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x94ad1a2a8550d256caca6f64e190e2a334e4b6ac8af9443ce03fea1fa938b0cd",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572982595d1509b770fa52681e260af4dda9752b87316d7c048535d8ead3fa856eb10000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_io",
            "gasUsed": 146222,
            "gasCost": "1797669809",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "io_pyth_oracle_id": "0x94ad1a2a8550d256caca6f64e190e2a334e4b6ac8af9443ce03fea1fa938b0cd"
        }
      },
      "hash": "9392a4e8ea948d9ee105c1c9312e7906",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_mew": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_mew": {
            "hash": "0x958eba958fb4433ad8544e796d011f88eeee6b4016981e66d12e9d5a1804c889",
            "blockNumber": "16656419",
            "timestamp": "1729081126",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb48ed3c0b7a6909801a0a7cf04c067ba76cde54ee4e1e0c78c72b25618d36d67",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729514aed52ca5294177f20187ae883cec4a018619772ddce41efcc36a6448f5d5d0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_mew",
            "gasUsed": 146222,
            "gasCost": "1812716338",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "mew_pyth_oracle_id": "0xb48ed3c0b7a6909801a0a7cf04c067ba76cde54ee4e1e0c78c72b25618d36d67"
        }
      },
      "hash": "cf9882a587479fe452b9f8350e0240c6",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_mkr": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_mkr": {
            "hash": "0xcb6e77c104b9057f7783cdf32a64eee9fc95b6c11a3e4199a82f6a049b2b99e1",
            "blockNumber": "16656421",
            "timestamp": "1729081130",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xbf6fcc37ca417a51d3c5d20c2ca38211fe18ad33b16f4e0f524f2e8587fa07f3",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57299375299e31c0deb9c6bc378e6329aab44cb48ec655552a70d4b9050346a303780000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_mkr",
            "gasUsed": 146222,
            "gasCost": "1804095968",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "mkr_pyth_oracle_id": "0xbf6fcc37ca417a51d3c5d20c2ca38211fe18ad33b16f4e0f524f2e8587fa07f3"
        }
      },
      "hash": "04e26eeff92299d28e48bdd8e17b07ab",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_not": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_not": {
            "hash": "0x94a7e2aad2db4739246c8cf8db9f1ba6a55cf24482f0b01d37d156b8711b9575",
            "blockNumber": "16656423",
            "timestamp": "1729081134",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8400141eb8f82cc275dd7548fe1b289ba5a3847c49cd096213bcc824c9c1657d",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572975ec6f04d4bded6afdc1440689be4402dd1e23d2ff2c21e081871eb2739ceb360000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_not",
            "gasUsed": 146222,
            "gasCost": "1810572885",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "not_pyth_oracle_id": "0x8400141eb8f82cc275dd7548fe1b289ba5a3847c49cd096213bcc824c9c1657d"
        }
      },
      "hash": "138322f9cdfe2ae75e6e20e6f64dcd4a",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_eigen": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_eigen": {
            "hash": "0x670377ee802f089e464b07ff17e64c41eec34933d92ae235cc9788c48cdf7467",
            "blockNumber": "17174163",
            "timestamp": "1730116614",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x4203788c9a4e2325b2a7f0e8459824b6bb56185097b6ef24694b02eb3ded8392",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dc65db025687356496e8653d0d6608eec64ce2d96e2e28c530e574f0e4f712380000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_eigen",
            "gasUsed": 51474,
            "gasCost": "1000354",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eigen_lookup_oracle_id": "0x4203788c9a4e2325b2a7f0e8459824b6bb56185097b6ef24694b02eb3ded8392"
        }
      },
      "hash": "10fef3000f321cd037b9656e8157f609",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_io": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_io": {
            "hash": "0x055b95bd49fd879c1c9bd93256e66de65ff8e69f5023555a77daa7652e48bef5",
            "blockNumber": "17174165",
            "timestamp": "1730116618",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8b4e07e0a729c6147e0be69b2d7f6dbab4454b482d5ccea3e0e29cb053937026",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d82595d1509b770fa52681e260af4dda9752b87316d7c048535d8ead3fa856eb1000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_io",
            "gasUsed": 51474,
            "gasCost": "1000354",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "io_lookup_oracle_id": "0x8b4e07e0a729c6147e0be69b2d7f6dbab4454b482d5ccea3e0e29cb053937026"
        }
      },
      "hash": "2888c7e718c6367a1a1e70da7fa7edf7",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_mew": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_mew": {
            "hash": "0x943c47f83c6cd81d4c055a4adea986e05f0c450cc5423ba04dbd08fb0799fbcd",
            "blockNumber": "17174167",
            "timestamp": "1730116622",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc8ea49fbe78c84fbc152918c7995fe03fa46acbc3851a26c14366877fc618137",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d514aed52ca5294177f20187ae883cec4a018619772ddce41efcc36a6448f5d5d000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_mew",
            "gasUsed": 51474,
            "gasCost": "1000354",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "mew_lookup_oracle_id": "0xc8ea49fbe78c84fbc152918c7995fe03fa46acbc3851a26c14366877fc618137"
        }
      },
      "hash": "16544cd5d8f98ecc2168586780045308",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_mkr": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_mkr": {
            "hash": "0xc0353e582dd192523fc94c44966bcb4b7beff3bd344ffc1368d48c4f70cd5b04",
            "blockNumber": "17174169",
            "timestamp": "1730116626",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x0bc696fc22935514bdfad5285e6e83b9522a33c73907058f347f333b20c41673",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d9375299e31c0deb9c6bc378e6329aab44cb48ec655552a70d4b9050346a30378000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_mkr",
            "gasUsed": 51474,
            "gasCost": "1000354",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "mkr_lookup_oracle_id": "0x0bc696fc22935514bdfad5285e6e83b9522a33c73907058f347f333b20c41673"
        }
      },
      "hash": "683873d092c74fed55b22c2a1f94c8bc",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_not": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_not": {
            "hash": "0x86c37456207b69f62ced4ebeede4d2497b185ef04d57b84f18512fb72c37cd88",
            "blockNumber": "17174171",
            "timestamp": "1730116630",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x65a4da9c46548af47b486b14f3aa65d17e2b41780c908a1ae99e6648bf803562",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d75ec6f04d4bded6afdc1440689be4402dd1e23d2ff2c21e081871eb2739ceb36000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_not",
            "gasUsed": 51474,
            "gasCost": "1000354",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "not_lookup_oracle_id": "0x65a4da9c46548af47b486b14f3aa65d17e2b41780c908a1ae99e6648bf803562"
        }
      },
      "hash": "53db91505e01eb2c3d053e45020b46b2",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_people": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_people": {
            "hash": "0x3933adb007efc20800cc03af1ecbefc1afbd072ab57b4eec4709b69ba2bee9a2",
            "blockNumber": "17174173",
            "timestamp": "1730116634",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1996f2280855d485c6bd14751df878b694b5b08b115f9649ff2823a0c3a56cd1",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db7fe919d83815ca6074c82a3286b1cd6ffb7d3136e323cd2b1ef706cfc7e5945000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_people",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "people_lookup_oracle_id": "0x1996f2280855d485c6bd14751df878b694b5b08b115f9649ff2823a0c3a56cd1"
        }
      },
      "hash": "19c2705d7a84a0cd6a9273a4a2211f77",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_pol": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_pol": {
            "hash": "0xe70dcf5ccbc733a7a7c7a44ff13662bc701f88a5c4c5b080cc71ba4fcc336171",
            "blockNumber": "17174175",
            "timestamp": "1730116638",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd226925a73d16ef1b835fa56355c6c83a5efaf3f8e612bf57992ef823d5add6c",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd70472000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_pol",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pol_lookup_oracle_id": "0xd226925a73d16ef1b835fa56355c6c83a5efaf3f8e612bf57992ef823d5add6c"
        }
      },
      "hash": "f02711ec6a4221fb5bc749bafebe7dad",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_popcat": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_popcat": {
            "hash": "0x4071ce0697e8cd5e8b2d1e9324d07a855134f446b961e02c5a02c5bfd4e990f3",
            "blockNumber": "17174177",
            "timestamp": "1730116642",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8fa44f9bbb68ecfc4da1930ab92131119f7e4a18025d5e3a3bfbb4b219303c51",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56db9312a7ee50e189ef045aa3c7842e099b061bd9bdc99ac645956c3b660dc8cce000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_popcat",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "popcat_lookup_oracle_id": "0x8fa44f9bbb68ecfc4da1930ab92131119f7e4a18025d5e3a3bfbb4b219303c51"
        }
      },
      "hash": "2d4806b8b7417a909217e02ebc8489c1",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_render": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_render": {
            "hash": "0xff5cb2715f5713a586b07703a73f3f19e214b43c3720bd73ec641c7f33908820",
            "blockNumber": "17174179",
            "timestamp": "1730116646",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd4a7c8be9b405623982962e51d34c983c394b074083089be847200e62eb2e017",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_render",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "render_lookup_oracle_id": "0xd4a7c8be9b405623982962e51d34c983c394b074083089be847200e62eb2e017"
        }
      },
      "hash": "380b06f89276b76c1fd656bdae873b8f",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_sats": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_sats": {
            "hash": "0x2127395eec13591a585b8f93f9b2be10443447cefe557d8cf4c4371cbc7bd413",
            "blockNumber": "17174181",
            "timestamp": "1730116650",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x159005ca9da5b0aaea56e99c2293c95be7e0799b1ddcb9055ad3f3a47534013f",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d40440d18fb5ad809e2825ce7dfc035cfa57135c13062a04addafe0c7f54425e0000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_sats",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sats_lookup_oracle_id": "0x159005ca9da5b0aaea56e99c2293c95be7e0799b1ddcb9055ad3f3a47534013f"
        }
      },
      "hash": "a332786c730140339058202dfc8a600a",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_wld": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_wld": {
            "hash": "0x1ea175e909417776f30b513334ff786cbe6dcd40bc911f2b93c7d8af384e22e9",
            "blockNumber": "17174184",
            "timestamp": "1730116656",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x60761e42a1845d44dd4e5a0c32de21149af95d52076013172644e398acfabd04",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56dd6835ad1f773de4a378115eb6824bd0c0e42d84d1c84d9750e853fb6b6c7794a000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_wld",
            "gasUsed": 51474,
            "gasCost": "1000355",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wld_lookup_oracle_id": "0x60761e42a1845d44dd4e5a0c32de21149af95d52076013172644e398acfabd04"
        }
      },
      "hash": "95fc2a7371ce7fd098ddf37329ee0d4d",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_zro": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_offchain_lookup_zro": {
            "hash": "0x19ce5094631d1556cdcc35c9662df093915b8cfd7d637f845c095c89d2768114",
            "blockNumber": "17174186",
            "timestamp": "1730116660",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x54f1525e72c318c4fab582e053bcd61382113a12244ec77d7d37135c2f065e73",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d3bd860bea28bf982fa06bcf358118064bb114086cc03993bd76197eaab0b8018000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_offchain_lookup_zro",
            "gasUsed": 51474,
            "gasCost": "1000356",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "zro_lookup_oracle_id": "0x54f1525e72c318c4fab582e053bcd61382113a12244ec77d7d37135c2f065e73"
        }
      },
      "hash": "cf19206667ee6fb8161e83c3a47a8429",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_people": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_people": {
            "hash": "0xea691ff6dbf38a1e2adfb85d12b275c2038446f7a68f6871e72ce7d4b2383e32",
            "blockNumber": "16656451",
            "timestamp": "1729081190",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x448c2832327966d0dca443ca2d386f2ad3c61bc9f0ec1dc7b68aba5cde27fce0",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b7fe919d83815ca6074c82a3286b1cd6ffb7d3136e323cd2b1ef706cfc7e59450000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_people",
            "gasUsed": 146222,
            "gasCost": "1804697697",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "people_pyth_oracle_id": "0x448c2832327966d0dca443ca2d386f2ad3c61bc9f0ec1dc7b68aba5cde27fce0"
        }
      },
      "hash": "af465313d98a76501db9aae674c86e9e",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_pol": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_pol": {
            "hash": "0xd052a646f6113f8edb73957571c57a493c58021ffeb8bae969582d37d7d4e365",
            "blockNumber": "16656453",
            "timestamp": "1729081194",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x09f7ef1688eeb812fcbc5433140a2a30d10e471d4dd14d722a24bf6869746cd3",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729ffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd704720000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_pol",
            "gasUsed": 51462,
            "gasCost": "1804895351",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pol_pyth_oracle_id": "0x09f7ef1688eeb812fcbc5433140a2a30d10e471d4dd14d722a24bf6869746cd3"
        }
      },
      "hash": "44eea6c625e7b5eaa1f7219ca0eb14cd",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_popcat": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_popcat": {
            "hash": "0x2dc44b2185ad99ebcaeece354e105e830b29e5f33f54f3bdc7307143e2b6a5b0",
            "blockNumber": "16656455",
            "timestamp": "1729081198",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x0eb88975cfb09fea0db61472663365136d91eb49adf4fa780a2919683ba070ac",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729b9312a7ee50e189ef045aa3c7842e099b061bd9bdc99ac645956c3b660dc8cce0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_popcat",
            "gasUsed": 146222,
            "gasCost": "1799145731",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "popcat_pyth_oracle_id": "0x0eb88975cfb09fea0db61472663365136d91eb49adf4fa780a2919683ba070ac"
        }
      },
      "hash": "ad716239ae25c8cb0c22f8c94dd5682e",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_render": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_render": {
            "hash": "0xe48a77cd130357a1e31e6228bef310e41d1ad18008ebdfe1ac11f998311ad7ec",
            "blockNumber": "16656457",
            "timestamp": "1729081202",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x50c4108d9a18e2179b58dac2a5182356dc8b77731c43a80f2703c3d8523cf71c",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57293d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_render",
            "gasUsed": 51462,
            "gasCost": "1799919369",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "render_pyth_oracle_id": "0x50c4108d9a18e2179b58dac2a5182356dc8b77731c43a80f2703c3d8523cf71c"
        }
      },
      "hash": "2491d4b2921927ce47d5b3142e1dee21",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_sats": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_sats": {
            "hash": "0x2ef4514da7d1db167bb5489fe01b9f773d5873ba763c3a67cca9be07f00dda44",
            "blockNumber": "16656459",
            "timestamp": "1729081206",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xf9649816eba6a58324ecca4d7de2218b1b5640d2dd5ab1ebc7c7ce1f00dfae43",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572940440d18fb5ad809e2825ce7dfc035cfa57135c13062a04addafe0c7f54425e00000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_sats",
            "gasUsed": 146222,
            "gasCost": "1804056747",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sats_pyth_oracle_id": "0xf9649816eba6a58324ecca4d7de2218b1b5640d2dd5ab1ebc7c7ce1f00dfae43"
        }
      },
      "hash": "5434ce0168e11e7c9980c3e41f99c7b5",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_wld": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_wld": {
            "hash": "0x8fb7ba6cc93a93ad9745acc55505e6862522f26618dccbc35b855c2166e599ba",
            "blockNumber": "16656461",
            "timestamp": "1729081210",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x91b956b6dd3e2ec78b2398cdcd054299d786232b9af6fc5f06b8aa0e25218e25",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b5729d6835ad1f773de4a378115eb6824bd0c0e42d84d1c84d9750e853fb6b6c7794a0000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_wld",
            "gasUsed": 146222,
            "gasCost": "1801025477",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wld_pyth_oracle_id": "0x91b956b6dd3e2ec78b2398cdcd054299d786232b9af6fc5f06b8aa0e25218e25"
        }
      },
      "hash": "fe0b71224039769ec97271268505fc04",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_pyth_zro": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_pyth_zro": {
            "hash": "0xbe2363c8c790eff7e3a140be7f3113ae9933fd0f4905f7f538e44f607390e04a",
            "blockNumber": "16656463",
            "timestamp": "1729081214",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xf7e89de1506eb717772673bc708a6f68c3f573a6189793b8e86cf491d3c3f6d3",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57293bd860bea28bf982fa06bcf358118064bb114086cc03993bd76197eaab0b80180000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_pyth_zro",
            "gasUsed": 146222,
            "gasCost": "1801769049",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "zro_pyth_oracle_id": "0xf7e89de1506eb717772673bc708a6f68c3f573a6189793b8e86cf491d3c3f6d3"
        }
      },
      "hash": "8bdd4ea5037cd38fdbeb7876eebf3c84",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_eigen": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_eigen": {
            "hash": "0x32b6f56845ed7889a0217b830714168b6774aff1a14cb7f6abb338f129c1e203",
            "blockNumber": "17174344",
            "timestamp": "1730116976",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x044aa7ad58a81da65459c06ff2fc2b9f86b51aa44146499e3b949991c3510921",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x9705bf502a0a6792473eb84862bfdae5d3a8cfa8ca110b061b24f37f7cec673a",
                      "0x4203788c9a4e2325b2a7f0e8459824b6bb56185097b6ef24694b02eb3ded8392"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_eigen",
            "gasUsed": 51877,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eigen_oracle_id": "0x044aa7ad58a81da65459c06ff2fc2b9f86b51aa44146499e3b949991c3510921"
        }
      },
      "hash": "cffc96324833d749c04f23f66187dbad",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_io": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_io": {
            "hash": "0xb672cf97a16777003cdca2b21ab89299b4c847425898667bbfef0611e6b4232b",
            "blockNumber": "17174346",
            "timestamp": "1730116980",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8c7c9f8c6312b890093caa7473d907364595cf4ec4be5ec99e25c8dcb26b0355",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x94ad1a2a8550d256caca6f64e190e2a334e4b6ac8af9443ce03fea1fa938b0cd",
                      "0x8b4e07e0a729c6147e0be69b2d7f6dbab4454b482d5ccea3e0e29cb053937026"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_io",
            "gasUsed": 51877,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "io_oracle_id": "0x8c7c9f8c6312b890093caa7473d907364595cf4ec4be5ec99e25c8dcb26b0355"
        }
      },
      "hash": "b8d59b82a362f62dcb22574562aaac36",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_mew": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_mew": {
            "hash": "0xca812ef27b9810f8e378eba32a4f762d7eb683b1e24dcc05f7ecd565b06b5f7e",
            "blockNumber": "17174348",
            "timestamp": "1730116984",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xd6368e51c17f9ac246981edbae054c983ac459249ffe337e69cf59eb635541e5",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xb48ed3c0b7a6909801a0a7cf04c067ba76cde54ee4e1e0c78c72b25618d36d67",
                      "0xc8ea49fbe78c84fbc152918c7995fe03fa46acbc3851a26c14366877fc618137"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_mew",
            "gasUsed": 51877,
            "gasCost": "1000386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "mew_oracle_id": "0xd6368e51c17f9ac246981edbae054c983ac459249ffe337e69cf59eb635541e5"
        }
      },
      "hash": "40add8d57948873de8df10589c0139d5",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_mkr": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_mkr": {
            "hash": "0x5e84d55f56725040dc19d81f6ed6424120db5e9ed65588bead2b63cdc9c7c638",
            "blockNumber": "17174350",
            "timestamp": "1730116988",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x609bcc16eeb1287c45f84a72cca41062109acc7d69461e8a73564f118960e779",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xbf6fcc37ca417a51d3c5d20c2ca38211fe18ad33b16f4e0f524f2e8587fa07f3",
                      "0x0bc696fc22935514bdfad5285e6e83b9522a33c73907058f347f333b20c41673"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_mkr",
            "gasUsed": 51877,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "mkr_oracle_id": "0x609bcc16eeb1287c45f84a72cca41062109acc7d69461e8a73564f118960e779"
        }
      },
      "hash": "5d55d2898284f58159d541a395497318",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_not": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_not": {
            "hash": "0xaddf3d23b0ecbcaf288c1ce49538345829dd6317ad2988b7a54ed1c07e053111",
            "blockNumber": "17174352",
            "timestamp": "1730116992",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x84e58acdf79cda8dfc8ef23f3fb5e85943ea911d34b5833239e68acd97bfb2d1",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x8400141eb8f82cc275dd7548fe1b289ba5a3847c49cd096213bcc824c9c1657d",
                      "0x65a4da9c46548af47b486b14f3aa65d17e2b41780c908a1ae99e6648bf803562"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_not",
            "gasUsed": 51865,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "not_oracle_id": "0x84e58acdf79cda8dfc8ef23f3fb5e85943ea911d34b5833239e68acd97bfb2d1"
        }
      },
      "hash": "d5cb3b9105729d8c7471aef6998742c7",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_people": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_people": {
            "hash": "0xbfc66551c18cc5ab53343501a36de0120fb5b572a5649c6e0265197a60ee3e22",
            "blockNumber": "17174354",
            "timestamp": "1730116996",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x5ea5cab8aac18741eb836ef4c6263e59105589c42361137544cdb66262d13ef9",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x448c2832327966d0dca443ca2d386f2ad3c61bc9f0ec1dc7b68aba5cde27fce0",
                      "0x1996f2280855d485c6bd14751df878b694b5b08b115f9649ff2823a0c3a56cd1"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_people",
            "gasUsed": 51877,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "people_oracle_id": "0x5ea5cab8aac18741eb836ef4c6263e59105589c42361137544cdb66262d13ef9"
        }
      },
      "hash": "fe663b3e912b74b903983588a4c1cf15",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_pol": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_pol": {
            "hash": "0x702466cb621dcd5b856005040a0cf369cd60f9fd02f4f83a1e4607d4e3e115b7",
            "blockNumber": "17174356",
            "timestamp": "1730117000",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x8eeaf55aa741713e78fed72064d8352292e0e3df123c36f674cb27f19bace022",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x09f7ef1688eeb812fcbc5433140a2a30d10e471d4dd14d722a24bf6869746cd3",
                      "0xd226925a73d16ef1b835fa56355c6c83a5efaf3f8e612bf57992ef823d5add6c"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_pol",
            "gasUsed": 51877,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pol_oracle_id": "0x8eeaf55aa741713e78fed72064d8352292e0e3df123c36f674cb27f19bace022"
        }
      },
      "hash": "4f027cbcf3c9e31466f868cc4f03638f",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_popcat": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_popcat": {
            "hash": "0xf39a47357dfbe4fe6b263a2a0ee0dfb6aff38badd7b9f10fd43c191e9a530d08",
            "blockNumber": "17174358",
            "timestamp": "1730117004",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x70b953282bef8c228d2d5b6896376d113749ca00a7332c292942f4c935485c8d",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x0eb88975cfb09fea0db61472663365136d91eb49adf4fa780a2919683ba070ac",
                      "0x8fa44f9bbb68ecfc4da1930ab92131119f7e4a18025d5e3a3bfbb4b219303c51"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_popcat",
            "gasUsed": 51877,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "popcat_oracle_id": "0x70b953282bef8c228d2d5b6896376d113749ca00a7332c292942f4c935485c8d"
        }
      },
      "hash": "e0b08681d7ade82e113f091f69a41e95",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_render": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_render": {
            "hash": "0xc6f1dfca121a1d74ee61359d7c8ab44ad1aeb8462b892aff76a4519307b47cfa",
            "blockNumber": "17174360",
            "timestamp": "1730117008",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb04e06c4be2997e52efe0789ef28aa4a968b7fb0f7e356832829f347ea912c6c",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x50c4108d9a18e2179b58dac2a5182356dc8b77731c43a80f2703c3d8523cf71c",
                      "0xd4a7c8be9b405623982962e51d34c983c394b074083089be847200e62eb2e017"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_render",
            "gasUsed": 51865,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "render_oracle_id": "0xb04e06c4be2997e52efe0789ef28aa4a968b7fb0f7e356832829f347ea912c6c"
        }
      },
      "hash": "94161a95fc26939c8c23283a10ac0a91",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_sats": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_sats": {
            "hash": "0x5abbc37634648604a0b14eb66bafce0e1b7a04ef65b87a02a2915ff59d232dca",
            "blockNumber": "17174362",
            "timestamp": "1730117012",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x62b22a3f1fa37ce19f40c18a67b8b4d1b1b5dee98fa084c3d110e02b47d3d922",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xf9649816eba6a58324ecca4d7de2218b1b5640d2dd5ab1ebc7c7ce1f00dfae43",
                      "0x159005ca9da5b0aaea56e99c2293c95be7e0799b1ddcb9055ad3f3a47534013f"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_sats",
            "gasUsed": 51865,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sats_oracle_id": "0x62b22a3f1fa37ce19f40c18a67b8b4d1b1b5dee98fa084c3d110e02b47d3d922"
        }
      },
      "hash": "8ca150e6cca89baa96fbee7af95a7bb0",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_wld": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_wld": {
            "hash": "0x90c2884c04b1f0c6e89a974e6a843484a86e5a32001e7cfca5f01093d89fcedb",
            "blockNumber": "17174364",
            "timestamp": "1730117016",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x18e7abaf2d1715901d11185ac15198184c99afde463fb9c1d9a59fc5e7ed7e71",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x91b956b6dd3e2ec78b2398cdcd054299d786232b9af6fc5f06b8aa0e25218e25",
                      "0x60761e42a1845d44dd4e5a0c32de21149af95d52076013172644e398acfabd04"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_wld",
            "gasUsed": 51877,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wld_oracle_id": "0x18e7abaf2d1715901d11185ac15198184c99afde463fb9c1d9a59fc5e7ed7e71"
        }
      },
      "hash": "aa46a6fc8230f7375eac8e0dd9af5b5e",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_staleness_zro": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_staleness_zro": {
            "hash": "0x23166bcd44ac29b467bdbaeb9a03d8309e2939ef3ec561e5825fa61570389926",
            "blockNumber": "17174366",
            "timestamp": "1730117020",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xb4c24a004d04f2b4c6e89ad26adcf8a5de81c3bb9bcb78bd7075bd28927cce81",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0xf7e89de1506eb717772673bc708a6f68c3f573a6189793b8e86cf491d3c3f6d3",
                      "0x54f1525e72c318c4fab582e053bcd61382113a12244ec77d7d37135c2f065e73"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_staleness_zro",
            "gasUsed": 51877,
            "gasCost": "1000384",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "zro_oracle_id": "0xb4c24a004d04f2b4c6e89ad26adcf8a5de81c3bb9bcb78bd7075bd28927cce81"
        }
      },
      "hash": "bb4f89bddce953032583b95497a02c6a",
      "version": 7
    },
    "invoke.addPerpsEigenSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsEigenSettlementStrategy": {
            "hash": "0x2bbcae6eb02e0042b4f12b4a2a35abc9aabfc90c073503d877b418011321d71a",
            "blockNumber": "16656492",
            "timestamp": "1729081272",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsEigenSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1805727004",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "eigen_pyth_settlement_strategy": "0"
        }
      },
      "hash": "046387c1a974b15bb38991d937c279e2",
      "version": 7
    },
    "invoke.addPerpsIoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsIoSettlementStrategy": {
            "hash": "0x1a04200653ec4f15037faa02a6fa54810f2074cf9ef45a1ec0490b0a6a949b78",
            "blockNumber": "16656494",
            "timestamp": "1729081276",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsIoSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1808654386",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "io_pyth_settlement_strategy": "0"
        }
      },
      "hash": "0f9d752cd83621df3418c28cc5c3543c",
      "version": 7
    },
    "invoke.addPerpsMewSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsMewSettlementStrategy": {
            "hash": "0x1a0808b30a6b07a33f176e26671dbb0c7a68ffbff75b3271681449a1b05300e3",
            "blockNumber": "16656496",
            "timestamp": "1729081280",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7500",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsMewSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1810038087",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "mew_pyth_settlement_strategy": "0"
        }
      },
      "hash": "97332c0832cfa8af0b69a618c31e00f4",
      "version": 7
    },
    "invoke.addPerpsMkrSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsMkrSettlementStrategy": {
            "hash": "0xfd165ef4486d7dd71850541d186e51388b52df32083257e9267708ebefff7b84",
            "blockNumber": "16656498",
            "timestamp": "1729081284",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7600",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsMkrSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1808012101",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "mkr_pyth_settlement_strategy": "0"
        }
      },
      "hash": "7260480b61659f2b9e84084f75d924e5",
      "version": 7
    },
    "invoke.addPerpsNotSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsNotSettlementStrategy": {
            "hash": "0x37bdb609755abda04f0597c66f2963b15613331faeb44fcd3b0adc3565794e5c",
            "blockNumber": "16656501",
            "timestamp": "1729081290",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7700",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsNotSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1808177841",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "not_pyth_settlement_strategy": "0"
        }
      },
      "hash": "ac5bca74f34335fd076309ce3254819d",
      "version": 7
    },
    "invoke.addPerpsPeopleSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsPeopleSettlementStrategy": {
            "hash": "0x67d23ecded1fd33357e6c319b3506e251e881c672e0b4049fe8e4696263a04e2",
            "blockNumber": "16656503",
            "timestamp": "1729081294",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7800",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsPeopleSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1816518511",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "people_pyth_settlement_strategy": "0"
        }
      },
      "hash": "6c90db6ac1bc031e14be962a8feade06",
      "version": 7
    },
    "invoke.addPerpsPolSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsPolSettlementStrategy": {
            "hash": "0x7acd54262a3f4037f3f0880a2d0c1b8bf2dfac2674600a8535ddd127583306de",
            "blockNumber": "16656505",
            "timestamp": "1729081298",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7900",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsPolSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1807414599",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "pol_pyth_settlement_strategy": "0"
        }
      },
      "hash": "904b336d0349b56ccfc983eb1ef85c76",
      "version": 7
    },
    "invoke.addPerpsPopcatSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsPopcatSettlementStrategy": {
            "hash": "0xbc9f97480853595157f58b88714c1ea43a1bc16905fe78902614a1b9bbd65d68",
            "blockNumber": "16656507",
            "timestamp": "1729081302",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "8000",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsPopcatSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1808847405",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "popcat_pyth_settlement_strategy": "0"
        }
      },
      "hash": "b8ac68eeabb22c784874cdd218acb299",
      "version": 7
    },
    "invoke.addPerpsRenderSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsRenderSettlementStrategy": {
            "hash": "0xf9a6ff0183d70ccabff6e20c26cef2b0c01e5d9c8605b997a1b0b6b18df96345",
            "blockNumber": "16656509",
            "timestamp": "1729081306",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "8100",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsRenderSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1825561204",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "render_pyth_settlement_strategy": "0"
        }
      },
      "hash": "762193585113b32eeeb37f395d6f167d",
      "version": 7
    },
    "invoke.addPerpsSatsSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsSatsSettlementStrategy": {
            "hash": "0x30ba4e153c8a82064a09d68a0ee3670c54e5188187c921bcb3909ff524d5fc5f",
            "blockNumber": "16656511",
            "timestamp": "1729081310",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "8200",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsSatsSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1816447779",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "sats_pyth_settlement_strategy": "0"
        }
      },
      "hash": "04710f856c6cc8da52a3d2a0c09ec969",
      "version": 7
    },
    "invoke.addPerpsWldSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsWldSettlementStrategy": {
            "hash": "0x6cebb30f88f83cd040e138525b687c73dbae4bcc2d6ff8f8c047b9fe3a69cf4c",
            "blockNumber": "16656513",
            "timestamp": "1729081314",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "8300",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsWldSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1820533150",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wld_pyth_settlement_strategy": "0"
        }
      },
      "hash": "1d03f81b49b81c43d7d36c9f0645e740",
      "version": 7
    },
    "invoke.addPerpsZroSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "addPerpsZroSettlementStrategy": {
            "hash": "0xb5bce6ce0a682d6e8e0a35f2a421e83129a2d23b85142e4903f962f025ade1cc",
            "blockNumber": "16656516",
            "timestamp": "1729081320",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "8400",
                    {
                      "strategyType": 0,
                      "settlementDelay": "1",
                      "settlementWindowDuration": "1",
                      "priceVerificationContract": "0x0000000000000000000000000000000000000000",
                      "feedId": "0x0000000000000000000000000000000000000000000000000000000000000000",
                      "settlementReward": "0",
                      "disabled": false,
                      "commitmentPriceDelay": "0"
                    },
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.addPerpsZroSettlementStrategy",
            "gasUsed": 118430,
            "gasCost": "1832310957",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "zro_pyth_settlement_strategy": "0"
        }
      },
      "hash": "804841ec0307aba214dd24eed3fbe0b2",
      "version": 7
    },
    "invoke.createEigenPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createEigenPerpsMarket": {
            "hash": "0x9584e6eca3ed1e6059e488e2d14c1588f0f9465c5174bdc79ee20614e3aeee40",
            "blockNumber": "16656519",
            "timestamp": "1729081326",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7300",
                    "Eigenlayer",
                    "EIGEN"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createEigenPerpsMarket",
            "gasUsed": 166029,
            "gasCost": "1830848940",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5a7625fa78c6700ce11d08377bf6827c",
      "version": 7
    },
    "invoke.createIoPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createIoPerpsMarket": {
            "hash": "0x1e4eb4817b78abc3cb70c0bfd0821a0018dc14e8315bbbcb0f0916519e26a593",
            "blockNumber": "16656521",
            "timestamp": "1729081330",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7400",
                    "io.net",
                    "IO"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createIoPerpsMarket",
            "gasUsed": 165945,
            "gasCost": "1824880103",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "31318865d9d9915ad0776b086da209b0",
      "version": 7
    },
    "invoke.createMewPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createMewPerpsMarket": {
            "hash": "0xe3fabba9e7b598dfeacfa52bda63a8220954bf5b76a8fb32ec5c89fb934cfdb4",
            "blockNumber": "16656523",
            "timestamp": "1729081334",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7500",
                    "Cat in a dogs world",
                    "MEW"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createMewPerpsMarket",
            "gasUsed": 166113,
            "gasCost": "1819978952",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8b2eb480aa1c358d1645092269cd53b2",
      "version": 7
    },
    "invoke.createMkrPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createMkrPerpsMarket": {
            "hash": "0x79dc354cedfd9cc3ee77c04354d37124d944f2ddc2b5de055112143e19f75019",
            "blockNumber": "16656525",
            "timestamp": "1729081338",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7600",
                    "Maker",
                    "MKR"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createMkrPerpsMarket",
            "gasUsed": 165945,
            "gasCost": "1822151032",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1628dc4d0bfa219b01e6b615734a91c1",
      "version": 7
    },
    "invoke.createNotPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createNotPerpsMarket": {
            "hash": "0x2a7b055eb83361ffff66b7653b421c85e7d50944f211a794d06a5847bc227079",
            "blockNumber": "16656527",
            "timestamp": "1729081342",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7700",
                    "Notcoin",
                    "NOT"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createNotPerpsMarket",
            "gasUsed": 165969,
            "gasCost": "1825353702",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "39b75a7aa7b6abab548629cc735aa3af",
      "version": 7
    },
    "invoke.createPeoplePerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createPeoplePerpsMarket": {
            "hash": "0x4fcae44629b3821db378f868c1606626fd27d61960960e740fa59d1b0139fe9b",
            "blockNumber": "16656530",
            "timestamp": "1729081348",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7800",
                    "ConstitutionDAO",
                    "PEOPLE"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createPeoplePerpsMarket",
            "gasUsed": 166101,
            "gasCost": "1829737325",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "21819c37172e9e69ceb1dad8a8512921",
      "version": 7
    },
    "invoke.createPolPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createPolPerpsMarket": {
            "hash": "0x7042ed13dd0b90fe09421e498afbf7596bdc68db976c0349a5a2d2963f56edf5",
            "blockNumber": "16656532",
            "timestamp": "1729081352",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "7900",
                    "Polygon",
                    "POL"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createPolPerpsMarket",
            "gasUsed": 165969,
            "gasCost": "1821803343",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f1b9fab0f5fb438d0c29f507430e8359",
      "version": 7
    },
    "invoke.createPopcatPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createPopcatPerpsMarket": {
            "hash": "0xd8ae73af26c6161c67f3c21b325e18496c7dc67542fba593a78c1f9f65934c3a",
            "blockNumber": "16656534",
            "timestamp": "1729081356",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "8000",
                    "Popcat",
                    "POPCAT"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createPopcatPerpsMarket",
            "gasUsed": 165993,
            "gasCost": "1828549767",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "83eb995a54aebd81334e27b4075e6b81",
      "version": 7
    },
    "invoke.createRenderPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createRenderPerpsMarket": {
            "hash": "0x3218eb3b2058e540b919d7e329c67899f2b3ba13daedb0809ab61ca2fd978bba",
            "blockNumber": "16656537",
            "timestamp": "1729081362",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "8100",
                    "Render",
                    "RENDER"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createRenderPerpsMarket",
            "gasUsed": 165993,
            "gasCost": "1826462468",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "57911441a9861ca9e0630e68403249a8",
      "version": 7
    },
    "invoke.createSatsPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createSatsPerpsMarket": {
            "hash": "0xf17bafbbede8aa63f790382d2c86fcdd653aa5b14e73bcb0c5e4d710a8d712fc",
            "blockNumber": "16656539",
            "timestamp": "1729081366",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "8200",
                    "Ordinals",
                    "SATS"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createSatsPerpsMarket",
            "gasUsed": 165993,
            "gasCost": "1822280633",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a20dee47ab014759517e93cc2eb8d32e",
      "version": 7
    },
    "invoke.createWldPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createWldPerpsMarket": {
            "hash": "0xb35cf90cbe850b038d677cba54e6bc7ee547ac22c1263c63192832bbd76ab5d4",
            "blockNumber": "16656542",
            "timestamp": "1729081372",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "8300",
                    "Worldcoin",
                    "WLD"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createWldPerpsMarket",
            "gasUsed": 165993,
            "gasCost": "1823229337",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a7c1d361abdb00e926e355a64e47208c",
      "version": 7
    },
    "invoke.createZroPerpsMarket": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createZroPerpsMarket": {
            "hash": "0x1cf0a1045f45729d9a803cde7a45fcc15d2d0a0e07e5ab29d6815ff93accc622",
            "blockNumber": "16656544",
            "timestamp": "1729081376",
            "events": {
              "MarketCreated": [
                {
                  "name": "MarketCreated",
                  "args": [
                    "8400",
                    "LayerZero",
                    "ZRO"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createZroPerpsMarket",
            "gasUsed": 165993,
            "gasCost": "1826963604",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c18f71be9bd2e0730c0cde7013f5c9e7",
      "version": 7
    },
    "invoke.setPerpsEigenFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEigenFundingParameters": {
            "hash": "0x723201525acedf91e9a4e99436763521e1a01b530262d6c35bf184ea739c2f02",
            "blockNumber": "16656548",
            "timestamp": "1729081384",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7300",
                    "4000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEigenFundingParameters",
            "gasUsed": 79248,
            "gasCost": "1826695643",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "527f720e20f67f43c8a23ccbc7607b9a",
      "version": 7
    },
    "invoke.setPerpsEigenLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEigenLiquidationParameters": {
            "hash": "0x7eaf926f3d3fa1fa486a894fd7e80cd17bd7695747f7f7c7e9e4dff9c0fa5cfd",
            "blockNumber": "16656550",
            "timestamp": "1729081388",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7300",
                    "910000000000000000",
                    "334000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEigenLiquidationParameters",
            "gasUsed": 147155,
            "gasCost": "1836320105",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "bda9719d8610936d59ee352c929dc4b9",
      "version": 7
    },
    "invoke.setPerpsEigenLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEigenLockedOiRatio": {
            "hash": "0xb458b1e2d733c69db667a0a878ea1f68a4e5ed57b7fd5619e609b7fb42d6d001",
            "blockNumber": "16656552",
            "timestamp": "1729081392",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEigenLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1836094549",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "838e5b8973396652f3265479d99f6e53",
      "version": 7
    },
    "invoke.setPerpsEigenMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEigenMaxLiquidationParameters": {
            "hash": "0xbc7cada47da98151cb9c1b185b78857cde1342932fbf1cf09fbefb03205d7dbd",
            "blockNumber": "16656554",
            "timestamp": "1729081396",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEigenMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1827639244",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "85f29f0a16dda527a6d709829b8281f0",
      "version": 7
    },
    "invoke.setPerpsEigenMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEigenMaxMarketSize": {
            "hash": "0xb161494670d167db833d41d7580f7581fff0bc9b32d97a06dcfe2bea069a2971",
            "blockNumber": "16656556",
            "timestamp": "1729081400",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7300",
                    "268820000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEigenMaxMarketSize",
            "gasUsed": 56613,
            "gasCost": "1829415077",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "efaca9274b8364daf7ab3ca28f5fe121",
      "version": 7
    },
    "invoke.setPerpsEigenMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEigenMaxMarketValue": {
            "hash": "0x03e4761078bc62391121c77f4cbcf18ae86be8124dc10530676a81f61084ee73",
            "blockNumber": "16656558",
            "timestamp": "1729081404",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7300",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEigenMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1823889677",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b833e60c2db074a03e43e76298dcaebc",
      "version": 7
    },
    "invoke.setPerpsEigenOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEigenOrderFees": {
            "hash": "0x784b7a1a77a880e50ce2bda8f2505b3d86d08c0501cbff594d0a239ad0962b42",
            "blockNumber": "16656560",
            "timestamp": "1729081408",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7300",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEigenOrderFees",
            "gasUsed": 59266,
            "gasCost": "1826187726",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c97e1f520f72823049de538dac1cc161",
      "version": 7
    },
    "invoke.setPerpsIoFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIoFundingParameters": {
            "hash": "0xf916d339940b67e75a2d3ada126d9f31428081d5eb7f3d4e84a3d500f4701bd6",
            "blockNumber": "16656564",
            "timestamp": "1729081416",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7400",
                    "6000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIoFundingParameters",
            "gasUsed": 79248,
            "gasCost": "1826314347",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "407b605027021f10d26b01fce48c09ff",
      "version": 7
    },
    "invoke.setPerpsIoLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIoLiquidationParameters": {
            "hash": "0x7787c6e386c1fb6f80f050b288cc0c3c27b96875d2128153494d438bb363e71f",
            "blockNumber": "16656566",
            "timestamp": "1729081420",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7400",
                    "694000000000000000",
                    "334000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIoLiquidationParameters",
            "gasUsed": 147155,
            "gasCost": "1830473432",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "136afd17ff21d8abf789c2dc31f0ba04",
      "version": 7
    },
    "invoke.setPerpsIoLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIoLockedOiRatio": {
            "hash": "0x6b2228df83df7bfd87860f1bc5fc2f0c50be0943ceb44c83be45df77f661a074",
            "blockNumber": "16656568",
            "timestamp": "1729081424",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIoLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1828357621",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b696621afa5693840e29c0efb8478afe",
      "version": 7
    },
    "invoke.setPerpsIoMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIoMaxLiquidationParameters": {
            "hash": "0x509833473317496cc14bdbb5d69a3dc5d73c854bccae40d71e27abd87763d164",
            "blockNumber": "16656570",
            "timestamp": "1729081428",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIoMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1826302202",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e0502b95d301f8e493ed9e5bf5ccd097",
      "version": 7
    },
    "invoke.setPerpsIoMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIoMaxMarketSize": {
            "hash": "0xf4045a6e2ae8f7ea01c9b9cd729c02034bf5655d7a292f82869384c2c9fa7207",
            "blockNumber": "16656572",
            "timestamp": "1729081432",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7400",
                    "477550000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIoMaxMarketSize",
            "gasUsed": 56613,
            "gasCost": "1832054493",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "646704d8dd33d873aa10ad16a95a7d10",
      "version": 7
    },
    "invoke.setPerpsIoMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIoMaxMarketValue": {
            "hash": "0xb20ef39f6b15f8f7d1578f431b3f5b250dcd75fe44057d5dd91fe1e2f4eafb7b",
            "blockNumber": "16656574",
            "timestamp": "1729081436",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7400",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIoMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1829323389",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "08f284c073e069d9ff53f79dad8ec1b7",
      "version": 7
    },
    "invoke.setPerpsIoOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIoOrderFees": {
            "hash": "0x28bf0fc77c8806078cae0af56075645e4ab70b6ab656c5819064ea31f3574d10",
            "blockNumber": "16656576",
            "timestamp": "1729081440",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7400",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIoOrderFees",
            "gasUsed": 59266,
            "gasCost": "1831610361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c57825664f8d0cf99143ee27002e5b67",
      "version": 7
    },
    "invoke.setPerpsMewFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMewFundingParameters": {
            "hash": "0x2972b64025ff6dc953e6456d16541b2a6576dd4aea1442b7d627bd49e3f4fede",
            "blockNumber": "16656579",
            "timestamp": "1729081446",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7500",
                    "2500000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMewFundingParameters",
            "gasUsed": 79260,
            "gasCost": "1823060838",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5866e8c136b7d109c60472a5511027aa",
      "version": 7
    },
    "invoke.setPerpsMewLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMewLiquidationParameters": {
            "hash": "0x99c4fe504e0754b298b5647c58f6b0ab2284bf8657512c4bbf9ed578f931e500",
            "blockNumber": "16656581",
            "timestamp": "1729081450",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7500",
                    "1597000000000000000",
                    "328000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMewLiquidationParameters",
            "gasUsed": 147167,
            "gasCost": "1819855631",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dcf615fb3bad3e477606ec0f4b53617e",
      "version": 7
    },
    "invoke.setPerpsMewLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMewLockedOiRatio": {
            "hash": "0x0924e922bf5e961a0b5a1ac3f4c8bd1e04be9956956553d03624a680e36669e4",
            "blockNumber": "16656583",
            "timestamp": "1729081454",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7500",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMewLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1823949739",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e307d31efa67a72ace9530452ccf3d5c",
      "version": 7
    },
    "invoke.setPerpsMewMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMewMaxLiquidationParameters": {
            "hash": "0x12424eda5f99f3595f0b04196f2a2cbe18c01555b4a26cf4f3ab44d35129f1f0",
            "blockNumber": "16656585",
            "timestamp": "1729081458",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7500",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMewMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1824539710",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d56e0ee2ce358902889ef0155e01c471",
      "version": 7
    },
    "invoke.setPerpsMewMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMewMaxMarketSize": {
            "hash": "0x71ea27d72c9b67a473292d1d7a62e3dcb80535a560f4b7b78dcd90a0104e20b1",
            "blockNumber": "16656587",
            "timestamp": "1729081462",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7500",
                    "123319770000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMewMaxMarketSize",
            "gasUsed": 56625,
            "gasCost": "1822300097",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b6ff5d89c493863300fe013c707d68aa",
      "version": 7
    },
    "invoke.setPerpsMewMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMewMaxMarketValue": {
            "hash": "0x12a5e06ff310e71e7422e21c7a43cb35b1d76672505e3249e04901085e4cd960",
            "blockNumber": "16656589",
            "timestamp": "1729081466",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7500",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMewMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1821010577",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "480a7a6ee62f1a6bb8b2fd894a230aa4",
      "version": 7
    },
    "invoke.setPerpsMewOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMewOrderFees": {
            "hash": "0x09ce57abfa439bf2ddc53394308473db7325330072b38cec76f9e3fb1ee8c2e0",
            "blockNumber": "16656592",
            "timestamp": "1729081472",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7500",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMewOrderFees",
            "gasUsed": 59266,
            "gasCost": "1822427951",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f33aa4aacb3596e0dc059517f857f5f2",
      "version": 7
    },
    "invoke.setPerpsMkrFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMkrFundingParameters": {
            "hash": "0xc0e3a2d85afa595096a241242c7cdf7f1007377206d306c23385bf28130b946a",
            "blockNumber": "16656595",
            "timestamp": "1729081478",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7600",
                    "9000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMkrFundingParameters",
            "gasUsed": 79248,
            "gasCost": "1830573982",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "386bdc495513ea6eff104b284a24781f",
      "version": 7
    },
    "invoke.setPerpsMkrLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMkrLiquidationParameters": {
            "hash": "0xeb22d7d559851f09c82966f4aed7d196c93dd697602b054dbdb93978dfc6d501",
            "blockNumber": "16656597",
            "timestamp": "1729081482",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7600",
                    "1200000000000000000",
                    "330000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMkrLiquidationParameters",
            "gasUsed": 147155,
            "gasCost": "1825801677",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "affaab629b468a71bed0ac45ab621a7f",
      "version": 7
    },
    "invoke.setPerpsMkrLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMkrLockedOiRatio": {
            "hash": "0x74d9d037a0b54583e137131dfd31630b9ad183713557650a71866b6aea2f8ec9",
            "blockNumber": "16656599",
            "timestamp": "1729081486",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7600",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMkrLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1829737380",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c44a2cb8e644c22f8902e9c946a3fe1e",
      "version": 7
    },
    "invoke.setPerpsMkrMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMkrMaxLiquidationParameters": {
            "hash": "0x600497f1f63cd1674cad7c790254ff699f0c07d8b5858d04b5810f224304289d",
            "blockNumber": "16656601",
            "timestamp": "1729081490",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7600",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x95A61Fa7454CA5f6A3CE01724e306Cd14a22D306"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMkrMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1824603699",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "92571fa0c0115248dfc5b9633973b368",
      "version": 7
    },
    "invoke.setPerpsMkrMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMkrMaxMarketSize": {
            "hash": "0x1cdaf6ab20d8673e02c5832b1c83dc85a698f9f6bb9a28f2af551cc01f72e73c",
            "blockNumber": "16656604",
            "timestamp": "1729081496",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7600",
                    "1200000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMkrMaxMarketSize",
            "gasUsed": 56601,
            "gasCost": "1827728417",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fde36fd00e6e8e0f38de3cb0d42575cc",
      "version": 7
    },
    "invoke.setPerpsMkrMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMkrMaxMarketValue": {
            "hash": "0xbc49039a3738b55b40985dae98d06db0eb7dbff43a2803847ecbbe76ed182764",
            "blockNumber": "16656607",
            "timestamp": "1729081502",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7600",
                    "2000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMkrMaxMarketValue",
            "gasUsed": 56702,
            "gasCost": "1831937080",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "da00fcc29dc69eaefb77a63c8061166e",
      "version": 7
    },
    "invoke.setPerpsMkrOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMkrOrderFees": {
            "hash": "0x49c27c03458d58fff90344167841450828b8ac9cb259d826af6b2f477f3c540d",
            "blockNumber": "16656609",
            "timestamp": "1729081506",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7600",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMkrOrderFees",
            "gasUsed": 59266,
            "gasCost": "1825730581",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "92136a91669f1bb8a802d2a8d3845b08",
      "version": 7
    },
    "invoke.setPerpsNotFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNotFundingParameters": {
            "hash": "0x64efc4e82d2840420625ffcbb97b56951f283c37e212c7306efc519876b76d48",
            "blockNumber": "16656611",
            "timestamp": "1729081510",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7700",
                    "5000000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNotFundingParameters",
            "gasUsed": 79260,
            "gasCost": "1826344880",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a306849f3c313e4a4a7f5a739cda392d",
      "version": 7
    },
    "invoke.setPerpsNotLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNotLiquidationParameters": {
            "hash": "0x9c11b8f6cc0a1d12ba0af384908515b14cf87059f6374e09cb87c44735dedbde",
            "blockNumber": "16656613",
            "timestamp": "1729081514",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7700",
                    "1140000000000000000",
                    "345000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNotLiquidationParameters",
            "gasUsed": 147167,
            "gasCost": "1829794864",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c2539de9ec9fc56e5efed9ad3a150e09",
      "version": 7
    },
    "invoke.setPerpsNotLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNotLockedOiRatio": {
            "hash": "0x39d599771168302ad66e8e6fadc1b457a2cb44aaf9055407f5a3b03f91a2d09e",
            "blockNumber": "16656615",
            "timestamp": "1729081518",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7700",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNotLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1832078636",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9c012611f55af81ea3703f6cd6320a9c",
      "version": 7
    },
    "invoke.setPerpsNotMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNotMaxLiquidationParameters": {
            "hash": "0x30f58b63190f3cf5e5d5de6536dfd12cf51d5430771c5b382af850556302412f",
            "blockNumber": "16656618",
            "timestamp": "1729081524",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7700",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNotMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1829868877",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0aaf96d8a7e04ac6884d8f1612893128",
      "version": 7
    },
    "invoke.setPerpsNotMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNotMaxMarketSize": {
            "hash": "0xed15d0dcef31e4ba12bd0df0234ce9370dfb75e38d2386fb2e4cdcca2767d974",
            "blockNumber": "16656620",
            "timestamp": "1729081528",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7700",
                    "118077700000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNotMaxMarketSize",
            "gasUsed": 56625,
            "gasCost": "1833040169",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6a10e362162241c630a06893bd35046a",
      "version": 7
    },
    "invoke.setPerpsNotMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNotMaxMarketValue": {
            "hash": "0x8302df2c3d6bbbe692bba11d68a14f0c603675e89fd0afceaabc92833cb46040",
            "blockNumber": "16656622",
            "timestamp": "1729081532",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7700",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNotMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1824063183",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ed07e70ddf37ebb7860ef8230b33ab44",
      "version": 7
    },
    "invoke.setPerpsNotOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNotOrderFees": {
            "hash": "0x9f057d6780183037afc9e3495be96d45cb75e531385cd3e43e48682dd8b74094",
            "blockNumber": "16656624",
            "timestamp": "1729081536",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7700",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNotOrderFees",
            "gasUsed": 59266,
            "gasCost": "1822820046",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0ccd55657d25ceec04990b457ab91425",
      "version": 7
    },
    "invoke.setPerpsPeopleFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPeopleFundingParameters": {
            "hash": "0x63791310321634c327b869266907b4298f88c8a5491f4db09999d7a868bba3b7",
            "blockNumber": "16656626",
            "timestamp": "1729081540",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7800",
                    "500000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPeopleFundingParameters",
            "gasUsed": 79260,
            "gasCost": "1830986094",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ccbd3d063c12471a63c1d20e7ee4984e",
      "version": 7
    },
    "invoke.setPerpsPeopleLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPeopleLiquidationParameters": {
            "hash": "0x0539f9e7246e05f81749fe4e4c64e8f1a9db85fde4d6d1f04972f7155d1efd2d",
            "blockNumber": "16656628",
            "timestamp": "1729081544",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7800",
                    "2403000000000000000",
                    "334000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPeopleLiquidationParameters",
            "gasUsed": 147167,
            "gasCost": "1827721145",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "748c501432760881da420efb777fbe2e",
      "version": 7
    },
    "invoke.setPerpsPeopleLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPeopleLockedOiRatio": {
            "hash": "0xf5036c1b0aa8070c8ef9e178cf885ec4ce7991975022181e9cfabe2d3a9ed575",
            "blockNumber": "16656630",
            "timestamp": "1729081548",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7800",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPeopleLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1823509799",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "35408b250987e5eed620347bbacc4839",
      "version": 7
    },
    "invoke.setPerpsPeopleMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPeopleMaxLiquidationParameters": {
            "hash": "0xf6f10d26accc0b778f4d72361e771faeda4d50bfeef189bf74e5f2fd4fbaf959",
            "blockNumber": "16656633",
            "timestamp": "1729081554",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7800",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPeopleMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1825238887",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5db48aec0e88175daed3840e4fd842af",
      "version": 7
    },
    "invoke.setPerpsPeopleMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPeopleMaxMarketSize": {
            "hash": "0x80935c65c1f85ebec75b921092d18e7c279e0affa0f15807ffce105cdeed534d",
            "blockNumber": "16656635",
            "timestamp": "1729081558",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7800",
                    "11341730000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPeopleMaxMarketSize",
            "gasUsed": 56625,
            "gasCost": "1825185279",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d025f2c771452b4d08de977b82d431e1",
      "version": 7
    },
    "invoke.setPerpsPeopleMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPeopleMaxMarketValue": {
            "hash": "0x84b615d4f7576221a31108a595431e0eba6ec48f9ff82e00f2e8e976f30a1c46",
            "blockNumber": "16656637",
            "timestamp": "1729081562",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7800",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPeopleMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1834466211",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7b983e12da905c8fd70b077fe780eb17",
      "version": 7
    },
    "invoke.setPerpsPeopleOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPeopleOrderFees": {
            "hash": "0xc3ce56a61f8f05705b56496f15443495d74dcb536b4de2e9e86ab3591611e8ee",
            "blockNumber": "16656639",
            "timestamp": "1729081566",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7800",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPeopleOrderFees",
            "gasUsed": 59266,
            "gasCost": "1824881950",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e263dc1322b2814f463a362b32c2d5de",
      "version": 7
    },
    "invoke.setPerpsPolFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPolFundingParameters": {
            "hash": "0x3c08699f2e387a8dbdf7588a6e67422d6b433e9342eab271cf446c5c7d7dd4c3",
            "blockNumber": "16656642",
            "timestamp": "1729081572",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "7900",
                    "75000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPolFundingParameters",
            "gasUsed": 79248,
            "gasCost": "1824726342",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9b782a704be6fe0a6fa9cdbe438f5e56",
      "version": 7
    },
    "invoke.setPerpsPolLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPolLiquidationParameters": {
            "hash": "0xb61a2683946c91ae116bfcaf8e315dd6239ceba3407df25958cb3f56a3adbb73",
            "blockNumber": "16656644",
            "timestamp": "1729081576",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "7900",
                    "1800000000000000000",
                    "370000000000000000",
                    "20000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPolLiquidationParameters",
            "gasUsed": 147155,
            "gasCost": "1835927455",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3fdc0b48d2309f82a8dfd9d1c279ab6a",
      "version": 7
    },
    "invoke.setPerpsPolLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPolLockedOiRatio": {
            "hash": "0x30cb6bd1bbcc45469884adab6f873d1d39001dcee5917c7b004aafd69839f49a",
            "blockNumber": "16656646",
            "timestamp": "1729081580",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "7900",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPolLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1832042869",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a1238f3cd0d68c547a26bc7faf87c554",
      "version": 7
    },
    "invoke.setPerpsPolMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPolMaxLiquidationParameters": {
            "hash": "0x0350e3d7058ccd42e82f11df429fa4e6623572793163134a7f6748d24fd937df",
            "blockNumber": "16656649",
            "timestamp": "1729081586",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "7900",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x95A61Fa7454CA5f6A3CE01724e306Cd14a22D306"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPolMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1831136045",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "19345dffbba4f192655a943556a10a8f",
      "version": 7
    },
    "invoke.setPerpsPolMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPolMaxMarketSize": {
            "hash": "0xbd88e55b0ebd378cf612b98f42f186dc9edf4c3f9a9dc353d24fab457d2a5ba1",
            "blockNumber": "16656651",
            "timestamp": "1729081590",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "7900",
                    "7500000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPolMaxMarketSize",
            "gasUsed": 56613,
            "gasCost": "1844948092",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2156f10453d6067aabadef9e94918fe0",
      "version": 7
    },
    "invoke.setPerpsPolMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPolMaxMarketValue": {
            "hash": "0xef4b2c1822761acdbf238f87a894d4172717da418c714316625546078d2bc934",
            "blockNumber": "16656653",
            "timestamp": "1729081594",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "7900",
                    "3000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPolMaxMarketValue",
            "gasUsed": 56702,
            "gasCost": "1835922679",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f06ecfa001a0676272ba149fa44472b4",
      "version": 7
    },
    "invoke.setPerpsPolOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPolOrderFees": {
            "hash": "0x767ef4d3203843086b2c69853e9216b7795d70e37392cecce6b579ae96a6b3b5",
            "blockNumber": "16656655",
            "timestamp": "1729081598",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "7900",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPolOrderFees",
            "gasUsed": 59266,
            "gasCost": "1833425733",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d0000afe73b34750f05226e3669786d6",
      "version": 7
    },
    "invoke.setPerpsPopcatFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPopcatFundingParameters": {
            "hash": "0x13ed2214c32e7ac7066f3900fd2d74126d0334e1714d80a26d25d951261924f5",
            "blockNumber": "16656657",
            "timestamp": "1729081602",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "8000",
                    "20250000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPopcatFundingParameters",
            "gasUsed": 79260,
            "gasCost": "1831167562",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ad0323184b70270f07de3a1117adc01a",
      "version": 7
    },
    "invoke.setPerpsPopcatLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPopcatLiquidationParameters": {
            "hash": "0xa57dbf54161ca4a4e3d9cce59440437fa2c3f1537821de55095c9a744abe906c",
            "blockNumber": "16656659",
            "timestamp": "1729081606",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "8000",
                    "2808000000000000000",
                    "328000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPopcatLiquidationParameters",
            "gasUsed": 147155,
            "gasCost": "1831884151",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "41ff1d760484c8bb84c6fe94a23a727f",
      "version": 7
    },
    "invoke.setPerpsPopcatLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPopcatLockedOiRatio": {
            "hash": "0x0aa60ce0fc70574cb0839bcfa636a7dd5f2b0b9887ab122465c3f13045f3ead0",
            "blockNumber": "16656661",
            "timestamp": "1729081610",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "8000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPopcatLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1827775594",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "68ae4065b6343441b72c9c1d4d51278a",
      "version": 7
    },
    "invoke.setPerpsPopcatMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPopcatMaxLiquidationParameters": {
            "hash": "0xc7af1e7653f91ab20c71ce2159a733ce9b88b09008c01eca159893377d3873d9",
            "blockNumber": "16656664",
            "timestamp": "1729081616",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "8000",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPopcatMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1831011136",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e2ccd10fecf4c48d1f778d941d117acc",
      "version": 7
    },
    "invoke.setPerpsPopcatMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPopcatMaxMarketSize": {
            "hash": "0x1d109777c07a9cd79947e873143f69518dd9c92fcf833775da90b8e018f2f683",
            "blockNumber": "16656666",
            "timestamp": "1729081620",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "8000",
                    "711490000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPopcatMaxMarketSize",
            "gasUsed": 56613,
            "gasCost": "1833907077",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b63369e59b2daf2173061600d4c4f9da",
      "version": 7
    },
    "invoke.setPerpsPopcatMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPopcatMaxMarketValue": {
            "hash": "0x6a2a128f69205d6e2802199aaf90fb05e97e4ba70ca02b3d17a7a2fae117bb96",
            "blockNumber": "16656668",
            "timestamp": "1729081624",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "8000",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPopcatMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1831732392",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c6e4ad55968944cd00cb5bb8b5088288",
      "version": 7
    },
    "invoke.setPerpsPopcatOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPopcatOrderFees": {
            "hash": "0x5c962c298cd989d9cd34f2df524351f9ccb686cb93a9041af9984532a13075b1",
            "blockNumber": "16656670",
            "timestamp": "1729081628",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "8000",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPopcatOrderFees",
            "gasUsed": 59266,
            "gasCost": "1828896986",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b13e29f0f4966a7150d9660666c9c77d",
      "version": 7
    },
    "invoke.setPerpsPriceEigen": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceEigen": {
            "hash": "0x3409fa293a94c96c62311bff38b331f1a29bc5fe0d71eb9b166509de50574d28",
            "blockNumber": "17174602",
            "timestamp": "1730117492",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7300",
                    "0x044aa7ad58a81da65459c06ff2fc2b9f86b51aa44146499e3b949991c3510921",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceEigen",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fd575a17c2607586653a1789686df242",
      "version": 7
    },
    "invoke.setPerpsPriceIo": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceIo": {
            "hash": "0x9d7ec12ed6d5a72f966eaa1af7032bd62686fab24bb164570527785941a3dbc0",
            "blockNumber": "17174636",
            "timestamp": "1730117560",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7400",
                    "0x8c7c9f8c6312b890093caa7473d907364595cf4ec4be5ec99e25c8dcb26b0355",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceIo",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "259981dcb9b6fac19e034b48a7f85a87",
      "version": 7
    },
    "invoke.setPerpsPriceMkr": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceMkr": {
            "hash": "0x2afc7c497117a88a2840a970c167ec87f578dd3fd54724378c21d8225955a56a",
            "blockNumber": "17174654",
            "timestamp": "1730117596",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7600",
                    "0x609bcc16eeb1287c45f84a72cca41062109acc7d69461e8a73564f118960e779",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceMkr",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "28fc20878af80f2ea9ea54ce2533b8ab",
      "version": 7
    },
    "invoke.setPerpsPriceNot": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceNot": {
            "hash": "0xe73f5a6ef05781f67282e93d02e9242ecf588a207de14ff93647368060fd76ca",
            "blockNumber": "17174656",
            "timestamp": "1730117600",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7700",
                    "0x84e58acdf79cda8dfc8ef23f3fb5e85943ea911d34b5833239e68acd97bfb2d1",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceNot",
            "gasUsed": 39771,
            "gasCost": "1000361",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "73eb5c1601793bba9657706bb33aeac2",
      "version": 7
    },
    "invoke.setPerpsPricePeople": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPricePeople": {
            "hash": "0x42dc0677918a335c9d325120dc224374680d0e39b9793f4d24ea020a8871f71c",
            "blockNumber": "17174664",
            "timestamp": "1730117616",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7800",
                    "0x5ea5cab8aac18741eb836ef4c6263e59105589c42361137544cdb66262d13ef9",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPricePeople",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9b8a8f0b81270adc3de02b96f8d53254",
      "version": 7
    },
    "invoke.setPerpsPricePol": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPricePol": {
            "hash": "0xa11fa2c2c90edf2d38b12b34ebae50533ee11819fd38883d76465a2d114fed5e",
            "blockNumber": "17174668",
            "timestamp": "1730117624",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7900",
                    "0x8eeaf55aa741713e78fed72064d8352292e0e3df123c36f674cb27f19bace022",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPricePol",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ee27fe1d6441832b5be2f59e7d0493fa",
      "version": 7
    },
    "invoke.setPerpsPricePopcat": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPricePopcat": {
            "hash": "0x104a7a001ae4aa321778768323807b8262fb541b312de38bbc46b2b20f9e3f1f",
            "blockNumber": "17174670",
            "timestamp": "1730117628",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "8000",
                    "0x70b953282bef8c228d2d5b6896376d113749ca00a7332c292942f4c935485c8d",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPricePopcat",
            "gasUsed": 39759,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "86326bf90cfec6c2f22ae3e22506d339",
      "version": 7
    },
    "invoke.setPerpsPriceRender": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceRender": {
            "hash": "0x690f18c3760d208f09b5dc955968304131912e5558b5274f755dea2ead2a4f0e",
            "blockNumber": "17174674",
            "timestamp": "1730117636",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "8100",
                    "0xb04e06c4be2997e52efe0789ef28aa4a968b7fb0f7e356832829f347ea912c6c",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceRender",
            "gasUsed": 39771,
            "gasCost": "1000364",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e049768681895ad472a289ee17048bba",
      "version": 7
    },
    "invoke.setPerpsPriceSats": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceSats": {
            "hash": "0xfa9ff20a1d0e27971d3b3a01267fefe16a2faab52867e4ab277a394cdb8e1d8b",
            "blockNumber": "17174680",
            "timestamp": "1730117648",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "8200",
                    "0x62b22a3f1fa37ce19f40c18a67b8b4d1b1b5dee98fa084c3d110e02b47d3d922",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceSats",
            "gasUsed": 39771,
            "gasCost": "1000363",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5dc255db777c8606825bb402c5f7e9f7",
      "version": 7
    },
    "invoke.setPerpsPriceWld": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceWld": {
            "hash": "0x26059ccd58aa045fd7b544e9a492c1e01ac10e7bbfa44b7e8b2b1b28df44940d",
            "blockNumber": "17174728",
            "timestamp": "1730117744",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "8300",
                    "0x18e7abaf2d1715901d11185ac15198184c99afde463fb9c1d9a59fc5e7ed7e71",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceWld",
            "gasUsed": 39771,
            "gasCost": "1000351",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "db00eca8c0aab5c4c158e185e2a878e0",
      "version": 7
    },
    "invoke.setPerpsPriceZro": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceZro": {
            "hash": "0x3ce6393ae93627a3893e3177c970eb7715179e944a56bfdeffb72c4e8b4bc66b",
            "blockNumber": "17174740",
            "timestamp": "1730117768",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "8400",
                    "0xb4c24a004d04f2b4c6e89ad26adcf8a5de81c3bb9bcb78bd7075bd28927cce81",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceZro",
            "gasUsed": 39759,
            "gasCost": "1000350",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "883682f6d07caa3fedf31f538d840049",
      "version": 7
    },
    "invoke.setPerpsRenderFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRenderFundingParameters": {
            "hash": "0x5a5a95738393ba7138e4562a5e866202a9f9878be9c50c840c448183d07f86b1",
            "blockNumber": "16656698",
            "timestamp": "1729081684",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "8100",
                    "2250000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRenderFundingParameters",
            "gasUsed": 79260,
            "gasCost": "1858288610",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "99dc64c050c4f964169a5f982acfced2",
      "version": 7
    },
    "invoke.setPerpsRenderLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRenderLiquidationParameters": {
            "hash": "0x8a1feaba65150f42e050b32d4cf409cea69cec4a14110577ac5e3f86097c6157",
            "blockNumber": "16656704",
            "timestamp": "1729081696",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "8100",
                    "1467000000000000000",
                    "325000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRenderLiquidationParameters",
            "gasUsed": 147167,
            "gasCost": "1819691946",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3b69c7005079a73aca5d7246cf74ccbe",
      "version": 7
    },
    "invoke.setPerpsRenderLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRenderLockedOiRatio": {
            "hash": "0x4490f08a18eaefc2e60be2dfe4b0b53e79aa3adcf52049fb706018243493041a",
            "blockNumber": "16656707",
            "timestamp": "1729081702",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "8100",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRenderLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1840424861",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d574aba0a388e62dc0d6c1582661cb9d",
      "version": 7
    },
    "invoke.setPerpsRenderMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRenderMaxLiquidationParameters": {
            "hash": "0xc7326748590ea108794afdac27e2013049f71cba30761682f0b1d95afd1eeab7",
            "blockNumber": "16656709",
            "timestamp": "1729081706",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "8100",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRenderMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1842492007",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9429d7a6822240c57f56126db89cc359",
      "version": 7
    },
    "invoke.setPerpsRenderMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRenderMaxMarketSize": {
            "hash": "0x6aad6538804125b19de617db2ba10a74c1cb095b02edc2796ff1c27808d9738f",
            "blockNumber": "16656711",
            "timestamp": "1729081710",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "8100",
                    "179630000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRenderMaxMarketSize",
            "gasUsed": 56613,
            "gasCost": "1848976626",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9d3fdcaa73c8c0154c36ab5b11048f10",
      "version": 7
    },
    "invoke.setPerpsRenderMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRenderMaxMarketValue": {
            "hash": "0xac3f296035bed42d8276a7026efaa3782abc7a6776cdaab2b7e991d9e269277a",
            "blockNumber": "16656716",
            "timestamp": "1729081720",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "8100",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRenderMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1834845883",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "665ad53aa6733f2142979c4ceb95e372",
      "version": 7
    },
    "invoke.setPerpsRenderOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRenderOrderFees": {
            "hash": "0x4339dbd258792840cd85dbe9a603e98943a3ffab97f97a454606876b001ac4d2",
            "blockNumber": "16656721",
            "timestamp": "1729081730",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "8100",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRenderOrderFees",
            "gasUsed": 59266,
            "gasCost": "1831730856",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "047a21f0e6c30e3ee8491b345e878638",
      "version": 7
    },
    "invoke.setPerpsSatsFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSatsFundingParameters": {
            "hash": "0x2c0af605cf7d3872ee6bb92d7692bb3df0e4c1161862e09069aec760145f9bdd",
            "blockNumber": "16656723",
            "timestamp": "1729081734",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "8200",
                    "100000000000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSatsFundingParameters",
            "gasUsed": 79272,
            "gasCost": "1850130470",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a566081f6624008c27f4e83f3f53b3d5",
      "version": 7
    },
    "invoke.setPerpsSatsLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSatsLiquidationParameters": {
            "hash": "0xc0c5af7a7ede6a7b00ae40cffc4ead41179e0246e05976c1d9305b448726cbb8",
            "blockNumber": "16656725",
            "timestamp": "1729081738",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "8200",
                    "907000000000000000",
                    "345000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSatsLiquidationParameters",
            "gasUsed": 147179,
            "gasCost": "1855898472",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "482f4fa38a0e4091a622837566c39042",
      "version": 7
    },
    "invoke.setPerpsSatsLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSatsLockedOiRatio": {
            "hash": "0x6cf1d45dd8803f657b4e62265bfbaed259d5d950788cb4c456c8e03e6b9f532b",
            "blockNumber": "16656727",
            "timestamp": "1729081742",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "8200",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSatsLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1848665055",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "eeb39f41cc7e6460a1143e5770130991",
      "version": 7
    },
    "invoke.setPerpsSatsMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSatsMaxLiquidationParameters": {
            "hash": "0x587c3a801b25834a804a42b53b5e7b1a8c43737d63f0c3eca344aa253d71f908",
            "blockNumber": "16656729",
            "timestamp": "1729081746",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "8200",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSatsMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1847253783",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9b89353aead8eb51e16fa323f697e6a2",
      "version": 7
    },
    "invoke.setPerpsSatsMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSatsMaxMarketSize": {
            "hash": "0xa6e551ddd573df211488b51e17a2469f518501ccc1377c5e0b7a0708e337f1cc",
            "blockNumber": "16656735",
            "timestamp": "1729081758",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "8200",
                    "3332222592470000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSatsMaxMarketSize",
            "gasUsed": 56649,
            "gasCost": "1832246608",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fe3ab5a2206d48f0f354f5b93fd8d80e",
      "version": 7
    },
    "invoke.setPerpsSatsMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSatsMaxMarketValue": {
            "hash": "0xa6743dbd61756bdf5822ee9c40c9864e66553a3090812da2a91c6fa4f4928c00",
            "blockNumber": "16656739",
            "timestamp": "1729081766",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "8200",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSatsMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1854115901",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "148e22d66ec0ac737e2daf98c05c96ef",
      "version": 7
    },
    "invoke.setPerpsSatsOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSatsOrderFees": {
            "hash": "0xd508ef640410da694091fba357be1bdb373a1a91917b1aff6ba4ecf5c573be33",
            "blockNumber": "16656741",
            "timestamp": "1729081770",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "8200",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSatsOrderFees",
            "gasUsed": 59266,
            "gasCost": "1854652498",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e37c4c5d42bdbd3d7905c648ae53882a",
      "version": 7
    },
    "invoke.setPerpsWldFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWldFundingParameters": {
            "hash": "0xd756eb3e811c8d2a1028991962f10f88dc72713a22d66b73082fd77b68de2b6b",
            "blockNumber": "16656765",
            "timestamp": "1729081818",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "8300",
                    "20000000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWldFundingParameters",
            "gasUsed": 79248,
            "gasCost": "1796783695",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b2aced1f8bef625f2d041615897b1058",
      "version": 7
    },
    "invoke.setPerpsWldLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWldLiquidationParameters": {
            "hash": "0x5012d0472736e7fe1ca6b2f03bed3f79aa978482d4b9954d666426a80f831e52",
            "blockNumber": "16656769",
            "timestamp": "1729081826",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "8300",
                    "1168000000000000000",
                    "335000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWldLiquidationParameters",
            "gasUsed": 147167,
            "gasCost": "1795269539",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6ef136186e55144ac68d8aa2325654f5",
      "version": 7
    },
    "invoke.setPerpsWldLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWldLockedOiRatio": {
            "hash": "0x770ca8e6982999364e0a6152969d3fd4d8a2b0fe2d3c40c42eeb97cb0bc0839a",
            "blockNumber": "16656771",
            "timestamp": "1729081830",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "8300",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWldLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1816001721",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fde8ed70780c8955b7a3dba551ae4ed0",
      "version": 7
    },
    "invoke.setPerpsWldMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWldMaxLiquidationParameters": {
            "hash": "0xafe89e8acb7a7326eaafe5fabe0f6c5ca4c70210796f1e5b2e02b5ed785238ec",
            "blockNumber": "16656774",
            "timestamp": "1729081836",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "8300",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWldMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1812192126",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7bde39ad5811eb1e678162665c9d13a2",
      "version": 7
    },
    "invoke.setPerpsWldMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWldMaxMarketSize": {
            "hash": "0x16719fccf6e43a8e3076aeb04475ff9e201c1ce9340d1129cd931d5abe204101",
            "blockNumber": "16656777",
            "timestamp": "1729081842",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "8300",
                    "428600000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWldMaxMarketSize",
            "gasUsed": 56613,
            "gasCost": "1818922967",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8d462bbd48d1b3f7c4a8f9eb21dbeb56",
      "version": 7
    },
    "invoke.setPerpsWldMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWldMaxMarketValue": {
            "hash": "0xd86e8b9250d13735a39d174626fadd22dbcc9c0861250a31ae8d30854f5a7eab",
            "blockNumber": "16656779",
            "timestamp": "1729081846",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "8300",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWldMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1814052250",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fb8cbe928c47dae4e30b1049e5e7711c",
      "version": 7
    },
    "invoke.setPerpsWldOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWldOrderFees": {
            "hash": "0x81ee583b0060ebc85e5c5f3f8e42bc4ed2045f36eb1dc0b62b2a581de93788ab",
            "blockNumber": "16656783",
            "timestamp": "1729081854",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "8300",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWldOrderFees",
            "gasUsed": 59266,
            "gasCost": "1810148679",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4b83112ec4828c80bf6f53e4851e3a5e",
      "version": 7
    },
    "invoke.setPerpsZroFundingParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsZroFundingParameters": {
            "hash": "0x0a9c9eefdf47ace9fdb6725d613b1559bb8db54c1a73f62719d2ec4fac1b6107",
            "blockNumber": "16656786",
            "timestamp": "1729081860",
            "events": {
              "FundingParametersSet": [
                {
                  "name": "FundingParametersSet",
                  "args": [
                    "8400",
                    "4250000000000000000000000",
                    "9000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsZroFundingParameters",
            "gasUsed": 79260,
            "gasCost": "1825262490",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1096ddaaac8dc82dc29540c658b1530d",
      "version": 7
    },
    "invoke.setPerpsZroLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsZroLiquidationParameters": {
            "hash": "0x80bd41312dbb5b948d72c32058a292e51d4560326109c16e24b69d9ffaff02ae",
            "blockNumber": "16656788",
            "timestamp": "1729081864",
            "events": {
              "LiquidationParametersSet": [
                {
                  "name": "LiquidationParametersSet",
                  "args": [
                    "8400",
                    "1037000000000000000",
                    "334000000000000000",
                    "50000000000000000",
                    "300000000000000",
                    "50000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsZroLiquidationParameters",
            "gasUsed": 147167,
            "gasCost": "1828970156",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2aa52d725d0ea438ee912ae836f417f0",
      "version": 7
    },
    "invoke.setPerpsZroLockedOiRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsZroLockedOiRatio": {
            "hash": "0x3d2479be6535ed783efda835879108f8ce980899461ccf34168173dff86364f8",
            "blockNumber": "16656790",
            "timestamp": "1729081868",
            "events": {
              "LockedOiRatioSet": [
                {
                  "name": "LockedOiRatioSet",
                  "args": [
                    "8400",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsZroLockedOiRatio",
            "gasUsed": 56556,
            "gasCost": "1827072881",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "10acc9333786ce07a79d5615f0a6d5c0",
      "version": 7
    },
    "invoke.setPerpsZroMaxLiquidationParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsZroMaxLiquidationParameters": {
            "hash": "0xc50f50ca80a131135c5e23838db9041fd3f3b0c1a739e6b50db0aa67ebdc385d",
            "blockNumber": "16656792",
            "timestamp": "1729081872",
            "events": {
              "MaxLiquidationParametersSet": [
                {
                  "name": "MaxLiquidationParametersSet",
                  "args": [
                    "8400",
                    "1500000000000000000",
                    "30",
                    "500000000000000",
                    "0x11233749514Ab8d00C0A5873DF7428b3db70030f"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsZroMaxLiquidationParameters",
            "gasUsed": 124748,
            "gasCost": "1818679133",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "72e3d9ad9eb2998b5d25b3310b1371ad",
      "version": 7
    },
    "invoke.setPerpsZroMaxMarketSize": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsZroMaxMarketSize": {
            "hash": "0xf3194cc62862011a7ee1e8ae0b252f651decd7d0d8b41c27095f419c3e050971",
            "blockNumber": "16656795",
            "timestamp": "1729081878",
            "events": {
              "MaxMarketSizeSet": [
                {
                  "name": "MaxMarketSizeSet",
                  "args": [
                    "8400",
                    "237850000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsZroMaxMarketSize",
            "gasUsed": 56613,
            "gasCost": "1821336747",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1b396d79ce2419a2e14c2560565ff219",
      "version": 7
    },
    "invoke.setPerpsZroMaxMarketValue": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsZroMaxMarketValue": {
            "hash": "0x452fd8ce7f8c2a36d2870601c55ce6b5c912fe086604896b85b2025ed0d4e7ec",
            "blockNumber": "16656797",
            "timestamp": "1729081882",
            "events": {
              "MaxMarketValueSet": [
                {
                  "name": "MaxMarketValueSet",
                  "args": [
                    "8400",
                    "1000000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsZroMaxMarketValue",
            "gasUsed": 56690,
            "gasCost": "1825134436",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "72276ef2a6526e3a919e602877850a70",
      "version": 7
    },
    "invoke.setPerpsZroOrderFees": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsZroOrderFees": {
            "hash": "0xe80697425ec0cfc856b77ee078f22af0f80b3fdbc0830846bb1cb409bca42948",
            "blockNumber": "16656800",
            "timestamp": "1729081888",
            "events": {
              "OrderFeesSet": [
                {
                  "name": "OrderFeesSet",
                  "args": [
                    "8400",
                    "0",
                    "1000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsZroOrderFees",
            "gasUsed": 59266,
            "gasCost": "1821297255",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a96246c71d669b8a4915bcf81f4741e0",
      "version": 7
    },
    "invoke.setPerpsEigenSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsEigenSettlementStrategy": {
            "hash": "0x05a784f5ce478d02eeb585689fcc726a8e38c077e464e08a13d7aab4f2d3422c",
            "blockNumber": "16656803",
            "timestamp": "1729081894",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xc65db025687356496e8653d0d6608eec64ce2d96e2e28c530e574f0e4f712380",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsEigenSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1824859249",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8044df31c043186f0be26192ce55106d",
      "version": 7
    },
    "invoke.setPerpsIoSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsIoSettlementStrategy": {
            "hash": "0x7a280f9067f2927a8c44fa7f5e690ffde20449af9fe6bed720647b6585e7c684",
            "blockNumber": "16656806",
            "timestamp": "1729081900",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x82595d1509b770fa52681e260af4dda9752b87316d7c048535d8ead3fa856eb1",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsIoSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1822545691",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7d953a23967981b23372b8ca04941246",
      "version": 7
    },
    "invoke.setPerpsMewSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMewSettlementStrategy": {
            "hash": "0x4cd1382e4d45a6f4b07af51f952f46b65d512be5f57bd96c3ca623d0af659b0e",
            "blockNumber": "16656809",
            "timestamp": "1729081906",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7500",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x514aed52ca5294177f20187ae883cec4a018619772ddce41efcc36a6448f5d5d",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMewSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1827586705",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1039c87fc6075e53ace84ff921647711",
      "version": 7
    },
    "invoke.setPerpsMkrSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsMkrSettlementStrategy": {
            "hash": "0x2bad1f16e43c582d9c15c509ebd37924d7c43f0e642c783852d5202f6b1c39c0",
            "blockNumber": "16656812",
            "timestamp": "1729081912",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7600",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x9375299e31c0deb9c6bc378e6329aab44cb48ec655552a70d4b9050346a30378",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsMkrSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1826567297",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d6ae4429d56b4c22a00738fce011e391",
      "version": 7
    },
    "invoke.setPerpsNotSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsNotSettlementStrategy": {
            "hash": "0xc8700428c79536ebb4c8e98871461913708f1175d4e1f65445b126d54a237920",
            "blockNumber": "16656816",
            "timestamp": "1729081920",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7700",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x75ec6f04d4bded6afdc1440689be4402dd1e23d2ff2c21e081871eb2739ceb36",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsNotSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1814417721",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "44ab4a4ce3e59d23437b0baafe4e46f9",
      "version": 7
    },
    "invoke.setPerpsPeopleSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPeopleSettlementStrategy": {
            "hash": "0x0bab6e1707a2e46d7a1b7befec9aea6e995b526d79273699312cc40ccd9ead96",
            "blockNumber": "16656819",
            "timestamp": "1729081926",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7800",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb7fe919d83815ca6074c82a3286b1cd6ffb7d3136e323cd2b1ef706cfc7e5945",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPeopleSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1843182840",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f14d9bed1ed4d240d7415c7fc71dc2df",
      "version": 7
    },
    "invoke.setPerpsPolSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPolSettlementStrategy": {
            "hash": "0x143e1acf4bbfb2b0abe8a763c5f2c50bdcc8907c8cf032ccc3d6f3c20de7b453",
            "blockNumber": "16656822",
            "timestamp": "1729081932",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7900",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd70472",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPolSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1846315115",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5c0230f77842cc4ac8e3dc22e387c54a",
      "version": 7
    },
    "invoke.setPerpsPopcatSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPopcatSettlementStrategy": {
            "hash": "0xd54a159ace5f03ebac22c7762e652840f426ee23b5001e448be251e5fe1a7775",
            "blockNumber": "16656824",
            "timestamp": "1729081936",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "8000",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xb9312a7ee50e189ef045aa3c7842e099b061bd9bdc99ac645956c3b660dc8cce",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPopcatSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1843760716",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5fa94d9f8d05e28a170b1e5519897f10",
      "version": 7
    },
    "invoke.setPerpsRenderSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsRenderSettlementStrategy": {
            "hash": "0xb98555d5d8a3bb439639d16e18fc90b53482c448add3785ed13cb8e65da0d687",
            "blockNumber": "16656826",
            "timestamp": "1729081940",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "8100",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsRenderSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1848915217",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "26f038d83d2378e92a0e6a9ce8113959",
      "version": 7
    },
    "invoke.setPerpsSatsSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsSatsSettlementStrategy": {
            "hash": "0xf28fb86c2a3900a1f3238e13f20dea6d76b6fdf2b2ce79fa203df3d6188faa11",
            "blockNumber": "16656828",
            "timestamp": "1729081944",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "8200",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x40440d18fb5ad809e2825ce7dfc035cfa57135c13062a04addafe0c7f54425e0",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsSatsSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1846203896",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "c5561053d2e08e115450cbbd6b389d68",
      "version": 7
    },
    "invoke.setPerpsWldSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsWldSettlementStrategy": {
            "hash": "0x8ae8dc71ac9fa1d2f1af0fe0718a7d4192073897466e9a494cbb50dddd9163a0",
            "blockNumber": "16656830",
            "timestamp": "1729081948",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "8300",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xd6835ad1f773de4a378115eb6824bd0c0e42d84d1c84d9750e853fb6b6c7794a",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsWldSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1850736246",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e660baac0fd2d5c34a3ab1bdaebeb5d0",
      "version": 7
    },
    "invoke.setPerpsZroSettlementStrategy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsZroSettlementStrategy": {
            "hash": "0x2e3f8aff312d06b3456ad5fb734a2920ed4dc80408688e0ad8f862dc3eb04ddb",
            "blockNumber": "16656832",
            "timestamp": "1729081952",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "8400",
                    "0",
                    {
                      "strategyType": 0,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x3bd860bea28bf982fa06bcf358118064bb114086cc03993bd76197eaab0b8018",
                      "settlementReward": "1000000000000000000",
                      "disabled": false,
                      "commitmentPriceDelay": "2"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsZroSettlementStrategy",
            "gasUsed": 145030,
            "gasCost": "1845231529",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "ff2060494d33ce43dcf6719d2ec946bf",
      "version": 7
    },
    "invoke.setPerpsPriceMew": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPerpsPriceMew": {
            "hash": "0x8b25d4c42e999da344f579d11d8c34de1035d784f6ce09a00ae722c1886ac963",
            "blockNumber": "17174652",
            "timestamp": "1730117592",
            "events": {
              "MarketPriceDataUpdated": [
                {
                  "name": "MarketPriceDataUpdated",
                  "args": [
                    "7500",
                    "0xd6368e51c17f9ac246981edbae054c983ac459249ffe337e69cf59eb635541e5",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPerpsPriceMew",
            "gasUsed": 39771,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6d8114ed1184abd7840831c064770467",
      "version": 7
    },
    "setting.price_deviation_tolerance": {
      "artifacts": {
        "settings": {
          "price_deviation_tolerance": "1000000000000000000"
        }
      },
      "hash": "845fb85d1e0ccaf6b0afd054626bbe97",
      "version": 7
    },
    "setting.pyth_feed_url": {
      "artifacts": {
        "settings": {
          "pyth_feed_url": "https://api.synthetix.io/pyth-mainnet/api/get_vaa_ccip?data={data}"
        }
      },
      "hash": "7cdbc8d7837fb76c09f018ecea7fe65e",
      "version": 7
    },
    "setting.settlement_max_rounding_loss": {
      "artifacts": {
        "settings": {
          "settlement_max_rounding_loss": "1000000000000"
        }
      },
      "hash": "607df2dbd59151d89ce5055ae20c68c6",
      "version": 7
    },
    "setting.settlement_minimum_usd_exchange_amount": {
      "artifacts": {
        "settings": {
          "settlement_minimum_usd_exchange_amount": "1000000000000"
        }
      },
      "hash": "607df2dbd59151d89ce5055ae20c68c6",
      "version": 7
    },
    "var.cbbtc_spot_settings": {
      "artifacts": {
        "settings": {
          "synth_cbbtc_max_collateral_amount": "100000000000000000000",
          "synth_cbbtc_skew_scale": "35000000000000000000000"
        }
      },
      "hash": "68f2f147e6e4e7eaa3ed69cdd898ee64",
      "version": 7
    },
    "var.cbbtc_synth_config": {
      "artifacts": {
        "settings": {
          "cbbtc_issuance_ratio": "10000000000000000000",
          "cbbtc_liquidation_ratio": "1500000000000000000",
          "cbbtc_liquidation_reward": "100000000000000",
          "cbbtc_min_delegation": "100000000000000000",
          "cbbtc_max_collateral_limit": "100000000000000000000"
        }
      },
      "hash": "a8ac3f1436575a14427636ad9256de5e",
      "version": 7
    },
    "var.cbeth_spot_settings": {
      "artifacts": {
        "settings": {
          "synth_cbeth_max_collateral_amount": "1750000000000000000000",
          "synth_cbeth_skew_scale": "350000000000000000000000"
        }
      },
      "hash": "606846ae2a3fb00242d0dfe993a0866f",
      "version": 7
    },
    "var.cbeth_synth_config": {
      "artifacts": {
        "settings": {
          "cbeth_issuance_ratio": "2000000000000000000",
          "cbeth_liquidation_ratio": "1100000000000000000",
          "cbeth_liquidation_reward": "100000000000000",
          "cbeth_min_delegation": "100000000000000000",
          "cbeth_max_collateral_limit": "1750000000000000000000"
        }
      },
      "hash": "90d7e446d6b8daf8839aa24d7de491d6",
      "version": 7
    },
    "var.perps_collateral_synth_cbbtc_settings": {
      "artifacts": {
        "settings": {
          "synth_cbbtc_upper_limit_discount": "75000000000000000",
          "synth_cbbtc_lower_limit_discount": "10000000000000000",
          "synth_cbbtc_discount_scalar": "1000000000000000000"
        }
      },
      "hash": "fd1fdb32fe38c55b8077bc981142b74a",
      "version": 7
    },
    "var.perps_collateral_synth_cbeth_settings": {
      "artifacts": {
        "settings": {
          "synth_cbeth_upper_limit_discount": "100000000000000000",
          "synth_cbeth_lower_limit_discount": "10000000000000000",
          "synth_cbeth_discount_scalar": "1000000000000000000"
        }
      },
      "hash": "4b95002ab9218e4441c3500175bfba36",
      "version": 7
    },
    "var.perps_collateral_synth_weth_settings": {
      "artifacts": {
        "settings": {
          "synth_weth_upper_limit_discount": "100000000000000000",
          "synth_weth_lower_limit_discount": "10000000000000000",
          "synth_weth_discount_scalar": "1000000000000000000"
        }
      },
      "hash": "2d180dfdf6209c7385eb393ca529da03",
      "version": 7
    },
    "var.perps_collateral_synth_wsteth_settings": {
      "artifacts": {
        "settings": {
          "synth_wsteth_upper_limit_discount": "100000000000000000",
          "synth_wsteth_lower_limit_discount": "10000000000000000",
          "synth_wsteth_discount_scalar": "1000000000000000000"
        }
      },
      "hash": "ac99814844a68613b3db19921cbe9f54",
      "version": 7
    },
    "var.perps_global_settings": {
      "artifacts": {
        "settings": {
          "perps_liquidation_min_keeper_reward_usd": "1000000000000000000",
          "perps_liquidation_min_keeper_profit_ratio_d18": "300000000000000000",
          "perps_liquidation_max_keeper_reward_usd": "30000000000000000000",
          "perps_liquidation_max_keeper_scaling_ratio_d18": "300000000000000000",
          "perps_low_util_gradient": "25000000000000",
          "perps_gradient_breakpoint": "800000000000000000",
          "perps_high_util_gradient": "10000000000000000",
          "perps_collateral_liquidation_ratio": "300000000000000",
          "perps_max_positions_per_account": "10",
          "perps_max_collaterals_per_account": "3"
        }
      },
      "hash": "73624468e6d43e464d6fff6229557731",
      "version": 7
    },
    "var.perps_keeper_settings": {
      "artifacts": {
        "settings": {
          "perps_keeper_l1_cost_settle_gas_units": "23000",
          "perps_keeper_l2_cost_settle_gas_units": "5500000",
          "perps_keeper_settle_tx_size": "5000",
          "perps_keeper_l1_cost_flag_gas_units": "4500",
          "perps_keeper_l2_cost_flag_gas_units": "450000",
          "perps_keeper_flag_tx_size": "3000",
          "perps_keeper_l1_cost_liquidate_gas_units": "26600",
          "perps_keeper_l2_cost_liquidate_gas_units": "2300000",
          "perps_keeper_liquidate_tx_size": "5050"
        }
      },
      "hash": "1558a8af790f5ef48c6b3cbe2d740f54",
      "version": 7
    },
    "var.scbbtc_synth_config": {
      "artifacts": {
        "settings": {
          "scbbtc_issuance_ratio": "2000000000000000000",
          "scbbtc_liquidation_ratio": "1100000000000000000",
          "scbbtc_liquidation_reward": "100000000000000",
          "scbbtc_min_delegation": "100000000000000000"
        }
      },
      "hash": "c6765a43abe2c502ab6b61d034678a9d",
      "version": 7
    },
    "var.scbeth_synth_config": {
      "artifacts": {
        "settings": {
          "scbeth_issuance_ratio": "2000000000000000000",
          "scbeth_liquidation_ratio": "1100000000000000000",
          "scbeth_liquidation_reward": "100000000000000",
          "scbeth_min_delegation": "100000000000000000"
        }
      },
      "hash": "6fc2cfbc6e23c3d1e6f8918bc8bbc6ba",
      "version": 7
    },
    "var.sstatausdc_synth_config": {
      "artifacts": {
        "settings": {
          "sstatausdc_issuance_ratio": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
          "sstatausdc_liquidation_ratio": "1100000000000000000",
          "sstatausdc_liquidation_reward": "1000000000000000000",
          "sstatausdc_min_delegation": "100000000000000000000"
        }
      },
      "hash": "5764436ea7844a798b094f93d7a07457",
      "version": 7
    },
    "var.susdc_synth_config": {
      "artifacts": {
        "settings": {
          "susdc_issuance_ratio": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
          "susdc_liquidation_ratio": "1005000000000000000",
          "susdc_liquidation_reward": "1000000000000000000",
          "susdc_min_delegation": "100000000000000000000"
        }
      },
      "hash": "bf29bfaa71a696efe43ae0dfe6edaeb6",
      "version": 7
    },
    "var.sweth_synth_config": {
      "artifacts": {
        "settings": {
          "sweth_issuance_ratio": "2000000000000000000",
          "sweth_liquidation_ratio": "1100000000000000000",
          "sweth_liquidation_reward": "100000000000000",
          "sweth_min_delegation": "100000000000000000"
        }
      },
      "hash": "dd9143689fec9513c3594e5c0ad7a52d",
      "version": 7
    },
    "var.swsteth_synth_config": {
      "artifacts": {
        "settings": {
          "swsteth_issuance_ratio": "2000000000000000000",
          "swsteth_liquidation_ratio": "1100000000000000000",
          "swsteth_liquidation_reward": "100000000000000",
          "swsteth_min_delegation": "100000000000000000"
        }
      },
      "hash": "5860ccabfea2ec7fcc1e391f044bc345",
      "version": 7
    },
    "var.weth_spot_settings": {
      "artifacts": {
        "settings": {
          "synth_weth_max_collateral_amount": "1750000000000000000000",
          "synth_weth_skew_scale": "350000000000000000000000"
        }
      },
      "hash": "7d6d7fe34a99979495a2c6c96fb8911c",
      "version": 7
    },
    "var.weth_synth_config": {
      "artifacts": {
        "settings": {
          "weth_issuance_ratio": "2000000000000000000",
          "weth_liquidation_ratio": "1100000000000000000",
          "weth_liquidation_reward": "100000000000000",
          "weth_min_delegation": "100000000000000000",
          "weth_max_collateral_limit": "1750000000000000000000"
        }
      },
      "hash": "15ac4f709da21ed01c7a4f3c1a6983ad",
      "version": 7
    },
    "var.wsteth_spot_settings": {
      "artifacts": {
        "settings": {
          "synth_wsteth_max_collateral_amount": "1750000000000000000000",
          "synth_wsteth_skew_scale": "350000000000000000000000"
        }
      },
      "hash": "cb551d198fb232148a1b48d4f87b31d8",
      "version": 7
    },
    "var.wsteth_synth_config": {
      "artifacts": {
        "settings": {
          "wsteth_issuance_ratio": "2000000000000000000",
          "wsteth_liquidation_ratio": "1100000000000000000",
          "wsteth_liquidation_reward": "100000000000000",
          "wsteth_min_delegation": "100000000000000000",
          "wsteth_max_collateral_limit": "1750000000000000000000"
        }
      },
      "hash": "61c3ac5929af8bb29cd92a3688e6ddec",
      "version": 7
    },
    "provision.cbbtc_mock_collateral": {
      "artifacts": {
        "imports": {
          "cbbtc_mock_collateral": {
            "url": "ipfs://QmR6HjeYQB8N6n6YvJVJ2ezBoHjYoTDCkNxCUroNus4Qbe",
            "tags": [
              "latest"
            ],
            "target": "synthetix-mock-tokens:1.8@cbbtc",
            "preset": "cbbtc",
            "settings": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
              "salt": "",
              "symbol": "TKN"
            },
            "contracts": {
              "MintableToken": {
                "address": "0x8608d511E224180051A36d34121725D978064e6E",
                "abi": [
                  "constructor(address owner, string name, string symbol, uint8 tokenDecimals, uint256 initialSupply) payable",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function mint(uint256 amount, address to)",
                  "function name() view returns (string)",
                  "function owner() view returns (address)",
                  "function renounceOwnership()",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                  "function transferOwnership(address newOwner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)"
                ],
                "constructorArgs": [
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                  "Fake Coinbase Bitcoin",
                  "cbBTC",
                  "18",
                  "0"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x5b662a9ba0603b70484921d889a1a1891bbfe331a88e980faef5fd71c5f66f31",
                "deployTxnBlockNumber": "17170289",
                "deployTimestamp": "1730108866",
                "sourceName": "src/MintableToken.sol",
                "contractName": "MintableToken",
                "deployedOn": "contract.MintableToken",
                "highlight": true,
                "gasUsed": 774929,
                "gasCost": "1000333"
              }
            },
            "extras": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
              "salt": "",
              "symbol": "TKN"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.cbeth_mock_collateral": {
      "artifacts": {
        "imports": {
          "cbeth_mock_collateral": {
            "url": "ipfs://QmewiZMz15weqhtYbmJG8YPQgpsH1iz6sVHetw3PwnSqX5",
            "tags": [
              "latest"
            ],
            "target": "synthetix-mock-tokens:1.8@cbeth",
            "preset": "cbeth",
            "settings": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
              "salt": "",
              "symbol": "TKN"
            },
            "contracts": {
              "MintableToken": {
                "address": "0x00ab6b818652bB3bFE334983171edFD38184DbeD",
                "abi": [
                  "constructor(address owner, string name, string symbol, uint8 tokenDecimals, uint256 initialSupply) payable",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function mint(uint256 amount, address to)",
                  "function name() view returns (string)",
                  "function owner() view returns (address)",
                  "function renounceOwnership()",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                  "function transferOwnership(address newOwner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)"
                ],
                "constructorArgs": [
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                  "Fake Coinbase Wrapped Staked ETH",
                  "cbETH",
                  "18",
                  "0"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xc183fa31d6ce666eb1149a8b807fc848fd150cebdf2b65ae77dde1e7c92f8ffd",
                "deployTxnBlockNumber": "17170292",
                "deployTimestamp": "1730108872",
                "sourceName": "src/MintableToken.sol",
                "contractName": "MintableToken",
                "deployedOn": "contract.MintableToken",
                "highlight": true,
                "gasUsed": 797295,
                "gasCost": "1000332"
              }
            },
            "extras": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
              "salt": "",
              "symbol": "TKN"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.wsteth_mock_collateral": {
      "artifacts": {
        "imports": {
          "wsteth_mock_collateral": {
            "url": "ipfs://QmYcFJWnSWwtaf9ueFu2PdDEjJYRdeGFJurskncz9Qo75o",
            "tags": [
              "latest"
            ],
            "target": "synthetix-mock-tokens:1.8@wsteth",
            "preset": "wsteth",
            "settings": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
              "salt": "",
              "symbol": "TKN"
            },
            "contracts": {
              "MintableToken": {
                "address": "0x7Bf65af7EFBd0E933fb87dD2C9cE7A17d959b822",
                "abi": [
                  "constructor(address owner, string name, string symbol, uint8 tokenDecimals, uint256 initialSupply) payable",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function mint(uint256 amount, address to)",
                  "function name() view returns (string)",
                  "function owner() view returns (address)",
                  "function renounceOwnership()",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                  "function transferOwnership(address newOwner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)"
                ],
                "constructorArgs": [
                  "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
                  "Fake Lido Wrapped Staked Eth",
                  "wstETH",
                  "18",
                  "0"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xefb1e73f6f57eee850f9e131e5a32592ab8a295089823a463b00532065b465e7",
                "deployTxnBlockNumber": "17170296",
                "deployTimestamp": "1730108880",
                "sourceName": "src/MintableToken.sol",
                "contractName": "MintableToken",
                "deployedOn": "contract.MintableToken",
                "highlight": true,
                "gasUsed": 775025,
                "gasCost": "1000332"
              }
            },
            "extras": {
              "decimals": "18",
              "initialSupply": "0",
              "name": "Token",
              "owner": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9",
              "salt": "",
              "symbol": "TKN"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_keeper_cost_ETH": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_keeper_cost_ETH": {
            "hash": "0x8bc5b6ba646cf85c5a42718a7f924ebd2b11fd9e5236eec2a98e3d6b178e9f2c",
            "blockNumber": "17170298",
            "timestamp": "1730108884",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x88e7ea7b862b6f90aacf9b0f868277d85b78828b65f8bd13f5be71e114b6f1f5",
                    2,
                    "0x0000000000000000000000009930cd712d6ad27ef8e8992664b183892b499df000000000000000000000000000000000000000000000000000000000000059d8000000000000000000000000000000000000000000000000000000000053ec600000000000000000000000000000000000000000000000000000000000001194000000000000000000000000000000000000000000000000000000000006ddd000000000000000000000000000000000000000000000000000000000000067e8000000000000000000000000000000000000000000000000000000000023186000000000000000000000000000000000000000000000000000000000000013880000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000013ba",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_keeper_cost_ETH",
            "gasUsed": 70267,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "perps_keeper_cost_eth_oracle_id": "0x88e7ea7b862b6f90aacf9b0f868277d85b78828b65f8bd13f5be71e114b6f1f5"
        }
      },
      "hash": "7d329d843cad8cb5fa6a01b10d1dee26",
      "version": 7
    },
    "invoke.registerLookupCbbtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupCbbtcOracleNode": {
            "hash": "0x44ac00ed00a6bb6d1971d26d1700c6b7dda865bac180fa3c1aad8c3d565a7cc7",
            "blockNumber": "17174223",
            "timestamp": "1730116734",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xa27656b3ab13e1427fa9eb8575cad0fa755cff7078a66c58cf9728a14d31cefc",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d2817d7bfe5c64b8ea956e9a26f573ef64e72e4d7891f2d6af9bcc93f7aff9a97000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupCbbtcOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "cbbtc_lookup_oracle_id": "0xa27656b3ab13e1427fa9eb8575cad0fa755cff7078a66c58cf9728a14d31cefc"
        }
      },
      "hash": "9ff3ea76e9c55f8a2408a3ce25869188",
      "version": 7
    },
    "invoke.registerLookupCbethOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupCbethOracleNode": {
            "hash": "0x84db242733e571a4ad5315297cb607cb36b7478f695031d370c738294751e2b3",
            "blockNumber": "17174225",
            "timestamp": "1730116738",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x3c3ca6c29d6ee33ff722e74f04a60d23296f5c84fa713794f0a360525b2f20ae",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d15ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce5717000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupCbethOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000360",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "cbeth_lookup_oracle_id": "0x3c3ca6c29d6ee33ff722e74f04a60d23296f5c84fa713794f0a360525b2f20ae"
        }
      },
      "hash": "1ade838ab76162edb5d2b5fec857780f",
      "version": 7
    },
    "invoke.registerLookupWstEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerLookupWstEthOracleNode": {
            "hash": "0x52ac503246cc1c376d7fcd563b4d9c67036bf8b3ee56e5f93136d5194ad2b7e0",
            "blockNumber": "17174335",
            "timestamp": "1730116958",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x528fb4e238f9170f9e83dd5c77f0eb9d952b385186762ded7eb7489fffbb02d7",
                    9,
                    "0x000000000000000000000000f9e9e905d3745f5e0b803a179e17328cfe03b56d6df640f3b8963d8f8358f791f352b8364513f6ab1cca5ed3f1f7b5448980e784000000000000000000000000000000000000000000000000000000000000003c",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerLookupWstEthOracleNode",
            "gasUsed": 51474,
            "gasCost": "1000385",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wsteth_lookup_oracle_id": "0x528fb4e238f9170f9e83dd5c77f0eb9d952b385186762ded7eb7489fffbb02d7"
        }
      },
      "hash": "9e7adfe6fbc2c9c1cd40f2ab1179ad19",
      "version": 7
    },
    "invoke.registerPythCbbtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythCbbtcOracleNode": {
            "hash": "0x961f414a14ef54f9804a3890e1383ee7cc91a182608a2e0c1e40eff85440bf7d",
            "blockNumber": "17170306",
            "timestamp": "1730108900",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x6db4615934e585ace6d053540bcb3090e3799a100df9c2ddcbf096f47d5d5846",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57292817d7bfe5c64b8ea956e9a26f573ef64e72e4d7891f2d6af9bcc93f7aff9a970000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythCbbtcOracleNode",
            "gasUsed": 146222,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "cbbtc_pyth_oracle_id": "0x6db4615934e585ace6d053540bcb3090e3799a100df9c2ddcbf096f47d5d5846"
        }
      },
      "hash": "2e6f828179c01d492a907e58fb2d312e",
      "version": 7
    },
    "invoke.registerPythCbethOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythCbethOracleNode": {
            "hash": "0x7b8f08a2854d402ebf1ffc6818d4f0fda6e8f892da3a2ea7265ccb75a6a1d200",
            "blockNumber": "17170308",
            "timestamp": "1730108904",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x1d6ef518b780bef066e4bb40a21be30bc86ecdea509496a476dfcc98fc0eb57c",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b572915ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce57170000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythCbethOracleNode",
            "gasUsed": 146222,
            "gasCost": "1000331",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "cbeth_pyth_oracle_id": "0x1d6ef518b780bef066e4bb40a21be30bc86ecdea509496a476dfcc98fc0eb57c"
        }
      },
      "hash": "8973d9d285795d49bf6fd1df8f0e2ddd",
      "version": 7
    },
    "invoke.registerPythWstEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerPythWstEthOracleNode": {
            "hash": "0x03a446994f10d211677e9cd3ce00d41e7063352f41e3d8c267b33eff54b1d4c5",
            "blockNumber": "17170311",
            "timestamp": "1730108910",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x92ea8f5b0ff0317dfeba194cf8765c118e7b90fabafe507dd239c3b677b5e257",
                    5,
                    "0x000000000000000000000000a2aa501b19aff244d90cc15a4cf739d2725b57296df640f3b8963d8f8358f791f352b8364513f6ab1cca5ed3f1f7b5448980e7840000000000000000000000000000000000000000000000000000000000000000",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerPythWstEthOracleNode",
            "gasUsed": 146222,
            "gasCost": "1000330",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wsteth_pyth_oracle_id": "0x92ea8f5b0ff0317dfeba194cf8765c118e7b90fabafe507dd239c3b677b5e257"
        }
      },
      "hash": "889a751fc44ced849987e8faa9e30775",
      "version": 7
    },
    "var.token_addresses": {
      "artifacts": {
        "settings": {
          "cbbtc_address": "0x8608d511E224180051A36d34121725D978064e6E",
          "cbeth_address": "0x00ab6b818652bB3bFE334983171edFD38184DbeD",
          "wsteth_address": "0x7Bf65af7EFBd0E933fb87dD2C9cE7A17d959b822",
          "weth_address": "0x4200000000000000000000000000000000000006"
        }
      },
      "hash": "b241ff73c7bdfd7afb4de7bb867343af",
      "version": 7
    },
    "invoke.CoreProxy_setPoolCollateralConfiguration_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_setPoolCollateralConfiguration_cbbtc": {
            "hash": "0x7b8377b5844c89cba5c001a19644967465eb4f9e6f452f34c2e3cc2c64f2e023",
            "blockNumber": "17170313",
            "timestamp": "1730108914",
            "events": {
              "PoolCollateralConfigurationUpdated": [
                {
                  "name": "PoolCollateralConfigurationUpdated",
                  "args": [
                    "1",
                    "0x8608d511E224180051A36d34121725D978064e6E",
                    {
                      "collateralLimitD18": "100000000000000000000",
                      "issuanceRatioD18": "0"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_setPoolCollateralConfiguration_cbbtc",
            "gasUsed": 62430,
            "gasCost": "1000330",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "878bcb4376a1aeb7eed58f323f6e61d3",
      "version": 7
    },
    "invoke.CoreProxy_setPoolCollateralConfiguration_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_setPoolCollateralConfiguration_cbeth": {
            "hash": "0x8f64ece35627d8f907e48edbeabefab1830cc4ab2e3313f4a749ac85ff64b3d3",
            "blockNumber": "17170315",
            "timestamp": "1730108918",
            "events": {
              "PoolCollateralConfigurationUpdated": [
                {
                  "name": "PoolCollateralConfigurationUpdated",
                  "args": [
                    "1",
                    "0x00ab6b818652bB3bFE334983171edFD38184DbeD",
                    {
                      "collateralLimitD18": "1750000000000000000000",
                      "issuanceRatioD18": "0"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_setPoolCollateralConfiguration_cbeth",
            "gasUsed": 62430,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9cbdc04adc0c033c4001bfad24d1bfab",
      "version": 7
    },
    "invoke.CoreProxy_setPoolCollateralConfiguration_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_setPoolCollateralConfiguration_weth": {
            "hash": "0x3be647bf57cc0d22e30c966b787ed61777365a9044b12356adcd4b5b82d62689",
            "blockNumber": "17170317",
            "timestamp": "1730108922",
            "events": {
              "PoolCollateralConfigurationUpdated": [
                {
                  "name": "PoolCollateralConfigurationUpdated",
                  "args": [
                    "1",
                    "0x4200000000000000000000000000000000000006",
                    {
                      "collateralLimitD18": "1750000000000000000000",
                      "issuanceRatioD18": "0"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_setPoolCollateralConfiguration_weth",
            "gasUsed": 62226,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e15fc1fdd090623196ec79f7fb12fd4c",
      "version": 7
    },
    "invoke.CoreProxy_setPoolCollateralConfiguration_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_setPoolCollateralConfiguration_wsteth": {
            "hash": "0x3eed8118ed9573f00954fbddb16f5de740aed61c56711fdc47d1295299ce724b",
            "blockNumber": "17170320",
            "timestamp": "1730108928",
            "events": {
              "PoolCollateralConfigurationUpdated": [
                {
                  "name": "PoolCollateralConfigurationUpdated",
                  "args": [
                    "1",
                    "0x7Bf65af7EFBd0E933fb87dD2C9cE7A17d959b822",
                    {
                      "collateralLimitD18": "1750000000000000000000",
                      "issuanceRatioD18": "0"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_setPoolCollateralConfiguration_wsteth",
            "gasUsed": 62442,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7c727150ffdcdbac82cd21fd0560d300",
      "version": 7
    },
    "invoke.SpotMarketProxy_createSynth_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_createSynth_cbbtc": {
            "hash": "0xe7b9e4fbf2dab13f72a0986483ed80826ef7a9bd98ae39f5fdffaaac9acb8c62",
            "blockNumber": "17170323",
            "timestamp": "1730108934",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x6572633230000000000000000000000000000000000000000000000000000000",
                    "0xb14003a7e01eca8368c5418d8faf38c7e7c17198bc7dc61a24f8ad6eb4e13015",
                    "0x410EecB4b4CF7175352a472572492C1c9997a5e8",
                    "0xcdfcE502963A101D544E0b0c9641a53fd6cfdC80"
                  ]
                }
              ],
              "SynthRegistered": [
                {
                  "name": "SynthRegistered",
                  "args": [
                    "7",
                    "0x410EecB4b4CF7175352a472572492C1c9997a5e8"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_createSynth_cbbtc",
            "gasUsed": 489577,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_cbbtc_market_id": "7",
          "synth_cbbtc_token_address": "0x410EecB4b4CF7175352a472572492C1c9997a5e8"
        }
      },
      "hash": "61c6887d7a972ae6e50b70c3705ac3cd",
      "version": 7
    },
    "invoke.SpotMarketProxy_createSynth_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_createSynth_cbeth": {
            "hash": "0x70248c64008207501de2b2a2a59fbd3a86a6555a812554f3380ebb6671192439",
            "blockNumber": "17170325",
            "timestamp": "1730108938",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x6572633230000000000000000000000000000000000000000000000000000000",
                    "0x1c4e7764ecaf86282ff9be405289be3f059d0268baf134e8080f066a3150a96c",
                    "0x1c6dfe3205334Fece6a9169c88bF698Ed4370107",
                    "0xcdfcE502963A101D544E0b0c9641a53fd6cfdC80"
                  ]
                }
              ],
              "SynthRegistered": [
                {
                  "name": "SynthRegistered",
                  "args": [
                    "8",
                    "0x1c6dfe3205334Fece6a9169c88bF698Ed4370107"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_createSynth_cbeth",
            "gasUsed": 551317,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_cbeth_market_id": "8",
          "synth_cbeth_token_address": "0x1c6dfe3205334Fece6a9169c88bF698Ed4370107"
        }
      },
      "hash": "ef37d6c7aa45e872b6e784b0a16afc28",
      "version": 7
    },
    "invoke.SpotMarketProxy_createSynth_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_createSynth_weth": {
            "hash": "0x29ee6141841115cc976aff5e3b876dbea2430d1e45dd309ba0f19b83fab998a2",
            "blockNumber": "17170327",
            "timestamp": "1730108942",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x6572633230000000000000000000000000000000000000000000000000000000",
                    "0x636948f822fbaf7e5cfc132a24aa7c2da1a8cdc515e38c306bc1d14fdde2342a",
                    "0x86B35F1b900B15C98049f68f4248815518e71985",
                    "0xcdfcE502963A101D544E0b0c9641a53fd6cfdC80"
                  ]
                }
              ],
              "SynthRegistered": [
                {
                  "name": "SynthRegistered",
                  "args": [
                    "9",
                    "0x86B35F1b900B15C98049f68f4248815518e71985"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_createSynth_weth",
            "gasUsed": 489457,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_weth_market_id": "9",
          "synth_weth_token_address": "0x86B35F1b900B15C98049f68f4248815518e71985"
        }
      },
      "hash": "ab6a89e3ec3c5a51c41f3990c23e890c",
      "version": 7
    },
    "invoke.SpotMarketProxy_createSynth_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_createSynth_wsteth": {
            "hash": "0x846beee782dba2a41c4bfe683cf871db27bb8f7fb55f88817f7f2635851e88a9",
            "blockNumber": "17170329",
            "timestamp": "1730108946",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x6572633230000000000000000000000000000000000000000000000000000000",
                    "0xab7ad32b3f21fdb99d6d716c7d1f3f3bdbf3e16a1c7472da49b77f7ccc4aca20",
                    "0x5dc2592d23f72833c559ACB35c7122995EA80486",
                    "0xcdfcE502963A101D544E0b0c9641a53fd6cfdC80"
                  ]
                }
              ],
              "SynthRegistered": [
                {
                  "name": "SynthRegistered",
                  "args": [
                    "10",
                    "0x5dc2592d23f72833c559ACB35c7122995EA80486"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_createSynth_wsteth",
            "gasUsed": 551281,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_wsteth_market_id": "10",
          "synth_wsteth_token_address": "0x5dc2592d23f72833c559ACB35c7122995EA80486"
        }
      },
      "hash": "24ed808678b90ceea80cc31663aca433",
      "version": 7
    },
    "invoke.registerCbbtcOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerCbbtcOracleNode": {
            "hash": "0xdfcbaeecfc4a1901a5296e40cfceccac054cccfa518cdc2decec99e2b715bacd",
            "blockNumber": "17174403",
            "timestamp": "1730117094",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xf573840eb0607587b98ce26d05c97f51a34bcfff5c3a182d95885873d8957fcc",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x6db4615934e585ace6d053540bcb3090e3799a100df9c2ddcbf096f47d5d5846",
                      "0xa27656b3ab13e1427fa9eb8575cad0fa755cff7078a66c58cf9728a14d31cefc"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerCbbtcOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000381",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "cbbtc_oracle_id": "0xf573840eb0607587b98ce26d05c97f51a34bcfff5c3a182d95885873d8957fcc"
        }
      },
      "hash": "75af5fa45b4e5551fa6209544d5ab215",
      "version": 7
    },
    "invoke.registerCbethOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerCbethOracleNode": {
            "hash": "0x25f3378da96805197afa6dc1373971af550cf7ef2d20424d3d7f36db5ae55642",
            "blockNumber": "17174405",
            "timestamp": "1730117098",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xce37e7e8fb4bc375e18d6e8c9e049edb6b77cffed91b01fcfc17bcbef54fd2fc",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x1d6ef518b780bef066e4bb40a21be30bc86ecdea509496a476dfcc98fc0eb57c",
                      "0x3c3ca6c29d6ee33ff722e74f04a60d23296f5c84fa713794f0a360525b2f20ae"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerCbethOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000381",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "cbeth_oracle_id": "0xce37e7e8fb4bc375e18d6e8c9e049edb6b77cffed91b01fcfc17bcbef54fd2fc"
        }
      },
      "hash": "b606e5b22a8a3d24f774e1b62151a9d4",
      "version": 7
    },
    "invoke.registerWstEthOracleNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerWstEthOracleNode": {
            "hash": "0x806ad4fb45a332b7448143e5c2ab18b899695e0e3b48205330bc81d246d54845",
            "blockNumber": "17174512",
            "timestamp": "1730117312",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x6c8e58904b53dee5a6c807d159b5d69d097ea8d7098f9c1fca21128695cba8da",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000000003c",
                    [
                      "0x92ea8f5b0ff0317dfeba194cf8765c118e7b90fabafe507dd239c3b677b5e257",
                      "0x528fb4e238f9170f9e83dd5c77f0eb9d952b385186762ded7eb7489fffbb02d7"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerWstEthOracleNode",
            "gasUsed": 51877,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "wsteth_oracle_id": "0x6c8e58904b53dee5a6c807d159b5d69d097ea8d7098f9c1fca21128695cba8da"
        }
      },
      "hash": "ae2d6c0b35f78514f1bb4b1da0e86f05",
      "version": 7
    },
    "invoke.CoreProxy_configureCollateral_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureCollateral_cbbtc": {
            "hash": "0xbc226a40766f9727f331b563fd9072d38119fe5ee040f398a4f9562f4e48996d",
            "blockNumber": "17174521",
            "timestamp": "1730117330",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x8608d511E224180051A36d34121725D978064e6E",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "10000000000000000000",
                      "liquidationRatioD18": "1500000000000000000",
                      "liquidationRewardD18": "100000000000000",
                      "oracleNodeId": "0xf573840eb0607587b98ce26d05c97f51a34bcfff5c3a182d95885873d8957fcc",
                      "tokenAddress": "0x8608d511E224180051A36d34121725D978064e6E",
                      "minDelegationD18": "100000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureCollateral_cbbtc",
            "gasUsed": 56208,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0658d5b75726a890cdc3a8f3100f1371",
      "version": 7
    },
    "invoke.CoreProxy_configureCollateral_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureCollateral_cbeth": {
            "hash": "0x1a12179810089a40fcfb91c27ae2dfcf10affc7e7fa7ae1daa9363da4b9c10f6",
            "blockNumber": "17174523",
            "timestamp": "1730117334",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x00ab6b818652bB3bFE334983171edFD38184DbeD",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "2000000000000000000",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "100000000000000",
                      "oracleNodeId": "0xce37e7e8fb4bc375e18d6e8c9e049edb6b77cffed91b01fcfc17bcbef54fd2fc",
                      "tokenAddress": "0x00ab6b818652bB3bFE334983171edFD38184DbeD",
                      "minDelegationD18": "100000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureCollateral_cbeth",
            "gasUsed": 56208,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "3bba62cae88e80ae57126574a625c8ea",
      "version": 7
    },
    "invoke.CoreProxy_configureCollateral_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureCollateral_weth": {
            "hash": "0x5a6067e57dce35a4d89d1b41106ff8707bef2466a83bf63ad44663be1fba902b",
            "blockNumber": "17174525",
            "timestamp": "1730117338",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x4200000000000000000000000000000000000006",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "2000000000000000000",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "100000000000000",
                      "oracleNodeId": "0xb4df545da972b990d9fb142d975545f5a21371c842495d2d95057e2b44ba56e3",
                      "tokenAddress": "0x4200000000000000000000000000000000000006",
                      "minDelegationD18": "100000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureCollateral_weth",
            "gasUsed": 56004,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "61a8e80710473a1d55275c19d028028e",
      "version": 7
    },
    "invoke.CoreProxy_configureCollateral_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureCollateral_wsteth": {
            "hash": "0x90db1a12b6a34bb5ba822f07af50d5a87204236fd839e8205d8aafdfffdbb3f2",
            "blockNumber": "17174527",
            "timestamp": "1730117342",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x7Bf65af7EFBd0E933fb87dD2C9cE7A17d959b822",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "2000000000000000000",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "100000000000000",
                      "oracleNodeId": "0x6c8e58904b53dee5a6c807d159b5d69d097ea8d7098f9c1fca21128695cba8da",
                      "tokenAddress": "0x7Bf65af7EFBd0E933fb87dD2C9cE7A17d959b822",
                      "minDelegationD18": "100000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureCollateral_wsteth",
            "gasUsed": 56220,
            "gasCost": "1000369",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "897e9bd9ea77430f5b10c641da441bb3",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_Perps_synth_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_Perps_synth_cbbtc": {
            "hash": "0xba4a8cad9f6acb73dfa83534be1b275318079e4473f8f30ced29b905cc934cb3",
            "blockNumber": "17170359",
            "timestamp": "1730109006",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "2",
                    "0x410EecB4b4CF7175352a472572492C1c9997a5e8",
                    "100000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_Perps_synth_cbbtc",
            "gasUsed": 57925,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a09b1119d78813d902a7300ccedf771b",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_Perps_synth_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_Perps_synth_cbeth": {
            "hash": "0x77bc720291f792d1b777a35d6403f4bb13b5af398b1c99885abf4701527841f9",
            "blockNumber": "17170361",
            "timestamp": "1730109010",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "2",
                    "0x1c6dfe3205334Fece6a9169c88bF698Ed4370107",
                    "1750000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_Perps_synth_cbeth",
            "gasUsed": 57925,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a1a85d78dc5acbfebb70d470038393e7",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_Perps_synth_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_Perps_synth_weth": {
            "hash": "0xdd5fb15e5859b2a9f0a0696580d98d2cd81e2d208827253b5ad11bb74553d7ce",
            "blockNumber": "17170363",
            "timestamp": "1730109014",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "2",
                    "0x86B35F1b900B15C98049f68f4248815518e71985",
                    "1750000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_Perps_synth_weth",
            "gasUsed": 57925,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d242a2a649838a9bb34e5cb7c9040795",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_Perps_synth_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_Perps_synth_wsteth": {
            "hash": "0x72de5e2ba0d3724d983dd8e3f67c6bf6a4663812b37c8c2f0e4a707264dc24e8",
            "blockNumber": "17170365",
            "timestamp": "1730109018",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "2",
                    "0x5dc2592d23f72833c559ACB35c7122995EA80486",
                    "1750000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_Perps_synth_wsteth",
            "gasUsed": 57925,
            "gasCost": "1000333",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "dc5faa396b935505eb2539594ac7ecc1",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_cbbtc": {
            "hash": "0x36eb923b1e1465e69ffa129901e570f402cfe85fe8e09614f6ccbae7b013d209",
            "blockNumber": "17170367",
            "timestamp": "1730109022",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "7",
                    "0x8608d511E224180051A36d34121725D978064e6E",
                    "100000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_cbbtc",
            "gasUsed": 57913,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "df57bc12a9db1069ed4d224462f3a1c6",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_cbeth": {
            "hash": "0x7c778c51855f9bf4fb4eb88fed6a05c4addc6b71780856b78aaf10bda400b3b5",
            "blockNumber": "17170369",
            "timestamp": "1730109026",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "8",
                    "0x00ab6b818652bB3bFE334983171edFD38184DbeD",
                    "1750000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_cbeth",
            "gasUsed": 57913,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "1d54eeabd9f5cd9b3c4fa81dcf0954d2",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_weth": {
            "hash": "0xe2d5d238b02b54a920481010bc20f1699ec8ac71f4ede1a954f7a17588d38622",
            "blockNumber": "17170372",
            "timestamp": "1730109032",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "9",
                    "0x4200000000000000000000000000000000000006",
                    "1750000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_weth",
            "gasUsed": 57709,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "988a8757af968cd95971db8576b826b3",
      "version": 7
    },
    "invoke.CoreProxy_configureMaximumMarketCollateral_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_configureMaximumMarketCollateral_wsteth": {
            "hash": "0xfc887881cf76dea66e1a29aa73c4cd651dcb6131d1f99c54e25b2988ddd21683",
            "blockNumber": "17170374",
            "timestamp": "1730109036",
            "events": {
              "MaximumMarketCollateralConfigured": [
                {
                  "name": "MaximumMarketCollateralConfigured",
                  "args": [
                    "10",
                    "0x7Bf65af7EFBd0E933fb87dD2C9cE7A17d959b822",
                    "1750000000000000000000",
                    "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_configureMaximumMarketCollateral_wsteth",
            "gasUsed": 57925,
            "gasCost": "1000332",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2e19ae0216903c0882f99a904adea304",
      "version": 7
    },
    "invoke.OracleManagerProxy_registerNode_keeper_cost_USD": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "OracleManagerProxy_registerNode_keeper_cost_USD": {
            "hash": "0x1ad5ec31a37c728df36ca9a4c895828682061f0894c36c13799b3c244f5bc2fe",
            "blockNumber": "17174529",
            "timestamp": "1730117346",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x65c7a183b8aa2c084894e7c3bd1c8cf101e3c19def105b1466afa3f516a5de69",
                    1,
                    "0x0000000000000000000000000000000000000000000000000000000000000007",
                    [
                      "0x88e7ea7b862b6f90aacf9b0f868277d85b78828b65f8bd13f5be71e114b6f1f5",
                      "0xb4df545da972b990d9fb142d975545f5a21371c842495d2d95057e2b44ba56e3"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.OracleManagerProxy_registerNode_keeper_cost_USD",
            "gasUsed": 51877,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "perps_keeper_cost_usd_oracle_id": "0x65c7a183b8aa2c084894e7c3bd1c8cf101e3c19def105b1466afa3f516a5de69"
        }
      },
      "hash": "d811726954856c0dd1e5190b6ff09f02",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setCollateralConfiguration_synth_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setCollateralConfiguration_synth_cbbtc": {
            "hash": "0xc84cbcbee6d2fccb925cf67fa8043dbbf66b01ebaa0f817f9db18b2355233bf4",
            "blockNumber": "17170378",
            "timestamp": "1730109044",
            "events": {
              "CollateralConfigurationSet": [
                {
                  "name": "CollateralConfigurationSet",
                  "args": [
                    "7",
                    "100000000000000000000",
                    "75000000000000000",
                    "10000000000000000",
                    "1000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setCollateralConfiguration_synth_cbbtc",
            "gasUsed": 197085,
            "gasCost": "1000334",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "13672f524bf2fbb364554ab63c893e54",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setCollateralConfiguration_synth_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setCollateralConfiguration_synth_cbeth": {
            "hash": "0xafbeda4874f235cd585546abf380d39d1eaf519f15e984e2899972e83cc871bc",
            "blockNumber": "17170380",
            "timestamp": "1730109048",
            "events": {
              "CollateralConfigurationSet": [
                {
                  "name": "CollateralConfigurationSet",
                  "args": [
                    "8",
                    "1750000000000000000000",
                    "100000000000000000",
                    "10000000000000000",
                    "1000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setCollateralConfiguration_synth_cbeth",
            "gasUsed": 197073,
            "gasCost": "1000334",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "4eb148dfc864cbef5ab22d47c49c947e",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setCollateralConfiguration_synth_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setCollateralConfiguration_synth_weth": {
            "hash": "0x1b972c386a496ae947fc8addbcebada77bd87726295994390ccf06bbd77949e3",
            "blockNumber": "17170382",
            "timestamp": "1730109052",
            "events": {
              "CollateralConfigurationSet": [
                {
                  "name": "CollateralConfigurationSet",
                  "args": [
                    "9",
                    "1750000000000000000000",
                    "100000000000000000",
                    "10000000000000000",
                    "1000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setCollateralConfiguration_synth_weth",
            "gasUsed": 197073,
            "gasCost": "1000334",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0ef6e74184bf5fc95a0949ead086b6d1",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setCollateralConfiguration_synth_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setCollateralConfiguration_synth_wsteth": {
            "hash": "0x02849c2cce289e5719e325cd3eda1eab2a4483fa315a02cb38669c0a360295e1",
            "blockNumber": "17170384",
            "timestamp": "1730109056",
            "events": {
              "CollateralConfigurationSet": [
                {
                  "name": "CollateralConfigurationSet",
                  "args": [
                    "10",
                    "1750000000000000000000",
                    "100000000000000000",
                    "10000000000000000",
                    "1000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setCollateralConfiguration_synth_wsteth",
            "gasUsed": 197073,
            "gasCost": "1000334",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f0a1d4a4e359ca5a928a4f91ed674a71",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setCollateralLiquidateRewardRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setCollateralLiquidateRewardRatio": {
            "hash": "0xd9ce1e58ae81d61f692e2d9f74b661775bfc4708c00530ff29e210b4105bc64f",
            "blockNumber": "17170386",
            "timestamp": "1730109060",
            "events": {
              "CollateralLiquidateRewardRatioSet": [
                {
                  "name": "CollateralLiquidateRewardRatioSet",
                  "args": [
                    "300000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setCollateralLiquidateRewardRatio",
            "gasUsed": 38826,
            "gasCost": "1000335",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "87e88f55c0815a9dc5b5e4dcc29c4d2c",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setInterestRateParameters": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setInterestRateParameters": {
            "hash": "0x2c21af0b4d681366dcb8c30c5bd0fc180f0746d9223f43bff4c6b562ef00d884",
            "blockNumber": "17170388",
            "timestamp": "1730109064",
            "events": {
              "InterestRateParametersSet": [
                {
                  "name": "InterestRateParametersSet",
                  "args": [
                    "25000000000000",
                    "800000000000000000",
                    "10000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setInterestRateParameters",
            "gasUsed": 39663,
            "gasCost": "1000335",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9fc138028574970e13e594ff5c96aa88",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setKeeperRewardGuards": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setKeeperRewardGuards": {
            "hash": "0xebc72e89d11650d9c4923ac4571ad02f465700c4cf839b48ee355f51008c60c4",
            "blockNumber": "17170390",
            "timestamp": "1730109068",
            "events": {
              "KeeperRewardGuardsSet": [
                {
                  "name": "KeeperRewardGuardsSet",
                  "args": [
                    "1000000000000000000",
                    "300000000000000000",
                    "30000000000000000000",
                    "300000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setKeeperRewardGuards",
            "gasUsed": 47068,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7d252aaf4d5aa59c245606685a27ca13",
      "version": 7
    },
    "invoke.PerpsMarketProxy_setPerAccountCaps": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_setPerAccountCaps": {
            "hash": "0xda5eabfe13137a68a2f7d9a954c84f08ee34d96174d7ae45d67a24ee89479c4d",
            "blockNumber": "17170392",
            "timestamp": "1730109072",
            "events": {
              "PerAccountCapsSet": [
                {
                  "name": "PerAccountCapsSet",
                  "args": [
                    "10",
                    "3"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_setPerAccountCaps",
            "gasUsed": 39478,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2ce677eb906a6494cc86d7112e5d5e39",
      "version": 7
    },
    "invoke.SpotMarketProxy_addSettlementStrategy_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_addSettlementStrategy_cbbtc": {
            "hash": "0xfc7bf46991d270ce84cd1ad27e468e15f2dca6d25e493b0a5a369edd7e99a28d",
            "blockNumber": "17170394",
            "timestamp": "1730109076",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "7",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_addSettlementStrategy_cbbtc",
            "gasUsed": 164275,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_cbbtc_settlement_strategy_id": "0"
        }
      },
      "hash": "cf8a0940b8ef810fcd035aace5e57afc",
      "version": 7
    },
    "invoke.SpotMarketProxy_addSettlementStrategy_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_addSettlementStrategy_cbeth": {
            "hash": "0xd38b42f62b22c20c65b19efe7d2ec51203a967f4da8ab0a9252946c0cc59742d",
            "blockNumber": "17170397",
            "timestamp": "1730109082",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "8",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_addSettlementStrategy_cbeth",
            "gasUsed": 164275,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_cbeth_settlement_strategy_id": "0"
        }
      },
      "hash": "f3737e6f257138c9e2abbec73a657adc",
      "version": 7
    },
    "invoke.SpotMarketProxy_addSettlementStrategy_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_addSettlementStrategy_weth": {
            "hash": "0x99b10ea2ea6a56b4ad8b6909289ab1b2d1b425ffc84b6f3779c2db296bb40ed2",
            "blockNumber": "17170399",
            "timestamp": "1730109086",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "9",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_addSettlementStrategy_weth",
            "gasUsed": 164275,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_weth_settlement_strategy_id": "0"
        }
      },
      "hash": "f89c59f9d187abc57731eec1a65aef3a",
      "version": 7
    },
    "invoke.SpotMarketProxy_addSettlementStrategy_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_addSettlementStrategy_wsteth": {
            "hash": "0x6907a1395c0972d7563bc4cdca4515f4e698e5386f1635e5dbcbde48ca3f3d68",
            "blockNumber": "17170401",
            "timestamp": "1730109090",
            "events": {
              "SettlementStrategyAdded": [
                {
                  "name": "SettlementStrategyAdded",
                  "args": [
                    "10",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_addSettlementStrategy_wsteth",
            "gasUsed": 164275,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {
          "synth_wsteth_settlement_strategy_id": "0"
        }
      },
      "hash": "61e9d6704f8023f19630e66d69d5f490",
      "version": 7
    },
    "invoke.SpotMarketProxy_setAtomicFixedFee_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setAtomicFixedFee_cbbtc": {
            "hash": "0x20fb51625d803aa08a9172579341de7636354c4a4539ecbbc11ae070df3949eb",
            "blockNumber": "17170403",
            "timestamp": "1730109094",
            "events": {
              "AtomicFixedFeeSet": [
                {
                  "name": "AtomicFixedFeeSet",
                  "args": [
                    "7",
                    "300000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setAtomicFixedFee_cbbtc",
            "gasUsed": 56682,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "30690607b9059fb09d0db56dc67c5788",
      "version": 7
    },
    "invoke.SpotMarketProxy_setAtomicFixedFee_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setAtomicFixedFee_cbeth": {
            "hash": "0xb0280100afe6ca5a263a782513b7b724ae39b65b0904889bb14b14a4a1a57f41",
            "blockNumber": "17170405",
            "timestamp": "1730109098",
            "events": {
              "AtomicFixedFeeSet": [
                {
                  "name": "AtomicFixedFeeSet",
                  "args": [
                    "8",
                    "300000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setAtomicFixedFee_cbeth",
            "gasUsed": 56682,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "797f91060403fd6067029ee0dbb73703",
      "version": 7
    },
    "invoke.SpotMarketProxy_setAtomicFixedFee_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setAtomicFixedFee_weth": {
            "hash": "0x24f5e62548d91926a0a5b94a4efb138b675aec3bf74a5ad09471001b81a53dda",
            "blockNumber": "17170407",
            "timestamp": "1730109102",
            "events": {
              "AtomicFixedFeeSet": [
                {
                  "name": "AtomicFixedFeeSet",
                  "args": [
                    "9",
                    "300000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setAtomicFixedFee_weth",
            "gasUsed": 56682,
            "gasCost": "1000336",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b14236db914a4da73006680ea14fb7db",
      "version": 7
    },
    "invoke.SpotMarketProxy_setAtomicFixedFee_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setAtomicFixedFee_wsteth": {
            "hash": "0x58fbebacc39b7c6d19e53c8dd4c3f98b2af5591fcbcbfb3873c962c2c8a4a889",
            "blockNumber": "17170409",
            "timestamp": "1730109106",
            "events": {
              "AtomicFixedFeeSet": [
                {
                  "name": "AtomicFixedFeeSet",
                  "args": [
                    "10",
                    "300000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setAtomicFixedFee_wsteth",
            "gasUsed": 56682,
            "gasCost": "1000337",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "626748119fe42e64a73942459f3c825b",
      "version": 7
    },
    "invoke.SpotMarketProxy_setCollateralLeverage_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setCollateralLeverage_cbbtc": {
            "hash": "0x2f36767d97e92bbc0cd41b579b72e216856a79f2c1292c2550eff3f1a1f72c7d",
            "blockNumber": "17170411",
            "timestamp": "1730109110",
            "events": {
              "CollateralLeverageSet": [
                {
                  "name": "CollateralLeverageSet",
                  "args": [
                    "7",
                    "10000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setCollateralLeverage_cbbtc",
            "gasUsed": 39666,
            "gasCost": "1000337",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2469adeb2813247175d0120c9dd67512",
      "version": 7
    },
    "invoke.SpotMarketProxy_setCollateralLeverage_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setCollateralLeverage_cbeth": {
            "hash": "0x2daf35025b4b1de8fc6b2e0663fa318edc6a4be6b5429fdde28655fafe6e093e",
            "blockNumber": "17170413",
            "timestamp": "1730109114",
            "events": {
              "CollateralLeverageSet": [
                {
                  "name": "CollateralLeverageSet",
                  "args": [
                    "8",
                    "10000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setCollateralLeverage_cbeth",
            "gasUsed": 39666,
            "gasCost": "1000337",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2fc6d23903deaeffb9ffb6e7a72b8095",
      "version": 7
    },
    "invoke.SpotMarketProxy_setCollateralLeverage_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setCollateralLeverage_weth": {
            "hash": "0x4ba991765c4652d55816c547689e1941f65932809c2848d6e0e9de64f5701cf3",
            "blockNumber": "17170415",
            "timestamp": "1730109118",
            "events": {
              "CollateralLeverageSet": [
                {
                  "name": "CollateralLeverageSet",
                  "args": [
                    "9",
                    "10000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setCollateralLeverage_weth",
            "gasUsed": 39666,
            "gasCost": "1000337",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9edd2c630d39bd133baacdff0e8a037f",
      "version": 7
    },
    "invoke.SpotMarketProxy_setCollateralLeverage_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setCollateralLeverage_wsteth": {
            "hash": "0x2ab903a038c7d3cb5aade6c0ed547f55333672db8305e1ac07788ab392adcc68",
            "blockNumber": "17170417",
            "timestamp": "1730109122",
            "events": {
              "CollateralLeverageSet": [
                {
                  "name": "CollateralLeverageSet",
                  "args": [
                    "10",
                    "10000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setCollateralLeverage_wsteth",
            "gasUsed": 39666,
            "gasCost": "1000338",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8f089b75f8276383dff0060e5e65df68",
      "version": 7
    },
    "invoke.SpotMarketProxy_setMarketSkewScale_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setMarketSkewScale_cbbtc": {
            "hash": "0x4f02ee0cff4c90c6a766ec7ba59137525d13b088943274eb533eb09d9f49274a",
            "blockNumber": "17170419",
            "timestamp": "1730109126",
            "events": {
              "MarketSkewScaleSet": [
                {
                  "name": "MarketSkewScaleSet",
                  "args": [
                    "7",
                    "35000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setMarketSkewScale_cbbtc",
            "gasUsed": 56705,
            "gasCost": "1000340",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "5eccff4486d939599f740780e945d3d9",
      "version": 7
    },
    "invoke.SpotMarketProxy_setMarketSkewScale_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setMarketSkewScale_cbeth": {
            "hash": "0x2d37dcac1ef1a0ce74c5a7655e42fb63c7f9fbb169a7ca1aab802d118bd61ccb",
            "blockNumber": "17170421",
            "timestamp": "1730109130",
            "events": {
              "MarketSkewScaleSet": [
                {
                  "name": "MarketSkewScaleSet",
                  "args": [
                    "8",
                    "350000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setMarketSkewScale_cbeth",
            "gasUsed": 56705,
            "gasCost": "1000342",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "8b51f0e2747c6b2b43f8773b226983bf",
      "version": 7
    },
    "invoke.SpotMarketProxy_setMarketSkewScale_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setMarketSkewScale_weth": {
            "hash": "0x8e0cee053ee59e69dec7a3eebb5ff40b370f8780c73fac2e8b83b7991ab506b2",
            "blockNumber": "17170423",
            "timestamp": "1730109134",
            "events": {
              "MarketSkewScaleSet": [
                {
                  "name": "MarketSkewScaleSet",
                  "args": [
                    "9",
                    "350000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setMarketSkewScale_weth",
            "gasUsed": 56705,
            "gasCost": "1000342",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "05f4cba77595bd9c4d5adb22ce59bb06",
      "version": 7
    },
    "invoke.SpotMarketProxy_setMarketSkewScale_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setMarketSkewScale_wsteth": {
            "hash": "0xbf9c06dee7c42530f3490a61945672a07d7f52b3351768fd01018e78e299d727",
            "blockNumber": "17170426",
            "timestamp": "1730109140",
            "events": {
              "MarketSkewScaleSet": [
                {
                  "name": "MarketSkewScaleSet",
                  "args": [
                    "10",
                    "350000000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setMarketSkewScale_wsteth",
            "gasUsed": 56705,
            "gasCost": "1000342",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "73952ad7640b8691616c425f710655a6",
      "version": 7
    },
    "invoke.SpotMarketProxy_setWrapper_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setWrapper_cbbtc": {
            "hash": "0x33f76ab6abba11627a4a6e808ccad55001f3941405d595617d3a2f21e9fc1def",
            "blockNumber": "17170429",
            "timestamp": "1730109146",
            "events": {
              "WrapperSet": [
                {
                  "name": "WrapperSet",
                  "args": [
                    "7",
                    "0x8608d511E224180051A36d34121725D978064e6E",
                    "100000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setWrapper_cbbtc",
            "gasUsed": 96460,
            "gasCost": "1000342",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fef36d637765ef14ae614833d41daf07",
      "version": 7
    },
    "invoke.SpotMarketProxy_setWrapper_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setWrapper_cbeth": {
            "hash": "0x865f973ae7bca37678319d382f3be78824d27b0d27ab7081351b146f7b81c95f",
            "blockNumber": "17170431",
            "timestamp": "1730109150",
            "events": {
              "WrapperSet": [
                {
                  "name": "WrapperSet",
                  "args": [
                    "8",
                    "0x00ab6b818652bB3bFE334983171edFD38184DbeD",
                    "1750000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setWrapper_cbeth",
            "gasUsed": 96460,
            "gasCost": "1000342",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a86f5504b3112b7daef450b31dee3b29",
      "version": 7
    },
    "invoke.SpotMarketProxy_setWrapper_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setWrapper_weth": {
            "hash": "0x0268b6b15bade5ee7fb496dd38364049b2475271a29bfddc838b0d3e1ea24fa6",
            "blockNumber": "17170434",
            "timestamp": "1730109156",
            "events": {
              "WrapperSet": [
                {
                  "name": "WrapperSet",
                  "args": [
                    "9",
                    "0x4200000000000000000000000000000000000006",
                    "1750000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setWrapper_weth",
            "gasUsed": 96256,
            "gasCost": "1000343",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "52f2971ffef6d454dfa03b09cd38eac4",
      "version": 7
    },
    "invoke.SpotMarketProxy_setWrapper_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setWrapper_wsteth": {
            "hash": "0x0e534d9cc768852e1fc24f4de6aadc4ff44c232187507d594a2d1dc14271d0f2",
            "blockNumber": "17170437",
            "timestamp": "1730109162",
            "events": {
              "WrapperSet": [
                {
                  "name": "WrapperSet",
                  "args": [
                    "10",
                    "0x7Bf65af7EFBd0E933fb87dD2C9cE7A17d959b822",
                    "1750000000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setWrapper_wsteth",
            "gasUsed": 96472,
            "gasCost": "1000343",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "2da679d9d71066e07df76c1a14a65700",
      "version": 7
    },
    "invoke.SpotMarketProxy_updatePriceData_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_updatePriceData_cbbtc": {
            "hash": "0x9ce0cc8ace22a21343c862aca78fabf57cb518c96abb80a6ea9ddbff97e974c6",
            "blockNumber": "17174531",
            "timestamp": "1730117350",
            "events": {
              "SynthPriceDataUpdated": [
                {
                  "name": "SynthPriceDataUpdated",
                  "args": [
                    "7",
                    "0xf573840eb0607587b98ce26d05c97f51a34bcfff5c3a182d95885873d8957fcc",
                    "0xf573840eb0607587b98ce26d05c97f51a34bcfff5c3a182d95885873d8957fcc",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_updatePriceData_cbbtc",
            "gasUsed": 43087,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "640534f5399ad636732ec2b420f33bcd",
      "version": 7
    },
    "invoke.SpotMarketProxy_updatePriceData_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_updatePriceData_cbeth": {
            "hash": "0x6a4fb35f3a45d1c3dbc256b9120d96f033b42230109c27ed12ca2a4880309905",
            "blockNumber": "17174533",
            "timestamp": "1730117354",
            "events": {
              "SynthPriceDataUpdated": [
                {
                  "name": "SynthPriceDataUpdated",
                  "args": [
                    "8",
                    "0xce37e7e8fb4bc375e18d6e8c9e049edb6b77cffed91b01fcfc17bcbef54fd2fc",
                    "0xce37e7e8fb4bc375e18d6e8c9e049edb6b77cffed91b01fcfc17bcbef54fd2fc",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_updatePriceData_cbeth",
            "gasUsed": 43087,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "aaa8ac51649c1fdb48599ea48438cb2b",
      "version": 7
    },
    "invoke.SpotMarketProxy_updatePriceData_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_updatePriceData_weth": {
            "hash": "0x452eeb26d192d0b51325c2f071ece7e508bc5db446d7e79dca152cd116e6d0c6",
            "blockNumber": "17174535",
            "timestamp": "1730117358",
            "events": {
              "SynthPriceDataUpdated": [
                {
                  "name": "SynthPriceDataUpdated",
                  "args": [
                    "9",
                    "0xb4df545da972b990d9fb142d975545f5a21371c842495d2d95057e2b44ba56e3",
                    "0xb4df545da972b990d9fb142d975545f5a21371c842495d2d95057e2b44ba56e3",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_updatePriceData_weth",
            "gasUsed": 43087,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a7667e9cd40c97a279e1428ccdb3fe4d",
      "version": 7
    },
    "invoke.SpotMarketProxy_updatePriceData_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_updatePriceData_wsteth": {
            "hash": "0xb25418c095a7c994af346f2ea6744955fa7c1922b464ed4059bb1eba9c0659e6",
            "blockNumber": "17174537",
            "timestamp": "1730117362",
            "events": {
              "SynthPriceDataUpdated": [
                {
                  "name": "SynthPriceDataUpdated",
                  "args": [
                    "10",
                    "0x6c8e58904b53dee5a6c807d159b5d69d097ea8d7098f9c1fca21128695cba8da",
                    "0x6c8e58904b53dee5a6c807d159b5d69d097ea8d7098f9c1fca21128695cba8da",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_updatePriceData_wsteth",
            "gasUsed": 43087,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "e509f3a5a98af7da7d4a2cb25e92658b",
      "version": 7
    },
    "invoke.configure_scbbtc_collateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configure_scbbtc_collateral": {
            "hash": "0xf12ca44357f16c1ca008d17b2e434f3180b37582c26bb006593621e3f16dd2a5",
            "blockNumber": "17174540",
            "timestamp": "1730117368",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x410EecB4b4CF7175352a472572492C1c9997a5e8",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "2000000000000000000",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "100000000000000",
                      "oracleNodeId": "0xf573840eb0607587b98ce26d05c97f51a34bcfff5c3a182d95885873d8957fcc",
                      "tokenAddress": "0x410EecB4b4CF7175352a472572492C1c9997a5e8",
                      "minDelegationD18": "100000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configure_scbbtc_collateral",
            "gasUsed": 56220,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7b27c27d169f2572651aed834c5ad34b",
      "version": 7
    },
    "invoke.configure_scbeth_collateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configure_scbeth_collateral": {
            "hash": "0xb831728282522551b16b86ccbbaa7fde7a06eed393f6628e0507bdd515b1cbae",
            "blockNumber": "17174542",
            "timestamp": "1730117372",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x1c6dfe3205334Fece6a9169c88bF698Ed4370107",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "2000000000000000000",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "100000000000000",
                      "oracleNodeId": "0xce37e7e8fb4bc375e18d6e8c9e049edb6b77cffed91b01fcfc17bcbef54fd2fc",
                      "tokenAddress": "0x1c6dfe3205334Fece6a9169c88bF698Ed4370107",
                      "minDelegationD18": "100000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configure_scbeth_collateral",
            "gasUsed": 56220,
            "gasCost": "1000368",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "0654ce5d613ce8ae08988b005cd7b3c5",
      "version": 7
    },
    "invoke.configure_sweth_collateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configure_sweth_collateral": {
            "hash": "0x0b05ac5d05ed9d60feebf6db9d61d77b716abfa3823e9e58ac34d5269fc60c32",
            "blockNumber": "17174544",
            "timestamp": "1730117376",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x86B35F1b900B15C98049f68f4248815518e71985",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "2000000000000000000",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "100000000000000",
                      "oracleNodeId": "0xb4df545da972b990d9fb142d975545f5a21371c842495d2d95057e2b44ba56e3",
                      "tokenAddress": "0x86B35F1b900B15C98049f68f4248815518e71985",
                      "minDelegationD18": "100000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configure_sweth_collateral",
            "gasUsed": 56220,
            "gasCost": "1000367",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "92f8e29d1df742c018a6e8793301b778",
      "version": 7
    },
    "invoke.configure_swsteth_collateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configure_swsteth_collateral": {
            "hash": "0x6bf73e48518795afd9815ab7dd8e326112abcd57dddac625f878cfd00714d2f9",
            "blockNumber": "17174546",
            "timestamp": "1730117380",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0x5dc2592d23f72833c559ACB35c7122995EA80486",
                    {
                      "depositingEnabled": false,
                      "issuanceRatioD18": "2000000000000000000",
                      "liquidationRatioD18": "1100000000000000000",
                      "liquidationRewardD18": "100000000000000",
                      "oracleNodeId": "0x6c8e58904b53dee5a6c807d159b5d69d097ea8d7098f9c1fca21128695cba8da",
                      "tokenAddress": "0x5dc2592d23f72833c559ACB35c7122995EA80486",
                      "minDelegationD18": "100000000000000000"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configure_swsteth_collateral",
            "gasUsed": 56220,
            "gasCost": "1000366",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "f8e40e1c48887ab9b83678deebebdde7",
      "version": 7
    },
    "provision.RewardsDistributor_scbbtc_liquidation_rewards": {
      "artifacts": {
        "imports": {
          "RewardsDistributor_scbbtc_liquidation_rewards": {
            "url": "ipfs://QmfSqa9kk3gDMY27y4BSaxZUFwy18pdEKJ1H3EiCyT7U5x",
            "tags": [
              "latest"
            ],
            "target": "synthetix-rewards-dist-ext:3.6.0@perps-scbbtc",
            "preset": "perps-scbbtc",
            "settings": {
              "authorizedDistributor": "0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce",
              "name": "Rewards Distributor (External) V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            },
            "contracts": {
              "RewardsDistributorExternal": {
                "address": "0xe51a5cEBFE24B6f50Cbf89B3F8B33d252E10FE3A",
                "abi": [
                  "constructor(address rewardManager_, uint128 poolId_, address payoutToken_, uint8 payoutTokenDecimals_, string name_, address authorizedExternalDistributor_)",
                  "function SYSTEM_PRECISION() view returns (uint256)",
                  "function authorizedExternalDistributor() view returns (address)",
                  "function distributeRewards(uint128 poolId_, address collateralType_, uint256 amount_, uint64 start_, uint32 duration_)",
                  "function name() view returns (string)",
                  "function onPositionUpdated(uint128, uint128, address, uint256)",
                  "function payout(uint128, uint128 poolId_, address, address payoutTarget_, uint256 payoutAmount_) returns (bool)",
                  "function payoutToken() view returns (address)",
                  "function poolId() view returns (uint128)",
                  "function precision() view returns (uint256)",
                  "function rewardManager() view returns (address)",
                  "function rewardedAmount() view returns (uint256)",
                  "function setShouldFailPayout(bool shouldFailPayout_)",
                  "function shouldFailPayout() view returns (bool)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function token() view returns (address)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error NotEnoughBalance(uint256 amountRequested, uint256 currentBalance)",
                  "error NotEnoughRewardsLeft(uint256 amountRequested, uint256 amountLeft)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error Unauthorized(address addr)"
                ],
                "constructorArgs": [
                  "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                  "1",
                  "0x410EecB4b4CF7175352a472572492C1c9997a5e8",
                  "18",
                  "Perps Coinbase Wrapped Bitcoin Liquidation Rewards",
                  "0xf53Ca60F031FAf0E347D44FbaA4870da68250c8d"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0xa307961e0d306c92d8216c89177770f7a059bf455cdcdb392bc06914c244e90b",
                "deployTxnBlockNumber": "17170468",
                "deployTimestamp": "1730109224",
                "sourceName": "src/RewardsDistributorExternal.sol",
                "contractName": "RewardsDistributorExternal",
                "deployedOn": "contract.RewardsDistributorExternal",
                "gasUsed": 981548,
                "gasCost": "1000345"
              }
            },
            "extras": {
              "authorizedDistributor": "0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce",
              "name": "Rewards Distributor (External) V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.RewardsDistributor_scbeth_liquidation_rewards": {
      "artifacts": {
        "imports": {
          "RewardsDistributor_scbeth_liquidation_rewards": {
            "url": "ipfs://QmP7sLthodxq5tjZ1ungQEFtNrYUqP6h86VwFFUH4bTr41",
            "tags": [
              "latest"
            ],
            "target": "synthetix-rewards-dist-ext:3.6.0@perps-scbeth",
            "preset": "perps-scbeth",
            "settings": {
              "authorizedDistributor": "0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce",
              "name": "Rewards Distributor (External) V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            },
            "contracts": {
              "RewardsDistributorExternal": {
                "address": "0x0148f0c84F6C44cfF24450d70BfdaBB9f46c69cf",
                "abi": [
                  "constructor(address rewardManager_, uint128 poolId_, address payoutToken_, uint8 payoutTokenDecimals_, string name_, address authorizedExternalDistributor_)",
                  "function SYSTEM_PRECISION() view returns (uint256)",
                  "function authorizedExternalDistributor() view returns (address)",
                  "function distributeRewards(uint128 poolId_, address collateralType_, uint256 amount_, uint64 start_, uint32 duration_)",
                  "function name() view returns (string)",
                  "function onPositionUpdated(uint128, uint128, address, uint256)",
                  "function payout(uint128, uint128 poolId_, address, address payoutTarget_, uint256 payoutAmount_) returns (bool)",
                  "function payoutToken() view returns (address)",
                  "function poolId() view returns (uint128)",
                  "function precision() view returns (uint256)",
                  "function rewardManager() view returns (address)",
                  "function rewardedAmount() view returns (uint256)",
                  "function setShouldFailPayout(bool shouldFailPayout_)",
                  "function shouldFailPayout() view returns (bool)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function token() view returns (address)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error NotEnoughBalance(uint256 amountRequested, uint256 currentBalance)",
                  "error NotEnoughRewardsLeft(uint256 amountRequested, uint256 amountLeft)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error Unauthorized(address addr)"
                ],
                "constructorArgs": [
                  "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                  "1",
                  "0x1c6dfe3205334Fece6a9169c88bF698Ed4370107",
                  "18",
                  "Perps Coinbase Wrapped Staked ETH Liquidation Rewards",
                  "0xf53Ca60F031FAf0E347D44FbaA4870da68250c8d"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x7a4cdcaff6d905d43ec07bb72f891940ba62a9db86432d46a9c722f905d23c55",
                "deployTxnBlockNumber": "17170471",
                "deployTimestamp": "1730109230",
                "sourceName": "src/RewardsDistributorExternal.sol",
                "contractName": "RewardsDistributorExternal",
                "deployedOn": "contract.RewardsDistributorExternal",
                "gasUsed": 981584,
                "gasCost": "1000345"
              }
            },
            "extras": {
              "authorizedDistributor": "0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce",
              "name": "Rewards Distributor (External) V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.RewardsDistributor_sweth_liquidation_rewards": {
      "artifacts": {
        "imports": {
          "RewardsDistributor_sweth_liquidation_rewards": {
            "url": "ipfs://QmcdpS12eFtkhSdViccyhsQUkuLG897Jydj6sY5Fzr74Bz",
            "tags": [
              "latest"
            ],
            "target": "synthetix-rewards-dist-ext:3.6.0@perps-sweth",
            "preset": "perps-sweth",
            "settings": {
              "authorizedDistributor": "0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce",
              "name": "Rewards Distributor (External) V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            },
            "contracts": {
              "RewardsDistributorExternal": {
                "address": "0x4f908d36EC7A887b161B8745E8eA8aCBd60DB935",
                "abi": [
                  "constructor(address rewardManager_, uint128 poolId_, address payoutToken_, uint8 payoutTokenDecimals_, string name_, address authorizedExternalDistributor_)",
                  "function SYSTEM_PRECISION() view returns (uint256)",
                  "function authorizedExternalDistributor() view returns (address)",
                  "function distributeRewards(uint128 poolId_, address collateralType_, uint256 amount_, uint64 start_, uint32 duration_)",
                  "function name() view returns (string)",
                  "function onPositionUpdated(uint128, uint128, address, uint256)",
                  "function payout(uint128, uint128 poolId_, address, address payoutTarget_, uint256 payoutAmount_) returns (bool)",
                  "function payoutToken() view returns (address)",
                  "function poolId() view returns (uint128)",
                  "function precision() view returns (uint256)",
                  "function rewardManager() view returns (address)",
                  "function rewardedAmount() view returns (uint256)",
                  "function setShouldFailPayout(bool shouldFailPayout_)",
                  "function shouldFailPayout() view returns (bool)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function token() view returns (address)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error NotEnoughBalance(uint256 amountRequested, uint256 currentBalance)",
                  "error NotEnoughRewardsLeft(uint256 amountRequested, uint256 amountLeft)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error Unauthorized(address addr)"
                ],
                "constructorArgs": [
                  "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                  "1",
                  "0x86B35F1b900B15C98049f68f4248815518e71985",
                  "18",
                  "Perps Lido Wrapped ETH Liquidation Rewards",
                  "0xf53Ca60F031FAf0E347D44FbaA4870da68250c8d"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x20fe8ef7f6b12dddfcb2cd9e01db4b3f0d99e54494a476cf96db14f5be313990",
                "deployTxnBlockNumber": "17170473",
                "deployTimestamp": "1730109234",
                "sourceName": "src/RewardsDistributorExternal.sol",
                "contractName": "RewardsDistributorExternal",
                "deployedOn": "contract.RewardsDistributorExternal",
                "gasUsed": 981452,
                "gasCost": "1000345"
              }
            },
            "extras": {
              "authorizedDistributor": "0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce",
              "name": "Rewards Distributor (External) V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.RewardsDistributor_swsteth_liquidation_rewards": {
      "artifacts": {
        "imports": {
          "RewardsDistributor_swsteth_liquidation_rewards": {
            "url": "ipfs://QmXz36Q7815fhhw9nirBqrxNVsW5dG7QADKwF4o61hXimi",
            "tags": [
              "latest"
            ],
            "target": "synthetix-rewards-dist-ext:3.6.0@perps-swsteth",
            "preset": "perps-swsteth",
            "settings": {
              "authorizedDistributor": "0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce",
              "name": "Rewards Distributor (External) V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            },
            "contracts": {
              "RewardsDistributorExternal": {
                "address": "0x517a744c28f26044c5D049125992E5d139b52284",
                "abi": [
                  "constructor(address rewardManager_, uint128 poolId_, address payoutToken_, uint8 payoutTokenDecimals_, string name_, address authorizedExternalDistributor_)",
                  "function SYSTEM_PRECISION() view returns (uint256)",
                  "function authorizedExternalDistributor() view returns (address)",
                  "function distributeRewards(uint128 poolId_, address collateralType_, uint256 amount_, uint64 start_, uint32 duration_)",
                  "function name() view returns (string)",
                  "function onPositionUpdated(uint128, uint128, address, uint256)",
                  "function payout(uint128, uint128 poolId_, address, address payoutTarget_, uint256 payoutAmount_) returns (bool)",
                  "function payoutToken() view returns (address)",
                  "function poolId() view returns (uint128)",
                  "function precision() view returns (uint256)",
                  "function rewardManager() view returns (address)",
                  "function rewardedAmount() view returns (uint256)",
                  "function setShouldFailPayout(bool shouldFailPayout_)",
                  "function shouldFailPayout() view returns (bool)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function token() view returns (address)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error NotEnoughBalance(uint256 amountRequested, uint256 currentBalance)",
                  "error NotEnoughRewardsLeft(uint256 amountRequested, uint256 amountLeft)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error Unauthorized(address addr)"
                ],
                "constructorArgs": [
                  "0x764F4C95FDA0D6f8114faC54f6709b1B45f919a1",
                  "1",
                  "0x5dc2592d23f72833c559ACB35c7122995EA80486",
                  "18",
                  "Perps Lido Wrapped Staked ETH Liquidation Rewards",
                  "0xf53Ca60F031FAf0E347D44FbaA4870da68250c8d"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x69ec748458245bef72e1cbf631d0f36e05e03c64c5b7bdeb88b0fb5e7a4df482",
                "deployTxnBlockNumber": "17170475",
                "deployTimestamp": "1730109238",
                "sourceName": "src/RewardsDistributorExternal.sol",
                "contractName": "RewardsDistributorExternal",
                "deployedOn": "contract.RewardsDistributorExternal",
                "gasUsed": 981536,
                "gasCost": "1000344"
              }
            },
            "extras": {
              "authorizedDistributor": "0x0A2AF931eFFd34b81ebcc57E3d3c9B1E1dE1C9Ce",
              "name": "Rewards Distributor (External) V3",
              "payoutToken": "0x22e6966B799c4D5B13BE962E1D117b56327FDa66",
              "payoutTokenDecimals": "18",
              "poolId": "1",
              "rewardManager": "0x32C222A9A159782aFD7529c87FA34b96CA72C696",
              "salt": "rewards"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_scbbtc_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_scbbtc_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
            "hash": "0xfe1816586dff69c69b2a7a2c3e232599034e663739e9c89608d94ad1330e4a65",
            "blockNumber": "17170478",
            "timestamp": "1730109244",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528",
                    "0xe51a5cEBFE24B6f50Cbf89B3F8B33d252E10FE3A"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_scbbtc_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp",
            "gasUsed": 129093,
            "gasCost": "1000344",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "7e489ce3c12e6fd7a620d3a341432688",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_scbbtc_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_scbbtc_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
            "hash": "0x0abe3adfd0cb496d09ed895a79607407680e3f340f217382657743c299d8de72",
            "blockNumber": "17170481",
            "timestamp": "1730109250",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0x8069c44244e72443722cfb22DcE5492cba239d39",
                    "0xe51a5cEBFE24B6f50Cbf89B3F8B33d252E10FE3A"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_scbbtc_liquidation_rewards_for_SpartanCouncilPool_usdc_lp",
            "gasUsed": 111993,
            "gasCost": "1000345",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "71fb000ab035964c1870086d600ce34e",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_scbeth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_scbeth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
            "hash": "0x5fd6d5ae36f7fea6b955563d6cc15423a0896018ab2121cabfb44d879d275d40",
            "blockNumber": "17170484",
            "timestamp": "1730109256",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528",
                    "0x0148f0c84F6C44cfF24450d70BfdaBB9f46c69cf"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_scbeth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp",
            "gasUsed": 111993,
            "gasCost": "1000345",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "47613986646e8cf927bfdc4414802121",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_scbeth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_scbeth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
            "hash": "0xc716ee9537681eef1aaad393386f94b0c9d342b258cb62fedf013e20bbd1af8b",
            "blockNumber": "17170486",
            "timestamp": "1730109260",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0x8069c44244e72443722cfb22DcE5492cba239d39",
                    "0x0148f0c84F6C44cfF24450d70BfdaBB9f46c69cf"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_scbeth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp",
            "gasUsed": 111993,
            "gasCost": "1000345",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "b3015382364962f3602bff39e9891241",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_sweth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_sweth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
            "hash": "0xe2d3db325006d3488d8c1b9ebbf9bcbe64cee793c1087efd9031e5eb62c1b6ce",
            "blockNumber": "17170488",
            "timestamp": "1730109264",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528",
                    "0x4f908d36EC7A887b161B8745E8eA8aCBd60DB935"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_sweth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp",
            "gasUsed": 111993,
            "gasCost": "1000345",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fa75263dfb4168e6cee7705eff6a6973",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_sweth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_sweth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
            "hash": "0x0eae01075ee3162ca465cf67ad7df6f3d09212cabff297c6a29e155b13833c15",
            "blockNumber": "17170490",
            "timestamp": "1730109268",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0x8069c44244e72443722cfb22DcE5492cba239d39",
                    "0x4f908d36EC7A887b161B8745E8eA8aCBd60DB935"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_sweth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp",
            "gasUsed": 111993,
            "gasCost": "1000345",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "67bf2a61fd90edb062bef793c5535ddd",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_swsteth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_swsteth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp": {
            "hash": "0x660ed5d3a8d63176f745da3249e9a1eef4700d8cd205b50e104e565f665263ba",
            "blockNumber": "17170492",
            "timestamp": "1730109272",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0xB94c6E4f5162717c6fAb1Eeab8f0296307F91528",
                    "0x517a744c28f26044c5D049125992E5d139b52284"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_swsteth_liquidation_rewards_for_SpartanCouncilPool_stata_usdc_lp",
            "gasUsed": 111993,
            "gasCost": "1000345",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "fb4d413ba4528913ef13707bd8fb1534",
      "version": 7
    },
    "invoke.CoreProxy_registerRewardsDistributor_swsteth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "CoreProxy_registerRewardsDistributor_swsteth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp": {
            "hash": "0xf1298dbcea696e6d526acc0babfcd22ff67708a94c2648eed697970a8b8f6e7f",
            "blockNumber": "17170494",
            "timestamp": "1730109276",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0x8069c44244e72443722cfb22DcE5492cba239d39",
                    "0x517a744c28f26044c5D049125992E5d139b52284"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.CoreProxy_registerRewardsDistributor_swsteth_liquidation_rewards_for_SpartanCouncilPool_usdc_lp",
            "gasUsed": 111993,
            "gasCost": "1000345",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "6bfaba13eacb18f0a17692e599a45682",
      "version": 7
    },
    "invoke.PerpsMarketProxy_registerDistributor_synth_cbbtc_liquidations": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_registerDistributor_synth_cbbtc_liquidations": {
            "hash": "0xb89d1ac0dba5d37696c7efbe2c7da0310f7fe2a6033ef0bf66d52223a7dcdd79",
            "blockNumber": "17170496",
            "timestamp": "1730109280",
            "events": {
              "RewardDistributorRegistered": [
                {
                  "name": "RewardDistributorRegistered",
                  "args": [
                    "0xe51a5cEBFE24B6f50Cbf89B3F8B33d252E10FE3A"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_registerDistributor_synth_cbbtc_liquidations",
            "gasUsed": 157128,
            "gasCost": "1000347",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a006575a95f8c1f0799d6ddd22f196ae",
      "version": 7
    },
    "invoke.PerpsMarketProxy_registerDistributor_synth_cbeth_liquidations": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_registerDistributor_synth_cbeth_liquidations": {
            "hash": "0xb82f2f4d4fb4120f710a1e35fb1076e6a0b6628e7fbadc2f905c6e42d6345018",
            "blockNumber": "17170498",
            "timestamp": "1730109284",
            "events": {
              "RewardDistributorRegistered": [
                {
                  "name": "RewardDistributorRegistered",
                  "args": [
                    "0x0148f0c84F6C44cfF24450d70BfdaBB9f46c69cf"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_registerDistributor_synth_cbeth_liquidations",
            "gasUsed": 157128,
            "gasCost": "1000346",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "03501543a25d9436a9a6ce33f8258503",
      "version": 7
    },
    "invoke.PerpsMarketProxy_registerDistributor_synth_weth_liquidations": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_registerDistributor_synth_weth_liquidations": {
            "hash": "0x835556f2c399cf3d81390326dc6af539f5ee1aee3421c3f7281f9e64cbb50c3a",
            "blockNumber": "17170500",
            "timestamp": "1730109288",
            "events": {
              "RewardDistributorRegistered": [
                {
                  "name": "RewardDistributorRegistered",
                  "args": [
                    "0x4f908d36EC7A887b161B8745E8eA8aCBd60DB935"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_registerDistributor_synth_weth_liquidations",
            "gasUsed": 157128,
            "gasCost": "1000347",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "12582fa22220cf9fade6fd3d71ee9ce1",
      "version": 7
    },
    "invoke.PerpsMarketProxy_registerDistributor_synth_wsteth_liquidations": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_registerDistributor_synth_wsteth_liquidations": {
            "hash": "0xeb02b28a5508f51902e24195508eec6407f09feffcff1f177c8992fd337eb523",
            "blockNumber": "17170502",
            "timestamp": "1730109292",
            "events": {
              "RewardDistributorRegistered": [
                {
                  "name": "RewardDistributorRegistered",
                  "args": [
                    "0x517a744c28f26044c5D049125992E5d139b52284"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_registerDistributor_synth_wsteth_liquidations",
            "gasUsed": 157128,
            "gasCost": "1000347",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "53dce401895c8087f64b759fab45e7c9",
      "version": 7
    },
    "invoke.PerpsMarketProxy_updateKeeperCostNodeId": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "PerpsMarketProxy_updateKeeperCostNodeId": {
            "hash": "0x2738d759acdfb2cd8d04760fc51fd3b48a8e2180c3715f8bffe1cee82550646d",
            "blockNumber": "17174747",
            "timestamp": "1730117782",
            "events": {
              "KeeperCostNodeIdUpdated": [
                {
                  "name": "KeeperCostNodeIdUpdated",
                  "args": [
                    "0x65c7a183b8aa2c084894e7c3bd1c8cf101e3c19def105b1466afa3f516a5de69"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.PerpsMarketProxy_updateKeeperCostNodeId",
            "gasUsed": 36259,
            "gasCost": "1000349",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "a2492aa6c36718db217609af3a68f146",
      "version": 7
    },
    "invoke.SpotMarketProxy_setSettlementStrategy_cbbtc": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setSettlementStrategy_cbbtc": {
            "hash": "0x0e74e4bb3b76c7493da9a71f4bd6aa4756c8fb8a56c5531f5809dbb731504712",
            "blockNumber": "17170506",
            "timestamp": "1730109300",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "7",
                    "0",
                    {
                      "strategyType": 1,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x2817d7bfe5c64b8ea956e9a26f573ef64e72e4d7891f2d6af9bcc93f7aff9a97",
                      "url": "https://api.synthetix.io/pyth-mainnet/api/get_vaa_ccip?data={data}",
                      "settlementReward": "1000000000000000000",
                      "priceDeviationTolerance": "1000000000000000000",
                      "minimumUsdExchangeAmount": "1000000000000",
                      "maxRoundingLoss": "1000000000000",
                      "disabled": true
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setSettlementStrategy_cbbtc",
            "gasUsed": 286375,
            "gasCost": "1000348",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "56052a81531a2f4d7a59a2885a05bf34",
      "version": 7
    },
    "invoke.SpotMarketProxy_setSettlementStrategy_cbeth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setSettlementStrategy_cbeth": {
            "hash": "0xdb86f413ec5ab02244e36fa3e34f8db56d51f628965e6612d6f7da1cc0ca8583",
            "blockNumber": "17170508",
            "timestamp": "1730109304",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "8",
                    "0",
                    {
                      "strategyType": 1,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x15ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce5717",
                      "url": "https://api.synthetix.io/pyth-mainnet/api/get_vaa_ccip?data={data}",
                      "settlementReward": "1000000000000000000",
                      "priceDeviationTolerance": "1000000000000000000",
                      "minimumUsdExchangeAmount": "1000000000000",
                      "maxRoundingLoss": "1000000000000",
                      "disabled": true
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setSettlementStrategy_cbeth",
            "gasUsed": 286375,
            "gasCost": "1000348",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "45f47bb8caa2ddc062590c657b5bd546",
      "version": 7
    },
    "invoke.SpotMarketProxy_setSettlementStrategy_weth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setSettlementStrategy_weth": {
            "hash": "0x93c4f54cb7c3bd0e093fb55a6ae772affc3b82ce2ba0e3a4d4014e32486232e6",
            "blockNumber": "17170510",
            "timestamp": "1730109308",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "9",
                    "0",
                    {
                      "strategyType": 1,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace",
                      "url": "https://api.synthetix.io/pyth-mainnet/api/get_vaa_ccip?data={data}",
                      "settlementReward": "1000000000000000000",
                      "priceDeviationTolerance": "1000000000000000000",
                      "minimumUsdExchangeAmount": "1000000000000",
                      "maxRoundingLoss": "1000000000000",
                      "disabled": true
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setSettlementStrategy_weth",
            "gasUsed": 286375,
            "gasCost": "1000348",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "d095f2bf8b72fe7a11207a4fc0115547",
      "version": 7
    },
    "invoke.SpotMarketProxy_setSettlementStrategy_wsteth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SpotMarketProxy_setSettlementStrategy_wsteth": {
            "hash": "0xfac1e668eb6979a0bd9a08599f59c2eb0f9eef8817b7989c96204df7121f2090",
            "blockNumber": "17170512",
            "timestamp": "1730109312",
            "events": {
              "SettlementStrategySet": [
                {
                  "name": "SettlementStrategySet",
                  "args": [
                    "10",
                    "0",
                    {
                      "strategyType": 1,
                      "settlementDelay": "2",
                      "settlementWindowDuration": "60",
                      "priceVerificationContract": "0xF9e9e905d3745F5E0B803a179E17328CFe03B56d",
                      "feedId": "0x6df640f3b8963d8f8358f791f352b8364513f6ab1cca5ed3f1f7b5448980e784",
                      "url": "https://api.synthetix.io/pyth-mainnet/api/get_vaa_ccip?data={data}",
                      "settlementReward": "1000000000000000000",
                      "priceDeviationTolerance": "1000000000000000000",
                      "minimumUsdExchangeAmount": "1000000000000",
                      "maxRoundingLoss": "1000000000000",
                      "disabled": true
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SpotMarketProxy_setSettlementStrategy_wsteth",
            "gasUsed": 286375,
            "gasCost": "1000348",
            "signer": "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          }
        },
        "settings": {}
      },
      "hash": "9d6f46a32348456ad7bc6e9705e19788",
      "version": 7
    }
  },
  "options": {},
  "status": "complete",
  "meta": {
    "gitUrl": "https://github.com/Synthetixio/synthetix-deployments",
    "commitHash": "ff74753f0382474a07340f98d4e957c7504a9915",
    "readme": "https://github.com/Synthetixio/synthetix-deployments/blob/main/README.md"
  },
  "miscUrl": "ipfs://QmeSt2mnJKE8qmRhLyYbHQQxDKpsFbcWnw5e7JF4xVbN6k",
  "chainId": 84532
}