{
  "generator": "cannon website 2.15.5",
  "timestamp": 1744364258,
  "def": {
    "setting": {
      "minimum_liquidity_ratio": {
        "defaultValue": "1100000000000000000"
      },
      "account_timeout_withdraw": {
        "defaultValue": "86400"
      },
      "snx_package": {
        "defaultValue": "synthetix:3.12.0"
      },
      "owner": {
        "defaultValue": "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
      },
      "target_preset": {
        "defaultValue": "main"
      },
      "salt": {
        "defaultValue": "0x3330363734343032330000000000000000000000000000000000000000000000"
      },
      "bundleSalt": {
        "defaultValue": "snax"
      },
      "deployer": {
        "defaultValue": "0x1C8236B406911A376369e33D39189F1b4B39F27D"
      },
      "snx_aggregator_address": {
        "defaultValue": "0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699"
      },
      "snx_chainlink_staleness_tolerance": {
        "defaultValue": "129600"
      },
      "snx_address": {
        "defaultValue": "<%= imports.legacyMarket.imports.v2x.contracts.ProxySynthetix.address %>"
      },
      "snx_liquidation_reward": {
        "defaultValue": "50000000000000000000"
      },
      "legacy_market_package": {
        "defaultValue": "synthetix-legacy-market:3.12.1"
      },
      "spot_market_package": {
        "defaultValue": "synthetix-spot-market:3.3.15"
      },
      "usde_aggregator_address": {
        "defaultValue": "0xa569d910839Ae8865Da8F8e70FfFb0cBA869F961"
      },
      "usde_chainlink_staleness_tolerance": {
        "defaultValue": "129600"
      },
      "pythPriceVerificationAddress": {},
      "pythFeedUrl": {},
      "settlementReward": {
        "defaultValue": "1"
      },
      "settlementMinimumUsdExchangeAmount": {
        "defaultValue": "0.000001"
      },
      "settlementMaxRoundingLoss": {
        "defaultValue": "0.000001"
      },
      "commitmentPriceDelay": {
        "defaultValue": "2"
      },
      "bigCapSettlementDelay": {
        "defaultValue": "2"
      },
      "bigCapSettlementWindowDuration": {
        "defaultValue": "60"
      },
      "bigCapDefaultStalenessTolerance": {
        "defaultValue": "3600"
      },
      "bigCapStrictStalenessTolerance": {
        "defaultValue": "60"
      },
      "spotStrictStalenessTolerance": {
        "defaultValue": "60"
      },
      "sc_pool_id": {
        "defaultValue": "1"
      },
      "pool_owner": {
        "defaultValue": "0x302d2451d9f47620374B54c521423Bf0403916A2"
      },
      "ccip_router": {
        "defaultValue": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
      },
      "ccip_token_pool": {
        "defaultValue": "0x057152DB365B47851B0A0bd431644b8eE21fE1b4"
      },
      "oracle_manager_package": {
        "defaultValue": "oracle-manager:3.10.1"
      },
      "perps_market_package": {
        "defaultValue": "synthetix-perps-market:3.3.19"
      },
      "treasury_market_package": {
        "defaultValue": "synthetix-treasury-market:3.12.0"
      },
      "susde_package": {
        "defaultValue": "susde-token"
      },
      "wsteth_package": {
        "defaultValue": "wsteth-token"
      },
      "susde_aggregator_address": {
        "defaultValue": "0xFF3BC18cCBd5999CE63E788A1c250a88626aD099"
      },
      "susde_chainlink_staleness_tolerance": {
        "defaultValue": "129600"
      },
      "pdao": {
        "defaultValue": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
      },
      "treasury": {
        "defaultValue": "0x99f4176ee457afedffcb1839c7ab7a030a5e4a92"
      },
      "treasury_pool_id_setting": {
        "defaultValue": "8"
      },
      "synthUsdeAsyncFixedFee": {
        "defaultValue": "0"
      },
      "synthUsdeSkewScale": {
        "defaultValue": "0"
      },
      "synth_usde_max_market_collateral": {
        "defaultValue": "0"
      },
      "treasury_market_target_cratio": {
        "defaultValue": "<%= parseEther('1.1') %>"
      },
      "position_manager_address": {
        "defaultValue": "0x100c6c18381c9a7527762063047236356bbd0b8d"
      }
    },
    "invoke": {
      "setMinimumLiquidityRatio": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setMinLiquidityRatio(uint256)",
        "args": [
          "<%= settings.minimum_liquidity_ratio %>"
        ]
      },
      "setAccountTimeoutWithdraw": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= formatBytes32String('accountTimeoutWithdraw') %>",
          "<%= hexZeroPad(hexlify(parseInt(settings.account_timeout_withdraw)), 32) %>"
        ],
        "depends": [
          "provision.system",
          "setting.account_timeout_withdraw"
        ]
      },
      "setSupportedCrossChainNetworks": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSupportedCrossChainNetworks",
        "args": [
          [],
          []
        ],
        "depends": [
          "provision.system"
        ]
      },
      "permitCreatePool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addToFeatureFlagAllowlist",
        "args": [
          "<%= formatBytes32String('createPool') %>",
          "<%= settings.deployer %>"
        ]
      },
      "registerSnxOracleManagerNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          3,
          "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [settings.snx_aggregator_address, 0, 8]) %>",
          []
        ],
        "extra": {
          "snx_oracle_id_raw": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "provision.system",
          "setting.snx_aggregator_address"
        ]
      },
      "registerSnxWithStaleness": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.snx_chainlink_staleness_tolerance]) %>",
          [
            "<%= extras.snx_oracle_id_raw %>"
          ]
        ],
        "extra": {
          "snx_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "configureSnxCollateral": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureCollateral",
        "args": [
          {
            "tokenAddress": "<%= settings.snx_address %>",
            "oracleNodeId": "<%= extras.snx_oracle_id %>",
            "issuanceRatioD18": "<%= parseEther('5') %>",
            "liquidationRatioD18": "<%= parseEther('1.01') %>",
            "liquidationRewardD18": "0",
            "minDelegationD18": "1",
            "depositingEnabled": true
          }
        ]
      },
      "registerUsdeOracleManagerNode": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          3,
          "<%= defaultAbiCoder.encode(['address', 'uint256', 'uint8'], [settings.usde_aggregator_address, 0, 8]) %>",
          []
        ],
        "extra": {
          "usde_oracle_id_raw": {
            "event": "NodeRegistered",
            "arg": 0
          }
        },
        "depends": [
          "provision.system",
          "setting.usde_aggregator_address"
        ]
      },
      "registerUsdeWithStaleness": {
        "target": [
          "system.oracle_manager.Proxy"
        ],
        "func": "registerNode",
        "args": [
          7,
          "<%= defaultAbiCoder.encode(['uint256'], [settings.usde_chainlink_staleness_tolerance]) %>",
          [
            "<%= extras.usde_oracle_id_raw %>"
          ]
        ],
        "extra": {
          "usde_oracle_id": {
            "event": "NodeRegistered",
            "arg": 0
          }
        }
      },
      "createUsdeSynth": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createSynth",
        "args": [
          "Synthetic Ethena USD",
          "snxUSDe",
          "<%= settings.owner %>"
        ],
        "extra": {
          "synth_usde_market_id": {
            "event": "SynthRegistered",
            "arg": 0
          },
          "synth_usde_token_address": {
            "event": "SynthRegistered",
            "arg": 1
          }
        }
      },
      "setSynthPriceUsde": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_usde_market_id %>"
          ]
        },
        "func": "updatePriceData",
        "args": [
          "<%= extras.synth_usde_market_id %>",
          "<%= extras.usde_oracle_id %>",
          "<%= extras.usde_oracle_id %>",
          "<%= settings.spotStrictStalenessTolerance %>"
        ],
        "depends": [
          "setting.settlementMaxRoundingLoss",
          "setting.settlementMinimumUsdExchangeAmount"
        ]
      },
      "setSynthAsyncFixedFeeUsde": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_usde_market_id %>"
          ]
        },
        "func": "setAsyncFixedFee",
        "args": [
          "<%= extras.synth_usde_market_id %>",
          "<%= parseEther(settings.synthUsdeAsyncFixedFee) %>"
        ],
        "depends": [
          "invoke.createUsdeSynth",
          "provision.spotFactory",
          "setting.synthUsdeAsyncFixedFee"
        ]
      },
      "setSynthSkewScaleUsde": {
        "target": [
          "spotFactory.SpotMarketProxy"
        ],
        "fromCall": {
          "func": "getMarketOwner",
          "args": [
            "<%= extras.synth_usde_market_id %>"
          ]
        },
        "func": "setMarketSkewScale",
        "args": [
          "<%= extras.synth_usde_market_id %>",
          "<%= parseEther(settings.synthUsdeSkewScale) %>"
        ],
        "depends": [
          "invoke.createUsdeSynth",
          "provision.spotFactory",
          "setting.synthUsdeSkewScale"
        ]
      },
      "createScPool": {
        "target": [
          "system.CoreProxy"
        ],
        "func": "createPool",
        "args": [
          "<%= settings.sc_pool_id %>",
          "<%= settings.pool_owner %>"
        ],
        "depends": [
          "invoke.permitCreatePool"
        ]
      },
      "setScPoolName": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= settings.sc_pool_id %>"
          ]
        },
        "func": "setPoolName",
        "args": [
          "<%= settings.sc_pool_id %>",
          "Spartan Council Pool"
        ],
        "depends": [
          "invoke.createScPool"
        ]
      },
      "setPreferredPool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPreferredPool",
        "args": [
          "<%= extras.treasury_pool_id %>"
        ],
        "depends": [
          "invoke.createScPool"
        ]
      },
      "configureChainlinkCrossChain": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "configureChainlinkCrossChain",
        "args": [
          "<%= settings.ccip_router %>",
          "<%= settings.ccip_token_pool %>"
        ]
      },
      "allowAllTransferCrossChain": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFeatureFlagAllowAll",
        "args": [
          "<%= formatBytes32String('transferCrossChain') %>",
          true
        ]
      },
      "authorizedPublishers_synthetix_bfp_market": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-bfp-market') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-bfp-market') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_lido_wsteth_to_eth_ratio_oracle": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('lido-wsteth-to-eth-ratio-oracle') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('lido-wsteth-to-eth-ratio-oracle') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_legacy_market": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-legacy-market') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-legacy-market') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_rewards_distributor": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-rewards-distributor') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-rewards-distributor') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_pyth_erc7412_wrapper": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('pyth-erc7412-wrapper') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('pyth-erc7412-wrapper') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_op_gas_price_oracle": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('op-gas-price-oracle') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('op-gas-price-oracle') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_buyback_snx": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('buyback-snx') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('buyback-snx') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_arbitrum_gas_price_oracle": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('arbitrum-gas-price-oracle') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('arbitrum-gas-price-oracle') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_governance_satellite": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-governance-satellite') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-governance-satellite') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_governance": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-governance') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-governance') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_trusted_multicall_forwarder": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('trusted-multicall-forwarder') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('trusted-multicall-forwarder') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_spot_market": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-spot-market') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-spot-market') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_perps_market": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-perps-market') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-perps-market') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_oracle_manager": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('oracle-manager') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('oracle-manager') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_omnibus": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-omnibus') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-omnibus') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_sandbox": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-sandbox') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-sandbox') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_rewards_manager": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-rewards-manager') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-rewards-manager') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_arbitrum_gas_oracle": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('arbitrum-gas-oracle') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('arbitrum-gas-oracle') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_op_gas_oracle": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('op-gas-oracle') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('op-gas-oracle') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_spot_market_oracle": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('spot-market-oracle') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('spot-market-oracle') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_transparent_upgradable_proxy": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('transparent-upgradable-proxy') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('transparent-upgradable-proxy') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_mintable_token": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('mintable-token') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('mintable-token') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_erc4626": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('erc4626') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('erc4626') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_erc_4626_to_assets_ratio_oracle": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('erc-4626-to-assets-ratio-oracle') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('erc-4626-to-assets-ratio-oracle') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_rewards_dist_ext": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-rewards-dist-ext') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-rewards-dist-ext') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_fake_susde_token": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('fake-susde-token') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('fake-susde-token') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_fake_usde_token": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('fake-usde-token') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('fake-usde-token') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_fake_wsteth_token": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('fake-wsteth-token') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('fake-wsteth-token') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_snapshot_rewards": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-snapshot-rewards') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-snapshot-rewards') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_chainlink": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('chainlink') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('chainlink') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "authorizedPublishers_synthetix_mock_tokens": {
        "target": [
          "cannonRegistry.Proxy"
        ],
        "fromCall": {
          "func": "getPackageOwner",
          "args": [
            "<%= formatBytes32String('synthetix-mock-tokens') %>"
          ]
        },
        "func": "setAdditionalPublishers",
        "args": [
          "<%= formatBytes32String('synthetix-mock-tokens') %>",
          [
            "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
            "<%= settings.deployer %>"
          ],
          [
            "0x6cd3f878852769e04A723A5f66CA7DD4d9E38A6C",
            "<%= settings.deployer %>"
          ]
        ]
      },
      "GovernanceProxy_setRegisteredEmitters_ambassador": {
        "target": [
          "governance_satellite_ambassador.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setRegisteredEmitters",
        "args": [
          [
            "43",
            "2",
            "24"
          ],
          [
            "<%= governance_satellite_ambassador.GovernanceProxy.address %>",
            "<%= governance_satellite_ambassador.GovernanceProxy.address %>",
            "<%= governance_satellite_ambassador.GovernanceProxy.address %>"
          ]
        ]
      },
      "GovernanceProxy_setRegisteredEmitters_spartan": {
        "target": [
          "governance_satellite_spartan.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setRegisteredEmitters",
        "args": [
          [
            "43",
            "2",
            "24"
          ],
          [
            "<%= governance_satellite_spartan.GovernanceProxy.address %>",
            "<%= governance_satellite_spartan.GovernanceProxy.address %>",
            "<%= governance_satellite_spartan.GovernanceProxy.address %>"
          ]
        ]
      },
      "GovernanceProxy_setRegisteredEmitters_treasury": {
        "target": [
          "governance_satellite_treasury.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setRegisteredEmitters",
        "args": [
          [
            "43",
            "2",
            "24"
          ],
          [
            "<%= governance_satellite_treasury.GovernanceProxy.address %>",
            "<%= governance_satellite_treasury.GovernanceProxy.address %>",
            "<%= governance_satellite_treasury.GovernanceProxy.address %>"
          ]
        ]
      },
      "GovernanceProxy_setGasLimit_ambassador": {
        "target": [
          "governance_satellite_ambassador.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setGasLimit",
        "args": [
          "<%= String(1_000_000) %>"
        ]
      },
      "GovernanceProxy_setGasLimit_spartan": {
        "target": [
          "governance_satellite_spartan.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setGasLimit",
        "args": [
          "<%= String(1_000_000) %>"
        ]
      },
      "GovernanceProxy_setGasLimit_treasury": {
        "target": [
          "governance_satellite_treasury.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setGasLimit",
        "args": [
          "<%= String(1_000_000) %>"
        ]
      },
      "GovernanceProxy_setSnapshotContract_ambassador": {
        "target": [
          "governance_satellite_ambassador.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSnapshotContract",
        "args": [
          "<%= settings.governance_snapshot_record %>",
          "<%= settings.governance_ambassador_weight %>",
          true
        ]
      },
      "GovernanceProxy_setSnapshotContract_spartan": {
        "target": [
          "governance_satellite_spartan.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSnapshotContract",
        "args": [
          "<%= settings.governance_snapshot_record %>",
          "<%= settings.governance_spartan_weight %>",
          true
        ]
      },
      "GovernanceProxy_setSnapshotContract_treasury": {
        "target": [
          "governance_satellite_treasury.GovernanceProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setSnapshotContract",
        "args": [
          "<%= settings.governance_snapshot_record %>",
          "<%= settings.governance_treasury_weight %>",
          true
        ]
      },
      "SynthetixDebtShare_addAuthorizedToSnapshot_ambassador": {
        "target": [
          "v2x.SynthetixDebtShare"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addAuthorizedToSnapshot",
        "args": [
          "<%= governance_satellite_ambassador.GovernanceProxy.address %>"
        ]
      },
      "SynthetixDebtShare_addAuthorizedToSnapshot_spartan": {
        "target": [
          "v2x.SynthetixDebtShare"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addAuthorizedToSnapshot",
        "args": [
          "<%= governance_satellite_spartan.GovernanceProxy.address %>"
        ]
      },
      "SynthetixDebtShare_addAuthorizedToSnapshot_treasury": {
        "target": [
          "v2x.SynthetixDebtShare"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addAuthorizedToSnapshot",
        "args": [
          "<%= governance_satellite_treasury.GovernanceProxy.address %>"
        ]
      },
      "createTreasuryPool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "createPool",
        "args": [
          "<%= settings.treasury_pool_id_setting %>",
          "<%= settings.pdao %>"
        ],
        "extra": {
          "treasury_pool_id": {
            "event": "PoolCreated",
            "arg": 0
          }
        },
        "depends": [
          "invoke.permitCreatePool"
        ]
      },
      "setTreasuryPoolName": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= extras.treasury_pool_id %>"
          ]
        },
        "func": "setPoolName",
        "args": [
          "<%= extras.treasury_pool_id %>",
          "Treasury Pool"
        ]
      },
      "setTreasuryPoolCollateralDisabled": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= extras.treasury_pool_id %>"
          ]
        },
        "func": "setPoolCollateralDisabledByDefault",
        "args": [
          "<%= extras.treasury_pool_id %>",
          true
        ]
      },
      "setTreasuryPoolSnxExclusiveDeposit": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "getPoolOwner",
          "args": [
            "<%= extras.treasury_pool_id %>"
          ]
        },
        "func": "setPoolCollateralConfiguration",
        "args": [
          "<%= extras.treasury_pool_id %>",
          "<%= settings.snx_address %>",
          {
            "collateralLimitD18": "<%= MaxUint256 %>",
            "issuanceRatioD18": "<%= MaxUint256 %>"
          }
        ]
      },
      "disable_treasury_pool_liquidations": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= keccak256(defaultAbiCoder.encode(['bytes32', 'uint256'], [formatBytes32String('disablePoolLiquidation'), formatBytes32String('8')])) %>",
          "<%= keccak256('1') %>"
        ]
      },
      "set_treasury_account": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= formatBytes32String('treasuryAccountId') %>",
          "<%= defaultAbiCoder.encode(['uint256'], [settings.treasury_account_id]) %>"
        ]
      },
      "set_treasury_pool": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= formatBytes32String('treasuryPoolId') %>",
          "<%= defaultAbiCoder.encode(['uint256'], [settings.treasury_pool_id]) %>"
        ]
      },
      "allow_liquidate_to_treasury": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "addToFeatureFlagAllowlist",
        "args": [
          "<%= formatBytes32String('liquidateToTreasury') %>",
          "<%= settings.treasury_liquidator_address %>"
        ]
      },
      "pauseLMMigration": {
        "target": [
          "legacyMarket.Proxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setPauseMigration",
        "args": [
          true
        ]
      },
      "disableLiquidate": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFeatureFlagAllowAll",
        "args": [
          "<%= formatBytes32String('liquidate') %>",
          false
        ]
      },
      "disableLiquidateVault": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setFeatureFlagAllowAll",
        "args": [
          "<%= formatBytes32String('liquidateVault') %>",
          false
        ]
      },
      "setCRatio": {
        "target": [
          "treasury_market.Proxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setTargetCRatio",
        "args": [
          "<%= settings.treasury_market_target_cratio %>"
        ]
      },
      "setDebtDecayFunction": {
        "target": [
          "treasury_market.Proxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setDebtDecayFunction",
        "args": [
          "1",
          "31536000",
          "<%= parseEther('1') %>",
          "<%= parseEther('0.5') %>"
        ]
      },
      "setPositionManagerOverrideWithdrawTimeout": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= keccak256(defaultAbiCoder.encode(['bytes32', 'address'], [formatBytes32String('senderOverrideWithdrawTimeout'), settings.position_manager_address])) %>",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ]
      },
      "setPositionManagerOverrideMinDelegateTime": {
        "target": [
          "system.CoreProxy"
        ],
        "fromCall": {
          "func": "owner"
        },
        "func": "setConfig",
        "args": [
          "<%= keccak256(defaultAbiCoder.encode(['bytes32', 'address', 'uint256'], [formatBytes32String('senderOverrideMinDelegateTime'), settings.position_manager_address, settings.treasury_pool_id])) %>",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ]
      }
    },
    "clone": {
      "oracle_manager": {
        "source": "<%= settings.oracle_manager_package %>",
        "target": "<%= settings.oracle_manager_package %>",
        "options": {
          "salt": "<%= settings.salt %>-oracle",
          "owner": "<%= settings.owner %>"
        }
      },
      "governance_satellite_ambassador": {
        "source": "<%= settings.governance_satellite_package %>",
        "targetPreset": "ambassador",
        "options": {
          "salt": "<%= settings.salt %>-ambassador-2",
          "owner": "<%= settings.owner %>",
          "wormhole_core": "<%= settings.governance_wormhole_core %>",
          "wormhole_relayer": "<%= settings.governance_wormhole_relayer %>",
          "initial_council_member": "<%= settings.governance_initial_council_member %>",
          "initial_epoch_index": "<%= settings.governance_initial_epoch_index %>",
          "initial_epoch_start_date": "<%= settings.governance_initial_epoch_start_date %>",
          "initial_nomination_period_start_date": "<%= settings.governance_initial_nomination_period_start_date %>",
          "initial_voting_period_start_date": "<%= settings.governance_initial_voting_period_start_date %>",
          "initial_epoch_end_date": "<%= settings.governance_initial_epoch_end_date %>"
        }
      },
      "governance_satellite_spartan": {
        "source": "<%= settings.governance_satellite_package %>",
        "targetPreset": "spartan",
        "options": {
          "salt": "<%= settings.salt %>-spartan-2",
          "owner": "<%= settings.owner %>",
          "wormhole_core": "<%= settings.governance_wormhole_core %>",
          "wormhole_relayer": "<%= settings.governance_wormhole_relayer %>",
          "initial_council_member": "<%= settings.governance_initial_council_member %>",
          "initial_epoch_index": "<%= settings.governance_initial_epoch_index %>",
          "initial_epoch_start_date": "<%= settings.governance_initial_epoch_start_date %>",
          "initial_nomination_period_start_date": "<%= settings.governance_initial_nomination_period_start_date %>",
          "initial_voting_period_start_date": "<%= settings.governance_initial_voting_period_start_date %>",
          "initial_epoch_end_date": "<%= settings.governance_initial_epoch_end_date %>"
        }
      },
      "governance_satellite_treasury": {
        "source": "<%= settings.governance_satellite_package %>",
        "targetPreset": "treasury",
        "options": {
          "salt": "<%= settings.salt %>-treasury-2",
          "owner": "<%= settings.owner %>",
          "wormhole_core": "<%= settings.governance_wormhole_core %>",
          "wormhole_relayer": "<%= settings.governance_wormhole_relayer %>",
          "initial_council_member": "<%= settings.governance_initial_council_member %>",
          "initial_epoch_index": "<%= settings.governance_initial_epoch_index %>",
          "initial_epoch_start_date": "<%= settings.governance_initial_epoch_start_date %>",
          "initial_nomination_period_start_date": "<%= settings.governance_initial_nomination_period_start_date %>",
          "initial_voting_period_start_date": "<%= settings.governance_initial_voting_period_start_date %>",
          "initial_epoch_end_date": "<%= settings.governance_initial_epoch_end_date %>"
        }
      }
    },
    "provision": {
      "system": {
        "source": "<%= settings.snx_package %>",
        "target": "<%= settings.snx_package %>@<%= settings.target_preset %>",
        "options": {
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>",
          "bundleSalt": "<%= settings.bundleSalt %>",
          "oracle_manager_package": "<%= settings.oracle_manager_package %>"
        }
      },
      "legacyMarket": {
        "source": "<%= settings.legacy_market_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "owner": "<%= settings.pdao %>",
          "pool_owner": "<%= settings.pdao %>",
          "v2x_package": "synthetix:2.101.2",
          "v3_package": "<%= settings.snx_package %>",
          "salt": "<%= settings.salt %>",
          "synthetixPackage": "<%= settings.snx_package %>@<%= settings.target_preset %>",
          "synthetixPreset": "<%= settings.target_preset %>",
          "market_id": "1"
        },
        "depends": [
          "provision.system"
        ]
      },
      "spotFactory": {
        "source": "<%= settings.spot_market_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "coreProxyOwner": "<%= settings.owner %>",
          "owner": "<%= settings.owner %>",
          "salt": "<%= settings.salt %>",
          "synthetixPackage": "<%= settings.snx_package %>@<%= settings.target_preset %>",
          "synthetixPreset": "<%= settings.target_preset %>"
        },
        "depends": [
          "provision.system"
        ]
      },
      "treasury_market": {
        "source": "<%= settings.treasury_market_package %>",
        "targetPreset": "<%= settings.target_preset %>",
        "options": {
          "v3_package": "<%= settings.snx_package %>@<%= settings.target_preset %>",
          "owner": "<%= settings.pdao %>",
          "treasury_address": "<%= settings.treasury %>",
          "pool_id": "<%= extras.treasury_pool_id %>",
          "collateral_token": "<%= settings.snx_address %>"
        }
      }
    },
    "import": {
      "cannonRegistry": {
        "source": "registry:2.15.1"
      },
      "v2x": {
        "source": "synthetix:2.101.3"
      },
      "usde": {
        "source": "usde-token"
      }
    },
    "var": {
      "treasuryInfo": {
        "treasury_account_id": "10",
        "treasury_liquidator_address": "0x9DAffb42b60Bb14d8EE80b503AAfC312dCbAF552"
      },
      "governance": {
        "governance_package": "synthetix-governance:3.0.9",
        "governance_satellite_package": "synthetix-governance-satellite:3.0.9",
        "governance_snapshot_record_package": "synthetix-snapshot-rewards:3.5.0",
        "governance_wormhole_core": "0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B",
        "governance_wormhole_relayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911",
        "governance_snapshot_record": "0x89FCb32F29e509cc42d0C8b6f058C993013A843F",
        "governance_ambassador_weight": "0",
        "governance_spartan_weight": "1",
        "governance_treasury_weight": "1",
        "governance_initial_council_member": "<%= settings.owner %>",
        "governance_minimum_active_members": "1",
        "governance_initial_epoch_index": "0",
        "governance_initial_epoch_start_date": "1725035275",
        "governance_initial_nomination_period_start_date": "1725072898",
        "governance_initial_voting_period_start_date": "1725640075",
        "governance_initial_epoch_end_date": "1726504075"
      }
    },
    "name": "synthetix-omnibus",
    "version": "18",
    "description": "Includes the full synthetix system with configurations applied",
    "deployers": [
      "0x1C8236B406911A376369e33D39189F1b4B39F27D",
      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
    ]
  },
  "state": {
    "provision.system": {
      "artifacts": {
        "imports": {
          "system": {
            "url": "ipfs://QmQL57bhoyBFdLpVHgkFvtVxC37e5998PXKupsxann16c2",
            "tags": [
              "latest"
            ],
            "target": "synthetix:3.12.0@main",
            "preset": "main",
            "contracts": {
              "AccountModule": {
                "address": "0xe7B2390C847e16459F1AD7e9735A93D3F80D9088",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "error ZeroAddress()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182001",
                "deployTimestamp": "1743606279",
                "sourceName": "contracts/modules/core/AccountModule.sol",
                "contractName": "AccountModule",
                "deployedOn": "contract.AccountModule",
                "gasUsed": 1225797,
                "gasCost": "1625316474"
              },
              "AccountTokenModule": {
                "address": "0x5D2B70aBE685F3B6Ff82F5d3e6eb94085FD224cD",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787265",
                "deployTimestamp": "1738842516",
                "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                "contractName": "AccountTokenModule",
                "deployedOn": "contract.AccountTokenModule",
                "gasUsed": 1787668,
                "gasCost": "1376902284"
              },
              "AssociateDebtModule": {
                "address": "0xb72aa6558DDC2B2969D64A9c92645586067f5686",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182002",
                "deployTimestamp": "1743606279",
                "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                "contractName": "AssociateDebtModule",
                "deployedOn": "contract.AssociateDebtModule",
                "gasUsed": 2612609,
                "gasCost": "1553539507"
              },
              "AssociatedSystemsModule": {
                "address": "0xa8DD42C00E0e7434d04c74374CA1Da610E6Ef71C",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333356",
                "deployTimestamp": "1721305103",
                "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877153,
                "gasCost": "9017689799"
              },
              "CcipReceiverModule": {
                "address": "0xF122049f28315D49B8135379A796f56D3C6A03fe",
                "abi": [
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error Unauthorized(address addr)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20928365",
                "deployTimestamp": "1728480899",
                "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                "contractName": "CcipReceiverModule",
                "deployedOn": "contract.CcipReceiverModule",
                "gasUsed": 469476,
                "gasCost": "25231538550"
              },
              "CollateralConfigurationModule": {
                "address": "0xCDF47798128b2a771465B5833ca0C3eF1C913ADd",
                "abi": [
                  "error EmptyRevertReason()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787267",
                "deployTimestamp": "1738842518",
                "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                "contractName": "CollateralConfigurationModule",
                "deployedOn": "contract.CollateralConfigurationModule",
                "gasUsed": 872728,
                "gasCost": "1300781065"
              },
              "CollateralModule": {
                "address": "0xd7FE43584585954EfaE4aEdb39807534e4B6aE45",
                "abi": [
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error AccountNotFound(uint128 accountId)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error EmptyRevertReason()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182003",
                "deployTimestamp": "1743606280",
                "sourceName": "contracts/modules/core/CollateralModule.sol",
                "contractName": "CollateralModule",
                "deployedOn": "contract.CollateralModule",
                "gasUsed": 1937434,
                "gasCost": "1496398588"
              },
              "CrossChainUSDModule": {
                "address": "0x9d227f1c685b7c207f44416Eb59e457d8d59AbdC",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20928368",
                "deployTimestamp": "1728480935",
                "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                "contractName": "CrossChainUSDModule",
                "deployedOn": "contract.CrossChainUSDModule",
                "gasUsed": 595289,
                "gasCost": "26447314844"
              },
              "FeatureFlagModule": {
                "address": "0x3E8d0225423fe6FcC0377F49B2a6046BCE6D34c7",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20928369",
                "deployTimestamp": "1728480947",
                "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule",
                "gasUsed": 777054,
                "gasCost": "26552367099"
              },
              "IssueUSDModule": {
                "address": "0x6FA4b55c8b9AdC03129c3796414d44cA0ef50764",
                "abi": [
                  "error CollateralDepositDisabled(address collateralType)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PoolNotFound(uint128 poolId)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182004",
                "deployTimestamp": "1743606280",
                "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                "contractName": "IssueUSDModule",
                "deployedOn": "contract.IssueUSDModule",
                "gasUsed": 3042995,
                "gasCost": "1442363261"
              },
              "LiquidationModule": {
                "address": "0xA610198f9521850393DF6029d95e26b79a6918A6",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error CannotScaleEmptyMapping()",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint256ToUint64()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PositionOutOfBounds()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182005",
                "deployTimestamp": "1743606281",
                "sourceName": "contracts/modules/core/LiquidationModule.sol",
                "contractName": "LiquidationModule",
                "deployedOn": "contract.LiquidationModule",
                "gasUsed": 4620402,
                "gasCost": "1398285430"
              },
              "MarketCollateralModule": {
                "address": "0x50a6b732B9a4Dd3cAa5F8fb33110728F8f65e4f0",
                "abi": [
                  "error CollateralNotFound()",
                  "error EmptyRevertReason()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "error Unauthorized(address addr)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787271",
                "deployTimestamp": "1738842523",
                "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                "contractName": "MarketCollateralModule",
                "deployedOn": "contract.MarketCollateralModule",
                "gasUsed": 1298300,
                "gasCost": "1193728026"
              },
              "MarketManagerModule": {
                "address": "0x7656bDEE9f4e7A507fd0C5b2431D3F3690E20711",
                "abi": [
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error FeatureUnavailable(bytes32 which)",
                  "error IncorrectMarketInterface(address market)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787272",
                "deployTimestamp": "1738842524",
                "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                "contractName": "MarketManagerModule",
                "deployedOn": "contract.MarketManagerModule",
                "gasUsed": 2816393,
                "gasCost": "1171607999"
              },
              "PoolConfigurationModule": {
                "address": "0xB0A8c84360f505e050F4F76042FDC4f29320bE2A",
                "abi": [
                  "error PoolNotFound(uint128 poolId)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21842770",
                "deployTimestamp": "1739512729",
                "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                "contractName": "PoolConfigurationModule",
                "deployedOn": "contract.PoolConfigurationModule",
                "gasUsed": 446271,
                "gasCost": "1272805637"
              },
              "PoolModule": {
                "address": "0xe8e04A78B54455705ab50F612B43739b1De68D05",
                "abi": [
                  "error CapacityLocked(uint256 marketId)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "error PoolNotFound(uint128 poolId)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21842771",
                "deployTimestamp": "1739512731",
                "sourceName": "contracts/modules/core/PoolModule.sol",
                "contractName": "PoolModule",
                "deployedOn": "contract.PoolModule",
                "gasUsed": 4099803,
                "gasCost": "1239719477"
              },
              "RewardsManagerModule": {
                "address": "0xDdFcbBdd05a85e76Db673fc1cB7D36ecDe472CCF",
                "abi": [
                  "error AccountNotFound(uint128 accountId)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PositionOutOfBounds()",
                  "error RewardUnavailable(address distributor)",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182006",
                "deployTimestamp": "1743606281",
                "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                "contractName": "RewardsManagerModule",
                "deployedOn": "contract.RewardsManagerModule",
                "gasUsed": 2642251,
                "gasCost": "1363835075"
              },
              "USDTokenModule": {
                "address": "0x9839B57EE26ef9061fa67c2e8056217B20084072",
                "abi": [
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787276",
                "deployTimestamp": "1738842528",
                "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                "contractName": "USDTokenModule",
                "deployedOn": "contract.USDTokenModule",
                "gasUsed": 1110294,
                "gasCost": "1110462497"
              },
              "UtilsModule": {
                "address": "0xd63B709D3E260341c07Cb4D3A62585a6A7e67FdE",
                "abi": [
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "event ConfigSet(bytes32 indexed k, bytes32 v)",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21842773",
                "deployTimestamp": "1739512734",
                "sourceName": "contracts/modules/core/UtilsModule.sol",
                "contractName": "UtilsModule",
                "deployedOn": "contract.UtilsModule",
                "gasUsed": 770698,
                "gasCost": "1195500364"
              },
              "VaultModule": {
                "address": "0xA598e80F994aF71929710C4A42eFFE058E94Adf9",
                "abi": [
                  "error CapacityLocked(uint256 marketId)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketNotFound(uint128 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error OverflowInt128ToUint128()",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "error PoolNotFound(uint128 poolId)",
                  "error PositionOutOfBounds()",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                  "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182007",
                "deployTimestamp": "1743606282",
                "sourceName": "contracts/modules/core/VaultModule.sol",
                "contractName": "VaultModule",
                "deployedOn": "contract.VaultModule",
                "gasUsed": 4732148,
                "gasCost": "1326366888"
              },
              "InitialModuleBundle": {
                "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/modules/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle"
              },
              "InitialCoreProxy": {
                "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x828EED723cAF0A8F822249231266E38dF614923C",
                  "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialCoreProxy"
              },
              "AccountRouter": {
                "address": "0x35b51e3dc2a8cf242fdcae8f07cf21a6d91ff783",
                "abi": [
                  "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                  "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                  "function facetAddresses() pure returns (address[] addresses)",
                  "function facetAddress(bytes4 functionSelector) pure returns (address)",
                  "function emitDiamondCutEvent() returns (bool)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployedOn": "router.AccountRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787278",
                "deployTimestamp": "1738842536",
                "contractName": "AccountRouter",
                "sourceName": "AccountRouter.sol",
                "gasUsed": 1963401,
                "gasCost": "1089268503"
              },
              "CoreRouter": {
                "address": "0x50d8302c7010c23ec3d2dece65e8a50cc0cc5cb8",
                "abi": [
                  "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                  "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                  "function facetAddresses() pure returns (address[] addresses)",
                  "function facetAddress(bytes4 functionSelector) pure returns (address)",
                  "function emitDiamondCutEvent() returns (bool)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error PoolNotFound(uint128 poolId)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "error CannotScaleEmptyMapping()",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "error IncorrectMarketInterface(address market)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)",
                  "error CapacityLocked(uint256 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)",
                  "error RewardUnavailable(address distributor)",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                  "event ConfigSet(bytes32 indexed k, bytes32 v)",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                  "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182008",
                "deployTimestamp": "1743606293",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 5621498,
                "gasCost": "1298441164"
              },
              "USDRouter": {
                "address": "0x71182391bb34bf922c8ba3ff3047b604ecbb202b",
                "abi": [
                  "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                  "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                  "function facetAddresses() pure returns (address[] addresses)",
                  "function facetAddress(bytes4 functionSelector) pure returns (address)",
                  "function emitDiamondCutEvent() returns (bool)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployedOn": "router.USDRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787280",
                "deployTimestamp": "1738842592",
                "contractName": "USDRouter",
                "sourceName": "USDRouter.sol",
                "gasUsed": 2087424,
                "gasCost": "1073336908"
              },
              "CoreProxy": {
                "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                "abi": [
                  "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                  "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                  "function facetAddresses() pure returns (address[] addresses)",
                  "function facetAddress(bytes4 functionSelector) pure returns (address)",
                  "function emitDiamondCutEvent() returns (bool)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidAccountId(uint128 accountId)",
                  "error InvalidPermission(bytes32 permission)",
                  "error OnlyAccountTokenProxy(address origin)",
                  "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                  "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                  "error PositionOutOfBounds()",
                  "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                  "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                  "function createAccount() returns (uint128 accountId)",
                  "function createAccount(uint128 requestedAccountId)",
                  "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                  "function getAccountOwner(uint128 accountId) view returns (address)",
                  "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                  "function getAccountTokenAddress() view returns (address)",
                  "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                  "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                  "function notifyAccountTransfer(address to, uint128 accountId)",
                  "function renouncePermission(uint128 accountId, bytes32 permission)",
                  "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                  "error AccountNotFound(uint128 accountId)",
                  "error EmptyDistribution()",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                  "error MarketNotFound(uint128 marketId)",
                  "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                  "error OverflowInt256ToInt128()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint128ToInt128()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                  "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error InvalidMessage()",
                  "error NotCcipRouter(address)",
                  "error UnsupportedNetwork(uint64)",
                  "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                  "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                  "error CollateralDepositDisabled(address collateralType)",
                  "error CollateralNotFound()",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficientAccountCollateral(uint256 amount)",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error OverflowUint256ToUint64()",
                  "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                  "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                  "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                  "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                  "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                  "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                  "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                  "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                  "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                  "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                  "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                  "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                  "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                  "function getCollateralPrice(address collateralType) view returns (uint256)",
                  "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                  "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                  "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                  "error InsufficientDebt(int256 currentDebt)",
                  "error PoolNotFound(uint128 poolId)",
                  "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                  "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                  "error CannotScaleEmptyMapping()",
                  "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                  "error InsufficientMappedAmount()",
                  "error MustBeVaultLiquidated()",
                  "error OverflowInt128ToUint128()",
                  "error OverflowUint256ToUint32()",
                  "error OverflowUint32ToInt32()",
                  "error OverflowUint64ToInt64()",
                  "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                  "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                  "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                  "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                  "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                  "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                  "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                  "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                  "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                  "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                  "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                  "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                  "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                  "error IncorrectMarketInterface(address market)",
                  "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                  "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                  "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                  "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                  "function getMarketAddress(uint128 marketId) view returns (address)",
                  "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                  "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                  "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                  "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                  "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                  "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                  "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                  "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                  "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                  "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                  "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                  "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                  "function getOracleManager() view returns (address)",
                  "function getUsdToken() view returns (address)",
                  "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                  "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                  "function registerMarket(address market) returns (uint128 marketId)",
                  "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                  "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                  "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                  "event PoolApprovedAdded(uint256 poolId)",
                  "event PoolApprovedRemoved(uint256 poolId)",
                  "event PreferredPoolSet(uint256 poolId)",
                  "function addApprovedPool(uint128 poolId)",
                  "function getApprovedPools() view returns (uint256[])",
                  "function getPreferredPool() view returns (uint128)",
                  "function removeApprovedPool(uint128 poolId)",
                  "function setPreferredPool(uint128 poolId)",
                  "error CapacityLocked(uint256 marketId)",
                  "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                  "error PoolAlreadyExists(uint128 poolId)",
                  "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                  "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                  "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                  "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                  "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                  "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                  "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                  "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                  "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function acceptPoolOwnership(uint128 poolId)",
                  "function createPool(uint128 requestedPoolId, address owner)",
                  "function getMinLiquidityRatio() view returns (uint256)",
                  "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                  "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                  "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                  "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                  "function getPoolName(uint128 poolId) view returns (string poolName)",
                  "function getPoolOwner(uint128 poolId) view returns (address)",
                  "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                  "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                  "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                  "function renouncePoolNomination(uint128 poolId)",
                  "function renouncePoolOwnership(uint128 poolId)",
                  "function revokePoolNomination(uint128 poolId)",
                  "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                  "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                  "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                  "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                  "function setPoolName(uint128 poolId, string name)",
                  "error RewardUnavailable(address distributor)",
                  "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                  "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                  "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                  "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                  "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                  "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                  "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                  "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                  "event ConfigSet(bytes32 indexed k, bytes32 v)",
                  "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                  "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                  "function configureOracleManager(address oracleManagerAddress)",
                  "function getConfig(bytes32 k) view returns (bytes32 v)",
                  "function getConfigAddress(bytes32 k) view returns (address v)",
                  "function getConfigUint(bytes32 k) view returns (uint256 v)",
                  "function getTrustedForwarder() pure returns (address)",
                  "function isTrustedForwarder(address forwarder) pure returns (bool)",
                  "function setConfig(bytes32 k, bytes32 v)",
                  "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "error InsufficientDelegation(uint256 minDelegation)",
                  "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                  "error InvalidCollateralAmount()",
                  "error InvalidLeverage(uint256 leverage)",
                  "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                  "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                  "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                  "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                  "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                  "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                  "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                  "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                  "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                  "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                  "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                  "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "constructorArgs": [
                  "<%= contracts.InitialModuleBundle.address %>",
                  "<%= settings.owner %>"
                ],
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "AccountProxy": {
                "address": "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                "abi": [
                  "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                  "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                  "function facetAddresses() pure returns (address[] addresses)",
                  "function facetAddress(bytes4 functionSelector) pure returns (address)",
                  "function emitDiamondCutEvent() returns (bool)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error OverflowUint256ToUint128()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                "contractName": "UUPSProxyWithOwner",
                "deployedOn": "invoke.init_account",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "USDProxy": {
                "address": "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                "abi": [
                  "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                  "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                  "function facetAddresses() pure returns (address[] addresses)",
                  "function facetAddress(bytes4 functionSelector) pure returns (address)",
                  "function emitDiamondCutEvent() returns (bool)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address owner) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burn(address target, uint256 amount)",
                  "function burnWithAllowance(address from, address spender, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address target, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                "contractName": "UUPSProxyWithOwner",
                "deployedOn": "invoke.init_usd",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "settings": {
              "account_token_name": "Synthetix Account",
              "account_token_symbol": "SACCT",
              "bundleSalt": "main",
              "oracle_manager_package": "oracle-manager",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "main",
              "usd_token_name": "Synthetic USD Token v3",
              "usd_token_symbol": "sUSD"
            },
            "imports": {
              "oracle_manager": {
                "url": "ipfs://QmV7BAagvh5kfYDiyBy3UJFh4BQMVsmiiEmXGVadnLTLnT",
                "contracts": {
                  "NodeModule": {
                    "address": "0xf1e04afF68bb60af56592d4Ac3157be62BF2fad4",
                    "abi": [
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787261",
                    "deployTimestamp": "1738842493",
                    "sourceName": "contracts/modules/NodeModule.sol",
                    "contractName": "NodeModule",
                    "deployedOn": "contract.NodeModule",
                    "gasUsed": 4896112,
                    "gasCost": "1597095724"
                  },
                  "CoreModule": {
                    "address": "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1728480815",
                    "sourceName": "contracts/modules/CoreModule.sol",
                    "contractName": "CoreModule",
                    "deployedOn": "contract.CoreModule",
                    "gasUsed": 0,
                    "gasCost": "0"
                  },
                  "InitialProxy": {
                    "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                      "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1728480815",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialProxy",
                    "gasUsed": 0,
                    "gasCost": "0"
                  },
                  "OracleRouter": {
                    "address": "0x9b39032a686f68d4d7a8149005c0efe9bf3ec1aa",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "deployedOn": "router.OracleRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787262",
                    "deployTimestamp": "1738842501",
                    "contractName": "OracleRouter",
                    "sourceName": "OracleRouter.sol",
                    "gasUsed": 1728163,
                    "gasCost": "1546820822"
                  },
                  "Proxy": {
                    "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidPrice(int256 price)",
                      "error NodeNotRegistered(bytes32 nodeId)",
                      "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowInt56ToInt24()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint160()",
                      "error OverflowUint56ToInt56()",
                      "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                      "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                      "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                      "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                      "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                      "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgrade_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "imports": {
                  "trusted_multicall_forwarder": {
                    "url": "ipfs://QmbSAhExRT5TwFpa2ki8WZmv8PrdQnQFutw7Qt7aQr8YBG",
                    "tags": [
                      "latest"
                    ],
                    "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                    "preset": "with-oracle-manager",
                    "settings": {
                      "salt": "salt"
                    },
                    "contracts": {
                      "TrustedMulticallForwarder": {
                        "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                        "abi": [
                          "constructor()",
                          "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                          "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                          "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                          "function getBasefee() view returns (uint256 basefee)",
                          "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                          "function getBlockNumber() view returns (uint256 blockNumber)",
                          "function getChainId() view returns (uint256 chainid)",
                          "function getCurrentBlockCoinbase() view returns (address coinbase)",
                          "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                          "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                          "function getEthBalance(address addr) view returns (uint256 balance)",
                          "function getLastBlockHash() view returns (bytes32 blockHash)",
                          "function getPrevRandao() view returns (uint256 prevrandao)",
                          "function nonces(address owner) view returns (uint256)",
                          "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                          "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                          "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                          "event EIP712DomainChanged()",
                          "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                          "error AddressInsufficientBalance(address account)",
                          "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                          "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                          "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                          "error ERC2771UntrustfulTarget(address target, address forwarder)",
                          "error FailedInnerCall()",
                          "error InvalidAccountNonce(address account, uint256 currentNonce)",
                          "error InvalidShortString()",
                          "error StringTooLong(string str)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1728480815",
                        "sourceName": "src/TrustedMulticallForwarder.sol",
                        "contractName": "TrustedMulticallForwarder",
                        "deployedOn": "contract.TrustedMulticallForwarder",
                        "gasUsed": 0,
                        "gasCost": "0"
                      }
                    },
                    "extras": {
                      "salt": "salt"
                    }
                  }
                },
                "settings": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "oracle-manager-official"
                },
                "txns": {
                  "upgrade_proxy": {
                    "hash": "0x13d2b20513ff1850b5d014df38311142a317418d07a8fc358cc680f58f1f6822",
                    "blockNumber": "21787263",
                    "timestamp": "1738842507",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                            "0x9b39032a686f68d4d7A8149005C0efe9bF3Ec1aa"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_proxy",
                    "gasUsed": 55400,
                    "gasCost": "1486343182",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  }
                },
                "extras": {
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "oracle-manager-official"
                }
              }
            },
            "txns": {
              "register_const_one_oracle": {
                "hash": "0xc364170bfa95b109ebd21a59c7929598bfbc1f3aa61674fd242ba951fe53b18e",
                "events": {
                  "NodeRegistered": [
                    {
                      "name": "NodeRegistered",
                      "args": [
                        "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                        8,
                        "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                        []
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.register_const_one_oracle"
              },
              "upgrade_core_proxy": {
                "hash": "0x1406d0004a87cce936c31cde83d3a597ba23c9feba4a5e5fd911d389f7ef2efe",
                "blockNumber": "22182009",
                "timestamp": "1743606295",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                        "0x50d8302C7010C23eC3D2decE65e8a50CC0CC5CB8"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51371,
                "gasCost": "1275116739",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_burnUsd": {
                "hash": "",
                "blockNumber": "20339936",
                "timestamp": "1721384404",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6275726e55736400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_burnUsd",
                "gasUsed": 37049,
                "gasCost": "3856990971",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_claimRewards": {
                "hash": "",
                "blockNumber": "20339937",
                "timestamp": "1721384404",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x636c61696d526577617264730000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_claimRewards",
                "gasUsed": 37109,
                "gasCost": "3500749172",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_createAccount": {
                "hash": "",
                "blockNumber": "20339938",
                "timestamp": "1721384404",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_createAccount",
                "gasUsed": 37121,
                "gasCost": "3188928862",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_delegateCollateral": {
                "hash": "",
                "blockNumber": "20339939",
                "timestamp": "1721384405",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_delegateCollateral",
                "gasUsed": 37181,
                "gasCost": "2915989882",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_deposit": {
                "hash": "",
                "blockNumber": "20339940",
                "timestamp": "1721384405",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f73697400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_deposit",
                "gasUsed": 37049,
                "gasCost": "2677084801",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_depositMarketCollateral": {
                "hash": "",
                "blockNumber": "20339941",
                "timestamp": "1721384405",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                "gasUsed": 37241,
                "gasCost": "2467966987",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_depositMarketUsd": {
                "hash": "",
                "blockNumber": "20339942",
                "timestamp": "1721384405",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_depositMarketUsd",
                "gasUsed": 37157,
                "gasCost": "2284926685",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_liquidate": {
                "hash": "",
                "blockNumber": "20339943",
                "timestamp": "1721384406",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c69717569646174650000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_liquidate",
                "gasUsed": 37073,
                "gasCost": "2124708717",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_liquidateToTreasury": {
                "hash": "0xd40bc0c8fc5179c6a742d96338a6462dbf883e9e27cd987df95e7d990b4d2078",
                "blockNumber": "22182010",
                "timestamp": "1743606296",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c6971756964617465546f547265617375727900000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_liquidateToTreasury",
                "gasUsed": 57111,
                "gasCost": "1240844922",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_liquidateVault": {
                "hash": "",
                "blockNumber": "20339944",
                "timestamp": "1721384406",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_liquidateVault",
                "gasUsed": 37133,
                "gasCost": "1984467597",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_migrateDelegation": {
                "hash": "0x92543f30f35ce8d775e52b5648a44b141dacb02744b95ef7c3b8830a772226e2",
                "blockNumber": "21787282",
                "timestamp": "1738842601",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6d69677261746544656c65676174696f6e000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_migrateDelegation",
                "gasUsed": 57109,
                "gasCost": "1057292814",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_mintUsd": {
                "hash": "",
                "blockNumber": "20339945",
                "timestamp": "1721384406",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_mintUsd",
                "gasUsed": 37049,
                "gasCost": "1861713783",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_withdraw": {
                "hash": "",
                "blockNumber": "20339946",
                "timestamp": "1721384406",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x7769746864726177000000000000000000000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdraw",
                "gasUsed": 37061,
                "gasCost": "1754265608",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_withdrawMarketCollateral": {
                "hash": "",
                "blockNumber": "20339947",
                "timestamp": "1721384407",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                "gasUsed": 37253,
                "gasCost": "1660215356",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "enable_feature_withdrawMarketUsd": {
                "hash": "",
                "blockNumber": "20339948",
                "timestamp": "1721384407",
                "events": {
                  "FeatureFlagAllowAllSet": [
                    {
                      "name": "FeatureFlagAllowAllSet",
                      "args": [
                        "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                "gasUsed": 37169,
                "gasCost": "1577893395",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "init_account": {
                "hash": "0x28024a548db5d269ab472f3216b86513f15edf8126dcc490add21c48b5f08033",
                "blockNumber": "21787283",
                "timestamp": "1738842609",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                        "0x35B51e3Dc2a8Cf242FdCaE8F07CF21A6D91ff783"
                      ]
                    }
                  ],
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                        "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                        "0x35B51e3Dc2a8Cf242FdCaE8F07CF21A6D91ff783"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_account",
                "gasUsed": 80746,
                "gasCost": "1050158479",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "init_usd": {
                "hash": "0x4b7971fec2cbb0ec7376030e9329b11912a8dc77e6c2323e91fdae0d128dca52",
                "blockNumber": "21787284",
                "timestamp": "1738842616",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                        "0x71182391bB34BF922C8BA3FF3047B604EcBB202B"
                      ]
                    }
                  ],
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633230000000000000000000000000000000000000000000000000000000",
                        "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                        "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                        "0x71182391bB34BF922C8BA3FF3047B604EcBB202B"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_usd",
                "gasUsed": 94076,
                "gasCost": "1043922420",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "set_oracle_manager": {
                "hash": "0xd14a861aba2399243d6b4bb66289c06a6ca3269b8509fe2af0ca92ed2be6f2e4",
                "events": {},
                "deployedOn": "invoke.set_oracle_manager"
              },
              "configure_usd_collateral": {
                "hash": "0x00e044c8fb2f008138244ea81ea15b1ecdbf370b22e70361060b37e1d11cf271",
                "events": {
                  "CollateralConfigured": [
                    {
                      "name": "CollateralConfigured",
                      "args": [
                        "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                        [
                          true,
                          {
                            "type": "BigNumber",
                            "hex": "0x8ac7230489e80000"
                          },
                          {
                            "type": "BigNumber",
                            "hex": "0x8ac7230489e80000"
                          },
                          {
                            "type": "BigNumber",
                            "hex": "0x00"
                          },
                          "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                          "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                          {
                            "type": "BigNumber",
                            "hex": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                          }
                        ]
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.configure_usd_collateral"
              }
            },
            "extras": {
              "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
              "account_token_name": "Synthetix Account",
              "account_token_symbol": "SACCT",
              "bundleSalt": "main",
              "oracle_manager_package": "oracle-manager",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "main",
              "usd_token_name": "Synthetic USD Token v3",
              "usd_token_symbol": "sUSD"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.registerSnxOracleManager": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSnxOracleManager": {
            "hash": "0xf82923838f2666104f3e7943cf7969a15232c5196216a51da322aaea1657ca48",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x050be821f7e92c7ca8366e2fe01eee313272231d436c5deaed75b978d78f7116",
                    3,
                    "0x000000000000000000000000dc3ea94cd0ac27d9a86c180091e7f78c683d369900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSnxOracleManager"
          }
        },
        "extras": {
          "snx_oracle_id": "0x050be821f7e92c7ca8366e2fe01eee313272231d436c5deaed75b978d78f7116"
        }
      },
      "hash": "2d3891822435e109e836ed17e27d0f11",
      "version": 5
    },
    "invoke.configureSnxCollateral": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configureSnxCollateral": {
            "hash": "0x2a4c6a364304c00f6dc01c77dbea58a6df10e21680f0559923c2b0bca5243909",
            "blockNumber": "22182016",
            "timestamp": "1743606321",
            "events": {
              "CollateralConfigured": [
                {
                  "name": "CollateralConfigured",
                  "args": [
                    "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
                    {
                      "depositingEnabled": true,
                      "issuanceRatioD18": "5000000000000000000",
                      "liquidationRatioD18": "1010000000000000000",
                      "liquidationRewardD18": "0",
                      "oracleNodeId": "0xe68abf6ddc460cb9989f6cfd808b3af937f896a38dd4a271b81c2b60c3511516",
                      "tokenAddress": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
                      "minDelegationD18": "1"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configureSnxCollateral",
            "gasUsed": 59698,
            "gasCost": "1111409187",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "20e008a5770b2574beb7b563a42ed24c",
      "version": 7
    },
    "invoke.setAccountTimeoutWithdraw": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setAccountTimeoutWithdraw": {
            "hash": "0xdc535e10711c47ca2a0ccb0ff82216ccf961ecd3fe90b998e2e3701df0f78e5c",
            "events": {},
            "deployedOn": "invoke.setAccountTimeoutWithdraw"
          }
        },
        "extras": {}
      },
      "hash": "0d5ee3ec4c2a887019a0fb4397e89c3f",
      "version": 5
    },
    "invoke.setMinimumLiquidityRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setMinimumLiquidityRatio": {
            "hash": "0x2c60820b4d4facc8967dd816747607daa1e1454c4ad4cfb0aed638101d657e1b",
            "blockNumber": "22038041",
            "timestamp": "1741870056",
            "events": {
              "SetMinLiquidityRatio": [
                {
                  "name": "SetMinLiquidityRatio",
                  "args": [
                    "1100000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setMinimumLiquidityRatio",
            "gasUsed": 38642,
            "gasCost": "1377787130",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "96cccef00f940f71718cc6dbe2d07194",
      "version": 7
    },
    "invoke.permitCreatePool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "permitCreatePool": {
            "hash": "",
            "blockNumber": "20682797",
            "timestamp": "1725519906",
            "events": {
              "FeatureFlagAllowlistAdded": [
                {
                  "name": "FeatureFlagAllowlistAdded",
                  "args": [
                    "0x637265617465506f6f6c00000000000000000000000000000000000000000000",
                    "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.permitCreatePool",
            "gasUsed": 84485,
            "gasCost": "1021902809",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "32d6b3e42e7107b5de5563111e54c244",
      "version": 7
    },
    "invoke.createScPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createScPool": {
            "hash": "0x0ce3e0b1ea7a1579d3435d1646ff3555db7c5571a9ae6dc6241f522a2d9f7857",
            "events": {
              "PoolCreated": [
                {
                  "name": "PoolCreated",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x01"
                    },
                    "0x302d2451d9f47620374B54c521423Bf0403916A2",
                    "0x302d2451d9f47620374B54c521423Bf0403916A2"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createScPool"
          }
        },
        "extras": {}
      },
      "hash": "04aa3465462c991a7592aae0d1989c20",
      "version": 5
    },
    "invoke.setPreferredPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPreferredPool": {
            "hash": "0x347ff134d1980f41dd2809f5c9da75d3d2ad45ddccfa7f4c7ff359826b8f81af",
            "blockNumber": "21787286",
            "timestamp": "1738842656",
            "events": {
              "PreferredPoolSet": [
                {
                  "name": "PreferredPoolSet",
                  "args": [
                    "8"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPreferredPool",
            "gasUsed": 41281,
            "gasCost": "1033684719",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "8876aaf771e5cd6728f4323407dce846",
      "version": 7
    },
    "invoke.configureChainlinkCrossChain": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "configureChainlinkCrossChain": {
            "hash": "0xca85c731730c07df5c135147ff68c7945b916771f65068aa7d1ca59b8c827c29",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x756e6d616e616765640000000000000000000000000000000000000000000000",
                    "0x63636970436861696e6c696e6b53656e64000000000000000000000000000000",
                    "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
                    "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
                  ]
                },
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x756e6d616e616765640000000000000000000000000000000000000000000000",
                    "0x63636970436861696e6c696e6b52656376000000000000000000000000000000",
                    "0xE561d5E02207fb5eB32cca20a699E0d8919a1476",
                    "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
                  ]
                },
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x756e6d616e616765640000000000000000000000000000000000000000000000",
                    "0x63636970436861696e6c696e6b546f6b656e506f6f6c00000000000000000000",
                    "0x057152DB365B47851B0A0bd431644b8eE21fE1b4",
                    "0x057152DB365B47851B0A0bd431644b8eE21fE1b4"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.configureChainlinkCrossChain"
          }
        },
        "extras": {}
      },
      "hash": "81acdea9eeff258116a5cd5ca1b64e63",
      "version": 6
    },
    "invoke.setScPoolName": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setScPoolName": {
            "hash": "0x74c7c4db02b3d7a399071120915eee0670d1c5d7db1c8b586a841cc59a6732cb",
            "events": {
              "PoolNameUpdated": [
                {
                  "name": "PoolNameUpdated",
                  "args": [
                    {
                      "type": "BigNumber",
                      "hex": "0x01"
                    },
                    "Spartan Council Pool",
                    "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setScPoolName"
          }
        },
        "extras": {}
      },
      "hash": "9a4cec8163fdf956f8e0efaf34851515",
      "version": 6
    },
    "invoke.setSupportedCrossChainNetworks": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setSupportedCrossChainNetworks": {
            "hash": "",
            "blockNumber": "20339953",
            "timestamp": "1721384418",
            "events": {},
            "deployedOn": "invoke.setSupportedCrossChainNetworks",
            "gasUsed": 33813,
            "gasCost": "1297353744",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "6024d6a798e7e8f8c07541bebd0aceb4",
      "version": 7
    },
    "invoke.allowAllTransferCrossChain": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "allowAllTransferCrossChain": {
            "hash": "0xd47cd8c4d86b308762aec198734df806df383c688da8966597f1dc142d1553c1",
            "events": {
              "FeatureFlagAllowAllSet": [
                {
                  "name": "FeatureFlagAllowAllSet",
                  "args": [
                    "0x7472616e7366657243726f7373436861696e0000000000000000000000000000",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.allowAllTransferCrossChain"
          }
        },
        "extras": {}
      },
      "hash": "00384bfcc7741fd22c57f50a98baa1d1",
      "version": 6
    },
    "invoke.registerSnxOracleManagerNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSnxOracleManagerNode": {
            "hash": "0x1f5eac5c22bc4244154ab7f30a08e2fec0187485e20f04d8ca43b8de63fbf3dc",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x050be821f7e92c7ca8366e2fe01eee313272231d436c5deaed75b978d78f7116",
                    3,
                    "0x000000000000000000000000dc3ea94cd0ac27d9a86c180091e7f78c683d369900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSnxOracleManagerNode",
            "gasUsed": 53100,
            "gasCost": "58855283443",
            "signer": "0xEde8a407913A874Dd7e3d5B731AFcA135D30375E"
          }
        },
        "extras": {
          "snx_oracle_id_raw": "0x050be821f7e92c7ca8366e2fe01eee313272231d436c5deaed75b978d78f7116"
        }
      },
      "hash": "1d4d6f09c8e538e56f8eb0e20af2ee81",
      "version": 6
    },
    "invoke.registerSnxWithStaleness": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerSnxWithStaleness": {
            "hash": "0x097884fa1c07d07e53868e8ba712938d531f078a31ac5a2730cc07f8c7e8c046",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xe68abf6ddc460cb9989f6cfd808b3af937f896a38dd4a271b81c2b60c3511516",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000001fa40",
                    [
                      "0x050be821f7e92c7ca8366e2fe01eee313272231d436c5deaed75b978d78f7116"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerSnxWithStaleness",
            "gasUsed": 51248,
            "gasCost": "58288745633",
            "signer": "0xEde8a407913A874Dd7e3d5B731AFcA135D30375E"
          }
        },
        "extras": {
          "snx_oracle_id": "0xe68abf6ddc460cb9989f6cfd808b3af937f896a38dd4a271b81c2b60c3511516"
        }
      },
      "hash": "73e37a377ce0a0cfafcc9f0ba16d309a",
      "version": 6
    },
    "import.usde": {
      "artifacts": {
        "imports": {
          "usde": {
            "url": "ipfs://QmTjnxMAr5Xna2hzUaaHYzAJTRpPepBJxTTMAAKmSX7Bvc",
            "contracts": {
              "Token": {
                "address": "0x4c9edd5852cd905f086c759e8383e09bff1e68b3",
                "abi": [
                  "constructor(address admin)",
                  "error CantRenounceOwnership()",
                  "error InvalidShortString()",
                  "error OnlyMinter()",
                  "error StringTooLong(string str)",
                  "error ZeroAddressException()",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event EIP712DomainChanged()",
                  "event MinterUpdated(address indexed newMinter, address indexed oldMinter)",
                  "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
                  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function DOMAIN_SEPARATOR() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(uint256 amount)",
                  "function burnFrom(address account, uint256 amount)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function mint(address to, uint256 amount)",
                  "function minter() view returns (address)",
                  "function name() view returns (string)",
                  "function nonces(address owner) view returns (uint256)",
                  "function owner() view returns (address)",
                  "function pendingOwner() view returns (address)",
                  "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
                  "function renounceOwnership() view",
                  "function setMinter(address newMinter)",
                  "function symbol() view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)",
                  "function transferOwnership(address newOwner)"
                ],
                "constructorArgs": [
                  "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
                  "Token",
                  "TKN",
                  "18",
                  "0"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x7532dfc16990f45321be00ee08f8eb3ed22e8910738163bb731b9ebdf85d12fd",
                "sourceName": "src/EthenaUSD.sol",
                "contractName": "EthenaUSD",
                "bytecode": "",
                "source": {
                  "solcVersion": "string",
                  "input": ""
                },
                "deployedOn": "deploy.Token",
                "highlight": true,
                "gasUsed": 774713,
                "gasCost": "1000000000"
              }
            }
          }
        }
      },
      "hash": "f922f1f937318ccba537aff27bdcf7ff",
      "version": 7
    },
    "setting.account_timeout_withdraw": {
      "artifacts": {
        "settings": {
          "account_timeout_withdraw": "86400"
        }
      },
      "hash": "3acf2387dde14e993634ca9badf5f564",
      "version": 7
    },
    "setting.bigCapDefaultStalenessTolerance": {
      "artifacts": {
        "settings": {
          "bigCapDefaultStalenessTolerance": "3600"
        }
      },
      "hash": "cbe1a4d89aef65379151a3c5b905bd85",
      "version": 7
    },
    "setting.bigCapSettlementDelay": {
      "artifacts": {
        "settings": {
          "bigCapSettlementDelay": "2"
        }
      },
      "hash": "dc88d99e217842b1532ccb97f443b6c1",
      "version": 7
    },
    "setting.bigCapSettlementWindowDuration": {
      "artifacts": {
        "settings": {
          "bigCapSettlementWindowDuration": "60"
        }
      },
      "hash": "c85e06d9961059219500923347f33fea",
      "version": 7
    },
    "setting.bigCapStrictStalenessTolerance": {
      "artifacts": {
        "settings": {
          "bigCapStrictStalenessTolerance": "60"
        }
      },
      "hash": "c85e06d9961059219500923347f33fea",
      "version": 7
    },
    "setting.bundleSalt": {
      "artifacts": {
        "settings": {
          "bundleSalt": "snax"
        }
      },
      "hash": "1ce8073982f8b8f0b4fa5c488c1fac79",
      "version": 7
    },
    "setting.ccip_router": {
      "artifacts": {
        "settings": {
          "ccip_router": "0xE561d5E02207fb5eB32cca20a699E0d8919a1476"
        }
      },
      "hash": "b456566a343e40b5c9fe1cbcb41f9da0",
      "version": 7
    },
    "setting.ccip_token_pool": {
      "artifacts": {
        "settings": {
          "ccip_token_pool": "0x057152DB365B47851B0A0bd431644b8eE21fE1b4"
        }
      },
      "hash": "8c69d6578e5c490c6f8a60bb835f6862",
      "version": 7
    },
    "setting.commitmentPriceDelay": {
      "artifacts": {
        "settings": {
          "commitmentPriceDelay": "2"
        }
      },
      "hash": "dc88d99e217842b1532ccb97f443b6c1",
      "version": 7
    },
    "setting.deployer": {
      "artifacts": {
        "settings": {
          "deployer": "0x1C8236B406911A376369e33D39189F1b4B39F27D"
        }
      },
      "hash": "75bc79cbede03fb7cc7018efe7f584ce",
      "version": 7
    },
    "setting.legacy_market_package": {
      "artifacts": {
        "settings": {
          "legacy_market_package": "synthetix-legacy-market:3.12.1"
        }
      },
      "hash": "f29a71212d44f5622127da262a5855e3",
      "version": 7
    },
    "setting.minimum_liquidity_ratio": {
      "artifacts": {
        "settings": {
          "minimum_liquidity_ratio": "1100000000000000000"
        }
      },
      "hash": "109f80ca4fb572bb6f910537ee0e25cf",
      "version": 7
    },
    "setting.owner": {
      "artifacts": {
        "settings": {
          "owner": "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
        }
      },
      "hash": "e8513cbf1e14110b279ab5f88cd7b3b5",
      "version": 7
    },
    "setting.pdao": {
      "artifacts": {
        "settings": {
          "pdao": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
        }
      },
      "hash": "b747e5b3f2ff8b87e23c04e6affe259f",
      "version": 7
    },
    "setting.perps_market_package": {
      "artifacts": {
        "settings": {
          "perps_market_package": "synthetix-perps-market:3.3.19"
        }
      },
      "hash": "c653661787890881dbe33bb974096037",
      "version": 7
    },
    "setting.pool_owner": {
      "artifacts": {
        "settings": {
          "pool_owner": "0x302d2451d9f47620374B54c521423Bf0403916A2"
        }
      },
      "hash": "4630746efcedb01c961b1f4f73d37d5f",
      "version": 7
    },
    "setting.pythFeedUrl": {
      "artifacts": {
        "settings": {
          "pythFeedUrl": ""
        }
      },
      "hash": "99914b932bd37a50b983c5e7c90ae93b",
      "version": 7
    },
    "setting.pythPriceVerificationAddress": {
      "artifacts": {
        "settings": {
          "pythPriceVerificationAddress": ""
        }
      },
      "hash": "99914b932bd37a50b983c5e7c90ae93b",
      "version": 7
    },
    "setting.salt": {
      "artifacts": {
        "settings": {
          "salt": "0x3330363734343032330000000000000000000000000000000000000000000000"
        }
      },
      "hash": "cb980c05eddeb10b16ccc9930e5eac83",
      "version": 7
    },
    "setting.sc_pool_id": {
      "artifacts": {
        "settings": {
          "sc_pool_id": "1"
        }
      },
      "hash": "5f6fb867a611e73895d85f93fc6f7baa",
      "version": 7
    },
    "setting.settlementMaxRoundingLoss": {
      "artifacts": {
        "settings": {
          "settlementMaxRoundingLoss": "0.000001"
        }
      },
      "hash": "345d1577ca60402d0a0632b8eec80f43",
      "version": 7
    },
    "setting.settlementMinimumUsdExchangeAmount": {
      "artifacts": {
        "settings": {
          "settlementMinimumUsdExchangeAmount": "0.000001"
        }
      },
      "hash": "345d1577ca60402d0a0632b8eec80f43",
      "version": 7
    },
    "setting.settlementReward": {
      "artifacts": {
        "settings": {
          "settlementReward": "1"
        }
      },
      "hash": "5f6fb867a611e73895d85f93fc6f7baa",
      "version": 7
    },
    "setting.snx_aggregator_address": {
      "artifacts": {
        "settings": {
          "snx_aggregator_address": "0xDC3EA94CD0AC27d9A86C180091e7f78C683d3699"
        }
      },
      "hash": "06439d1140bce23b42a82ecb9187c49a",
      "version": 7
    },
    "setting.snx_chainlink_staleness_tolerance": {
      "artifacts": {
        "settings": {
          "snx_chainlink_staleness_tolerance": "129600"
        }
      },
      "hash": "adb5104d2da02331a9840d1c094f0817",
      "version": 7
    },
    "setting.snx_liquidation_reward": {
      "artifacts": {
        "settings": {
          "snx_liquidation_reward": "50000000000000000000"
        }
      },
      "hash": "189426cb43efa7e96fc7b458df592ef1",
      "version": 7
    },
    "setting.snx_package": {
      "artifacts": {
        "settings": {
          "snx_package": "synthetix:3.12.0"
        }
      },
      "hash": "c9b4bfe64c294091192dd7a3b5e993ff",
      "version": 7
    },
    "setting.spotStrictStalenessTolerance": {
      "artifacts": {
        "settings": {
          "spotStrictStalenessTolerance": "60"
        }
      },
      "hash": "c85e06d9961059219500923347f33fea",
      "version": 7
    },
    "setting.spot_market_package": {
      "artifacts": {
        "settings": {
          "spot_market_package": "synthetix-spot-market:3.3.15"
        }
      },
      "hash": "d8987ab98144a375af937e0df8cbcca5",
      "version": 7
    },
    "setting.susde_aggregator_address": {
      "artifacts": {
        "settings": {
          "susde_aggregator_address": "0xFF3BC18cCBd5999CE63E788A1c250a88626aD099"
        }
      },
      "hash": "d3a65842c1a560f8436aaa3b7d37afa7",
      "version": 7
    },
    "setting.susde_chainlink_staleness_tolerance": {
      "artifacts": {
        "settings": {
          "susde_chainlink_staleness_tolerance": "129600"
        }
      },
      "hash": "adb5104d2da02331a9840d1c094f0817",
      "version": 7
    },
    "setting.susde_package": {
      "artifacts": {
        "settings": {
          "susde_package": "susde-token"
        }
      },
      "hash": "a5718cbd6297302f2f57672e36485999",
      "version": 7
    },
    "setting.synthUsdeAsyncFixedFee": {
      "artifacts": {
        "settings": {
          "synthUsdeAsyncFixedFee": "0"
        }
      },
      "hash": "4dcc24a97eaa6583aab6a5b0cb07d27e",
      "version": 7
    },
    "setting.synthUsdeSkewScale": {
      "artifacts": {
        "settings": {
          "synthUsdeSkewScale": "0"
        }
      },
      "hash": "4dcc24a97eaa6583aab6a5b0cb07d27e",
      "version": 7
    },
    "setting.synth_usde_max_market_collateral": {
      "artifacts": {
        "settings": {
          "synth_usde_max_market_collateral": "0"
        }
      },
      "hash": "4dcc24a97eaa6583aab6a5b0cb07d27e",
      "version": 7
    },
    "setting.target_preset": {
      "artifacts": {
        "settings": {
          "target_preset": "main"
        }
      },
      "hash": "79d2862416f9389ec7270a618c6ce1b3",
      "version": 7
    },
    "setting.usde_aggregator_address": {
      "artifacts": {
        "settings": {
          "usde_aggregator_address": "0xa569d910839Ae8865Da8F8e70FfFb0cBA869F961"
        }
      },
      "hash": "9b40034658630a4c9dd9a29d1585fff7",
      "version": 7
    },
    "setting.usde_chainlink_staleness_tolerance": {
      "artifacts": {
        "settings": {
          "usde_chainlink_staleness_tolerance": "129600"
        }
      },
      "hash": "adb5104d2da02331a9840d1c094f0817",
      "version": 7
    },
    "setting.wsteth_package": {
      "artifacts": {
        "settings": {
          "wsteth_package": "wsteth-token"
        }
      },
      "hash": "9e9286daf17747f9e1754290d7674460",
      "version": 7
    },
    "invoke.registerUsdeOracleManagerNode": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerUsdeOracleManagerNode": {
            "hash": "0x9762025d4847216caa36199410e155c8ef65974e3e0f2eb9a8b6a225d2033170",
            "blockNumber": "20333386",
            "timestamp": "1721305463",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0x50d5252e0e6187250031a3df01cd49930781e14b4efc5c16a30161facc6b612b",
                    3,
                    "0x000000000000000000000000a569d910839ae8865da8f8e70fffb0cba869f96100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008",
                    []
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerUsdeOracleManagerNode",
            "gasUsed": 159083,
            "gasCost": "9865347631",
            "signer": "0xe2163dd599067919d1e9108929b568Bf41D3A420"
          }
        },
        "settings": {
          "usde_oracle_id_raw": "0x50d5252e0e6187250031a3df01cd49930781e14b4efc5c16a30161facc6b612b"
        }
      },
      "hash": "78674162c12ff7917d95de0036a18f59",
      "version": 7
    },
    "provision.legacyMarket": {
      "artifacts": {
        "imports": {
          "legacyMarket": {
            "url": "ipfs://QmeHv5DEx45keYmAZkFJETsbNggUAZFr1CBbYpu9GgY8jo",
            "tags": [
              "latest"
            ],
            "target": "synthetix-legacy-market:3.12.1@main",
            "preset": "main",
            "contracts": {
              "InitialModuleBundle": {
                "address": "0xc7BA0f1DE31627Ad655684Cd347260eb7a815e78",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333387",
                "deployTimestamp": "1721305475",
                "sourceName": "contracts/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 496162,
                "gasCost": "10275945511"
              },
              "Market": {
                "address": "0x2f6cf5c084a6aD42cAfc0315f9875b8Efab02Bab",
                "abi": [
                  "constructor()",
                  "error ImplementationIsSterile(address implementation)",
                  "error InsufficientCollateralMigrated(uint256 amountRequested, uint256 amountAvailable)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketAlreadyRegistered(uint256 existingMarketId)",
                  "error MigrationInProgress()",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error NothingToMigrate()",
                  "error OverflowUint256ToUint128()",
                  "error Paused()",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error V2xPaused()",
                  "error ZeroAddress()",
                  "event AccountLiquidatedInMigration(address staker, uint256 collateralAmount, uint256 debtAmount, uint256 cratio)",
                  "event AccountMigrated(address indexed staker, uint256 indexed accountId, uint256 collateralAmount, uint256 debtAmount)",
                  "event ConvertedUSD(address indexed account, uint256 amount)",
                  "event DebtForgiven(address indexed staker, uint256 indexed accountId, uint256 debtForgiven)",
                  "event MarketRegistered(address indexed marketAddress, uint128 indexed marketId, address indexed sender)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseMigrationSet(address indexed sender, bool paused)",
                  "event PauseStablecoinConversionSet(address indexed sender, bool paused)",
                  "event ReturnedUSD(address indexed account, uint256 amount)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function MIN_DELEGATION_TIME() view returns (uint32)",
                  "function acceptOwnership()",
                  "function convertUSD(uint256 amount)",
                  "function getImplementation() view returns (address)",
                  "function marketId() view returns (uint128)",
                  "function migrate(uint128 accountId)",
                  "function migrateOnBehalf(address staker, uint128 accountId)",
                  "function minimumCredit(uint128) pure returns (uint256 lockedAmount)",
                  "function name(uint128) pure returns (string)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function onERC721Received(address operator, address, uint256, bytes) view returns (bytes4)",
                  "function owner() view returns (address)",
                  "function pauseMigration() view returns (bool)",
                  "function pauseStablecoinConversion() view returns (bool)",
                  "function registerMarket() returns (uint128 newMarketId)",
                  "function renounceNomination()",
                  "function reportedDebt(uint128 requestedMarketId) view returns (uint256 debt)",
                  "function returnUSD(uint256 amount)",
                  "function rewardsDistributor() view returns (address)",
                  "function setPauseMigration(bool paused)",
                  "function setPauseStablecoinConversion(bool paused)",
                  "function setSystemAddresses(address v2xResolverAddress, address v3SystemAddress, address snxDistributor) returns (bool didInitialize)",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function transferDeferredAccount(uint256 accountId, address to)",
                  "function upgradeTo(address to)",
                  "function v2xResolver() view returns (address)",
                  "function v3System() view returns (address)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "22182014",
                "deployTimestamp": "1743606309",
                "sourceName": "contracts/LegacyMarket.sol",
                "contractName": "LegacyMarket",
                "deployedOn": "contract.Market",
                "gasUsed": 2895219,
                "gasCost": "1141544909"
              },
              "InitialProxy": {
                "address": "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0xc7BA0f1DE31627Ad655684Cd347260eb7a815e78",
                  "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333388",
                "deployTimestamp": "1721305487",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 248149,
                "gasCost": "10250172951"
              },
              "Proxy": {
                "address": "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5",
                "abi": [
                  "constructor()",
                  "error ImplementationIsSterile(address implementation)",
                  "error InsufficientCollateralMigrated(uint256 amountRequested, uint256 amountAvailable)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketAlreadyRegistered(uint256 existingMarketId)",
                  "error MigrationInProgress()",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error NothingToMigrate()",
                  "error OverflowUint256ToUint128()",
                  "error Paused()",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error V2xPaused()",
                  "error ZeroAddress()",
                  "event AccountLiquidatedInMigration(address staker, uint256 collateralAmount, uint256 debtAmount, uint256 cratio)",
                  "event AccountMigrated(address indexed staker, uint256 indexed accountId, uint256 collateralAmount, uint256 debtAmount)",
                  "event ConvertedUSD(address indexed account, uint256 amount)",
                  "event DebtForgiven(address indexed staker, uint256 indexed accountId, uint256 debtForgiven)",
                  "event MarketRegistered(address indexed marketAddress, uint128 indexed marketId, address indexed sender)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseMigrationSet(address indexed sender, bool paused)",
                  "event PauseStablecoinConversionSet(address indexed sender, bool paused)",
                  "event ReturnedUSD(address indexed account, uint256 amount)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function MIN_DELEGATION_TIME() view returns (uint32)",
                  "function acceptOwnership()",
                  "function convertUSD(uint256 amount)",
                  "function getImplementation() view returns (address)",
                  "function marketId() view returns (uint128)",
                  "function migrate(uint128 accountId)",
                  "function migrateOnBehalf(address staker, uint128 accountId)",
                  "function minimumCredit(uint128) pure returns (uint256 lockedAmount)",
                  "function name(uint128) pure returns (string)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function onERC721Received(address operator, address, uint256, bytes) view returns (bytes4)",
                  "function owner() view returns (address)",
                  "function pauseMigration() view returns (bool)",
                  "function pauseStablecoinConversion() view returns (bool)",
                  "function registerMarket() returns (uint128 newMarketId)",
                  "function renounceNomination()",
                  "function reportedDebt(uint128 requestedMarketId) view returns (uint256 debt)",
                  "function returnUSD(uint256 amount)",
                  "function rewardsDistributor() view returns (address)",
                  "function setPauseMigration(bool paused)",
                  "function setPauseStablecoinConversion(bool paused)",
                  "function setSystemAddresses(address v2xResolverAddress, address v3SystemAddress, address snxDistributor) returns (bool didInitialize)",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function transferDeferredAccount(uint256 accountId, address to)",
                  "function upgradeTo(address to)",
                  "function v2xResolver() view returns (address)",
                  "function v3System() view returns (address)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "constructorArgs": [
                  "<%= contracts.InitialModuleBundle.address %>",
                  "<%= settings.owner %>"
                ],
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "invoke.upgradeProxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "settings": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "pool_owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "sc_pool_id": "1",
              "v2x_package": "synthetix:2.101.2",
              "v3_package": "synthetix:3.3.15",
              "marketId": "1"
            },
            "imports": {
              "v2x": {
                "url": "ipfs://QmcYmR6na4ifqdT832trDfa9oYnsS3GS8ky1r8zCxumM5P",
                "settings": {
                  "network": "sepolia"
                },
                "contracts": {
                  "Depot": {
                    "address": "0xE1f64079aDa6Ef07b03982Ca34f1dD7152AA3b86",
                    "sourceName": "contracts/Depot.sol",
                    "contractName": "Depot",
                    "abi": [
                      "function exchangeEtherForSNX() payable returns (uint256)",
                      "function resolver() view returns (address)",
                      "function minimumDepositAmount() view returns (uint256)",
                      "function exchangeEtherForSynthsAtRate(uint256 guaranteedRate) payable returns (uint256)",
                      "function synthsReceivedForEther(uint256 amount) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function setPaused(bool _paused)",
                      "function initiationTime() view returns (uint256)",
                      "function exchangeEtherForSynths() payable returns (uint256)",
                      "function setSelfDestructBeneficiary(address _beneficiary)",
                      "function fundsWallet() view returns (address)",
                      "function terminateSelfDestruct()",
                      "function totalSellableDeposits() view returns (uint256)",
                      "function setResolver(address _resolver)",
                      "function nominatedOwner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function setFundsWallet(address _fundsWallet)",
                      "function depositStartIndex() view returns (uint256)",
                      "function acceptOwnership()",
                      "function withdrawMyDepositedSynths()",
                      "function owner() view returns (address)",
                      "function lastPauseTime() view returns (uint256)",
                      "function exchangeEtherForSNXAtRate(uint256 guaranteedEtherRate, uint256 guaranteedSynthetixRate) payable returns (uint256)",
                      "function selfDestruct()",
                      "function synthetixReceivedForSynths(uint256 amount) view returns (uint256)",
                      "function SELFDESTRUCT_DELAY() view returns (uint256)",
                      "function setMinimumDepositAmount(uint256 _amount)",
                      "function deposits(uint256) view returns (address user, uint256 amount)",
                      "function exchangeSynthsForSNXAtRate(uint256 synthAmount, uint256 guaranteedRate) returns (uint256)",
                      "function maxEthPurchase() view returns (uint256)",
                      "function selfDestructInitiated() view returns (bool)",
                      "function setMaxEthPurchase(uint256 _maxEthPurchase)",
                      "function initiateSelfDestruct()",
                      "function selfDestructBeneficiary() view returns (address)",
                      "function smallDeposits(address) view returns (uint256)",
                      "function synthetixReceivedForEther(uint256 amount) view returns (uint256)",
                      "function depositSynths(uint256 amount)",
                      "function withdrawSynthetix(uint256 amount)",
                      "function exchangeSynthsForSNX(uint256 synthAmount) returns (uint256)",
                      "function depositEndIndex() view returns (uint256)",
                      "constructor(address _owner, address _fundsWallet, address _resolver)",
                      "event MaxEthPurchaseUpdated(uint256 amount)",
                      "event FundsWalletUpdated(address newFundsWallet)",
                      "event Exchange(string fromCurrency, uint256 fromAmount, string toCurrency, uint256 toAmount)",
                      "event SynthWithdrawal(address user, uint256 amount)",
                      "event SynthDeposit(address indexed user, uint256 amount, uint256 indexed depositIndex)",
                      "event SynthDepositRemoved(address indexed user, uint256 amount, uint256 indexed depositIndex)",
                      "event SynthDepositNotAccepted(address user, uint256 amount, uint256 minimum)",
                      "event MinimumDepositAmountUpdated(uint256 amount)",
                      "event NonPayableContract(address indexed receiver, uint256 amount)",
                      "event ClearedDeposit(address indexed fromAddress, address indexed toAddress, uint256 fromETHAmount, uint256 toAmount, uint256 indexed depositIndex)",
                      "event PauseChanged(bool isPaused)",
                      "event SelfDestructTerminated()",
                      "event SelfDestructed(address beneficiary)",
                      "event SelfDestructInitiated(uint256 selfDestructDelay)",
                      "event SelfDestructBeneficiaryUpdated(address newBeneficiary)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x7246da8ec30f70ac783498a5b79408cc5ae049ea71bc6bf393557cf3e2c9a8ad",
                    "deployedOn": "run.synthetix"
                  },
                  "EscrowChecker": {
                    "address": "0x3b399e00AFd8201ACf8A5a0EcCF1C47d8D5E41da",
                    "sourceName": "contracts/EscrowChecker.sol",
                    "contractName": "EscrowChecker",
                    "abi": [
                      "function checkAccountSchedule(address account) view returns (uint256[16])",
                      "function synthetix_escrow() view returns (address)",
                      "constructor(address _esc)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xa582498dfb84e432ce0e8d0f1e61e4874169337b68ef38a35afd9bee23f00b84",
                    "deployedOn": "run.synthetix"
                  },
                  "ExchangeRates": {
                    "address": "0x648280dD2db772CD018A0CEC72fab5bF8B7683AB",
                    "sourceName": "contracts/ExchangeRatesWithDexPricing.sol",
                    "contractName": "ExchangeRatesWithDexPricing",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event AggregatorAdded(bytes32 currencyKey, address aggregator)",
                      "event AggregatorRemoved(bytes32 currencyKey, address aggregator)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event DexPriceAggregatorUpdated(address newDexPriceAggregator)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function addAggregator(bytes32 currencyKey, address aggregatorAddress)",
                      "function aggregatorKeys(uint256) view returns (bytes32)",
                      "function aggregatorWarningFlags() view returns (address)",
                      "function aggregators(bytes32) view returns (address)",
                      "function anyRateIsInvalid(bytes32[] currencyKeys) view returns (bool)",
                      "function anyRateIsInvalidAtRound(bytes32[] currencyKeys, uint256[] roundIds) view returns (bool)",
                      "function currenciesUsingAggregator(address aggregator) view returns (bytes32[] currencies)",
                      "function currencyKeyDecimals(bytes32) view returns (uint8)",
                      "function dexPriceAggregator() view returns (address)",
                      "function effectiveAtomicValueAndRates(bytes32 sourceCurrencyKey, uint256 amount, bytes32 destinationCurrencyKey) view returns (uint256 value, uint256 systemValue, uint256 systemSourceRate, uint256 systemDestinationRate)",
                      "function effectiveAtomicValueAndRates(tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) sourceSettings, uint256 sourceAmount, tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) destinationSettings, tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) usdSettings) view returns (uint256 value, uint256 systemValue, uint256 systemSourceRate, uint256 systemDestinationRate)",
                      "function effectiveValue(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) view returns (uint256 value)",
                      "function effectiveValueAndRates(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) view returns (uint256 value, uint256 sourceRate, uint256 destinationRate)",
                      "function effectiveValueAndRatesAtRound(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, uint256 roundIdForSrc, uint256 roundIdForDest) view returns (uint256 value, uint256 sourceRate, uint256 destinationRate)",
                      "function getCurrentRoundId(bytes32 currencyKey) view returns (uint256)",
                      "function getLastRoundIdBeforeElapsedSecs(bytes32 currencyKey, uint256 startingRoundId, uint256 startingTimestamp, uint256 timediff) view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function lastRateUpdateTimes(bytes32 currencyKey) view returns (uint256)",
                      "function lastRateUpdateTimesForCurrencies(bytes32[] currencyKeys) view returns (uint256[])",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rateAndInvalid(bytes32 currencyKey) view returns (uint256 rate, bool isInvalid)",
                      "function rateAndTimestampAtRound(bytes32 currencyKey, uint256 roundId) view returns (uint256 rate, uint256 time)",
                      "function rateAndUpdatedTime(bytes32 currencyKey) view returns (uint256 rate, uint256 time)",
                      "function rateForCurrency(bytes32 currencyKey) view returns (uint256)",
                      "function rateIsFlagged(bytes32 currencyKey) view returns (bool)",
                      "function rateIsInvalid(bytes32 currencyKey) view returns (bool)",
                      "function rateIsStale(bytes32 currencyKey) view returns (bool)",
                      "function rateStalePeriod() view returns (uint256)",
                      "function rateWithSafetyChecks(bytes32 currencyKey) returns (uint256 rate, bool broken, bool staleOrInvalid)",
                      "function ratesAndInvalidForCurrencies(bytes32[] currencyKeys) view returns (uint256[] rates, bool anyRateInvalid)",
                      "function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint256 numRounds, uint256 roundId) view returns (uint256[] rates, uint256[] times)",
                      "function ratesForCurrencies(bytes32[] currencyKeys) view returns (uint256[])",
                      "function rebuildCache()",
                      "function removeAggregator(bytes32 currencyKey)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setDexPriceAggregator(address _dexPriceAggregator)",
                      "function synthTooVolatileForAtomicExchange(bytes32 currencyKey) view returns (bool)",
                      "function synthTooVolatileForAtomicExchange(tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) settings) view returns (bool)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x199dbd6fead9bde5b2f3b363c5dff003a4c735575bdb501b2ddb166b41e849b4",
                    "deployedOn": "run.synthetix"
                  },
                  "FeePool": {
                    "address": "0x83105D7CDd2fd9b8185BFF1cb56bB1595a618618",
                    "sourceName": "contracts/FeePool.sol",
                    "contractName": "FeePool",
                    "abi": [
                      "constructor(address _proxy, address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event FeePeriodClosed(uint256 feePeriodId)",
                      "event FeesClaimed(address account, uint256 sUSDAmount, uint256 snxRewards)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function FEE_PERIOD_LENGTH() view returns (uint8)",
                      "function acceptOwnership()",
                      "function allNetworksDebtSharesSupply() view returns (uint256 sharesSupply, uint256 updatedAt)",
                      "function allNetworksSnxBackedDebt() view returns (uint256 debt, uint256 updatedAt)",
                      "function claimFees() returns (bool)",
                      "function claimOnBehalf(address claimingForAddress) returns (bool)",
                      "function closeCurrentFeePeriod()",
                      "function closeSecondary(uint256 allNetworksSnxBackedDebt, uint256 allNetworksDebtSharesSupply)",
                      "function effectiveDebtRatioForPeriod(address account, uint256 period) view returns (uint256)",
                      "function feePeriodDuration() view returns (uint256)",
                      "function feesAvailable(address account) view returns (uint256, uint256)",
                      "function feesBurned(address account) view returns (uint256)",
                      "function feesByPeriod(address account) view returns (uint256[2][2] results)",
                      "function feesToBurn(address account) view returns (uint256 feesFromPeriod)",
                      "function getLastFeeWithdrawal(address _claimingAddress) view returns (uint256)",
                      "function getPenaltyThresholdRatio() view returns (uint256)",
                      "function importFeePeriod(uint256 feePeriodIndex, uint256 feePeriodId, uint256 startTime, uint256 feesToDistribute, uint256 feesClaimed, uint256 rewardsToDistribute, uint256 rewardsClaimed)",
                      "function isFeesClaimable(address account) view returns (bool feesClaimable)",
                      "function isResolverCached() view returns (bool)",
                      "function issuanceRatio() view returns (uint256)",
                      "function messageSender() view returns (address)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function recentFeePeriods(uint256 index) view returns (uint64 feePeriodId, uint64 unused, uint64 startTime, uint256 feesToDistribute, uint256 feesClaimed, uint256 rewardsToDistribute, uint256 rewardsClaimed)",
                      "function recordFeePaid(uint256 amount)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setRewardsToDistribute(uint256 amount)",
                      "function setupExpiryTime() view returns (uint256)",
                      "function targetThreshold() view returns (uint256)",
                      "function totalFeesAvailable() view returns (uint256)",
                      "function totalFeesBurned() view returns (uint256)",
                      "function totalRewardsAvailable() view returns (uint256)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xe00049956356698200908481fa6e6d2fc808aa24c680503834a6b28c490c1cd1",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxyFeePool": {
                    "address": "0xb440DD674e1243644791a4AdfE3A2AbB0A92d309",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "abi": [
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function setTarget(address _target)",
                      "function acceptOwnership()",
                      "function owner() view returns (address)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function useDELEGATECALL() view returns (bool)",
                      "function setUseDELEGATECALL(bool value)",
                      "function target() view returns (address)",
                      "constructor(address _owner)",
                      "event TargetUpdated(address newTarget)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysAUD": {
                    "address": "0xF48e200EAF9906362BB1442fca31e0835773b8B4",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysBTC": {
                    "address": "0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysCHF": {
                    "address": "0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysEUR": {
                    "address": "0xD71eCFF9342A5Ced620049e616c5035F1dB98620",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysGBP": {
                    "address": "0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysJPY": {
                    "address": "0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysUSD": {
                    "address": "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "abi": [
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function setTarget(address _target)",
                      "function acceptOwnership()",
                      "function owner() view returns (address)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function useDELEGATECALL() view returns (bool)",
                      "function setUseDELEGATECALL(bool value)",
                      "function target() view returns (address)",
                      "constructor(address _owner)",
                      "event TargetUpdated(address newTarget)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxyERC20sUSD": {
                    "address": "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxySynthetix": {
                    "address": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "abi": [
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function setTarget(address _target)",
                      "function acceptOwnership()",
                      "function owner() view returns (address)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function useDELEGATECALL() view returns (bool)",
                      "function setUseDELEGATECALL(bool value)",
                      "function target() view returns (address)",
                      "constructor(address _owner)",
                      "event TargetUpdated(address newTarget)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "SafeDecimalMath": {
                    "address": "0x84D626B2BB4D0F064067e4BF80FCe7055d8F3E7B",
                    "sourceName": "contracts/SafeDecimalMath.sol",
                    "contractName": "SafeDecimalMath",
                    "abi": [
                      "function decimals() view returns (uint8)",
                      "function PRECISE_UNIT() view returns (uint256)",
                      "function unit() pure returns (uint256)",
                      "function UNIT() view returns (uint256)",
                      "function preciseUnit() pure returns (uint256)",
                      "function highPrecisionDecimals() view returns (uint8)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "Synthetix": {
                    "address": "0xd711709eFc452152B7ad11DbD01ed4B69c9421B3",
                    "sourceName": "contracts/Synthetix.sol",
                    "contractName": "Synthetix",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, address _owner, uint256 _totalSupply, address _resolver)",
                      "event AccountLiquidated(address indexed account, uint256 snxRedeemed, uint256 amountLiquidated, address liquidator)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event AtomicSynthExchange(address indexed account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event ExchangeRebate(address indexed account, bytes32 currencyKey, uint256 amount)",
                      "event ExchangeReclaim(address indexed account, bytes32 currencyKey, uint256 amount)",
                      "event ExchangeTracking(bytes32 indexed trackingCode, bytes32 toCurrencyKey, uint256 toAmount, uint256 fee)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event SynthExchange(address indexed account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function TOKEN_NAME() view returns (string)",
                      "function TOKEN_SYMBOL() view returns (string)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function anySynthOrSNXRateIsInvalid() view returns (bool anyRateInvalid)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function availableCurrencyKeys() view returns (bytes32[])",
                      "function availableSynthCount() view returns (uint256)",
                      "function availableSynths(uint256 index) view returns (address)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burnSecondary(address, uint256)",
                      "function burnSynths(uint256 amount)",
                      "function burnSynthsOnBehalf(address burnForAddress, uint256 amount)",
                      "function burnSynthsToTarget()",
                      "function burnSynthsToTargetOnBehalf(address burnForAddress)",
                      "function collateral(address account) view returns (uint256)",
                      "function collateralisationRatio(address _issuer) view returns (uint256)",
                      "function debtBalanceOf(address account, bytes32 currencyKey) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function emitAtomicSynthExchange(address account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                      "function emitExchangeRebate(address account, bytes32 currencyKey, uint256 amount)",
                      "function emitExchangeReclaim(address account, bytes32 currencyKey, uint256 amount)",
                      "function emitExchangeTracking(bytes32 trackingCode, bytes32 toCurrencyKey, uint256 toAmount, uint256 fee)",
                      "function emitSynthExchange(address account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                      "function exchange(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) returns (uint256 amountReceived)",
                      "function exchangeAtomically(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, bytes32 trackingCode, uint256 minAmount) returns (uint256 amountReceived)",
                      "function exchangeOnBehalf(address exchangeForAddress, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) returns (uint256 amountReceived)",
                      "function exchangeOnBehalfWithTracking(address exchangeForAddress, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived)",
                      "function exchangeWithTracking(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived)",
                      "function exchangeWithTrackingForInitiator(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived)",
                      "function exchangeWithVirtual(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, bytes32 trackingCode) returns (uint256 amountReceived, address vSynth)",
                      "function getFirstNonZeroEscrowIndex(address account) view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function isWaitingPeriod(bytes32 currencyKey) view returns (bool)",
                      "function issueMaxSynths()",
                      "function issueMaxSynthsOnBehalf(address issueForAddress)",
                      "function issueSynths(uint256 amount)",
                      "function issueSynthsOnBehalf(address issueForAddress, uint256 amount)",
                      "function liquidateDelinquentAccount(address account) returns (bool)",
                      "function liquidateDelinquentAccountEscrowIndex(address account, uint256 escrowStartIndex) returns (bool)",
                      "function liquidateSelf() returns (bool)",
                      "function maxIssuableSynths(address account) view returns (uint256 maxIssuable)",
                      "function messageSender() view returns (address)",
                      "function migrateAccountBalances(address account) returns (uint256 totalEscrowRevoked, uint256 totalLiquidBalance)",
                      "function migrateEscrowBalanceToRewardEscrowV2()",
                      "function migrateEscrowContractBalance()",
                      "function mint() returns (bool)",
                      "function mintSecondary(address, uint256)",
                      "function mintSecondaryRewards(uint256)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function remainingIssuableSynths(address account) view returns (uint256 maxIssuable, uint256 alreadyIssued, uint256 totalSystemDebt)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function sUSD() view returns (bytes32)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function settle(bytes32 currencyKey) returns (uint256 reclaimed, uint256 refunded, uint256 numEntriesSettled)",
                      "function symbol() view returns (string)",
                      "function synths(bytes32 currencyKey) view returns (address)",
                      "function synthsByAddress(address synthAddress) view returns (bytes32)",
                      "function tokenState() view returns (address)",
                      "function totalIssuedSynths(bytes32 currencyKey) view returns (uint256)",
                      "function totalIssuedSynthsExcludeOtherCollateral(bytes32 currencyKey) view returns (uint256)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynthetix(address account) view returns (uint256 transferable)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x1d6ef9f991835b79126a9e9ee69e9f129a5fe094b930f5ac561283ff675ac167",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthetixEscrow": {
                    "address": "0x971e78e0C92392A4E39099835cF7E6aB535b2227",
                    "sourceName": "contracts/SynthetixEscrow.sol",
                    "contractName": "SynthetixEscrow",
                    "abi": [
                      "function purgeAccount(address account)",
                      "function withdrawHavvens(uint256 quantity)",
                      "function getNextVestingIndex(address account) view returns (uint256)",
                      "function appendVestingEntry(address account, uint256 time, uint256 quantity)",
                      "function numVestingEntries(address account) view returns (uint256)",
                      "function totalVestedAccountBalance(address) view returns (uint256)",
                      "function getNextVestingEntry(address account) view returns (uint256[2])",
                      "function decimals() view returns (uint8)",
                      "function vest()",
                      "function vestingSchedules(address, uint256, uint256) view returns (uint256)",
                      "function setHavven(address _havven)",
                      "function nominatedOwner() view returns (address)",
                      "function nominateOwner(address _owner)",
                      "function getNextVestingTime(address account) view returns (uint256)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function acceptOwnership()",
                      "function owner() view returns (address)",
                      "function getNextVestingQuantity(address account) view returns (uint256)",
                      "function getVestingTime(address account, uint256 index) view returns (uint256)",
                      "function havven() view returns (address)",
                      "function UNIT() view returns (uint256)",
                      "function totalVestedBalance() view returns (uint256)",
                      "function addVestingSchedule(address account, uint256[] times, uint256[] quantities)",
                      "function getVestingScheduleEntry(address account, uint256 index) view returns (uint256[2])",
                      "function getVestingQuantity(address account, uint256 index) view returns (uint256)",
                      "constructor(address _owner, address _havven)",
                      "event HavvenUpdated(address newHavven)",
                      "event Vested(address beneficiary, address indexed beneficiaryIndex, uint256 time, uint256 value)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "SynthetixState": {
                    "address": "0x4b9Ca5607f1fF8019c1C6A3c2f0CC8de622D5B82",
                    "sourceName": "contracts/legacy/SynthetixState.sol",
                    "contractName": "SynthetixState",
                    "abi": [
                      "function setIssuanceRatio(uint256 _issuanceRatio)",
                      "function debtLedger(uint256) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function importedXDRAmount() view returns (uint256)",
                      "function incrementTotalIssuerCount()",
                      "function appendDebtLedgerValue(uint256 value)",
                      "function lastDebtLedgerEntry() view returns (uint256)",
                      "function setPreferredCurrency(address account, bytes4 currencyKey)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function nominatedOwner() view returns (address)",
                      "function acceptOwnership()",
                      "function issuanceData(address) view returns (uint256 initialDebtOwnership, uint256 debtEntryIndex)",
                      "function owner() view returns (address)",
                      "function totalIssuerCount() view returns (uint256)",
                      "function importIssuerData(address[] accounts, uint256[] sUSDAmounts)",
                      "function setCurrentIssuanceData(address account, uint256 initialDebtOwnership)",
                      "function associatedContract() view returns (address)",
                      "function clearIssuanceData(address account)",
                      "function issuanceRatio() view returns (uint256)",
                      "function hasIssued(address account) view returns (bool)",
                      "function decrementTotalIssuerCount()",
                      "function preferredCurrency(address) view returns (bytes4)",
                      "function debtLedgerLength() view returns (uint256)",
                      "constructor(address _owner, address _associatedContract)",
                      "event IssuanceRatioUpdated(uint256 newRatio)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsAUD": {
                    "address": "0xfb020CA7f4e8C4a5bBBe060f59a249c6275d2b69",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsBTC": {
                    "address": "0x1cB004a8e84a5CE95C1fF895EE603BaC8EC506c7",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsCHF": {
                    "address": "0xBb5b03E920cF702De5A3bA9Fc1445aF4B3919c88",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsEUR": {
                    "address": "0xa8E31E3C38aDD6052A9407298FAEB8fD393A6cF9",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsGBP": {
                    "address": "0xdc883b9d9Ee16f74bE08826E68dF4C9D9d26e8bD",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsJPY": {
                    "address": "0xE1cc2332852B2Ac0dA59A1f9D3051829f4eF3c1C",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsUSD": {
                    "address": "0x10A5F7D9D65bCc2734763444D4940a31b109275f",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xc90a844a8d8bcbecf266b2f4fe039e2933ba2f38fb7b063189cb7e97cc085c7e",
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesAUD": {
                    "address": "0xCb29D2cf2C65d3Be1d00F07f3441390432D55203",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesBTC": {
                    "address": "0x4F6296455F8d754c19821cF1EC8FeBF2cD456E67",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesCHF": {
                    "address": "0x52496fE8a4feaEFe14d9433E00D48E6929c13deC",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesEUR": {
                    "address": "0x6568D9e750fC44AF00f857885Dfb8281c00529c4",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesGBP": {
                    "address": "0x7e88D19A79b291cfE5696d496055f7e57F537A75",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesJPY": {
                    "address": "0x4dFACfB15514C21c991ff75Bc7Bf6Fb1F98361ed",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesUSD": {
                    "address": "0x05a9CBe762B36632b3594DA4F082340E0e5343e8",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStateSynthetix": {
                    "address": "0x5b1b5fEa1b99D83aD479dF0C222F0492385381dD",
                    "sourceName": "contracts/legacy/LegacyTokenState.sol",
                    "contractName": "LegacyTokenState",
                    "abi": [
                      "function setAssociatedContract(address _associatedContract)",
                      "function nominatedOwner() view returns (address)",
                      "function nominateOwner(address _owner)",
                      "function balanceOf(address) view returns (uint256)",
                      "function acceptOwnership()",
                      "function owner() view returns (address)",
                      "function associatedContract() view returns (address)",
                      "function setBalanceOf(address account, uint256 value)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function allowance(address, address) view returns (uint256)",
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address _associatedContract)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesETH": {
                    "address": "0x34A5ef81d18F3a305aE9C2d7DF42beef4c79031c",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysETH": {
                    "address": "0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsETH": {
                    "address": "0x5D4C724BFe3a228Ff0E29125Ac1571FE093700a4",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "RewardEscrow": {
                    "address": "0xb671F2210B1F6621A2607EA63E6B2DC3e2464d1F",
                    "sourceName": "contracts/RewardEscrow.sol",
                    "contractName": "RewardEscrow",
                    "abi": [
                      "function nominateNewOwner(address _owner)",
                      "function setFeePool(address _feePool)",
                      "function getNextVestingIndex(address account) view returns (uint256)",
                      "function numVestingEntries(address account) view returns (uint256)",
                      "function totalVestedAccountBalance(address) view returns (uint256)",
                      "function getNextVestingEntry(address account) view returns (uint256[2])",
                      "function totalEscrowedAccountBalance(address) view returns (uint256)",
                      "function checkAccountSchedule(address account) view returns (uint256[520])",
                      "function vest()",
                      "function vestingSchedules(address, uint256, uint256) view returns (uint256)",
                      "function nominatedOwner() view returns (address)",
                      "function getNextVestingTime(address account) view returns (uint256)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function totalEscrowedBalance() view returns (uint256)",
                      "function synthetix() view returns (address)",
                      "function acceptOwnership()",
                      "function owner() view returns (address)",
                      "function getNextVestingQuantity(address account) view returns (uint256)",
                      "function getVestingTime(address account, uint256 index) view returns (uint256)",
                      "function feePool() view returns (address)",
                      "function appendVestingEntry(address account, uint256 quantity)",
                      "function MAX_VESTING_ENTRIES() view returns (uint256)",
                      "function getVestingScheduleEntry(address account, uint256 index) view returns (uint256[2])",
                      "function getVestingQuantity(address account, uint256 index) view returns (uint256)",
                      "function setSynthetix(address _synthetix)",
                      "constructor(address _owner, address _synthetix, address _feePool)",
                      "event SynthetixUpdated(address newSynthetix)",
                      "event FeePoolUpdated(address newFeePool)",
                      "event Vested(address indexed beneficiary, uint256 time, uint256 value)",
                      "event VestingEntryCreated(address indexed beneficiary, uint256 time, uint256 value)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xd2b722dd4a70fa6be957d59f58bfeea37634be82672a33430256f2452a353cfe",
                    "deployedOn": "run.synthetix"
                  },
                  "FeePoolState": {
                    "address": "0x11164F6a47C3f8472D19b9aDd516Fc780cb7Ee02",
                    "sourceName": "contracts/legacy/FeePoolState.sol",
                    "contractName": "FeePoolState",
                    "abi": [
                      "function nominateNewOwner(address _owner)",
                      "function initiationTime() view returns (uint256)",
                      "function setFeePool(address _feePool)",
                      "function setSelfDestructBeneficiary(address _beneficiary)",
                      "function terminateSelfDestruct()",
                      "function importIssuerData(address[] accounts, uint256[] ratios, uint256 periodToInsert, uint256 feePeriodCloseIndex)",
                      "function nominatedOwner() view returns (address)",
                      "function acceptOwnership()",
                      "function accountIssuanceLedger(address, uint256) view returns (uint256 debtPercentage, uint256 debtEntryIndex)",
                      "function owner() view returns (address)",
                      "function appendAccountIssuanceRecord(address account, uint256 debtRatio, uint256 debtEntryIndex, uint256 currentPeriodStartDebtIndex)",
                      "function selfDestruct()",
                      "function SELFDESTRUCT_DELAY() view returns (uint256)",
                      "function feePool() view returns (address)",
                      "function getAccountsDebtEntry(address account, uint256 index) view returns (uint256 debtPercentage, uint256 debtEntryIndex)",
                      "function selfDestructInitiated() view returns (bool)",
                      "function initiateSelfDestruct()",
                      "function selfDestructBeneficiary() view returns (address)",
                      "function FEE_PERIOD_LENGTH() view returns (uint8)",
                      "function applicableIssuanceData(address account, uint256 closingDebtIndex) view returns (uint256, uint256)",
                      "constructor(address _owner, address _feePool)",
                      "event IssuanceDebtRatioEntry(address indexed account, uint256 debtRatio, uint256 feePeriodCloseIndex)",
                      "event SelfDestructTerminated()",
                      "event SelfDestructed(address beneficiary)",
                      "event SelfDestructInitiated(uint256 selfDestructDelay)",
                      "event SelfDestructBeneficiaryUpdated(address newBeneficiary)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x25bec289bff971dde31fafa71168a5482a02ce3bb2cca5186c033cba355502a7",
                    "deployedOn": "run.synthetix"
                  },
                  "SupplySchedule": {
                    "address": "0x8d203C458d536Fe0F97e9f741bC231EaC8cd91cf",
                    "sourceName": "contracts/SupplySchedule.sol",
                    "contractName": "SupplySchedule",
                    "abi": [
                      "constructor(address _owner, uint256 _lastMintEvent, uint256 _currentWeek)",
                      "event InflationAmountUpdated(uint256 newInflationAmount)",
                      "event MaxInflationAmountUpdated(uint256 newInflationAmount)",
                      "event MinterRewardUpdated(uint256 newRewardAmount)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event SupplyMinted(uint256 supplyMinted, uint256 numberOfWeeksIssued, uint256 lastMintEvent, uint256 timestamp)",
                      "event SynthetixProxyUpdated(address newAddress)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function INFLATION_START_DATE() view returns (uint256)",
                      "function MAX_MINTER_REWARD() view returns (uint256)",
                      "function MINT_BUFFER() view returns (uint256)",
                      "function MINT_PERIOD_DURATION() view returns (uint256)",
                      "function acceptOwnership()",
                      "function inflationAmount() view returns (uint256)",
                      "function isMintable() view returns (bool)",
                      "function lastMintEvent() view returns (uint256)",
                      "function maxInflationAmount() view returns (uint256)",
                      "function mintableSupply() view returns (uint256)",
                      "function minterReward() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function recordMintEvent(uint256 supplyMinted) returns (uint256)",
                      "function setInflationAmount(uint256 amount)",
                      "function setMaxInflationAmount(uint256 amount)",
                      "function setMinterReward(uint256 amount)",
                      "function setSynthetixProxy(address _synthetixProxy)",
                      "function synthetixProxy() view returns (address)",
                      "function weekCounter() view returns (uint256)",
                      "function weeksSinceLastIssuance() view returns (uint256)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x54e24c856def9032b2de5ea79af0d1c0c3807e0908e45344b4b2a66f63b539cb",
                    "deployedOn": "run.synthetix"
                  },
                  "DelegateApprovals": {
                    "address": "0x15fd6e554874B9e70F832Ed37f231Ac5E142362f",
                    "sourceName": "contracts/DelegateApprovals.sol",
                    "contractName": "DelegateApprovals",
                    "abi": [
                      "function canIssueFor(address authoriser, address delegate) view returns (bool)",
                      "function nominateNewOwner(address _owner)",
                      "function canClaimFor(address authoriser, address delegate) view returns (bool)",
                      "function ISSUE_FOR_ADDRESS() view returns (bytes32)",
                      "function approveClaimOnBehalf(address delegate)",
                      "function removeIssueOnBehalf(address delegate)",
                      "function approveExchangeOnBehalf(address delegate)",
                      "function nominatedOwner() view returns (address)",
                      "function removeBurnOnBehalf(address delegate)",
                      "function removeClaimOnBehalf(address delegate)",
                      "function removeAllDelegatePowers(address delegate)",
                      "function acceptOwnership()",
                      "function canBurnFor(address authoriser, address delegate) view returns (bool)",
                      "function owner() view returns (address)",
                      "function eternalStorage() view returns (address)",
                      "function approveBurnOnBehalf(address delegate)",
                      "function APPROVE_ALL() view returns (bytes32)",
                      "function approveIssueOnBehalf(address delegate)",
                      "function approvedAll(address authoriser, address delegate) view returns (bool)",
                      "function setEternalStorage(address _eternalStorage)",
                      "function removeExchangeOnBehalf(address delegate)",
                      "function approveAllDelegatePowers(address delegate)",
                      "function CLAIM_FOR_ADDRESS() view returns (bytes32)",
                      "function EXCHANGE_FOR_ADDRESS() view returns (bytes32)",
                      "function BURN_FOR_ADDRESS() view returns (bytes32)",
                      "function canExchangeFor(address authoriser, address delegate) view returns (bool)",
                      "constructor(address _owner, address _eternalStorage)",
                      "event Approval(address indexed authoriser, address delegate, bytes32 action)",
                      "event WithdrawApproval(address indexed authoriser, address delegate, bytes32 action)",
                      "event EternalStorageUpdated(address newEternalStorage)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xac833bf8b366498447c4b3b95edd86964c40efd1253534b63ebe2faed89226b2",
                    "deployedOn": "run.synthetix"
                  },
                  "FeePoolEternalStorage": {
                    "address": "0xC9DFff5fA5605fd94F8B7927b892F2B57391e8bB",
                    "sourceName": "contracts/FeePoolEternalStorage.sol",
                    "contractName": "FeePoolEternalStorage",
                    "abi": [
                      "function getBytes32Value(bytes32 record) view returns (bytes32)",
                      "function deleteAddressValue(bytes32 record)",
                      "function deleteBytesValue(bytes32 record)",
                      "function deleteBytes32Value(bytes32 record)",
                      "function nominateNewOwner(address _owner)",
                      "function getBooleanValue(bytes32 record) view returns (bool)",
                      "function setBytes32Value(bytes32 record, bytes32 value)",
                      "function setUIntValue(bytes32 record, uint256 value)",
                      "function deleteBooleanValue(bytes32 record)",
                      "function setBooleanValue(bytes32 record, bool value)",
                      "function getBytesValue(bytes32 record) view returns (bytes)",
                      "function getAddressValue(bytes32 record) view returns (address)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function nominatedOwner() view returns (address)",
                      "function setAddressValue(bytes32 record, address value)",
                      "function acceptOwnership()",
                      "function deleteIntValue(bytes32 record)",
                      "function owner() view returns (address)",
                      "function getIntValue(bytes32 record) view returns (int256)",
                      "function deleteUIntValue(bytes32 record)",
                      "function getStringValue(bytes32 record) view returns (string)",
                      "function setIntValue(bytes32 record, int256 value)",
                      "function associatedContract() view returns (address)",
                      "function importFeeWithdrawalData(address[] accounts, uint256[] feePeriodIDs)",
                      "function deleteStringValue(bytes32 record)",
                      "function getUIntValue(bytes32 record) view returns (uint256)",
                      "function setBytesValue(bytes32 record, bytes value)",
                      "function setStringValue(bytes32 record, string value)",
                      "constructor(address _owner, address _feePool)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x6c4cfdae798e1aa656db42c421e6e34749b5b9e8312820aebfefa7de530387d0",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxyERC20": {
                    "address": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "RewardsDistribution": {
                    "address": "0x94433f0DA8B5bfb473Ea8cd7ad10D9c8aef4aB7b",
                    "sourceName": "contracts/RewardsDistribution.sol",
                    "contractName": "RewardsDistribution",
                    "abi": [
                      "constructor(address _owner, address _authority, address _synthetixProxy, address _rewardEscrow, address _feePoolProxy)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event RewardDistributionAdded(uint256 index, address destination, uint256 amount)",
                      "event RewardsDistributed(uint256 amount)",
                      "function acceptOwnership()",
                      "function addRewardDistribution(address destination, uint256 amount) returns (bool)",
                      "function authority() view returns (address)",
                      "function distributeRewards(uint256 amount) returns (bool)",
                      "function distributions(uint256) view returns (address destination, uint256 amount)",
                      "function distributionsLength() view returns (uint256)",
                      "function editRewardDistribution(uint256 index, address destination, uint256 amount) returns (bool)",
                      "function feePoolProxy() view returns (address)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function removeRewardDistribution(uint256 index)",
                      "function rewardEscrow() view returns (address)",
                      "function setAuthority(address _authority)",
                      "function setFeePoolProxy(address _feePoolProxy)",
                      "function setRewardEscrow(address _rewardEscrow)",
                      "function setSynthetixProxy(address _synthetixProxy)",
                      "function synthetixProxy() view returns (address)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xa58a87848bea70940d4ec501ea9548785d4a4b8e930a267e04b8162754bab925",
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesLINK": {
                    "address": "0x577D4a7395c6A5f46d9981a5F83fa7294926aBB0",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysLINK": {
                    "address": "0xbBC455cb4F1B9e4bFC4B73970d360c8f032EfEE6",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsLINK": {
                    "address": "0xDF69bC4541b86Aa4c5A470B4347E730c38b2c3B2",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "Math": {
                    "address": "0x385e1Eb2FF28F4A637DA2C9971F8CAF5F5b1E77c",
                    "sourceName": "contracts/Math.sol",
                    "contractName": "Math",
                    "abi": [],
                    "deployTxn": "https://etherscan.io/tx/0x4175d01bd44e1c847c8257ba272ea1051d67aa2b2552125f179a5dac7cb8d7d2",
                    "deployedOn": "run.synthetix"
                  },
                  "AddressResolver": {
                    "address": "0x823bE81bbF96BEc0e25CA13170F5AaCb5B79ba83",
                    "sourceName": "contracts/AddressResolver.sol",
                    "contractName": "AddressResolver",
                    "abi": [
                      "constructor(address _owner)",
                      "event AddressImported(bytes32 name, address destination)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function areAddressesImported(bytes32[] names, address[] destinations) view returns (bool)",
                      "function getAddress(bytes32 name) view returns (address)",
                      "function getSynth(bytes32 key) view returns (address)",
                      "function importAddresses(bytes32[] names, address[] destinations)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCaches(address[] destinations)",
                      "function repository(bytes32) view returns (address)",
                      "function requireAndGetAddress(bytes32 name, string reason) view returns (address)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x5fd6fc965408c73ccd81346087039498c92cf479308048d7ae6594d92ff4f7a4",
                    "deployedOn": "run.synthetix"
                  },
                  "Exchanger": {
                    "address": "0xaeA0065E146FD75Dc24465961a583827284D405a",
                    "sourceName": "contracts/ExchangerWithFeeRecAlternatives.sol",
                    "contractName": "ExchangerWithFeeRecAlternatives",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event ExchangeEntryAppended(address indexed account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 roundIdForSrc, uint256 roundIdForDest)",
                      "event ExchangeEntrySettled(address indexed from, bytes32 src, uint256 amount, bytes32 dest, uint256 reclaim, uint256 rebate, uint256 srcRoundIdAtPeriodEnd, uint256 destRoundIdAtPeriodEnd, uint256 exchangeTimestamp)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event VirtualSynthCreated(address indexed synth, address indexed recipient, address vSynth, bytes32 currencyKey, uint256 amount)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function atomicMaxVolumePerBlock() view returns (uint256)",
                      "function calculateAmountAfterSettlement(address from, bytes32 currencyKey, uint256 amount, uint256 refunded) view returns (uint256 amountAfterSettlement)",
                      "function dynamicFeeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 feeRate, bool tooVolatile)",
                      "function exchange(address exchangeForAddress, address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress, bool virtualSynth, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived, address vSynth)",
                      "function exchangeAtomically(address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress, bytes32 trackingCode, uint256 minAmount) returns (uint256 amountReceived)",
                      "function feeRateForAtomicExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 exchangeFeeRate)",
                      "function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256)",
                      "function getAmountsForAtomicExchange(uint256 sourceAmount, bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate)",
                      "function getAmountsForExchange(uint256 sourceAmount, bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate)",
                      "function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function isSynthRateInvalid(bytes32 currencyKey) view returns (bool)",
                      "function lastAtomicVolume() view returns (uint64 time, uint192 volume)",
                      "function lastExchangeRate(bytes32 currencyKey) view returns (uint256)",
                      "function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function priceDeviationThresholdFactor() view returns (uint256)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function settle(address from, bytes32 currencyKey) returns (uint256 reclaimed, uint256 refunded, uint256 numEntriesSettled)",
                      "function settlementOwing(address account, bytes32 currencyKey) view returns (uint256 reclaimAmount, uint256 rebateAmount, uint256 numEntries)",
                      "function tradingRewardsEnabled() view returns (bool)",
                      "function waitingPeriodSecs() view returns (uint256)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x31894f3db9e91f8ba818e97ca5e5f120f6f567d8dadc22120adfe68f77a4d9c6",
                    "deployedOn": "run.synthetix"
                  },
                  "ExchangeState": {
                    "address": "0x545973f28950f50fc6c7F52AAb4Ad214A27C0564",
                    "sourceName": "contracts/ExchangeState.sol",
                    "contractName": "ExchangeState",
                    "abi": [
                      "function maxEntriesInQueue() view returns (uint256)",
                      "function getEntryAt(address account, bytes32 currencyKey, uint256 index) view returns (bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 timestamp, uint256 roundIdForSrc, uint256 roundIdForDest)",
                      "function nominateNewOwner(address _owner)",
                      "function appendExchangeEntry(address account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 timestamp, uint256 roundIdForSrc, uint256 roundIdForDest)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function nominatedOwner() view returns (address)",
                      "function exchanges(address, bytes32, uint256) view returns (bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 timestamp, uint256 roundIdForSrc, uint256 roundIdForDest)",
                      "function acceptOwnership()",
                      "function owner() view returns (address)",
                      "function associatedContract() view returns (address)",
                      "function getLengthOfEntries(address account, bytes32 currencyKey) view returns (uint256)",
                      "function setMaxEntriesInQueue(uint256 _maxEntriesInQueue)",
                      "function removeEntries(address account, bytes32 currencyKey)",
                      "function getMaxTimestamp(address account, bytes32 currencyKey) view returns (uint256)",
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerNominated(address newOwner)",
                      "event OwnerChanged(address oldOwner, address newOwner)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x6900724258dbf151dc5ea9d2f5a891ec51ccf72ac82101919f00920a7b8ae567",
                    "deployedOn": "run.synthetix"
                  },
                  "Issuer": {
                    "address": "0xab4688E54A216aB3813438D30603Bf855648AF8d",
                    "sourceName": "contracts/Issuer.sol",
                    "contractName": "Issuer",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event SynthAdded(bytes32 currencyKey, address synth)",
                      "event SynthRemoved(bytes32 currencyKey, address synth)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function addSynth(address synth)",
                      "function addSynths(address[] synthsToAdd)",
                      "function allNetworksDebtInfo() view returns (uint256 debt, uint256 sharesSupply, bool isStale)",
                      "function anySynthOrSNXRateIsInvalid() view returns (bool anyRateInvalid)",
                      "function availableCurrencyKeys() view returns (bytes32[])",
                      "function availableSynthCount() view returns (uint256)",
                      "function availableSynths(uint256) view returns (address)",
                      "function burnAndIssueSynthsWithoutDebtCache(address account, bytes32 currencyKey, uint256 amountOfSynth, uint256 amountInsUSD)",
                      "function burnForRedemption(address deprecatedSynthProxy, address account, uint256 balance)",
                      "function burnSynths(address from, uint256 amount)",
                      "function burnSynthsOnBehalf(address burnForAddress, address from, uint256 amount)",
                      "function burnSynthsToTarget(address from)",
                      "function burnSynthsToTargetOnBehalf(address burnForAddress, address from)",
                      "function burnSynthsWithoutDebt(bytes32 currencyKey, address from, uint256 amount) returns (bool rateInvalid)",
                      "function canBurnSynths(address account) view returns (bool)",
                      "function collateral(address account) view returns (uint256)",
                      "function collateralisationRatio(address _issuer) view returns (uint256 cratio)",
                      "function collateralisationRatioAndAnyRatesInvalid(address _issuer) view returns (uint256 cratio, bool anyRateIsInvalid)",
                      "function debtBalanceOf(address _issuer, bytes32 currencyKey) view returns (uint256 debtBalance)",
                      "function getSynths(bytes32[] currencyKeys) view returns (address[])",
                      "function isResolverCached() view returns (bool)",
                      "function issuanceRatio() view returns (uint256)",
                      "function issueMaxSynths(address from)",
                      "function issueMaxSynthsOnBehalf(address issueForAddress, address from)",
                      "function issueSynths(address from, uint256 amount)",
                      "function issueSynthsOnBehalf(address issueForAddress, address from, uint256 amount)",
                      "function issueSynthsWithoutDebt(bytes32 currencyKey, address to, uint256 amount) returns (bool rateInvalid)",
                      "function lastIssueEvent(address account) view returns (uint256)",
                      "function liquidateAccount(address account, bool isSelfLiquidation) returns (uint256 totalRedeemed, uint256 debtRemoved, uint256 escrowToLiquidate)",
                      "function liquidationAmounts(address account, bool isSelfLiquidation) view returns (uint256 totalRedeemed, uint256 debtToRemove, uint256 escrowToLiquidate, uint256 initialDebtBalance)",
                      "function maxIssuableSynths(address _issuer) view returns (uint256)",
                      "function minimumStakeTime() view returns (uint256)",
                      "function modifyDebtSharesForMigration(address account, uint256 amount)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function remainingIssuableSynths(address _issuer) view returns (uint256 maxIssuable, uint256 alreadyIssued, uint256 totalSystemDebt)",
                      "function removeSynth(bytes32 currencyKey)",
                      "function removeSynths(bytes32[] currencyKeys)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setCurrentPeriodId(uint128 periodId)",
                      "function synths(bytes32) view returns (address)",
                      "function synthsByAddress(address) view returns (bytes32)",
                      "function totalIssuedSynths(bytes32 currencyKey, bool excludeOtherCollateral) view returns (uint256 totalIssued)",
                      "function transferableSynthetixAndAnyRateIsInvalid(address account, uint256 balance) view returns (uint256 transferable, bool anyRateIsInvalid)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x69bc1742c7167108145cf642a3e4927f962750c7579d171c24655be1f747a1ce",
                    "deployedOn": "run.synthetix"
                  },
                  "SystemStatus": {
                    "address": "0x696c905F8F8c006cA46e9808fE7e00049507798F",
                    "sourceName": "contracts/SystemStatus.sol",
                    "contractName": "SystemStatus",
                    "abi": [
                      "constructor(address _owner)",
                      "event AccessControlUpdated(bytes32 indexed section, address indexed account, bool canSuspend, bool canResume)",
                      "event ExchangeResumed(uint256 reason)",
                      "event ExchangeSuspended(uint256 reason)",
                      "event FuturesMarketResumed(bytes32 marketKey, uint256 reason)",
                      "event FuturesMarketSuspended(bytes32 marketKey, uint256 reason)",
                      "event FuturesResumed(uint256 reason)",
                      "event FuturesSuspended(uint256 reason)",
                      "event IssuanceResumed(uint256 reason)",
                      "event IssuanceSuspended(uint256 reason)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event SynthExchangeResumed(bytes32 currencyKey, uint256 reason)",
                      "event SynthExchangeSuspended(bytes32 currencyKey, uint256 reason)",
                      "event SynthResumed(bytes32 currencyKey, uint256 reason)",
                      "event SynthSuspended(bytes32 currencyKey, uint256 reason)",
                      "event SystemResumed(uint256 reason)",
                      "event SystemSuspended(uint256 reason)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function SECTION_EXCHANGE() view returns (bytes32)",
                      "function SECTION_FUTURES() view returns (bytes32)",
                      "function SECTION_ISSUANCE() view returns (bytes32)",
                      "function SECTION_SYNTH() view returns (bytes32)",
                      "function SECTION_SYNTH_EXCHANGE() view returns (bytes32)",
                      "function SECTION_SYSTEM() view returns (bytes32)",
                      "function SUSPENSION_REASON_UPGRADE() view returns (uint248)",
                      "function acceptOwnership()",
                      "function accessControl(bytes32, address) view returns (bool canSuspend, bool canResume)",
                      "function exchangeSuspension() view returns (bool suspended, uint248 reason)",
                      "function futuresMarketSuspension(bytes32) view returns (bool suspended, uint248 reason)",
                      "function futuresSuspension() view returns (bool suspended, uint248 reason)",
                      "function getFuturesMarketSuspensions(bytes32[] marketKeys) view returns (bool[] suspensions, uint256[] reasons)",
                      "function getSynthExchangeSuspensions(bytes32[] synths) view returns (bool[] exchangeSuspensions, uint256[] reasons)",
                      "function getSynthSuspensions(bytes32[] synths) view returns (bool[] suspensions, uint256[] reasons)",
                      "function isSystemUpgrading() view returns (bool)",
                      "function issuanceSuspension() view returns (bool suspended, uint248 reason)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function requireExchangeActive() view",
                      "function requireExchangeBetweenSynthsAllowed(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view",
                      "function requireFuturesActive() view",
                      "function requireFuturesMarketActive(bytes32 marketKey) view",
                      "function requireIssuanceActive() view",
                      "function requireSynthActive(bytes32 currencyKey) view",
                      "function requireSynthExchangeActive(bytes32 currencyKey) view",
                      "function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view",
                      "function requireSystemActive() view",
                      "function resumeExchange()",
                      "function resumeFutures()",
                      "function resumeFuturesMarket(bytes32 marketKey)",
                      "function resumeFuturesMarkets(bytes32[] marketKeys)",
                      "function resumeIssuance()",
                      "function resumeSynth(bytes32 currencyKey)",
                      "function resumeSynthExchange(bytes32 currencyKey)",
                      "function resumeSynths(bytes32[] currencyKeys)",
                      "function resumeSynthsExchange(bytes32[] currencyKeys)",
                      "function resumeSystem()",
                      "function suspendExchange(uint256 reason)",
                      "function suspendFutures(uint256 reason)",
                      "function suspendFuturesMarket(bytes32 marketKey, uint256 reason)",
                      "function suspendFuturesMarkets(bytes32[] marketKeys, uint256 reason)",
                      "function suspendIssuance(uint256 reason)",
                      "function suspendSynth(bytes32 currencyKey, uint256 reason)",
                      "function suspendSynthExchange(bytes32 currencyKey, uint256 reason)",
                      "function suspendSynths(bytes32[] currencyKeys, uint256 reason)",
                      "function suspendSynthsExchange(bytes32[] currencyKeys, uint256 reason)",
                      "function suspendSystem(uint256 reason)",
                      "function synthExchangeSuspension(bytes32) view returns (bool suspended, uint248 reason)",
                      "function synthSuspended(bytes32 currencyKey) view returns (bool)",
                      "function synthSuspension(bytes32) view returns (bool suspended, uint248 reason)",
                      "function systemSuspended() view returns (bool)",
                      "function systemSuspension() view returns (bool suspended, uint248 reason)",
                      "function updateAccessControl(bytes32 section, address account, bool canSuspend, bool canResume)",
                      "function updateAccessControls(bytes32[] sections, address[] accounts, bool[] canSuspends, bool[] canResumes)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x372d60e75b5eefaf45b03d71a8e7420dc16db4ec49bd08db6ccdfd4b59f162cd",
                    "deployedOn": "run.synthetix"
                  },
                  "DelegateApprovalsEternalStorage": {
                    "address": "0x8F586F063ffbb89b186C8e604FC6614766f9C9d1",
                    "sourceName": "contracts/EternalStorage.sol",
                    "contractName": "EternalStorage",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function associatedContract() view returns (address)",
                      "function deleteAddressValue(bytes32 record)",
                      "function deleteBooleanValue(bytes32 record)",
                      "function deleteBytes32Value(bytes32 record)",
                      "function deleteBytesValue(bytes32 record)",
                      "function deleteIntValue(bytes32 record)",
                      "function deleteStringValue(bytes32 record)",
                      "function deleteUIntValue(bytes32 record)",
                      "function getAddressValue(bytes32 record) view returns (address)",
                      "function getBooleanValue(bytes32 record) view returns (bool)",
                      "function getBytes32Value(bytes32 record) view returns (bytes32)",
                      "function getBytesValue(bytes32 record) view returns (bytes)",
                      "function getIntValue(bytes32 record) view returns (int256)",
                      "function getStringValue(bytes32 record) view returns (string)",
                      "function getUIntValue(bytes32 record) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAddressValue(bytes32 record, address value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBooleanValue(bytes32 record, bool value)",
                      "function setBytes32Value(bytes32 record, bytes32 value)",
                      "function setBytesValue(bytes32 record, bytes value)",
                      "function setIntValue(bytes32 record, int256 value)",
                      "function setStringValue(bytes32 record, string value)",
                      "function setUIntValue(bytes32 record, uint256 value)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xa55a9b0d9d922c9a2749d990bf7f20f729837c8fcd7e128c1dac8eb51fa67f99",
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesADA": {
                    "address": "0x9956c5019a24fbd5B506AD070b771577bAc5c343",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysADA": {
                    "address": "0xe36E2D3c7c34281FA3bC737950a68571736880A1",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsADA": {
                    "address": "0x91b82d62Ff322b8e02b86f33E9A99a813437830d",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ReadProxyAddressResolver": {
                    "address": "0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2",
                    "sourceName": "contracts/ReadProxy.sol",
                    "contractName": "ReadProxy",
                    "abi": [
                      "constructor(address _owner)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "function acceptOwnership()",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function target() view returns (address)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x1cefe027f7e3d8da401d3deeb63fc6c35a1ce09fc372f4de77c599250f0b496d",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardsiETH": {
                    "address": "0x3f27c540ADaE3a9E8c875C61e3B970b559d7F65d",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x398f20e282cebdc84549177e4324ee1f075db952a190c0555fa3fccdeae0b59f",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardsiBTC": {
                    "address": "0x167009dcDA2e49930a71712D956f02cc980DcC1b",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xb24447e295063d1471193bbed6d42e107c2a61bc91f3e9de6710d110ce92f34c",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthUtil": {
                    "address": "0x81Aee4EA48f678E172640fB5813cf7A96AFaF6C3",
                    "sourceName": "contracts/SynthUtil.sol",
                    "contractName": "SynthUtil",
                    "abi": [
                      "constructor(address resolver)",
                      "function addressResolverProxy() view returns (address)",
                      "function frozenSynths() view returns (bytes32[])",
                      "function synthsBalances(address account) view returns (bytes32[], uint256[], uint256[])",
                      "function synthsRates() view returns (bytes32[], uint256[])",
                      "function synthsTotalSupplies() view returns (bytes32[], uint256[], uint256[])",
                      "function totalSynthsInKey(address account, bytes32 currencyKey) view returns (uint256 total)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xf9c727d79abb8c45375fdf4b2b1138299c24f5b0affa5eaf03fba8cf00f6b1a4",
                    "deployedOn": "run.synthetix"
                  },
                  "DappMaintenance": {
                    "address": "0xAb0B2f1Cf979cdbF4676251F35353eC5AF2732Dd",
                    "sourceName": "contracts/DappMaintenance.sol",
                    "contractName": "DappMaintenance",
                    "abi": [
                      "constructor(address _owner)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event SXMaintenance(bool isPaused)",
                      "event StakingMaintenance(bool isPaused)",
                      "function acceptOwnership()",
                      "function isPausedSX() view returns (bool)",
                      "function isPausedStaking() view returns (bool)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setMaintenanceModeAll(bool isPaused)",
                      "function setMaintenanceModeSX(bool isPaused)",
                      "function setMaintenanceModeStaking(bool isPaused)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x0e3b146cbff5337a85bb6e275f20b9808cfaa84912c38d9f9b16f58d31860a35",
                    "deployedOn": "run.synthetix"
                  },
                  "FlexibleStorage": {
                    "address": "0xc757aCBa3c0506218b3022266a9DC7F3612d85f5",
                    "sourceName": "contracts/FlexibleStorage.sol",
                    "contractName": "FlexibleStorage",
                    "abi": [
                      "constructor(address _resolver)",
                      "event KeyMigrated(bytes32 fromContractName, bytes32 toContractName, bool removeAccessFromPreviousContract)",
                      "event ValueDeletedAddress(bytes32 contractName, bytes32 record, address value)",
                      "event ValueDeletedBool(bytes32 contractName, bytes32 record, bool value)",
                      "event ValueDeletedBytes32(bytes32 contractName, bytes32 record, bytes32 value)",
                      "event ValueDeletedInt(bytes32 contractName, bytes32 record, int256 value)",
                      "event ValueDeletedUInt(bytes32 contractName, bytes32 record, uint256 value)",
                      "event ValueSetAddress(bytes32 contractName, bytes32 record, address value)",
                      "event ValueSetBool(bytes32 contractName, bytes32 record, bool value)",
                      "event ValueSetBytes32(bytes32 contractName, bytes32 record, bytes32 value)",
                      "event ValueSetInt(bytes32 contractName, bytes32 record, int256 value)",
                      "event ValueSetUInt(bytes32 contractName, bytes32 record, uint256 value)",
                      "function deleteAddressValue(bytes32 contractName, bytes32 record)",
                      "function deleteBoolValue(bytes32 contractName, bytes32 record)",
                      "function deleteBytes32Value(bytes32 contractName, bytes32 record)",
                      "function deleteIntValue(bytes32 contractName, bytes32 record)",
                      "function deleteUIntValue(bytes32 contractName, bytes32 record)",
                      "function getAddressValue(bytes32 contractName, bytes32 record) view returns (address)",
                      "function getAddressValues(bytes32 contractName, bytes32[] records) view returns (address[])",
                      "function getBoolValue(bytes32 contractName, bytes32 record) view returns (bool)",
                      "function getBoolValues(bytes32 contractName, bytes32[] records) view returns (bool[])",
                      "function getBytes32Value(bytes32 contractName, bytes32 record) view returns (bytes32)",
                      "function getBytes32Values(bytes32 contractName, bytes32[] records) view returns (bytes32[])",
                      "function getIntValue(bytes32 contractName, bytes32 record) view returns (int256)",
                      "function getIntValues(bytes32 contractName, bytes32[] records) view returns (int256[])",
                      "function getUIntValue(bytes32 contractName, bytes32 record) view returns (uint256)",
                      "function getUIntValues(bytes32 contractName, bytes32[] records) view returns (uint256[])",
                      "function hashes(bytes32) view returns (bytes32)",
                      "function migrateContractKey(bytes32 fromContractName, bytes32 toContractName, bool removeAccessFromPreviousContract)",
                      "function resolverProxy() view returns (address)",
                      "function setAddressValue(bytes32 contractName, bytes32 record, address value)",
                      "function setAddressValues(bytes32 contractName, bytes32[] records, address[] values)",
                      "function setBoolValue(bytes32 contractName, bytes32 record, bool value)",
                      "function setBoolValues(bytes32 contractName, bytes32[] records, bool[] values)",
                      "function setBytes32Value(bytes32 contractName, bytes32 record, bytes32 value)",
                      "function setBytes32Values(bytes32 contractName, bytes32[] records, bytes32[] values)",
                      "function setIntValue(bytes32 contractName, bytes32 record, int256 value)",
                      "function setIntValues(bytes32 contractName, bytes32[] records, int256[] values)",
                      "function setUIntValue(bytes32 contractName, bytes32 record, uint256 value)",
                      "function setUIntValues(bytes32 contractName, bytes32[] records, uint256[] values)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SystemSettings": {
                    "address": "0x202ae40Bed1640b09e2AF7aC5719D129A498B7C8",
                    "sourceName": "contracts/SystemSettings.sol",
                    "contractName": "SystemSettings",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event AggregatorWarningFlagsUpdated(address flags)",
                      "event AtomicEquivalentForDexPricingUpdated(bytes32 synthKey, address equivalent)",
                      "event AtomicExchangeFeeUpdated(bytes32 synthKey, uint256 newExchangeFeeRate)",
                      "event AtomicMaxVolumePerBlockUpdated(uint256 newMaxVolume)",
                      "event AtomicTwapWindowUpdated(uint256 newWindow)",
                      "event AtomicVolatilityConsiderationWindowUpdated(bytes32 synthKey, uint256 newVolatilityConsiderationWindow)",
                      "event AtomicVolatilityUpdateThresholdUpdated(bytes32 synthKey, uint256 newVolatilityUpdateThreshold)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event CollapseFeeRateUpdated(uint256 collapseFeeRate)",
                      "event CrossChainSynthTransferEnabledUpdated(bytes32 synthKey, uint256 value)",
                      "event CrossDomainMessageGasLimitChanged(uint8 gasLimitType, uint256 newLimit)",
                      "event DebtSnapshotStaleTimeUpdated(uint256 debtSnapshotStaleTime)",
                      "event EtherWrapperBurnFeeRateUpdated(uint256 rate)",
                      "event EtherWrapperMaxETHUpdated(uint256 maxETH)",
                      "event EtherWrapperMintFeeRateUpdated(uint256 rate)",
                      "event ExchangeDynamicFeeRoundsUpdated(uint256 dynamicFeeRounds)",
                      "event ExchangeDynamicFeeThresholdUpdated(uint256 dynamicFeeThreshold)",
                      "event ExchangeDynamicFeeWeightDecayUpdated(uint256 dynamicFeeWeightDecay)",
                      "event ExchangeFeeUpdated(bytes32 synthKey, uint256 newExchangeFeeRate)",
                      "event ExchangeMaxDynamicFeeUpdated(uint256 maxDynamicFee)",
                      "event FeePeriodDurationUpdated(uint256 newFeePeriodDuration)",
                      "event FlagRewardUpdated(uint256 newReward)",
                      "event InteractionDelayUpdated(uint256 interactionDelay)",
                      "event IssuanceRatioUpdated(uint256 newRatio)",
                      "event LiquidateRewardUpdated(uint256 newReward)",
                      "event LiquidationDelayUpdated(uint256 newDelay)",
                      "event LiquidationEscrowDurationUpdated(uint256 newDuration)",
                      "event LiquidationPenaltyUpdated(uint256 newPenalty)",
                      "event LiquidationRatioUpdated(uint256 newRatio)",
                      "event MinimumStakeTimeUpdated(uint256 minimumStakeTime)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PriceDeviationThresholdUpdated(uint256 threshold)",
                      "event PureChainlinkPriceForAtomicSwapsEnabledUpdated(bytes32 synthKey, bool enabled)",
                      "event RateStalePeriodUpdated(uint256 rateStalePeriod)",
                      "event SelfLiquidationPenaltyUpdated(uint256 newPenalty)",
                      "event SnxLiquidationPenaltyUpdated(uint256 newPenalty)",
                      "event TargetThresholdUpdated(uint256 newTargetThreshold)",
                      "event TradingRewardsEnabled(bool enabled)",
                      "event WaitingPeriodSecsUpdated(uint256 waitingPeriodSecs)",
                      "event WrapperBurnFeeRateUpdated(address wrapper, int256 rate)",
                      "event WrapperMaxTokenAmountUpdated(address wrapper, uint256 maxTokenAmount)",
                      "event WrapperMintFeeRateUpdated(address wrapper, int256 rate)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function aggregatorWarningFlags() view returns (address)",
                      "function atomicEquivalentForDexPricing(bytes32 currencyKey) view returns (address)",
                      "function atomicExchangeFeeRate(bytes32 currencyKey) view returns (uint256)",
                      "function atomicMaxVolumePerBlock() view returns (uint256)",
                      "function atomicTwapWindow() view returns (uint256)",
                      "function atomicVolatilityConsiderationWindow(bytes32 currencyKey) view returns (uint256)",
                      "function atomicVolatilityUpdateThreshold(bytes32 currencyKey) view returns (uint256)",
                      "function collapseFeeRate(address collateral) view returns (uint256)",
                      "function crossChainSynthTransferEnabled(bytes32 currencyKey) view returns (uint256)",
                      "function crossDomainMessageGasLimit(uint8 gasLimitType) view returns (uint256)",
                      "function debtSnapshotStaleTime() view returns (uint256)",
                      "function etherWrapperBurnFeeRate() view returns (uint256)",
                      "function etherWrapperMaxETH() view returns (uint256)",
                      "function etherWrapperMintFeeRate() view returns (uint256)",
                      "function exchangeDynamicFeeRounds() view returns (uint256)",
                      "function exchangeDynamicFeeThreshold() view returns (uint256)",
                      "function exchangeDynamicFeeWeightDecay() view returns (uint256)",
                      "function exchangeFeeRate(bytes32 currencyKey) view returns (uint256)",
                      "function exchangeMaxDynamicFee() view returns (uint256)",
                      "function feePeriodDuration() view returns (uint256)",
                      "function flagReward() view returns (uint256)",
                      "function interactionDelay(address collateral) view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function issuanceRatio() view returns (uint256)",
                      "function liquidateReward() view returns (uint256)",
                      "function liquidationDelay() view returns (uint256)",
                      "function liquidationEscrowDuration() view returns (uint256)",
                      "function liquidationPenalty() view returns (uint256)",
                      "function liquidationRatio() view returns (uint256)",
                      "function minimumStakeTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function priceDeviationThresholdFactor() view returns (uint256)",
                      "function pureChainlinkPriceForAtomicSwapsEnabled(bytes32 currencyKey) view returns (bool)",
                      "function rateStalePeriod() view returns (uint256)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function selfLiquidationPenalty() view returns (uint256)",
                      "function setAggregatorWarningFlags(address _flags)",
                      "function setAtomicEquivalentForDexPricing(bytes32 _currencyKey, address _equivalent)",
                      "function setAtomicExchangeFeeRate(bytes32 _currencyKey, uint256 _exchangeFeeRate)",
                      "function setAtomicMaxVolumePerBlock(uint256 _maxVolume)",
                      "function setAtomicTwapWindow(uint256 _window)",
                      "function setAtomicVolatilityConsiderationWindow(bytes32 _currencyKey, uint256 _window)",
                      "function setAtomicVolatilityUpdateThreshold(bytes32 _currencyKey, uint256 _threshold)",
                      "function setCollapseFeeRate(address _collateral, uint256 _collapseFeeRate)",
                      "function setCrossChainSynthTransferEnabled(bytes32 _currencyKey, uint256 _value)",
                      "function setCrossDomainMessageGasLimit(uint8 _gasLimitType, uint256 _crossDomainMessageGasLimit)",
                      "function setDebtSnapshotStaleTime(uint256 _seconds)",
                      "function setEtherWrapperBurnFeeRate(uint256 _rate)",
                      "function setEtherWrapperMaxETH(uint256 _maxETH)",
                      "function setEtherWrapperMintFeeRate(uint256 _rate)",
                      "function setExchangeDynamicFeeRounds(uint256 rounds)",
                      "function setExchangeDynamicFeeThreshold(uint256 threshold)",
                      "function setExchangeDynamicFeeWeightDecay(uint256 weightDecay)",
                      "function setExchangeFeeRateForSynths(bytes32[] synthKeys, uint256[] exchangeFeeRates)",
                      "function setExchangeMaxDynamicFee(uint256 maxFee)",
                      "function setFeePeriodDuration(uint256 _feePeriodDuration)",
                      "function setFlagReward(uint256 reward)",
                      "function setInteractionDelay(address _collateral, uint256 _interactionDelay)",
                      "function setIssuanceRatio(uint256 ratio)",
                      "function setLiquidateReward(uint256 reward)",
                      "function setLiquidationDelay(uint256 time)",
                      "function setLiquidationEscrowDuration(uint256 duration)",
                      "function setLiquidationPenalty(uint256 penalty)",
                      "function setLiquidationRatio(uint256 _liquidationRatio)",
                      "function setMinimumStakeTime(uint256 _seconds)",
                      "function setPriceDeviationThresholdFactor(uint256 _priceDeviationThresholdFactor)",
                      "function setPureChainlinkPriceForAtomicSwapsEnabled(bytes32 _currencyKey, bool _enabled)",
                      "function setRateStalePeriod(uint256 period)",
                      "function setSelfLiquidationPenalty(uint256 penalty)",
                      "function setSnxLiquidationPenalty(uint256 penalty)",
                      "function setTargetThreshold(uint256 percent)",
                      "function setTradingRewardsEnabled(bool _tradingRewardsEnabled)",
                      "function setWaitingPeriodSecs(uint256 _waitingPeriodSecs)",
                      "function setWrapperBurnFeeRate(address _wrapper, int256 _rate)",
                      "function setWrapperMaxTokenAmount(address _wrapper, uint256 _maxTokenAmount)",
                      "function setWrapperMintFeeRate(address _wrapper, int256 _rate)",
                      "function snxLiquidationPenalty() view returns (uint256)",
                      "function targetThreshold() view returns (uint256)",
                      "function tradingRewardsEnabled() view returns (bool)",
                      "function waitingPeriodSecs() view returns (uint256)",
                      "function wrapperBurnFeeRate(address wrapper) view returns (int256)",
                      "function wrapperMaxTokenAmount(address wrapper) view returns (uint256)",
                      "function wrapperMintFeeRate(address wrapper) view returns (int256)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xac49bca0d7f9ab08ac68ad03d2619d3334f639f234c84c6a539b1a5a2935846e",
                    "deployedOn": "run.synthetix"
                  },
                  "TradingRewards": {
                    "address": "0x62922670313bf6b41C580143d1f6C173C5C20019",
                    "sourceName": "contracts/TradingRewards.sol",
                    "contractName": "TradingRewards",
                    "abi": [
                      "constructor(address owner, address periodController, address resolver)",
                      "event AssignedRewardTokensRecovered(address recoverAddress, uint256 amount, uint256 periodID)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event ExchangeFeeRecorded(address indexed account, uint256 amount, uint256 periodID)",
                      "event NewPeriodStarted(uint256 periodID)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event PeriodControllerChanged(address newPeriodController)",
                      "event PeriodFinalizedWithRewards(uint256 periodID, uint256 rewards)",
                      "event RewardsClaimed(address indexed account, uint256 amount, uint256 periodID)",
                      "event TokensRecovered(address tokenAddress, address recoverAddress, uint256 amount)",
                      "event UnassignedRewardTokensRecovered(address recoverAddress, uint256 amount)",
                      "function acceptOwnership()",
                      "function claimRewardsForPeriod(uint256 periodID)",
                      "function claimRewardsForPeriods(uint256[] periodIDs)",
                      "function closeCurrentPeriodWithRewards(uint256 rewards)",
                      "function getAvailableRewards() view returns (uint256)",
                      "function getAvailableRewardsForAccountForPeriod(address account, uint256 periodID) view returns (uint256)",
                      "function getAvailableRewardsForAccountForPeriods(address account, uint256[] periodIDs) view returns (uint256 totalRewards)",
                      "function getCurrentPeriod() view returns (uint256)",
                      "function getPeriodAvailableRewards(uint256 periodID) view returns (uint256)",
                      "function getPeriodController() view returns (address)",
                      "function getPeriodIsClaimable(uint256 periodID) view returns (bool)",
                      "function getPeriodIsFinalized(uint256 periodID) view returns (bool)",
                      "function getPeriodRecordedFees(uint256 periodID) view returns (uint256)",
                      "function getPeriodTotalRewards(uint256 periodID) view returns (uint256)",
                      "function getRewardsToken() view returns (address)",
                      "function getUnaccountedFeesForAccountForPeriod(address account, uint256 periodID) view returns (uint256)",
                      "function getUnassignedRewards() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function lastPauseTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function rebuildCache()",
                      "function recordExchangeFeeForAccount(uint256 usdFeeAmount, address account)",
                      "function recoverAssignedRewardTokensAndDestroyPeriod(address recoverAddress, uint256 periodID)",
                      "function recoverTokens(address tokenAddress, address recoverAddress)",
                      "function recoverUnassignedRewardTokens(address recoverAddress)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setPaused(bool _paused)",
                      "function setPeriodController(address newPeriodController)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x5a27b38498e8d90883735f65be1745f26f9237bdc2dc3fa135c564c90c07bfa8",
                    "deployedOn": "run.synthetix"
                  },
                  "DebtCache": {
                    "address": "0xd1cad1A569E70d2Df4C8ed43d3cC93DBE16285dE",
                    "sourceName": "contracts/DebtCache.sol",
                    "contractName": "DebtCache",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event DebtCacheSnapshotTaken(uint256 timestamp)",
                      "event DebtCacheUpdated(uint256 cachedDebt)",
                      "event DebtCacheValidityChanged(bool indexed isInvalid)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function cacheInfo() view returns (uint256 debt, uint256 timestamp, bool isInvalid, bool isStale)",
                      "function cacheInvalid() view returns (bool)",
                      "function cacheStale() view returns (bool)",
                      "function cacheTimestamp() view returns (uint256)",
                      "function cachedDebt() view returns (uint256)",
                      "function cachedSynthDebt(bytes32 currencyKey) view returns (uint256)",
                      "function cachedSynthDebts(bytes32[] currencyKeys) view returns (uint256[] snxIssuedDebts)",
                      "function currentDebt() view returns (uint256 debt, bool anyRateIsInvalid)",
                      "function currentSynthDebts(bytes32[] currencyKeys) view returns (uint256[] debtValues, uint256 futuresDebt, uint256 excludedDebt, bool anyRateIsInvalid)",
                      "function debtSnapshotStaleTime() view returns (uint256)",
                      "function excludedIssuedDebts(bytes32[] currencyKeys) view returns (uint256[] excludedDebts)",
                      "function importExcludedIssuedDebts(address prevDebtCache, address prevIssuer)",
                      "function isInitialized() view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function purgeCachedSynthDebt(bytes32 currencyKey)",
                      "function rebuildCache()",
                      "function recordExcludedDebtChange(bytes32 currencyKey, int256 delta)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function takeDebtSnapshot()",
                      "function totalNonSnxBackedDebt() view returns (uint256 excludedDebt, bool isInvalid)",
                      "function updateCachedSynthDebtWithRate(bytes32 currencyKey, uint256 currencyRate)",
                      "function updateCachedSynthDebts(bytes32[] currencyKeys)",
                      "function updateCachedSynthDebtsWithRates(bytes32[] currencyKeys, uint256[] currencyRates)",
                      "function updateCachedsUSDDebt(int256 amount)",
                      "function updateDebtCacheValidity(bool currentlyInvalid)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xea3f7f9b7d76dd042eeb937e0b552693678f8b5bdc1c3c585051d5a248e4e8b1",
                    "deployedOn": "run.synthetix"
                  },
                  "CollateralManagerState": {
                    "address": "0x573E5105c4B92416D1544A188F1bf77d442Bb52d",
                    "sourceName": "contracts/CollateralManagerState.sol",
                    "contractName": "CollateralManagerState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function addShortCurrency(bytes32 currency)",
                      "function associatedContract() view returns (address)",
                      "function borrowRates(uint256) view returns (uint256)",
                      "function borrowRatesLastUpdated() view returns (uint256)",
                      "function decrementLongs(bytes32 synth, uint256 amount)",
                      "function decrementShorts(bytes32 synth, uint256 amount)",
                      "function getRateAt(uint256 index) view returns (uint256)",
                      "function getRatesAndTime(uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)",
                      "function getRatesLength() view returns (uint256)",
                      "function getShortRatesAndTime(bytes32 currency, uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)",
                      "function getShortRatesLength(bytes32 currency) view returns (uint256)",
                      "function incrementLongs(bytes32 synth, uint256 amount)",
                      "function incrementShorts(bytes32 synth, uint256 amount)",
                      "function incrementTotalLoans() returns (uint256)",
                      "function long(bytes32 synth) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function ratesLastUpdated() view returns (uint256)",
                      "function removeShortCurrency(bytes32 currency)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function short(bytes32 synth) view returns (uint256)",
                      "function shortRates(bytes32, uint256) view returns (uint256)",
                      "function shortRatesLastUpdated(bytes32) view returns (uint256)",
                      "function totalIssuedSynths(bytes32) view returns (uint256 long, uint256 short)",
                      "function totalLoans() view returns (uint256)",
                      "function updateBorrowRates(uint256 rate)",
                      "function updateShortRates(bytes32 currency, uint256 rate)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x483a0231282bdf448efedd143f2aa6f4067c6fdc72dba2f72a1f23b18a19dbe5",
                    "deployedOn": "run.synthetix"
                  },
                  "CollateralManager": {
                    "address": "0x067e398605E84F2D0aEEC1806e62768C5110DCc6",
                    "sourceName": "contracts/CollateralManager.sol",
                    "contractName": "CollateralManager",
                    "abi": [
                      "constructor(address _state, address _owner, address _resolver, uint256 _maxDebt, uint256 _baseBorrowRate, uint256 _baseShortRate)",
                      "event BaseBorrowRateUpdated(uint256 baseBorrowRate)",
                      "event BaseShortRateUpdated(uint256 baseShortRate)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event CollateralAdded(address collateral)",
                      "event CollateralRemoved(address collateral)",
                      "event LiquidationPenaltyUpdated(uint256 liquidationPenalty)",
                      "event MaxDebtUpdated(uint256 maxDebt)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event ShortableSynthAdded(bytes32 synth)",
                      "event ShortableSynthRemoved(bytes32 synth)",
                      "event SynthAdded(bytes32 synth)",
                      "event SynthRemoved(bytes32 synth)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function addCollaterals(address[] collaterals)",
                      "function addShortableSynths(bytes32[2][] requiredSynthAndInverseNamesInResolver, bytes32[] synthKeys)",
                      "function addSynths(bytes32[] synthNamesInResolver, bytes32[] synthKeys)",
                      "function areShortableSynthsSet(bytes32[] requiredSynthNamesInResolver, bytes32[] synthKeys) view returns (bool)",
                      "function areSynthsAndCurrenciesSet(bytes32[] requiredSynthNamesInResolver, bytes32[] synthKeys) view returns (bool)",
                      "function baseBorrowRate() view returns (uint256)",
                      "function baseShortRate() view returns (uint256)",
                      "function decrementLongs(bytes32 synth, uint256 amount)",
                      "function decrementShorts(bytes32 synth, uint256 amount)",
                      "function exceedsDebtLimit(uint256 amount, bytes32 currency) view returns (bool canIssue, bool anyRateIsInvalid)",
                      "function getBorrowRate() view returns (uint256 borrowRate, bool anyRateIsInvalid)",
                      "function getNewLoanId() returns (uint256 id)",
                      "function getRatesAndTime(uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)",
                      "function getShortRate(bytes32 synth) view returns (uint256 shortRate, bool rateIsInvalid)",
                      "function getShortRatesAndTime(bytes32 currency, uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)",
                      "function hasAllCollaterals(address[] collaterals) view returns (bool)",
                      "function hasCollateral(address collateral) view returns (bool)",
                      "function incrementLongs(bytes32 synth, uint256 amount)",
                      "function incrementShorts(bytes32 synth, uint256 amount)",
                      "function isResolverCached() view returns (bool)",
                      "function isSynthManaged(bytes32 currencyKey) view returns (bool)",
                      "function lastPauseTime() view returns (uint256)",
                      "function long(bytes32 synth) view returns (uint256 amount)",
                      "function maxDebt() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function rebuildCache()",
                      "function removeCollaterals(address[] collaterals)",
                      "function removeShortableSynths(bytes32[] synths)",
                      "function removeSynths(bytes32[] synths, bytes32[] synthKeys)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setBaseBorrowRate(uint256 _baseBorrowRate)",
                      "function setBaseShortRate(uint256 _baseShortRate)",
                      "function setMaxDebt(uint256 _maxDebt)",
                      "function setPaused(bool _paused)",
                      "function setUtilisationMultiplier(uint256 _utilisationMultiplier)",
                      "function short(bytes32 synth) view returns (uint256 amount)",
                      "function state() view returns (address)",
                      "function synthToInverseSynth(bytes32) view returns (bytes32)",
                      "function synthsByKey(bytes32) view returns (bytes32)",
                      "function totalLong() view returns (uint256 susdValue, bool anyRateIsInvalid)",
                      "function totalShort() view returns (uint256 susdValue, bool anyRateIsInvalid)",
                      "function updateBorrowRates(uint256 rate)",
                      "function updateShortRates(bytes32 currency, uint256 rate)",
                      "function utilisationMultiplier() view returns (uint256)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x61ff0be73c7ddeeee873cb21a90a51c05ffc4bbe29160ac510a700dfbc14e377",
                    "deployedOn": "run.synthetix"
                  },
                  "CollateralEth": {
                    "address": "0x5c8344bcdC38F1aB5EB5C1d4a35DdEeA522B5DfA",
                    "sourceName": "contracts/CollateralEth.sol",
                    "contractName": "CollateralEth",
                    "abi": [
                      "constructor(address _state, address _owner, address _manager, address _resolver, bytes32 _collateralKey, uint256 _minCratio, uint256 _minCollateral)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event CanOpenLoansUpdated(bool canOpenLoans)",
                      "event CollateralDeposited(address indexed account, uint256 id, uint256 amountDeposited, uint256 collateralAfter)",
                      "event CollateralWithdrawn(address indexed account, uint256 id, uint256 amountWithdrawn, uint256 collateralAfter)",
                      "event InteractionDelayUpdated(uint256 interactionDelay)",
                      "event IssueFeeRateUpdated(uint256 issueFeeRate)",
                      "event LoanClosed(address indexed account, uint256 id)",
                      "event LoanClosedByLiquidation(address indexed account, uint256 id, address indexed liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                      "event LoanCreated(address indexed account, uint256 id, uint256 amount, uint256 collateral, bytes32 currency, uint256 issuanceFee)",
                      "event LoanDrawnDown(address indexed account, uint256 id, uint256 amount)",
                      "event LoanPartiallyLiquidated(address indexed account, uint256 id, address liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                      "event LoanRepaymentMade(address indexed account, address indexed repayer, uint256 id, uint256 amountRepaid, uint256 amountAfter)",
                      "event ManagerUpdated(address manager)",
                      "event MaxLoansPerAccountUpdated(uint256 maxLoansPerAccount)",
                      "event MinCollateralUpdated(uint256 minCollateral)",
                      "event MinCratioRatioUpdated(uint256 minCratio)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function addRewardsContracts(address rewardsContract, bytes32 synth)",
                      "function addSynths(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys)",
                      "function areSynthsAndCurrenciesSet(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys) view returns (bool)",
                      "function canOpenLoans() view returns (bool)",
                      "function claim(uint256 amount)",
                      "function close(uint256 id)",
                      "function collateralKey() view returns (bytes32)",
                      "function collateralRatio(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 cratio)",
                      "function collateralRedeemed(bytes32 currency, uint256 amount) view returns (uint256 collateral)",
                      "function deposit(address borrower, uint256 id) payable",
                      "function draw(uint256 id, uint256 amount)",
                      "function interactionDelay() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function issueFeeRate() view returns (uint256)",
                      "function liquidate(address borrower, uint256 id, uint256 amount)",
                      "function liquidationAmount(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 amount)",
                      "function manager() view returns (address)",
                      "function maxLoan(uint256 amount, bytes32 currency) view returns (uint256 max)",
                      "function maxLoansPerAccount() view returns (uint256)",
                      "function minCollateral() view returns (uint256)",
                      "function minCratio() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function open(uint256 amount, bytes32 currency) payable",
                      "function owner() view returns (address)",
                      "function pendingWithdrawals(address) view returns (uint256)",
                      "function rebuildCache()",
                      "function repay(address account, uint256 id, uint256 amount)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setCanOpenLoans(bool _canOpenLoans)",
                      "function setInteractionDelay(uint256 _interactionDelay)",
                      "function setIssueFeeRate(uint256 _issueFeeRate)",
                      "function setManager(address _newManager)",
                      "function setMinCratio(uint256 _minCratio)",
                      "function shortingRewards(bytes32) view returns (address)",
                      "function state() view returns (address)",
                      "function synths(uint256) view returns (bytes32)",
                      "function synthsByKey(bytes32) view returns (bytes32)",
                      "function withdraw(uint256 id, uint256 withdrawAmount)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xcb3bfca19fb9d841cc43712ce3e568f794dd2d388507709fb7d0268e9e01cec2",
                    "deployedOn": "run.synthetix"
                  },
                  "CollateralErc20": {
                    "address": "0xaa03aB31b55DceEeF845C8d17890CC61cD98eD04",
                    "sourceName": "contracts/CollateralErc20.sol",
                    "contractName": "CollateralErc20",
                    "abi": [
                      "constructor(address _state, address _owner, address _manager, address _resolver, bytes32 _collateralKey, uint256 _minCratio, uint256 _minCollateral, address _underlyingContract, uint256 _underlyingDecimals)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event CanOpenLoansUpdated(bool canOpenLoans)",
                      "event CollateralDeposited(address indexed account, uint256 id, uint256 amountDeposited, uint256 collateralAfter)",
                      "event CollateralWithdrawn(address indexed account, uint256 id, uint256 amountWithdrawn, uint256 collateralAfter)",
                      "event InteractionDelayUpdated(uint256 interactionDelay)",
                      "event IssueFeeRateUpdated(uint256 issueFeeRate)",
                      "event LoanClosed(address indexed account, uint256 id)",
                      "event LoanClosedByLiquidation(address indexed account, uint256 id, address indexed liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                      "event LoanCreated(address indexed account, uint256 id, uint256 amount, uint256 collateral, bytes32 currency, uint256 issuanceFee)",
                      "event LoanDrawnDown(address indexed account, uint256 id, uint256 amount)",
                      "event LoanPartiallyLiquidated(address indexed account, uint256 id, address liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                      "event LoanRepaymentMade(address indexed account, address indexed repayer, uint256 id, uint256 amountRepaid, uint256 amountAfter)",
                      "event ManagerUpdated(address manager)",
                      "event MaxLoansPerAccountUpdated(uint256 maxLoansPerAccount)",
                      "event MinCollateralUpdated(uint256 minCollateral)",
                      "event MinCratioRatioUpdated(uint256 minCratio)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function addRewardsContracts(address rewardsContract, bytes32 synth)",
                      "function addSynths(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys)",
                      "function areSynthsAndCurrenciesSet(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys) view returns (bool)",
                      "function canOpenLoans() view returns (bool)",
                      "function close(uint256 id)",
                      "function collateralKey() view returns (bytes32)",
                      "function collateralRatio(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 cratio)",
                      "function collateralRedeemed(bytes32 currency, uint256 amount) view returns (uint256 collateral)",
                      "function deposit(address borrower, uint256 id, uint256 amount)",
                      "function draw(uint256 id, uint256 amount)",
                      "function interactionDelay() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function issueFeeRate() view returns (uint256)",
                      "function liquidate(address borrower, uint256 id, uint256 amount)",
                      "function liquidationAmount(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 amount)",
                      "function manager() view returns (address)",
                      "function maxLoan(uint256 amount, bytes32 currency) view returns (uint256 max)",
                      "function maxLoansPerAccount() view returns (uint256)",
                      "function minCollateral() view returns (uint256)",
                      "function minCratio() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function open(uint256 collateral, uint256 amount, bytes32 currency)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function repay(address borrower, uint256 id, uint256 amount)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function scaleDownCollateral(uint256 collateral) view returns (uint256 scaledDown)",
                      "function scaleUpCollateral(uint256 collateral) view returns (uint256 scaledUp)",
                      "function setCanOpenLoans(bool _canOpenLoans)",
                      "function setInteractionDelay(uint256 _interactionDelay)",
                      "function setIssueFeeRate(uint256 _issueFeeRate)",
                      "function setManager(address _newManager)",
                      "function setMinCratio(uint256 _minCratio)",
                      "function shortingRewards(bytes32) view returns (address)",
                      "function state() view returns (address)",
                      "function synths(uint256) view returns (bytes32)",
                      "function synthsByKey(bytes32) view returns (bytes32)",
                      "function underlyingContract() view returns (address)",
                      "function underlyingContractDecimals() view returns (uint256)",
                      "function withdraw(uint256 id, uint256 amount)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x751eb0cc4a5b2f994bcca8368159e4df951f4a0fbe16a5d00c0b9655bad1f0fe",
                    "deployedOn": "run.synthetix"
                  },
                  "CollateralShort": {
                    "address": "0x1F2c3a1046c32729862fcB038369696e3273a516",
                    "sourceName": "contracts/CollateralShort.sol",
                    "contractName": "CollateralShort",
                    "abi": [
                      "constructor(address _state, address _owner, address _manager, address _resolver, bytes32 _collateralKey, uint256 _minCratio, uint256 _minCollateral)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event CanOpenLoansUpdated(bool canOpenLoans)",
                      "event CollateralDeposited(address indexed account, uint256 id, uint256 amountDeposited, uint256 collateralAfter)",
                      "event CollateralWithdrawn(address indexed account, uint256 id, uint256 amountWithdrawn, uint256 collateralAfter)",
                      "event InteractionDelayUpdated(uint256 interactionDelay)",
                      "event IssueFeeRateUpdated(uint256 issueFeeRate)",
                      "event LoanClosed(address indexed account, uint256 id)",
                      "event LoanClosedByLiquidation(address indexed account, uint256 id, address indexed liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                      "event LoanCreated(address indexed account, uint256 id, uint256 amount, uint256 collateral, bytes32 currency, uint256 issuanceFee)",
                      "event LoanDrawnDown(address indexed account, uint256 id, uint256 amount)",
                      "event LoanPartiallyLiquidated(address indexed account, uint256 id, address liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                      "event LoanRepaymentMade(address indexed account, address indexed repayer, uint256 id, uint256 amountRepaid, uint256 amountAfter)",
                      "event ManagerUpdated(address manager)",
                      "event MaxLoansPerAccountUpdated(uint256 maxLoansPerAccount)",
                      "event MinCollateralUpdated(uint256 minCollateral)",
                      "event MinCratioRatioUpdated(uint256 minCratio)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function addRewardsContracts(address rewardsContract, bytes32 synth)",
                      "function addSynths(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys)",
                      "function areSynthsAndCurrenciesSet(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys) view returns (bool)",
                      "function canOpenLoans() view returns (bool)",
                      "function close(uint256 id)",
                      "function collateralKey() view returns (bytes32)",
                      "function collateralRatio(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 cratio)",
                      "function collateralRedeemed(bytes32 currency, uint256 amount) view returns (uint256 collateral)",
                      "function deposit(address borrower, uint256 id, uint256 amount)",
                      "function draw(uint256 id, uint256 amount)",
                      "function getReward(bytes32 currency, address account)",
                      "function interactionDelay() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function issueFeeRate() view returns (uint256)",
                      "function liquidate(address borrower, uint256 id, uint256 amount)",
                      "function liquidationAmount(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 amount)",
                      "function manager() view returns (address)",
                      "function maxLoan(uint256 amount, bytes32 currency) view returns (uint256 max)",
                      "function maxLoansPerAccount() view returns (uint256)",
                      "function minCollateral() view returns (uint256)",
                      "function minCratio() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function open(uint256 collateral, uint256 amount, bytes32 currency)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function repay(address borrower, uint256 id, uint256 amount)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setCanOpenLoans(bool _canOpenLoans)",
                      "function setInteractionDelay(uint256 _interactionDelay)",
                      "function setIssueFeeRate(uint256 _issueFeeRate)",
                      "function setManager(address _newManager)",
                      "function setMinCratio(uint256 _minCratio)",
                      "function shortingRewards(bytes32) view returns (address)",
                      "function state() view returns (address)",
                      "function synths(uint256) view returns (bytes32)",
                      "function synthsByKey(bytes32) view returns (bytes32)",
                      "function withdraw(uint256 id, uint256 amount)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x2fd795c484f9734377526c4ce1656ed416ebb8c954609fdf724c1b3a673af727",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssEURCurve": {
                    "address": "0xc0d8994Cd78eE1980885DF1A0C5470fC977b5cFe",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "RewardEscrowV2": {
                    "address": "0xFAd53Cc9480634563E8ec71E8e693Ffd07981d38",
                    "sourceName": "contracts/RewardEscrowV2.sol",
                    "contractName": "RewardEscrowV2",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event AccountMerged(address indexed accountToMerge, address destinationAddress, uint256 escrowAmountMerged, uint256[] entryIDs, uint256 time)",
                      "event AccountMergingDurationUpdated(uint256 newDuration)",
                      "event AccountMergingStarted(uint256 time, uint256 endTime)",
                      "event BurnedForMigrationToL2(address indexed account, uint256[] entryIDs, uint256 escrowedAmountMigrated, uint256 time)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event MaxAccountMergingDurationUpdated(uint256 newDuration)",
                      "event MaxEscrowDurationUpdated(uint256 newDuration)",
                      "event NominateAccountToMerge(address indexed account, address destination)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Revoked(address indexed account, address indexed recipient, uint256 targetAmount, uint256 startIndex, uint256 endIndex)",
                      "event Vested(address indexed beneficiary, uint256 time, uint256 value)",
                      "event VestingEntryCreated(address indexed beneficiary, uint256 time, uint256 value, uint256 duration, uint256 entryID)",
                      "function acceptOwnership()",
                      "function accountMergingDuration() view returns (uint256)",
                      "function accountMergingIsOpen() view returns (bool)",
                      "function accountMergingStartTime() view returns (uint256)",
                      "function accountVestingEntryIDs(address account, uint256 index) view returns (uint256)",
                      "function appendVestingEntry(address account, uint256 quantity, uint256 duration)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burnForMigration(address account, uint256[] entryIDs) returns (uint256 escrowedAccountBalance, tuple(uint64 endTime, uint256 escrowAmount)[] vestingEntries)",
                      "function createEscrowEntry(address beneficiary, uint256 deposit, uint256 duration)",
                      "function getAccountVestingEntryIDs(address account, uint256 index, uint256 pageSize) view returns (uint256[])",
                      "function getVestingEntry(address account, uint256 entryID) view returns (uint64 endTime, uint256 escrowAmount)",
                      "function getVestingEntryClaimable(address account, uint256 entryID) view returns (uint256)",
                      "function getVestingQuantity(address account, uint256[] entryIDs) view returns (uint256 total)",
                      "function getVestingSchedules(address account, uint256 index, uint256 pageSize) view returns (tuple(uint64 endTime, uint256 escrowAmount, uint256 entryID)[])",
                      "function importVestingEntries(address, uint256, tuple(uint64 endTime, uint256 escrowAmount)[])",
                      "function isResolverCached() view returns (bool)",
                      "function maxAccountMergingDuration() view returns (uint256)",
                      "function max_duration() view returns (uint256)",
                      "function mergeAccount(address from, uint256[] entryIDs)",
                      "function migrateAccountEscrowBalances(address[], uint256[], uint256[])",
                      "function migrateVestingSchedule(address)",
                      "function nextEntryId() view returns (uint256)",
                      "function nominateAccountToMerge(address account)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function nominatedReceiver(address) view returns (address)",
                      "function numVestingEntries(address account) view returns (uint256)",
                      "function owner() view returns (address)",
                      "function permittedEscrowCreators(address) view returns (bool)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function revokeFrom(address account, address recipient, uint256 targetAmount, uint256 startIndex)",
                      "function setAccountMergingDuration(uint256 duration)",
                      "function setMaxAccountMergingWindow(uint256 duration)",
                      "function setMaxEscrowDuration(uint256 duration)",
                      "function setPermittedEscrowCreator(address creator, bool permitted)",
                      "function setupExpiryTime() view returns (uint256)",
                      "function startMergingWindow()",
                      "function totalEscrowedAccountBalance(address account) view returns (uint256)",
                      "function totalEscrowedBalance() view returns (uint256)",
                      "function totalVestedAccountBalance(address account) view returns (uint256)",
                      "function vest(uint256[] entryIDs)",
                      "function vestingSchedules(address account, uint256 entryId) view returns (tuple(uint64 endTime, uint256 escrowAmount))"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x8fa41447c18ee6493f37145f25be9e3eb205f528023b4a8a360897a12db6c265",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthetixBridgeToOptimism": {
                    "address": "0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F",
                    "sourceName": "contracts/SynthetixBridgeToOptimism.sol",
                    "contractName": "SynthetixBridgeToOptimism",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event DepositInitiated(address indexed _from, address _to, uint256 _amount)",
                      "event ExportedVestingEntries(address indexed account, uint256 escrowedAccountBalance, tuple(uint64 endTime, uint256 escrowAmount)[] vestingEntries)",
                      "event FeePeriodClosed(uint256 snxBackedDebt, uint256 totalDebtShares)",
                      "event FinalizeSynthTransfer(bytes32 indexed currencyKey, address indexed destination, uint256 amount)",
                      "event InitiateSynthTransfer(bytes32 indexed currencyKey, address indexed destination, uint256 amount)",
                      "event InitiationResumed()",
                      "event InitiationSuspended()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event RewardDepositInitiated(address indexed account, uint256 amount)",
                      "event WithdrawalFinalized(address indexed _to, uint256 _amount)",
                      "function CONTRACT_NAME() pure returns (bytes32)",
                      "function acceptOwnership()",
                      "function closeFeePeriod(uint256 snxBackedAmount, uint256 totalDebtShares)",
                      "function deposit(uint256 amount)",
                      "function depositAndMigrateEscrow(uint256 depositAmount, uint256[][] entryIDs)",
                      "function depositReward(uint256 amount)",
                      "function depositTo(address to, uint256 amount)",
                      "function finalizeSynthTransfer(bytes32 currencyKey, address destination, uint256 amount)",
                      "function finalizeWithdrawal(address to, uint256 amount)",
                      "function forwardTokensToEscrow(address token)",
                      "function initiateSynthTransfer(bytes32 currencyKey, address destination, uint256 amount)",
                      "function initiationActive() view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function migrateEscrow(uint256[][] entryIDs)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 amount)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function resumeInitiation()",
                      "function suspendInitiation()",
                      "function synthTransferReceived() view returns (uint256)",
                      "function synthTransferSent() view returns (uint256)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xec9ece48ccf29124a84515f1f75dc92e513f8f290816be97355a6a00adbdaa3b",
                    "deployedOn": "run.synthetix"
                  },
                  "ShortingRewardssETH": {
                    "address": "0x12DC1273915A16ab8BD47bA7866B240c253e4c12",
                    "sourceName": "contracts/ShortingRewards.sol",
                    "contractName": "ShortingRewards",
                    "abi": [
                      "constructor(address _owner, address _resolver, address _rewardsDistribution, address _rewardsToken)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Enrol(address indexed user, uint256 amount)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function enrol(address account, uint256 amount)",
                      "function getReward(address account)",
                      "function getRewardForDuration() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function totalSupply() view returns (uint256)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(address account, uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ShortingRewardssBTC": {
                    "address": "0xCed4055b47cfD0421f3727a35F69CE659c8bAF7a",
                    "sourceName": "contracts/ShortingRewards.sol",
                    "contractName": "ShortingRewards",
                    "abi": [
                      "constructor(address _owner, address _resolver, address _rewardsDistribution, address _rewardsToken)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Enrol(address indexed user, uint256 amount)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function enrol(address account, uint256 amount)",
                      "function getReward(address account)",
                      "function getRewardForDuration() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function totalSupply() view returns (uint256)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(address account, uint256 amount)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x632352d3042156b94c179a71a56de841255fc7d7fcf829f3ff40ae53e2f439d0",
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesAAVE": {
                    "address": "0x9BcED8A8E3Ad81c9b146FFC880358f734A06f7c0",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysAAVE": {
                    "address": "0xd2dF355C19471c8bd7D8A3aa27Ff4e26A21b4076",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsAAVE": {
                    "address": "0x942Eb6e8c029EB22103743C99985aF4F4515a559",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesDOT": {
                    "address": "0x73B1a2643507Cd30F11Dfcf2D974f4373E5BC077",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysDOT": {
                    "address": "0x1715AC0743102BF5Cd58EfBB6Cf2dC2685d967b6",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsDOT": {
                    "address": "0x75A0c1597137AA36B40b6a515D997F9a6c6eefEB",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssTSLABalancer": {
                    "address": "0xF0de877F2F9E7A60767f9BA662F10751566AD01c",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x297b5534a231c8e7544c3b12900bf97b2f3cddea114b47425cb5b24c5711886f",
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesKRW": {
                    "address": "0x93B6e9FbBd2c32a0DC3C2B943B7C3CBC2fE23730",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysKRW": {
                    "address": "0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsKRW": {
                    "address": "0xdAe6C79c46aB3B280Ca28259000695529cbD1339",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "VirtualSynthMastercopy": {
                    "address": "0xf02ce48fD47D7FA1B7a45a0444805d320D035775",
                    "sourceName": "contracts/VirtualSynthMastercopy.sol",
                    "contractName": "VirtualSynthMastercopy",
                    "abi": [
                      "constructor()",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Settled(uint256 totalSupply, uint256 amountAfterSettled)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function balanceOfUnderlying(address account) view returns (uint256)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialSupply() view returns (uint256)",
                      "function initialize(address _synth, address _resolver, address _recipient, uint256 _amount, bytes32 _currencyKey)",
                      "function initialized() view returns (bool)",
                      "function name() view returns (string)",
                      "function rate() view returns (uint256)",
                      "function readyToSettle() view returns (bool)",
                      "function resolver() view returns (address)",
                      "function secsLeftInWaitingPeriod() view returns (uint256)",
                      "function settle(address account)",
                      "function settled() view returns (bool)",
                      "function settledAmount() view returns (uint256)",
                      "function symbol() view returns (string)",
                      "function synth() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address recipient, uint256 amount) returns (bool)",
                      "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x97cf7f9d52f180b4e0f1f642a3b18e84c3ce0c6fa31cfaef16616a31a81a808f",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssFBBalancer": {
                    "address": "0x26Fa0665660c1D3a3666584669511d3c66Ad37Cb",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssAAPLBalancer": {
                    "address": "0x7af65f1740c0eB816A27FD808EaF6Ab09F6Fa646",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssAMZNBalancer": {
                    "address": "0xDC338C7544654c7dadFEb7E44076E457963113B0",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssNFLXBalancer": {
                    "address": "0x8Ef8cA2AcAaAfEc19fB366C11561718357F780F2",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssGOOGBalancer": {
                    "address": "0x6fB7F0E78582746bd01BcB6dfbFE62cA5F4F9175",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssCOINBalancer": {
                    "address": "0x1C1D97f6338759AB814a5A717aE359573Ab5D5d4",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "StakingRewardssMSFTBalancer": {
                    "address": "0x9D003Cc298E7Ea141A809C241C0a703176DA3ba3",
                    "sourceName": "contracts/StakingRewards.sol",
                    "contractName": "StakingRewards",
                    "abi": [
                      "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "event Recovered(address token, uint256 amount)",
                      "event RewardAdded(uint256 reward)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "event RewardsDurationUpdated(uint256 newDuration)",
                      "event Staked(address indexed user, uint256 amount)",
                      "event Withdrawn(address indexed user, uint256 amount)",
                      "function acceptOwnership()",
                      "function balanceOf(address account) view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function exit()",
                      "function getReward()",
                      "function getRewardForDuration() view returns (uint256)",
                      "function lastPauseTime() view returns (uint256)",
                      "function lastTimeRewardApplicable() view returns (uint256)",
                      "function lastUpdateTime() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function periodFinish() view returns (uint256)",
                      "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                      "function rewardPerToken() view returns (uint256)",
                      "function rewardPerTokenStored() view returns (uint256)",
                      "function rewardRate() view returns (uint256)",
                      "function rewards(address) view returns (uint256)",
                      "function rewardsDistribution() view returns (address)",
                      "function rewardsDuration() view returns (uint256)",
                      "function rewardsToken() view returns (address)",
                      "function setPaused(bool _paused)",
                      "function setRewardsDistribution(address _rewardsDistribution)",
                      "function setRewardsDuration(uint256 _rewardsDuration)",
                      "function stake(uint256 amount)",
                      "function stakingToken() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function updatePeriodFinish(uint256 timestamp)",
                      "function userRewardPerTokenPaid(address) view returns (uint256)",
                      "function withdraw(uint256 amount)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthetixBridgeEscrow": {
                    "address": "0x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f",
                    "sourceName": "contracts/SynthetixBridgeEscrow.sol",
                    "contractName": "SynthetixBridgeEscrow",
                    "abi": [
                      "constructor(address _owner)",
                      "event BridgeApproval(address _token, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function approveBridge(address _token, address _bridge, uint256 _amount)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xdb8c71768753489eed0028075cf515d0695b757b41231886b261e1aa0c573a5e",
                    "deployedOn": "run.synthetix"
                  },
                  "EtherWrapper": {
                    "address": "0xC1AAE9d18bBe386B102435a8632C8063d31e747C",
                    "sourceName": "contracts/EtherWrapper.sol",
                    "contractName": "EtherWrapper",
                    "abi": [
                      "constructor(address _owner, address _resolver, address _WETH)",
                      "event Burned(address indexed account, uint256 principal, uint256 fee, uint256 amountIn)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Minted(address indexed account, uint256 principal, uint256 fee, uint256 amountIn)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event PauseChanged(bool isPaused)",
                      "function acceptOwnership()",
                      "function burn(uint256 amountIn)",
                      "function burnFeeRate() view returns (uint256)",
                      "function calculateBurnFee(uint256 amount) view returns (uint256)",
                      "function calculateMintFee(uint256 amount) view returns (uint256)",
                      "function capacity() view returns (uint256 _capacity)",
                      "function distributeFees()",
                      "function feesEscrowed() view returns (uint256)",
                      "function getReserves() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function lastPauseTime() view returns (uint256)",
                      "function maxETH() view returns (uint256)",
                      "function mint(uint256 amountIn)",
                      "function mintFeeRate() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function paused() view returns (bool)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function sETHIssued() view returns (uint256)",
                      "function sUSDIssued() view returns (uint256)",
                      "function setPaused(bool _paused)",
                      "function totalIssuedSynths() view returns (uint256)",
                      "function weth() view returns (address)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xcac2d9311b429ff942b8a259d49ef46e1f90caf035513eb382f1b865c1f48d78",
                    "deployedOn": "run.synthetix"
                  },
                  "NativeEtherWrapper": {
                    "address": "0x7A3d898b717e50a96fd8b232E9d15F0A547A7eeb",
                    "sourceName": "contracts/NativeEtherWrapper.sol",
                    "contractName": "NativeEtherWrapper",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event Burned(address indexed account, uint256 amount)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Minted(address indexed account, uint256 amount)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function burn(uint256 amount)",
                      "function isResolverCached() view returns (bool)",
                      "function mint() payable",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x4e628023d059a6811addf1cf4f6377fe258ce669aef5c1b392ba04553b403f44",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthRedeemer": {
                    "address": "0xe533139Af961c9747356D947838c98451015e234",
                    "sourceName": "contracts/SynthRedeemer.sol",
                    "contractName": "SynthRedeemer",
                    "abi": [
                      "constructor(address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event SynthDeprecated(address synth, uint256 rateToRedeem, uint256 totalSynthSupply, uint256 supplyInsUSD)",
                      "event SynthRedeemed(address synth, address account, uint256 amountOfSynth, uint256 amountInsUSD)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function balanceOf(address synthProxy, address account) view returns (uint256 balanceInsUSD)",
                      "function deprecate(address synthProxy, uint256 rateToRedeem)",
                      "function isResolverCached() view returns (bool)",
                      "function rebuildCache()",
                      "function redeem(address synthProxy)",
                      "function redeemAll(address[] synthProxies)",
                      "function redeemPartial(address synthProxy, uint256 amountOfSynth)",
                      "function redemptions(address) view returns (uint256)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function totalSupply(address synthProxy) view returns (uint256 supplyInsUSD)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x36ee7d1fff9c77636cab448a6289eca77aa9d5baef562c94cbec7b8409b5b191",
                    "deployedOn": "run.synthetix"
                  },
                  "WrapperFactory": {
                    "address": "0x02f9bC46beD33acdB9cb002fe346734CeF8a9480",
                    "sourceName": "contracts/WrapperFactory.sol",
                    "contractName": "WrapperFactory",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event WrapperCreated(address indexed token, bytes32 indexed currencyKey, address wrapperAddress)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function createWrapper(address token, bytes32 currencyKey, bytes32 synthContractName) returns (address)",
                      "function distributeFees()",
                      "function feesEscrowed() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function isWrapper(address possibleWrapper) view returns (bool)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x2a4b77caf217654c2d7288cec194716f5ad02b902464094bf4c0f95a543bfc01",
                    "deployedOn": "run.synthetix"
                  },
                  "OwnerRelayOnEthereum": {
                    "address": "0x0e16A6876210841577b233C4165d7B7EdF640b8a",
                    "sourceName": "contracts/OwnerRelayOnEthereum.sol",
                    "contractName": "OwnerRelayOnEthereum",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event RelayBatchInitiated(address[] targets, bytes[] payloads)",
                      "event RelayInitiated(address target, bytes payload)",
                      "function acceptOwnership()",
                      "function initiateRelay(address target, bytes payload, uint32 crossDomainGasLimit)",
                      "function initiateRelayBatch(address[] targets, bytes[] payloads, uint32 crossDomainGasLimit)",
                      "function isResolverCached() view returns (bool)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xcb2daf5c04fde995ba13c6ca4e3eb9edd794f3031f0380ce653abed742ae4834",
                    "deployedOn": "run.synthetix"
                  },
                  "TokenStatesETHBTC": {
                    "address": "0x042A7A0022A7695454ac5Be77a4860e50c9683fC",
                    "sourceName": "contracts/TokenState.sol",
                    "contractName": "TokenState",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function allowance(address, address) view returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function balanceOf(address) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setAllowance(address tokenOwner, address spender, uint256 value)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setBalanceOf(address account, uint256 value)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "ProxysETHBTC": {
                    "address": "0x104eDF1da359506548BFc7c25bA1E28C16a70235",
                    "sourceName": "contracts/ProxyERC20.sol",
                    "contractName": "ProxyERC20",
                    "abi": [
                      "constructor(address _owner)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event TargetUpdated(address newTarget)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function decimals() view returns (uint8)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function setTarget(address _target)",
                      "function symbol() view returns (string)",
                      "function target() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xef2ff387f4ccca14ff4b02d9226420cdd4766873d99f8733a92ec78e8fea2dae",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthsETHBTC": {
                    "address": "0x07C1E81C345A7c58d7c24072EFc5D929BD0647AD",
                    "sourceName": "contracts/MultiCollateralSynth.sol",
                    "contractName": "MultiCollateralSynth",
                    "abi": [
                      "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                      "event Approval(address indexed owner, address indexed spender, uint256 value)",
                      "event Burned(address indexed account, uint256 value)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event Issued(address indexed account, uint256 value)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event ProxyUpdated(address proxyAddress)",
                      "event TokenStateUpdated(address newTokenState)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function DECIMALS() view returns (uint8)",
                      "function FEE_ADDRESS() view returns (address)",
                      "function acceptOwnership()",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 value) returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function burn(address account, uint256 amount)",
                      "function currencyKey() view returns (bytes32)",
                      "function decimals() view returns (uint8)",
                      "function isResolverCached() view returns (bool)",
                      "function issue(address account, uint256 amount)",
                      "function messageSender() view returns (address)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function proxy() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setMessageSender(address sender)",
                      "function setProxy(address _proxy)",
                      "function setTokenState(address _tokenState)",
                      "function setTotalSupply(uint256 amount)",
                      "function symbol() view returns (string)",
                      "function tokenState() view returns (address)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 value) returns (bool)",
                      "function transferAndSettle(address to, uint256 value) returns (bool)",
                      "function transferFrom(address from, address to, uint256 value) returns (bool)",
                      "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                      "function transferableSynths(address account) view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "SystemSettingsLib": {
                    "address": "0x4a39AEf2281ac0D192a9c4783604833bA8F31174",
                    "sourceName": "contracts/SystemSettingsLib.sol",
                    "contractName": "SystemSettingsLib",
                    "abi": [
                      "function MAX_ATOMIC_TWAP_WINDOW() view returns (uint256)",
                      "function MAX_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW() view returns (uint256)",
                      "function MAX_ATOMIC_VOLUME_PER_BLOCK() view returns (uint256)",
                      "function MAX_CROSS_DOMAIN_GAS_LIMIT() view returns (uint256)",
                      "function MAX_EXCHANGE_FEE_RATE() view returns (uint256)",
                      "function MAX_FEE_PERIOD_DURATION() view returns (uint256)",
                      "function MAX_ISSUANCE_RATIO() view returns (uint256)",
                      "function MAX_LIQUIDATION_DELAY() view returns (uint256)",
                      "function MAX_LIQUIDATION_PENALTY() view returns (uint256)",
                      "function MAX_LIQUIDATION_RATIO() view returns (uint256)",
                      "function MAX_MINIMUM_STAKE_TIME() view returns (uint256)",
                      "function MAX_TARGET_THRESHOLD() view returns (uint256)",
                      "function MAX_WRAPPER_BURN_FEE_RATE() view returns (int256)",
                      "function MAX_WRAPPER_MINT_FEE_RATE() view returns (int256)",
                      "function MIN_ATOMIC_TWAP_WINDOW() view returns (uint256)",
                      "function MIN_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW() view returns (uint256)",
                      "function MIN_CROSS_DOMAIN_GAS_LIMIT() view returns (uint256)",
                      "function MIN_FEE_PERIOD_DURATION() view returns (uint256)",
                      "function MIN_LIQUIDATION_DELAY() view returns (uint256)",
                      "function RATIO_FROM_TARGET_BUFFER() view returns (uint256)",
                      "function SETTINGS_CONTRACT_NAME() view returns (bytes32)",
                      "function contractName() view returns (bytes32)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xca3c6b70fb04703653c0063a49ade442c0f00ac5f29e43d0bea88c7178c197da",
                    "deployedOn": "run.synthetix"
                  },
                  "SynthetixDebtShare": {
                    "address": "0x89FCb32F29e509cc42d0C8b6f058C993013A843F",
                    "sourceName": "contracts/SynthetixDebtShare.sol",
                    "contractName": "SynthetixDebtShare",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event Burn(address indexed account, uint256 amount)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event ChangeAuthorizedBroker(address indexed authorizedBroker, bool authorized)",
                      "event ChangeAuthorizedToSnapshot(address indexed authorizedToSnapshot, bool authorized)",
                      "event Mint(address indexed account, uint256 amount)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Transfer(address indexed from, address indexed to, uint256 value)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function addAuthorizedBroker(address target)",
                      "function addAuthorizedToSnapshot(address target)",
                      "function allowance(address, address spender) view returns (uint256)",
                      "function approve(address, uint256) pure returns (bool)",
                      "function authorizedBrokers(address) view returns (bool)",
                      "function authorizedToSnapshot(address) view returns (bool)",
                      "function balanceOf(address account) view returns (uint256)",
                      "function balanceOfOnPeriod(address account, uint256 periodId) view returns (uint256)",
                      "function balances(address, uint256) view returns (uint128 amount, uint128 periodId)",
                      "function burnShare(address account, uint256 amount)",
                      "function currentPeriodId() view returns (uint128)",
                      "function decimals() view returns (uint8)",
                      "function finishSetup()",
                      "function importAddresses(address[] accounts, uint256[] amounts)",
                      "function isInitialized() view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function mintShare(address account, uint256 amount)",
                      "function name() view returns (string)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function removeAuthorizedBroker(address target)",
                      "function removeAuthorizedToSnapshot(address target)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function sharePercent(address account) view returns (uint256)",
                      "function sharePercentOnPeriod(address account, uint256 periodId) view returns (uint256)",
                      "function symbol() view returns (string)",
                      "function takeSnapshot(uint128 id)",
                      "function totalSupply() view returns (uint256)",
                      "function totalSupplyOnPeriod(uint256) view returns (uint256)",
                      "function transfer(address, uint256) pure returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x8f8d6ab299f46dbd8d1ac9a7761ead5f2dc8166f71694659381d5d727435a060",
                    "deployedOn": "run.synthetix"
                  },
                  "SignedSafeDecimalMath": {
                    "address": "0x728A2B79Cad691531CC1146eF802617FF50c7095",
                    "sourceName": "contracts/SignedSafeDecimalMath.sol",
                    "contractName": "SignedSafeDecimalMath",
                    "abi": [
                      "function PRECISE_UNIT() view returns (int256)",
                      "function UNIT() view returns (int256)",
                      "function decimals() view returns (uint8)",
                      "function highPrecisionDecimals() view returns (uint8)",
                      "function preciseUnit() pure returns (int256)",
                      "function unit() pure returns (int256)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xec1c90d5fdafded769ef75103a4fc257e0db9523087ac7b0dd2da2e3a9a33106",
                    "deployedOn": "run.synthetix"
                  },
                  "OneNetAggregatorIssuedSynths": {
                    "address": "0xcf1405b18dBCEA2893Abe635c88359C75878B9e1",
                    "sourceName": "contracts/OneNetAggregatorIssuedSynths.sol",
                    "contractName": "OneNetAggregatorIssuedSynths",
                    "abi": [
                      "constructor(address _resolver)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event SetOverrideTimestamp(uint256 timestamp)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function decimals() view returns (uint8)",
                      "function getAnswer(uint256 _roundId) view returns (int256 answer)",
                      "function getRoundData(uint80) view returns (uint80, int256, uint256, uint256, uint80)",
                      "function getTimestamp(uint256 _roundId) view returns (uint256 timestamp)",
                      "function latestRound() view returns (uint256)",
                      "function latestRoundData() view returns (uint80, int256, uint256, uint256, uint80)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function overrideTimestamp() view returns (uint256)",
                      "function owner() view returns (address)",
                      "function resolver() view returns (address)",
                      "function setOverrideTimestamp(uint256 timestamp)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xc8e3587a015330d52107765989f8e2f2e0d27227c45fbc92d511b261926cca40",
                    "deployedOn": "run.synthetix"
                  },
                  "OneNetAggregatorDebtRatio": {
                    "address": "0x977d0DD7eA212E9ca1dcD4Ec15cd7Ceb135fa68D",
                    "sourceName": "contracts/OneNetAggregatorDebtRatio.sol",
                    "contractName": "OneNetAggregatorDebtRatio",
                    "abi": [
                      "constructor(address _resolver)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event SetOverrideTimestamp(uint256 timestamp)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function decimals() view returns (uint8)",
                      "function getAnswer(uint256 _roundId) view returns (int256 answer)",
                      "function getRoundData(uint80) view returns (uint80, int256, uint256, uint256, uint80)",
                      "function getTimestamp(uint256 _roundId) view returns (uint256 timestamp)",
                      "function latestRound() view returns (uint256)",
                      "function latestRoundData() view returns (uint80, int256, uint256, uint256, uint80)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function overrideTimestamp() view returns (uint256)",
                      "function owner() view returns (address)",
                      "function resolver() view returns (address)",
                      "function setOverrideTimestamp(uint256 timestamp)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x46784e77e35b7e2e9999c3c54c776029790e75eb15ca3b77153a7de51b6c5fe0",
                    "deployedOn": "run.synthetix"
                  },
                  "ExchangeCircuitBreaker": {
                    "address": "0xeAcaEd9581294b1b5cfb6B941d4B8B81B2005437",
                    "sourceName": "contracts/ExchangeCircuitBreaker.sol",
                    "contractName": "ExchangeCircuitBreaker",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event LastRateOverriden(bytes32 currencyKey, uint256 previousRate, uint256 newRate)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function CIRCUIT_BREAKER_SUSPENSION_REASON() view returns (uint256)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function exchangeRates() view returns (address)",
                      "function isDeviationAboveThreshold(uint256 base, uint256 comparison) view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function lastExchangeRate(bytes32 currencyKey) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function priceDeviationThresholdFactor() view returns (uint256)",
                      "function rateWithBreakCircuit(bytes32 currencyKey) returns (uint256 lastValidRate, bool circuitBroken)",
                      "function rateWithInvalid(bytes32 currencyKey) view returns (uint256, bool)",
                      "function rebuildCache()",
                      "function resetLastExchangeRate(bytes32[] currencyKeys)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x49e5553deb5ff969b9de6f6a5ebf794164d3a8df08eb3707898e6fd1c866b66b",
                    "deployedOn": "run.synthetix"
                  },
                  "FuturesMarketManager": {
                    "address": "0xd3f527F47A9DF2f6cBf631081315b6e2FE4e4521",
                    "sourceName": "contracts/EmptyFuturesMarketManager.sol",
                    "contractName": "EmptyFuturesMarketManager",
                    "abi": [
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function addEndorsedAddresses(address[] addresses)",
                      "function allEndorsedAddresses() view returns (address[])",
                      "function allMarkets() view returns (address[])",
                      "function allMarkets(bool proxiedMarkets) view returns (address[])",
                      "function isEndorsed(address account) view returns (bool)",
                      "function marketForKey(bytes32 marketKey) view returns (address)",
                      "function markets(uint256 index, uint256 pageSize, bool proxiedMarkets) view returns (address[])",
                      "function markets(uint256 index, uint256 pageSize) view returns (address[])",
                      "function marketsForKeys(bytes32[] marketKeys) view returns (address[])",
                      "function numMarkets() view returns (uint256)",
                      "function numMarkets(bool proxiedMarkets) view returns (uint256)",
                      "function removeEndorsedAddresses(address[] addresses)",
                      "function totalDebt() view returns (uint256 debt, bool isInvalid)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x017a6ed7ac148238add457c56425c2e21f2e0b2d4a39719421375480008ada1f",
                    "deployedOn": "run.synthetix"
                  },
                  "Liquidator": {
                    "address": "0x8e9757479D5ad4E7f9d951B60d39F5220b893d6c",
                    "sourceName": "contracts/Liquidator.sol",
                    "contractName": "Liquidator",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event AccountFlaggedForLiquidation(address indexed account, uint256 deadline)",
                      "event AccountRemovedFromLiquidation(address indexed account, uint256 time)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function LIQUIDATION_CALLER() view returns (bytes32)",
                      "function LIQUIDATION_DEADLINE() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function calculateAmountToFixCollateral(uint256 debtBalance, uint256 collateral, uint256 penalty) view returns (uint256)",
                      "function checkAndRemoveAccountInLiquidation(address account)",
                      "function flagAccountForLiquidation(address account)",
                      "function flagReward() view returns (uint256)",
                      "function getLiquidationCallerForAccount(address account) view returns (address)",
                      "function getLiquidationDeadlineForAccount(address account) view returns (uint256)",
                      "function isLiquidationDeadlinePassed(address account) view returns (bool)",
                      "function isLiquidationOpen(address account, bool isSelfLiquidation) view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function issuanceRatio() view returns (uint256)",
                      "function liquidateReward() view returns (uint256)",
                      "function liquidationAmounts(address account, bool isSelfLiquidation) view returns (uint256 totalRedeemed, uint256 debtToRemove, uint256 escrowToLiquidate, uint256 initialDebtBalance)",
                      "function liquidationCollateralRatio() view returns (uint256)",
                      "function liquidationDelay() view returns (uint256)",
                      "function liquidationEscrowDuration() view returns (uint256)",
                      "function liquidationPenalty() view returns (uint256)",
                      "function liquidationRatio() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function removeAccountInLiquidation(address account)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function selfLiquidationPenalty() view returns (uint256)"
                    ],
                    "deployTxn": "",
                    "deployedOn": "run.synthetix"
                  },
                  "LiquidatorRewards": {
                    "address": "0xf79603a71144e415730C1A6f57F366E4Ea962C00",
                    "sourceName": "contracts/LiquidatorRewards.sol",
                    "contractName": "LiquidatorRewards",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event RewardPaid(address indexed user, uint256 reward)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function accumulatedRewardsPerShare() view returns (uint256)",
                      "function earned(address account) view returns (uint256)",
                      "function entries(address) view returns (uint128 claimable, uint128 entryAccumulatedRewards)",
                      "function getReward(address account)",
                      "function initiated(address) view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function notifyRewardAmount(uint256 reward)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function updateEntry(address account)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xf3d6a0eb6d89c111abcfac7ec969301015c26881fab98c48d5a82c0da32b5831",
                    "deployedOn": "run.synthetix"
                  },
                  "OneNetAggregatorsDEFI": {
                    "address": "0x646F23085281Dbd006FBFD211FD38d0743884864",
                    "sourceName": "contracts/legacy/OneNetAggregatorsDEFI.sol",
                    "contractName": "OneNetAggregatorsDEFI",
                    "abi": [
                      "constructor(address _resolver)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event SetOverrideTimestamp(uint256 timestamp)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function decimals() view returns (uint8)",
                      "function getAnswer(uint256 _roundId) view returns (int256 answer)",
                      "function getRoundData(uint80) view returns (uint80, int256, uint256, uint256, uint80)",
                      "function getTimestamp(uint256 _roundId) view returns (uint256 timestamp)",
                      "function latestRound() view returns (uint256)",
                      "function latestRoundData() view returns (uint80, int256, uint256, uint256, uint80)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function overrideTimestamp() view returns (uint256)",
                      "function owner() view returns (address)",
                      "function resolver() view returns (address)",
                      "function setOverrideTimestamp(uint256 timestamp)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x63dc092c2a9d752c794c72d4633229041c4222a530bf15307118e13c381b54cf",
                    "deployedOn": "run.synthetix"
                  },
                  "CircuitBreaker": {
                    "address": "0x9f231dBE53D460f359B2B8CC47574493caA5B7Bf",
                    "sourceName": "contracts/CircuitBreaker.sol",
                    "contractName": "CircuitBreaker",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event CircuitBroken(address indexed oracleAddress, uint256 previousValue, uint256 newValue)",
                      "event LastValueOverridden(address indexed oracleAddress, uint256 previousValue, uint256 newValue)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function circuitBroken(address oracleAddress) view returns (bool)",
                      "function isDeviationAboveThreshold(uint256 base, uint256 comparison) view returns (bool)",
                      "function isInvalid(address oracleAddress, uint256 value) view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function lastValue(address oracleAddress) view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function priceDeviationThresholdFactor() view returns (uint256)",
                      "function probeCircuitBreaker(address oracleAddress, uint256 value) returns (bool circuitBroken)",
                      "function rebuildCache()",
                      "function resetLastValue(address[] oracleAddresses, uint256[] values)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xc92882d1eca53d6529f5773049d5d1dde9b0f3901c6ea5e4975f9e7c35bf7b73",
                    "deployedOn": "run.synthetix"
                  },
                  "RewardEscrowV2Storage": {
                    "address": "0x182738BD9eE9810BC11f1c81b07Ec6F3691110BB",
                    "sourceName": "contracts/RewardEscrowV2Storage.sol",
                    "contractName": "RewardEscrowV2Storage",
                    "abi": [
                      "constructor(address _owner, address _associatedContract)",
                      "event AssociatedContractUpdated(address associatedContract)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function accountVestingEntryIDs(address account, uint256 index) view returns (uint256)",
                      "function addVestingEntry(address account, tuple(uint64 endTime, uint256 escrowAmount) entry) returns (uint256)",
                      "function associatedContract() view returns (address)",
                      "function fallbackRewardEscrow() view returns (address)",
                      "function firstNonFallbackId() view returns (uint256)",
                      "function nextEntryId() view returns (uint256)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function numVestingEntries(address account) view returns (uint256)",
                      "function owner() view returns (address)",
                      "function setAssociatedContract(address _associatedContract)",
                      "function setFallbackRewardEscrow(address _fallbackRewardEscrow)",
                      "function setZeroAmount(address account, uint256 entryId)",
                      "function setZeroAmountUntilTarget(address account, uint256 startIndex, uint256 targetAmount) returns (uint256 total, uint256 endIndex, uint256 lastEntryTime)",
                      "function totalEscrowedAccountBalance(address account) view returns (uint256)",
                      "function totalEscrowedBalance() view returns (uint256)",
                      "function totalVestedAccountBalance(address account) view returns (uint256)",
                      "function updateEscrowAccountBalance(address account, int256 delta)",
                      "function updateTotalEscrowedBalance(int256 delta)",
                      "function updateVestedAccountBalance(address account, int256 delta)",
                      "function vestingSchedules(address account, uint256 entryId) view returns (tuple(uint64 endTime, uint256 escrowAmount) entry)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x68eb646ac70843b64054c7a1e859a8c50a3ab12c08148fb7cfebf3297111857b",
                    "deployedOn": "run.synthetix"
                  },
                  "ExchangeSettlementLib": {
                    "address": "0xAa5A3D7F04E15b22Eb3664B56310aA18A3527Ec7",
                    "sourceName": "contracts/ExchangeSettlementLib.sol",
                    "contractName": "ExchangeSettlementLib",
                    "abi": [
                      "event ExchangeEntryAppended(address indexed account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 roundIdForSrc, uint256 roundIdForDest)",
                      "event ExchangeEntrySettled(address indexed from, bytes32 src, uint256 amount, bytes32 dest, uint256 reclaim, uint256 rebate, uint256 srcRoundIdAtPeriodEnd, uint256 destRoundIdAtPeriodEnd, uint256 exchangeTimestamp)",
                      "function hasWaitingPeriodOrSettlementOwing(tuple(IExchangeState exchangeState, IExchangeRates exchangeRates, ICircuitBreaker circuitBreaker, IExchangerInternalDebtCache debtCache, IIssuer issuer, ISynthetix synthetix) resolvedAddresses, address account, bytes32 currencyKey, uint256 waitingPeriod) view returns (bool)",
                      "function maxSecsLeftInWaitingPeriod(IExchangeState exchangeState, address account, bytes32 currencyKey, uint256 waitingPeriod) view returns (uint256)",
                      "function settlementOwing(tuple(IExchangeState exchangeState, IExchangeRates exchangeRates, ICircuitBreaker circuitBreaker, IExchangerInternalDebtCache debtCache, IIssuer issuer, ISynthetix synthetix) resolvedAddresses, address account, bytes32 currencyKey, uint256 waitingPeriod) view returns (uint256 reclaimAmount, uint256 rebateAmount, uint256 numEntries, tuple(bytes32 src, uint256 amount, bytes32 dest, uint256 reclaim, uint256 rebate, uint256 srcRoundIdAtPeriodEnd, uint256 destRoundIdAtPeriodEnd, uint256 timestamp)[])"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xfbb27053ef5ad1e8af325ade4c9db5bdf3eb3aa44ba0c043e46a53102dfc427d",
                    "deployedOn": "run.synthetix"
                  },
                  "DirectIntegrationManager": {
                    "address": "0x5F41718459955217df6A02AA8f5C19614ECfA6E7",
                    "sourceName": "contracts/DirectIntegrationManager.sol",
                    "contractName": "DirectIntegrationManager",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event IntegrationParametersSet(address indexed integration, bytes32 indexed currencyKey, tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) overrides)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function acceptOwnership()",
                      "function getExchangeParameters(address integration, bytes32 currencyKey) view returns (tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) overrides)",
                      "function isResolverCached() view returns (bool)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function setExchangeParameters(address integration, bytes32[] currencyKeys, tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) settings)"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x75bd8b9fb9afce02389f9697c69774b8695638cd74b1caa0befd396a2ddce431",
                    "deployedOn": "run.synthetix"
                  },
                  "DebtMigratorOnEthereum": {
                    "address": "0x94f864e55c77E07C2C7BF7bFBc334b7a8123442A",
                    "sourceName": "contracts/DebtMigratorOnEthereum.sol",
                    "contractName": "DebtMigratorOnEthereum",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event InitiationResumed()",
                      "event InitiationSuspended()",
                      "event MigrationInitiated(address indexed account, uint256 totalDebtSharesMigrated, uint256 totalEscrowMigrated, uint256 totalLiquidBalanceMigrated)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "function CONTRACT_NAME() pure returns (bytes32)",
                      "function acceptOwnership()",
                      "function debtTransferReceived() view returns (uint256)",
                      "function debtTransferSent() view returns (uint256)",
                      "function initiationActive() view returns (bool)",
                      "function isResolverCached() view returns (bool)",
                      "function migrateDebt(address account)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function resumeInitiation()",
                      "function suspendInitiation()"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0xbdabbb5b6aeef7ce35456db0217ccd5702a2710d37bc646feb8e1772e90d3e56",
                    "deployedOn": "run.synthetix"
                  },
                  "DynamicSynthRedeemer": {
                    "address": "0x38c8A4d93757D3D2E0110Cfb5f18B9cC293e0fdA",
                    "sourceName": "contracts/DynamicSynthRedeemer.sol",
                    "contractName": "DynamicSynthRedeemer",
                    "abi": [
                      "constructor(address _owner, address _resolver)",
                      "event CacheUpdated(bytes32 name, address destination)",
                      "event DiscountRateUpdated(uint256 discountRate)",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event RedemptionResumed()",
                      "event RedemptionSuspended()",
                      "event SynthRedeemed(address synth, address account, uint256 amountOfSynth, uint256 amountInsUSD)",
                      "function CONTRACT_NAME() view returns (bytes32)",
                      "function acceptOwnership()",
                      "function discountRate() view returns (uint256)",
                      "function getDiscountRate() view returns (uint256)",
                      "function isResolverCached() view returns (bool)",
                      "function nominateNewOwner(address _owner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function rebuildCache()",
                      "function redeem(bytes32 currencyKey)",
                      "function redeemAll(bytes32[] currencyKeys)",
                      "function redeemPartial(bytes32 currencyKey, uint256 amountOfSynth)",
                      "function redemptionActive() view returns (bool)",
                      "function resolver() view returns (address)",
                      "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                      "function resumeRedemption()",
                      "function setDiscountRate(uint256 _newRate)",
                      "function suspendRedemption()"
                    ],
                    "deployTxn": "https://etherscan.io/tx/0x2c53357ad2e530fdacb71fdee91776c9cbfac37206b0589b1bb121d9cc9c497f",
                    "deployedOn": "run.synthetix"
                  }
                },
                "txns": {},
                "extras": {
                  "network": "sepolia"
                }
              },
              "v3": {
                "url": "ipfs://QmQL57bhoyBFdLpVHgkFvtVxC37e5998PXKupsxann16c2",
                "contracts": {
                  "AccountModule": {
                    "address": "0xe7B2390C847e16459F1AD7e9735A93D3F80D9088",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "error ZeroAddress()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182001",
                    "deployTimestamp": "1743606279",
                    "sourceName": "contracts/modules/core/AccountModule.sol",
                    "contractName": "AccountModule",
                    "deployedOn": "contract.AccountModule",
                    "gasUsed": 1225797,
                    "gasCost": "1625316474"
                  },
                  "AccountTokenModule": {
                    "address": "0x5D2B70aBE685F3B6Ff82F5d3e6eb94085FD224cD",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787265",
                    "deployTimestamp": "1738842516",
                    "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                    "contractName": "AccountTokenModule",
                    "deployedOn": "contract.AccountTokenModule",
                    "gasUsed": 1787668,
                    "gasCost": "1376902284"
                  },
                  "AssociateDebtModule": {
                    "address": "0xb72aa6558DDC2B2969D64A9c92645586067f5686",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182002",
                    "deployTimestamp": "1743606279",
                    "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                    "contractName": "AssociateDebtModule",
                    "deployedOn": "contract.AssociateDebtModule",
                    "gasUsed": 2612609,
                    "gasCost": "1553539507"
                  },
                  "AssociatedSystemsModule": {
                    "address": "0xa8DD42C00E0e7434d04c74374CA1Da610E6Ef71C",
                    "abi": [
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error Unauthorized(address addr)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20333356",
                    "deployTimestamp": "1721305103",
                    "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                    "contractName": "AssociatedSystemsModule",
                    "deployedOn": "contract.AssociatedSystemsModule",
                    "gasUsed": 877153,
                    "gasCost": "9017689799"
                  },
                  "CcipReceiverModule": {
                    "address": "0xF122049f28315D49B8135379A796f56D3C6A03fe",
                    "abi": [
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error Unauthorized(address addr)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928365",
                    "deployTimestamp": "1728480899",
                    "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                    "contractName": "CcipReceiverModule",
                    "deployedOn": "contract.CcipReceiverModule",
                    "gasUsed": 469476,
                    "gasCost": "25231538550"
                  },
                  "CollateralConfigurationModule": {
                    "address": "0xCDF47798128b2a771465B5833ca0C3eF1C913ADd",
                    "abi": [
                      "error EmptyRevertReason()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error PositionOutOfBounds()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787267",
                    "deployTimestamp": "1738842518",
                    "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                    "contractName": "CollateralConfigurationModule",
                    "deployedOn": "contract.CollateralConfigurationModule",
                    "gasUsed": 872728,
                    "gasCost": "1300781065"
                  },
                  "CollateralModule": {
                    "address": "0xd7FE43584585954EfaE4aEdb39807534e4B6aE45",
                    "abi": [
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error AccountNotFound(uint128 accountId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182003",
                    "deployTimestamp": "1743606280",
                    "sourceName": "contracts/modules/core/CollateralModule.sol",
                    "contractName": "CollateralModule",
                    "deployedOn": "contract.CollateralModule",
                    "gasUsed": 1937434,
                    "gasCost": "1496398588"
                  },
                  "CrossChainUSDModule": {
                    "address": "0x9d227f1c685b7c207f44416Eb59e457d8d59AbdC",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928368",
                    "deployTimestamp": "1728480935",
                    "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                    "contractName": "CrossChainUSDModule",
                    "deployedOn": "contract.CrossChainUSDModule",
                    "gasUsed": 595289,
                    "gasCost": "26447314844"
                  },
                  "FeatureFlagModule": {
                    "address": "0x3E8d0225423fe6FcC0377F49B2a6046BCE6D34c7",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928369",
                    "deployTimestamp": "1728480947",
                    "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 777054,
                    "gasCost": "26552367099"
                  },
                  "IssueUSDModule": {
                    "address": "0x6FA4b55c8b9AdC03129c3796414d44cA0ef50764",
                    "abi": [
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182004",
                    "deployTimestamp": "1743606280",
                    "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                    "contractName": "IssueUSDModule",
                    "deployedOn": "contract.IssueUSDModule",
                    "gasUsed": 3042995,
                    "gasCost": "1442363261"
                  },
                  "LiquidationModule": {
                    "address": "0xA610198f9521850393DF6029d95e26b79a6918A6",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error CannotScaleEmptyMapping()",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint256ToUint64()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PositionOutOfBounds()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182005",
                    "deployTimestamp": "1743606281",
                    "sourceName": "contracts/modules/core/LiquidationModule.sol",
                    "contractName": "LiquidationModule",
                    "deployedOn": "contract.LiquidationModule",
                    "gasUsed": 4620402,
                    "gasCost": "1398285430"
                  },
                  "MarketCollateralModule": {
                    "address": "0x50a6b732B9a4Dd3cAa5F8fb33110728F8f65e4f0",
                    "abi": [
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "error Unauthorized(address addr)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787271",
                    "deployTimestamp": "1738842523",
                    "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                    "contractName": "MarketCollateralModule",
                    "deployedOn": "contract.MarketCollateralModule",
                    "gasUsed": 1298300,
                    "gasCost": "1193728026"
                  },
                  "MarketManagerModule": {
                    "address": "0x7656bDEE9f4e7A507fd0C5b2431D3F3690E20711",
                    "abi": [
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IncorrectMarketInterface(address market)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787272",
                    "deployTimestamp": "1738842524",
                    "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                    "contractName": "MarketManagerModule",
                    "deployedOn": "contract.MarketManagerModule",
                    "gasUsed": 2816393,
                    "gasCost": "1171607999"
                  },
                  "PoolConfigurationModule": {
                    "address": "0xB0A8c84360f505e050F4F76042FDC4f29320bE2A",
                    "abi": [
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842770",
                    "deployTimestamp": "1739512729",
                    "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                    "contractName": "PoolConfigurationModule",
                    "deployedOn": "contract.PoolConfigurationModule",
                    "gasUsed": 446271,
                    "gasCost": "1272805637"
                  },
                  "PoolModule": {
                    "address": "0xe8e04A78B54455705ab50F612B43739b1De68D05",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842771",
                    "deployTimestamp": "1739512731",
                    "sourceName": "contracts/modules/core/PoolModule.sol",
                    "contractName": "PoolModule",
                    "deployedOn": "contract.PoolModule",
                    "gasUsed": 4099803,
                    "gasCost": "1239719477"
                  },
                  "RewardsManagerModule": {
                    "address": "0xDdFcbBdd05a85e76Db673fc1cB7D36ecDe472CCF",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error RewardUnavailable(address distributor)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182006",
                    "deployTimestamp": "1743606281",
                    "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                    "contractName": "RewardsManagerModule",
                    "deployedOn": "contract.RewardsManagerModule",
                    "gasUsed": 2642251,
                    "gasCost": "1363835075"
                  },
                  "USDTokenModule": {
                    "address": "0x9839B57EE26ef9061fa67c2e8056217B20084072",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787276",
                    "deployTimestamp": "1738842528",
                    "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                    "contractName": "USDTokenModule",
                    "deployedOn": "contract.USDTokenModule",
                    "gasUsed": 1110294,
                    "gasCost": "1110462497"
                  },
                  "UtilsModule": {
                    "address": "0xd63B709D3E260341c07Cb4D3A62585a6A7e67FdE",
                    "abi": [
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842773",
                    "deployTimestamp": "1739512734",
                    "sourceName": "contracts/modules/core/UtilsModule.sol",
                    "contractName": "UtilsModule",
                    "deployedOn": "contract.UtilsModule",
                    "gasUsed": 770698,
                    "gasCost": "1195500364"
                  },
                  "VaultModule": {
                    "address": "0xA598e80F994aF71929710C4A42eFFE058E94Adf9",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "error PoolNotFound(uint128 poolId)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182007",
                    "deployTimestamp": "1743606282",
                    "sourceName": "contracts/modules/core/VaultModule.sol",
                    "contractName": "VaultModule",
                    "deployedOn": "contract.VaultModule",
                    "gasUsed": 4732148,
                    "gasCost": "1326366888"
                  },
                  "InitialModuleBundle": {
                    "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/modules/InitialModuleBundle.sol",
                    "contractName": "InitialModuleBundle",
                    "deployedOn": "contract.InitialModuleBundle"
                  },
                  "InitialCoreProxy": {
                    "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x828EED723cAF0A8F822249231266E38dF614923C",
                      "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialCoreProxy"
                  },
                  "AccountRouter": {
                    "address": "0x35b51e3dc2a8cf242fdcae8f07cf21a6d91ff783",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployedOn": "router.AccountRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787278",
                    "deployTimestamp": "1738842536",
                    "contractName": "AccountRouter",
                    "sourceName": "AccountRouter.sol",
                    "gasUsed": 1963401,
                    "gasCost": "1089268503"
                  },
                  "CoreRouter": {
                    "address": "0x50d8302c7010c23ec3d2dece65e8a50cc0cc5cb8",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "deployedOn": "router.CoreRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182008",
                    "deployTimestamp": "1743606293",
                    "contractName": "CoreRouter",
                    "sourceName": "CoreRouter.sol",
                    "gasUsed": 5621498,
                    "gasCost": "1298441164"
                  },
                  "USDRouter": {
                    "address": "0x71182391bb34bf922c8ba3ff3047b604ecbb202b",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.USDRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787280",
                    "deployTimestamp": "1738842592",
                    "contractName": "USDRouter",
                    "sourceName": "USDRouter.sol",
                    "gasUsed": 2087424,
                    "gasCost": "1073336908"
                  },
                  "CoreProxy": {
                    "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "constructorArgs": [
                      "<%= contracts.InitialModuleBundle.address %>",
                      "<%= settings.owner %>"
                    ],
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "AccountProxy": {
                    "address": "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "USDProxy": {
                    "address": "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "settings": {
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                },
                "imports": {
                  "oracle_manager": {
                    "url": "ipfs://QmV7BAagvh5kfYDiyBy3UJFh4BQMVsmiiEmXGVadnLTLnT",
                    "contracts": {
                      "NodeModule": {
                        "address": "0xf1e04afF68bb60af56592d4Ac3157be62BF2fad4",
                        "abi": [
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "21787261",
                        "deployTimestamp": "1738842493",
                        "sourceName": "contracts/modules/NodeModule.sol",
                        "contractName": "NodeModule",
                        "deployedOn": "contract.NodeModule",
                        "gasUsed": 4896112,
                        "gasCost": "1597095724"
                      },
                      "CoreModule": {
                        "address": "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1728480815",
                        "sourceName": "contracts/modules/CoreModule.sol",
                        "contractName": "CoreModule",
                        "deployedOn": "contract.CoreModule",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "InitialProxy": {
                        "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                          "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1728480815",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialProxy",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "OracleRouter": {
                        "address": "0x9b39032a686f68d4d7a8149005c0efe9bf3ec1aa",
                        "abi": [
                          "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                          "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                          "function facetAddresses() pure returns (address[] addresses)",
                          "function facetAddress(bytes4 functionSelector) pure returns (address)",
                          "function emitDiamondCutEvent() returns (bool)",
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployedOn": "router.OracleRouter",
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "21787262",
                        "deployTimestamp": "1738842501",
                        "contractName": "OracleRouter",
                        "sourceName": "OracleRouter.sol",
                        "gasUsed": 1728163,
                        "gasCost": "1546820822"
                      },
                      "Proxy": {
                        "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                        "abi": [
                          "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                          "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                          "function facetAddresses() pure returns (address[] addresses)",
                          "function facetAddress(bytes4 functionSelector) pure returns (address)",
                          "function emitDiamondCutEvent() returns (bool)",
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmbSAhExRT5TwFpa2ki8WZmv8PrdQnQFutw7Qt7aQr8YBG",
                        "tags": [
                          "latest"
                        ],
                        "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                        "preset": "with-oracle-manager",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1728480815",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      }
                    },
                    "settings": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    },
                    "txns": {
                      "upgrade_proxy": {
                        "hash": "0x13d2b20513ff1850b5d014df38311142a317418d07a8fc358cc680f58f1f6822",
                        "blockNumber": "21787263",
                        "timestamp": "1738842507",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                                "0x9b39032a686f68d4d7A8149005C0efe9bF3Ec1aa"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 55400,
                        "gasCost": "1486343182",
                        "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                      }
                    },
                    "extras": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    }
                  }
                },
                "txns": {
                  "register_const_one_oracle": {
                    "hash": "0xc364170bfa95b109ebd21a59c7929598bfbc1f3aa61674fd242ba951fe53b18e",
                    "events": {
                      "NodeRegistered": [
                        {
                          "name": "NodeRegistered",
                          "args": [
                            "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                            8,
                            "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                            []
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.register_const_one_oracle"
                  },
                  "upgrade_core_proxy": {
                    "hash": "0x1406d0004a87cce936c31cde83d3a597ba23c9feba4a5e5fd911d389f7ef2efe",
                    "blockNumber": "22182009",
                    "timestamp": "1743606295",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                            "0x50d8302C7010C23eC3D2decE65e8a50CC0CC5CB8"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 51371,
                    "gasCost": "1275116739",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_burnUsd": {
                    "hash": "",
                    "blockNumber": "20339936",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6275726e55736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_burnUsd",
                    "gasUsed": 37049,
                    "gasCost": "3856990971",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_claimRewards": {
                    "hash": "",
                    "blockNumber": "20339937",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x636c61696d526577617264730000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_claimRewards",
                    "gasUsed": 37109,
                    "gasCost": "3500749172",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_createAccount": {
                    "hash": "",
                    "blockNumber": "20339938",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_createAccount",
                    "gasUsed": 37121,
                    "gasCost": "3188928862",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_delegateCollateral": {
                    "hash": "",
                    "blockNumber": "20339939",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_delegateCollateral",
                    "gasUsed": 37181,
                    "gasCost": "2915989882",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_deposit": {
                    "hash": "",
                    "blockNumber": "20339940",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f73697400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_deposit",
                    "gasUsed": 37049,
                    "gasCost": "2677084801",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_depositMarketCollateral": {
                    "hash": "",
                    "blockNumber": "20339941",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                    "gasUsed": 37241,
                    "gasCost": "2467966987",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_depositMarketUsd": {
                    "hash": "",
                    "blockNumber": "20339942",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketUsd",
                    "gasUsed": 37157,
                    "gasCost": "2284926685",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidate": {
                    "hash": "",
                    "blockNumber": "20339943",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174650000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidate",
                    "gasUsed": 37073,
                    "gasCost": "2124708717",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidateToTreasury": {
                    "hash": "0xd40bc0c8fc5179c6a742d96338a6462dbf883e9e27cd987df95e7d990b4d2078",
                    "blockNumber": "22182010",
                    "timestamp": "1743606296",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c6971756964617465546f547265617375727900000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateToTreasury",
                    "gasUsed": 57111,
                    "gasCost": "1240844922",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidateVault": {
                    "hash": "",
                    "blockNumber": "20339944",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateVault",
                    "gasUsed": 37133,
                    "gasCost": "1984467597",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_migrateDelegation": {
                    "hash": "0x92543f30f35ce8d775e52b5648a44b141dacb02744b95ef7c3b8830a772226e2",
                    "blockNumber": "21787282",
                    "timestamp": "1738842601",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d69677261746544656c65676174696f6e000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_migrateDelegation",
                    "gasUsed": 57109,
                    "gasCost": "1057292814",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_mintUsd": {
                    "hash": "",
                    "blockNumber": "20339945",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_mintUsd",
                    "gasUsed": 37049,
                    "gasCost": "1861713783",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdraw": {
                    "hash": "",
                    "blockNumber": "20339946",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x7769746864726177000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdraw",
                    "gasUsed": 37061,
                    "gasCost": "1754265608",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdrawMarketCollateral": {
                    "hash": "",
                    "blockNumber": "20339947",
                    "timestamp": "1721384407",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                    "gasUsed": 37253,
                    "gasCost": "1660215356",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdrawMarketUsd": {
                    "hash": "",
                    "blockNumber": "20339948",
                    "timestamp": "1721384407",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                    "gasUsed": 37169,
                    "gasCost": "1577893395",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "init_account": {
                    "hash": "0x28024a548db5d269ab472f3216b86513f15edf8126dcc490add21c48b5f08033",
                    "blockNumber": "21787283",
                    "timestamp": "1738842609",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                            "0x35B51e3Dc2a8Cf242FdCaE8F07CF21A6D91ff783"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633732310000000000000000000000000000000000000000000000000000",
                            "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                            "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                            "0x35B51e3Dc2a8Cf242FdCaE8F07CF21A6D91ff783"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 80746,
                    "gasCost": "1050158479",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "init_usd": {
                    "hash": "0x4b7971fec2cbb0ec7376030e9329b11912a8dc77e6c2323e91fdae0d128dca52",
                    "blockNumber": "21787284",
                    "timestamp": "1738842616",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            "0x71182391bB34BF922C8BA3FF3047B604EcBB202B"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633230000000000000000000000000000000000000000000000000000000",
                            "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            "0x71182391bB34BF922C8BA3FF3047B604EcBB202B"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 94076,
                    "gasCost": "1043922420",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "set_oracle_manager": {
                    "hash": "0xd14a861aba2399243d6b4bb66289c06a6ca3269b8509fe2af0ca92ed2be6f2e4",
                    "events": {},
                    "deployedOn": "invoke.set_oracle_manager"
                  },
                  "configure_usd_collateral": {
                    "hash": "0x00e044c8fb2f008138244ea81ea15b1ecdbf370b22e70361060b37e1d11cf271",
                    "events": {
                      "CollateralConfigured": [
                        {
                          "name": "CollateralConfigured",
                          "args": [
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            [
                              true,
                              {
                                "type": "BigNumber",
                                "hex": "0x8ac7230489e80000"
                              },
                              {
                                "type": "BigNumber",
                                "hex": "0x8ac7230489e80000"
                              },
                              {
                                "type": "BigNumber",
                                "hex": "0x00"
                              },
                              "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                              "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                              {
                                "type": "BigNumber",
                                "hex": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.configure_usd_collateral"
                  }
                },
                "extras": {
                  "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                }
              }
            },
            "txns": {
              "setFeatureFlagPool": {
                "hash": "",
                "blockNumber": "20339954",
                "timestamp": "1721384422",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x637265617465506f6f6c00000000000000000000000000000000000000000000",
                        "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setFeatureFlagPool",
                "gasUsed": 84485,
                "gasCost": "1260268313",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "upgradeProxy": {
                "hash": "0x42e7123c6110961eae4e33bb30c23ff92592471051718cad804917da681d0e93",
                "blockNumber": "22182015",
                "timestamp": "1743606311",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5",
                        "0x2f6cf5c084a6aD42cAfc0315f9875b8Efab02Bab"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgradeProxy",
                "gasUsed": 47819,
                "gasCost": "1127266825",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "associate": {
                "hash": "",
                "blockNumber": "20339957",
                "timestamp": "1721384424",
                "events": {
                  "AddressImported": [
                    {
                      "name": "AddressImported",
                      "args": [
                        "0x4c65676163794d61726b65740000000000000000000000000000000000000000",
                        "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.associate",
                "gasUsed": 48873,
                "gasCost": "1175611432",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "authorizedBroker": {
                "hash": "",
                "blockNumber": "20339958",
                "timestamp": "1721384424",
                "events": {
                  "ChangeAuthorizedBroker": [
                    {
                      "name": "ChangeAuthorizedBroker",
                      "args": [
                        "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5",
                        true
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.authorizedBroker",
                "gasUsed": 47582,
                "gasCost": "1153731526",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "setFeatureFlagAssociateDebt": {
                "hash": "",
                "blockNumber": "20339959",
                "timestamp": "1721384425",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x6173736f63696174654465627400000000000000000000000000000000000000",
                        "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setFeatureFlagAssociateDebt",
                "gasUsed": 101621,
                "gasCost": "1134576043",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "setFeatureFlagMarket": {
                "hash": "",
                "blockNumber": "20339960",
                "timestamp": "1721384425",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                        "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setFeatureFlagMarket",
                "gasUsed": 101633,
                "gasCost": "1117868003",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "setSystemAddresses": {
                "hash": "",
                "blockNumber": "20519346",
                "timestamp": "1723547808",
                "events": {},
                "deployedOn": "invoke.setSystemAddresses",
                "gasUsed": 76390,
                "gasCost": "1628695340",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "registerMarket": {
                "hash": "",
                "blockNumber": "20340184",
                "timestamp": "1721387393",
                "events": {
                  "MarketRegistered": [
                    {
                      "name": "MarketRegistered",
                      "args": [
                        "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5",
                        "1",
                        "0x3AcF163B9E6a384D539e10dAc7e11213c638b2f5"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.registerMarket",
                "gasUsed": 198152,
                "gasCost": "4871144947",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "setConfigAssociateUnlimitedDebt": {
                "hash": "",
                "blockNumber": "20519347",
                "timestamp": "1723547809",
                "events": {},
                "deployedOn": "invoke.setConfigAssociateUnlimitedDebt",
                "gasUsed": 55221,
                "gasCost": "1550508640",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              }
            },
            "extras": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "pool_owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "sc_pool_id": "1",
              "v2x_package": "synthetix:2.101.2",
              "v3_package": "synthetix:3.3.15",
              "marketId": "1"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "provision.spotFactory": {
      "artifacts": {
        "imports": {
          "spotFactory": {
            "url": "ipfs://QmbvEityM4JR1ioRnHojPKBo8GxTPqnW3gVbr6JnFxDpzC",
            "tags": [
              "latest"
            ],
            "target": "synthetix-spot-market:3.3.15@main",
            "preset": "main",
            "contracts": {
              "AsyncOrderConfigurationModule": {
                "address": "0xcE7D0e4B048719e35fac66C16E7680c7C086C84c",
                "abi": [
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333390",
                "deployTimestamp": "1721305511",
                "sourceName": "contracts/modules/AsyncOrderConfigurationModule.sol",
                "contractName": "AsyncOrderConfigurationModule",
                "deployedOn": "contract.AsyncOrderConfigurationModule",
                "gasUsed": 896430,
                "gasCost": "9724845757"
              },
              "AsyncOrderModule": {
                "address": "0xDd1eE5eD388b2e2D0503e3e768773eA409ee548d",
                "abi": [
                  "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                  "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                  "error InvalidAsyncTransactionType(uint8 transactionType)",
                  "error InvalidClaim(uint256 asyncOrderId)",
                  "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                  "error OverflowInt256ToUint256()",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                  "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                  "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                  "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333391",
                "deployTimestamp": "1721305523",
                "sourceName": "contracts/modules/AsyncOrderModule.sol",
                "contractName": "AsyncOrderModule",
                "deployedOn": "contract.AsyncOrderModule",
                "gasUsed": 1317254,
                "gasCost": "10018647704"
              },
              "AsyncOrderSettlementModule": {
                "address": "0xdD4C514839198584Ec18a89dCAAD08D59831B1D4",
                "abi": [
                  "error InvalidClaim(uint256 asyncOrderId)",
                  "error InvalidSettlementStrategy(uint8 strategyType)",
                  "error InvalidVerificationResponse()",
                  "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                  "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                  "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                  "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333392",
                "deployTimestamp": "1721305535",
                "sourceName": "contracts/modules/AsyncOrderSettlementModule.sol",
                "contractName": "AsyncOrderSettlementModule",
                "deployedOn": "contract.AsyncOrderSettlementModule",
                "gasUsed": 1963690,
                "gasCost": "9672166405"
              },
              "AtomicOrderModule": {
                "address": "0x4A05757Daf26eB0B74B6dfD7b8aa6a787cee14ED",
                "abi": [
                  "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                  "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                  "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidPrices()",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                  "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333393",
                "deployTimestamp": "1721305547",
                "sourceName": "contracts/modules/AtomicOrderModule.sol",
                "contractName": "AtomicOrderModule",
                "deployedOn": "contract.AtomicOrderModule",
                "gasUsed": 2090754,
                "gasCost": "9866449338"
              },
              "CoreModule": {
                "address": "0x061CDa3762eb1572548aD5C7480507794e491cF8",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333394",
                "deployTimestamp": "1721305559",
                "sourceName": "contracts/modules/CoreModule.sol",
                "contractName": "CoreModule",
                "deployedOn": "contract.CoreModule",
                "gasUsed": 940287,
                "gasCost": "10244725276"
              },
              "FeatureFlagModule": {
                "address": "0xEb5e4f55703A2A092703ebDBFF22170E8dd2A891",
                "abi": [
                  "error Unauthorized(address addr)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333396",
                "deployTimestamp": "1721305583",
                "sourceName": "contracts/modules/FeatureFlagModule.sol",
                "contractName": "FeatureFlagModule",
                "deployedOn": "contract.FeatureFlagModule",
                "gasUsed": 765178,
                "gasCost": "9874944493"
              },
              "MarketConfigurationModule": {
                "address": "0xaa78b9a428E0E5a3451882688E829EcE85784a25",
                "abi": [
                  "error InvalidCollateralLeverage(uint256)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidWrapperFees()",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                  "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                  "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                  "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                  "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                  "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                  "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                  "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                  "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                  "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                  "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                  "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                  "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                  "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                  "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                  "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                  "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                  "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                  "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                  "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                  "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333397",
                "deployTimestamp": "1721305595",
                "sourceName": "contracts/modules/MarketConfigurationModule.sol",
                "contractName": "MarketConfigurationModule",
                "deployedOn": "contract.MarketConfigurationModule",
                "gasUsed": 720683,
                "gasCost": "10005953058"
              },
              "SpotMarketFactoryModule": {
                "address": "0xe54538Fd29Ff476C8a1f131C593828A864896CC8",
                "abi": [
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidMarketOwner()",
                  "error InvalidSynthImplementation(uint256 synthImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error NotNominated(address addr)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "error OverflowInt256ToUint256()",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                  "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                  "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                  "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                  "event SynthImplementationSet(address synthImplementation)",
                  "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                  "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                  "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                  "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                  "function acceptMarketOwnership(uint128 synthMarketId)",
                  "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function getSynth(uint128 marketId) view returns (address synthAddress)",
                  "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                  "function name(uint128 marketId) view returns (string marketName)",
                  "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "function renounceMarketNomination(uint128 synthMarketId)",
                  "function renounceMarketOwnership(uint128 synthMarketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                  "function setDecayRate(uint128 marketId, uint256 rate)",
                  "function setSynthImplementation(address synthImplementation)",
                  "function setSynthetix(address synthetix)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                  "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function upgradeSynthImpl(uint128 marketId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333398",
                "deployTimestamp": "1721305607",
                "sourceName": "contracts/modules/SpotMarketFactoryModule.sol",
                "contractName": "SpotMarketFactoryModule",
                "deployedOn": "contract.SpotMarketFactoryModule",
                "gasUsed": 2278644,
                "gasCost": "10558125333"
              },
              "SynthTokenModule": {
                "address": "0x8549D0b16466ae0D2B1616f88A576F255e3502e2",
                "abi": [
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidDecayRate()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error Unauthorized(address addr)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function advanceEpoch() returns (uint256)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address user) view returns (uint256)",
                  "function burn(address from, uint256 amount)",
                  "function decayRate() view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function setDecayRate(uint256 _rate)",
                  "function symbol() view returns (string)",
                  "function totalShares() view returns (uint256)",
                  "function totalSupply() view returns (uint256 supply)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333399",
                "deployTimestamp": "1721305619",
                "sourceName": "contracts/modules/token/SynthTokenModule.sol",
                "contractName": "SynthTokenModule",
                "deployedOn": "contract.SynthTokenModule",
                "gasUsed": 1207447,
                "gasCost": "10783275913"
              },
              "WrapperModule": {
                "address": "0xfBeAB6621b30F486A2E03BF328c879485D96DFe7",
                "abi": [
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                  "error InvalidCollateralType(address configuredCollateralType)",
                  "error InvalidMarket(uint128 marketId)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                  "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                  "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333400",
                "deployTimestamp": "1721305631",
                "sourceName": "contracts/modules/WrapperModule.sol",
                "contractName": "WrapperModule",
                "deployedOn": "contract.WrapperModule",
                "gasUsed": 1684906,
                "gasCost": "10728254409"
              },
              "InitialSpotMarketProxy": {
                "address": "0x2CD12CcAc6F869650bA88a220b2eb91a937FA5c0",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x061CDa3762eb1572548aD5C7480507794e491cF8",
                  "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333402",
                "deployTimestamp": "1721305655",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialSpotMarketProxy",
                "gasUsed": 248137,
                "gasCost": "10228887820"
              },
              "SpotMarketRouter": {
                "address": "0x5c41360f2263596e565f4b23d96fb0677c927cfd",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidMarketOwner()",
                  "error InvalidSynthImplementation(uint256 synthImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "error OverflowInt256ToUint256()",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                  "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                  "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                  "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                  "event SynthImplementationSet(address synthImplementation)",
                  "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                  "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                  "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                  "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                  "function acceptMarketOwnership(uint128 synthMarketId)",
                  "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function getSynth(uint128 marketId) view returns (address synthAddress)",
                  "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                  "function name(uint128 marketId) view returns (string marketName)",
                  "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "function renounceMarketNomination(uint128 synthMarketId)",
                  "function renounceMarketOwnership(uint128 synthMarketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                  "function setDecayRate(uint128 marketId, uint256 rate)",
                  "function setSynthImplementation(address synthImplementation)",
                  "function setSynthetix(address synthetix)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                  "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function upgradeSynthImpl(uint128 marketId)",
                  "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                  "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                  "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidPrices()",
                  "error OverflowUint256ToInt256()",
                  "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                  "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                  "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                  "error InvalidAsyncTransactionType(uint8 transactionType)",
                  "error InvalidClaim(uint256 asyncOrderId)",
                  "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                  "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                  "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                  "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "error InvalidSettlementStrategy(uint8 strategyType)",
                  "error InvalidVerificationResponse()",
                  "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                  "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                  "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidCollateralType(address configuredCollateralType)",
                  "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                  "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                  "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error InvalidCollateralLeverage(uint256)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidWrapperFees()",
                  "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                  "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                  "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                  "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                  "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                  "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                  "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                  "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                  "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                  "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                  "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                  "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                  "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                  "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                  "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                  "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                  "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                  "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                  "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                  "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                  "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "deployedOn": "router.SpotMarketRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333403",
                "deployTimestamp": "1721305667",
                "contractName": "SpotMarketRouter",
                "sourceName": "SpotMarketRouter.sol",
                "gasUsed": 868746,
                "gasCost": "10289118317"
              },
              "SynthRouter": {
                "address": "0xd485ae5977b85dd7a4df73ca2a524be61eb80e65",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error AlreadyInitialized()",
                  "error InsufficientAllowance(uint256 required, uint256 existing)",
                  "error InsufficientBalance(uint256 required, uint256 existing)",
                  "error InvalidDecayRate()",
                  "error InvalidParameter(string parameter, string reason)",
                  "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                  "event Transfer(address indexed from, address indexed to, uint256 amount)",
                  "function advanceEpoch() returns (uint256)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 amount) returns (bool)",
                  "function balanceOf(address user) view returns (uint256)",
                  "function burn(address from, uint256 amount)",
                  "function decayRate() view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 amount)",
                  "function name() view returns (string)",
                  "function setAllowance(address from, address spender, uint256 amount)",
                  "function setDecayRate(uint256 _rate)",
                  "function symbol() view returns (string)",
                  "function totalShares() view returns (uint256)",
                  "function totalSupply() view returns (uint256 supply)",
                  "function transfer(address to, uint256 amount) returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployedOn": "router.SynthRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20333404",
                "deployTimestamp": "1721305679",
                "contractName": "SynthRouter",
                "sourceName": "SynthRouter.sol",
                "gasUsed": 378297,
                "gasCost": "10432673232"
              },
              "SpotMarketProxy": {
                "address": "0x2CD12CcAc6F869650bA88a220b2eb91a937FA5c0",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error FeatureUnavailable(bytes32 which)",
                  "error InvalidMarketOwner()",
                  "error InvalidSynthImplementation(uint256 synthImplementation)",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error OnlyMarketOwner(address marketOwner, address sender)",
                  "error OverflowInt256ToUint256()",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "event DecayRateUpdated(uint128 indexed marketId, uint256 rate)",
                  "event MarketNominationRenounced(uint128 indexed marketId, address nominee)",
                  "event MarketOwnerChanged(uint128 indexed marketId, address oldOwner, address newOwner)",
                  "event MarketOwnerNominated(uint128 indexed marketId, address newOwner)",
                  "event SynthImplementationSet(address synthImplementation)",
                  "event SynthImplementationUpgraded(uint256 indexed synthMarketId, address indexed proxy, address implementation)",
                  "event SynthPriceDataUpdated(uint256 indexed synthMarketId, bytes32 indexed buyFeedId, bytes32 indexed sellFeedId, uint256 strictStalenessTolerance)",
                  "event SynthRegistered(uint256 indexed synthMarketId, address synthTokenAddress)",
                  "event SynthetixSystemSet(address synthetix, address usdTokenAddress, address oracleManager)",
                  "function acceptMarketOwnership(uint128 synthMarketId)",
                  "function createSynth(string tokenName, string tokenSymbol, address synthOwner) returns (uint128 synthMarketId)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function getMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getNominatedMarketOwner(uint128 synthMarketId) view returns (address marketOwner)",
                  "function getPriceData(uint128 synthMarketId) view returns (bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function getSynth(uint128 marketId) view returns (address synthAddress)",
                  "function getSynthImpl(uint128 marketId) view returns (address implAddress)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function minimumCredit(uint128 marketId) view returns (uint256 lockedAmount)",
                  "function name(uint128 marketId) view returns (string marketName)",
                  "function nominateMarketOwner(uint128 synthMarketId, address newNominatedOwner)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "function renounceMarketNomination(uint128 synthMarketId)",
                  "function renounceMarketOwnership(uint128 synthMarketId)",
                  "function reportedDebt(uint128 marketId) view returns (uint256 reportedDebtAmount)",
                  "function setDecayRate(uint128 marketId, uint256 rate)",
                  "function setSynthImplementation(address synthImplementation)",
                  "function setSynthetix(address synthetix)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool isSupported)",
                  "function updatePriceData(uint128 synthMarketId, bytes32 buyFeedId, bytes32 sellFeedId, uint256 strictPriceStalenessTolerance)",
                  "function upgradeSynthImpl(uint128 marketId)",
                  "error ExceedsMaxSynthAmount(uint256 maxSynthAmount, uint256 synthAmountCharged)",
                  "error ExceedsMaxUsdAmount(uint256 maxUsdAmount, uint256 usdAmountCharged)",
                  "error InsufficientAmountReceived(uint256 expected, uint256 current)",
                  "error InvalidMarket(uint128 marketId)",
                  "error InvalidPrices()",
                  "error OverflowUint256ToInt256()",
                  "event SynthBought(uint256 indexed synthMarketId, uint256 synthReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "event SynthSold(uint256 indexed synthMarketId, uint256 amountReturned, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address referrer, uint256 price)",
                  "function buy(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactIn(uint128 marketId, uint256 usdAmount, uint256 minAmountReceived, address referrer) returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function buyExactOut(uint128 marketId, uint256 synthAmount, uint256 maxUsdAmount, address referrer) returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function getMarketSkew(uint128 marketId) view returns (int256 marketSkew)",
                  "function quoteBuyExactIn(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteBuyExactOut(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 usdAmountCharged, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactIn(uint128 marketId, uint256 synthAmount, uint8 stalenessTolerance) view returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function quoteSellExactOut(uint128 marketId, uint256 usdAmount, uint8 stalenessTolerance) view returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sell(uint128 marketId, uint256 synthAmount, uint256 minUsdAmount, address referrer) returns (uint256 usdAmountReceived, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactIn(uint128 marketId, uint256 synthAmount, uint256 minAmountReceived, address referrer) returns (uint256 returnAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function sellExactOut(uint128 marketId, uint256 usdAmount, uint256 maxSynthAmount, address referrer) returns (uint256 synthToBurn, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error IneligibleForCancellation(uint256 timestamp, uint256 expirationTime)",
                  "error InsufficientSharesAmount(uint256 expected, uint256 actual)",
                  "error InvalidAsyncTransactionType(uint8 transactionType)",
                  "error InvalidClaim(uint256 asyncOrderId)",
                  "error InvalidCommitmentAmount(uint256 minimumAmount, uint256 amount)",
                  "error InvalidSettlementStrategy(uint256 settlementStrategyId)",
                  "error OrderAlreadySettled(uint256 asyncOrderId, uint256 settledAt)",
                  "event OrderCancelled(uint128 indexed marketId, uint128 indexed asyncOrderId, tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim, address indexed sender)",
                  "event OrderCommitted(uint128 indexed marketId, uint8 indexed orderType, uint256 amountProvided, uint128 asyncOrderId, address indexed sender, address referrer)",
                  "function cancelOrder(uint128 marketId, uint128 asyncOrderId)",
                  "function commitOrder(uint128 marketId, uint8 orderType, uint256 amountProvided, uint256 settlementStrategyId, uint256 minimumSettlementAmount, address referrer) returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "function getAsyncOrderClaim(uint128 marketId, uint128 asyncOrderId) pure returns (tuple(uint128 id, address owner, uint8 orderType, uint256 amountEscrowed, uint256 settlementStrategyId, uint256 commitmentTime, uint256 minimumSettlementAmount, uint256 settledAt, address referrer) asyncOrderClaim)",
                  "error InvalidSettlementStrategy(uint8 strategyType)",
                  "error InvalidVerificationResponse()",
                  "error MinimumSettlementAmountNotMet(uint256 minimum, uint256 actual)",
                  "error OutsideSettlementWindow(uint256 timestamp, uint256 startTime, uint256 expirationTime)",
                  "error OverflowUint256ToUint64()",
                  "error SettlementStrategyNotFound(uint8 strategyType)",
                  "event OrderSettled(uint128 indexed marketId, uint128 indexed asyncOrderId, uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 collectedFees, address indexed settler, uint256 price, uint8 orderType)",
                  "function settleOrder(uint128 marketId, uint128 asyncOrderId) returns (uint256 finalOrderAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error InvalidSettlementWindowDuration(uint256 duration)",
                  "event SettlementStrategyAdded(uint128 indexed synthMarketId, uint256 indexed strategyId)",
                  "event SettlementStrategySet(uint128 indexed synthMarketId, uint256 indexed strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function addSettlementStrategy(uint128 marketId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy) returns (uint256 strategyId)",
                  "function getSettlementStrategy(uint128 marketId, uint256 strategyId) view returns (tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) settlementStrategy)",
                  "function setSettlementStrategy(uint128 marketId, uint256 strategyId, tuple(uint8 strategyType, uint256 settlementDelay, uint256 settlementWindowDuration, address priceVerificationContract, bytes32 feedId, string url, uint256 settlementReward, uint256 priceDeviationTolerance, uint256 minimumUsdExchangeAmount, uint256 maxRoundingLoss, bool disabled) strategy)",
                  "function setSettlementStrategyEnabled(uint128 marketId, uint256 strategyId, bool enabled)",
                  "error FailedTransfer(address from, address to, uint256 value)",
                  "error InvalidCollateralType(address configuredCollateralType)",
                  "error WrapperExceedsMaxAmount(uint256 maxWrappableAmount, uint256 currentSupply, uint256 amountToWrap)",
                  "event SynthUnwrapped(uint256 indexed synthMarketId, uint256 amountUnwrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event SynthWrapped(uint256 indexed synthMarketId, uint256 amountWrapped, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees, uint256 feesCollected)",
                  "event WrapperSet(uint256 indexed synthMarketId, address indexed wrapCollateralType, uint256 maxWrappableAmount)",
                  "function getWrapper(uint128 marketId) view returns (address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function setWrapper(uint128 marketId, address wrapCollateralType, uint256 maxWrappableAmount)",
                  "function unwrap(uint128 marketId, uint256 unwrapAmount, uint256 minAmountReceived) returns (uint256 returnCollateralAmount, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "function wrap(uint128 marketId, uint256 wrapAmount, uint256 minAmountReceived) returns (uint256 amountToMint, tuple(uint256 fixedFees, uint256 utilizationFees, int256 skewFees, int256 wrapperFees) fees)",
                  "error InvalidCollateralLeverage(uint256)",
                  "error InvalidFeeCollectorInterface(address invalidFeeCollector)",
                  "error InvalidWrapperFees()",
                  "event AsyncFixedFeeSet(uint256 indexed synthMarketId, uint256 asyncFixedFee)",
                  "event AtomicFixedFeeSet(uint256 indexed synthMarketId, uint256 atomicFixedFee)",
                  "event CollateralLeverageSet(uint256 indexed synthMarketId, uint256 collateralLeverage)",
                  "event FeeCollectorSet(uint256 indexed synthMarketId, address feeCollector)",
                  "event MarketSkewScaleSet(uint256 indexed synthMarketId, uint256 skewScale)",
                  "event MarketUtilizationFeesSet(uint256 indexed synthMarketId, uint256 utilizationFeeRate)",
                  "event ReferrerShareUpdated(uint128 indexed marketId, address referrer, uint256 sharePercentage)",
                  "event TransactorFixedFeeSet(uint256 indexed synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "event WrapperFeesSet(uint256 indexed synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function getCollateralLeverage(uint128 synthMarketId) view returns (uint256 collateralLeverage)",
                  "function getCustomTransactorFees(uint128 synthMarketId, address transactor) view returns (uint256 fixedFeeAmount)",
                  "function getFeeCollector(uint128 synthMarketId) view returns (address feeCollector)",
                  "function getMarketFees(uint128 synthMarketId) view returns (uint256 atomicFixedFee, uint256 asyncFixedFee, int256 wrapFee, int256 unwrapFee)",
                  "function getMarketSkewScale(uint128 synthMarketId) view returns (uint256 skewScale)",
                  "function getMarketUtilizationFees(uint128 synthMarketId) view returns (uint256 utilizationFeeRate)",
                  "function getReferrerShare(uint128 synthMarketId, address referrer) view returns (uint256 sharePercentage)",
                  "function setAsyncFixedFee(uint128 synthMarketId, uint256 asyncFixedFee)",
                  "function setAtomicFixedFee(uint128 synthMarketId, uint256 atomicFixedFee)",
                  "function setCollateralLeverage(uint128 synthMarketId, uint256 collateralLeverage)",
                  "function setCustomTransactorFees(uint128 synthMarketId, address transactor, uint256 fixedFeeAmount)",
                  "function setFeeCollector(uint128 synthMarketId, address feeCollector)",
                  "function setMarketSkewScale(uint128 synthMarketId, uint256 skewScale)",
                  "function setMarketUtilizationFees(uint128 synthMarketId, uint256 utilizationFeeRate)",
                  "function setWrapperFees(uint128 synthMarketId, int256 wrapFee, int256 unwrapFee)",
                  "function updateReferrerShare(uint128 synthMarketId, address referrer, uint256 sharePercentage)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                  "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                  "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                  "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                  "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                  "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function getDeniers(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                  "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                  "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                  "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                  "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                  "function setDeniers(bytes32 feature, address[] deniers)",
                  "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                  "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgradeSpotMarketProxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "settings": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "synthetixPackage": "synthetix:3.3.15",
              "synthetixPreset": "main"
            },
            "imports": {
              "synthetix": {
                "url": "ipfs://QmQL57bhoyBFdLpVHgkFvtVxC37e5998PXKupsxann16c2",
                "contracts": {
                  "AccountModule": {
                    "address": "0xe7B2390C847e16459F1AD7e9735A93D3F80D9088",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "error ZeroAddress()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182001",
                    "deployTimestamp": "1743606279",
                    "sourceName": "contracts/modules/core/AccountModule.sol",
                    "contractName": "AccountModule",
                    "deployedOn": "contract.AccountModule",
                    "gasUsed": 1225797,
                    "gasCost": "1625316474"
                  },
                  "AccountTokenModule": {
                    "address": "0x5D2B70aBE685F3B6Ff82F5d3e6eb94085FD224cD",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787265",
                    "deployTimestamp": "1738842516",
                    "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                    "contractName": "AccountTokenModule",
                    "deployedOn": "contract.AccountTokenModule",
                    "gasUsed": 1787668,
                    "gasCost": "1376902284"
                  },
                  "AssociateDebtModule": {
                    "address": "0xb72aa6558DDC2B2969D64A9c92645586067f5686",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182002",
                    "deployTimestamp": "1743606279",
                    "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                    "contractName": "AssociateDebtModule",
                    "deployedOn": "contract.AssociateDebtModule",
                    "gasUsed": 2612609,
                    "gasCost": "1553539507"
                  },
                  "AssociatedSystemsModule": {
                    "address": "0xa8DD42C00E0e7434d04c74374CA1Da610E6Ef71C",
                    "abi": [
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error Unauthorized(address addr)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20333356",
                    "deployTimestamp": "1721305103",
                    "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                    "contractName": "AssociatedSystemsModule",
                    "deployedOn": "contract.AssociatedSystemsModule",
                    "gasUsed": 877153,
                    "gasCost": "9017689799"
                  },
                  "CcipReceiverModule": {
                    "address": "0xF122049f28315D49B8135379A796f56D3C6A03fe",
                    "abi": [
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error Unauthorized(address addr)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928365",
                    "deployTimestamp": "1728480899",
                    "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                    "contractName": "CcipReceiverModule",
                    "deployedOn": "contract.CcipReceiverModule",
                    "gasUsed": 469476,
                    "gasCost": "25231538550"
                  },
                  "CollateralConfigurationModule": {
                    "address": "0xCDF47798128b2a771465B5833ca0C3eF1C913ADd",
                    "abi": [
                      "error EmptyRevertReason()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error PositionOutOfBounds()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787267",
                    "deployTimestamp": "1738842518",
                    "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                    "contractName": "CollateralConfigurationModule",
                    "deployedOn": "contract.CollateralConfigurationModule",
                    "gasUsed": 872728,
                    "gasCost": "1300781065"
                  },
                  "CollateralModule": {
                    "address": "0xd7FE43584585954EfaE4aEdb39807534e4B6aE45",
                    "abi": [
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error AccountNotFound(uint128 accountId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182003",
                    "deployTimestamp": "1743606280",
                    "sourceName": "contracts/modules/core/CollateralModule.sol",
                    "contractName": "CollateralModule",
                    "deployedOn": "contract.CollateralModule",
                    "gasUsed": 1937434,
                    "gasCost": "1496398588"
                  },
                  "CrossChainUSDModule": {
                    "address": "0x9d227f1c685b7c207f44416Eb59e457d8d59AbdC",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928368",
                    "deployTimestamp": "1728480935",
                    "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                    "contractName": "CrossChainUSDModule",
                    "deployedOn": "contract.CrossChainUSDModule",
                    "gasUsed": 595289,
                    "gasCost": "26447314844"
                  },
                  "FeatureFlagModule": {
                    "address": "0x3E8d0225423fe6FcC0377F49B2a6046BCE6D34c7",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928369",
                    "deployTimestamp": "1728480947",
                    "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 777054,
                    "gasCost": "26552367099"
                  },
                  "IssueUSDModule": {
                    "address": "0x6FA4b55c8b9AdC03129c3796414d44cA0ef50764",
                    "abi": [
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182004",
                    "deployTimestamp": "1743606280",
                    "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                    "contractName": "IssueUSDModule",
                    "deployedOn": "contract.IssueUSDModule",
                    "gasUsed": 3042995,
                    "gasCost": "1442363261"
                  },
                  "LiquidationModule": {
                    "address": "0xA610198f9521850393DF6029d95e26b79a6918A6",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error CannotScaleEmptyMapping()",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint256ToUint64()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PositionOutOfBounds()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182005",
                    "deployTimestamp": "1743606281",
                    "sourceName": "contracts/modules/core/LiquidationModule.sol",
                    "contractName": "LiquidationModule",
                    "deployedOn": "contract.LiquidationModule",
                    "gasUsed": 4620402,
                    "gasCost": "1398285430"
                  },
                  "MarketCollateralModule": {
                    "address": "0x50a6b732B9a4Dd3cAa5F8fb33110728F8f65e4f0",
                    "abi": [
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "error Unauthorized(address addr)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787271",
                    "deployTimestamp": "1738842523",
                    "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                    "contractName": "MarketCollateralModule",
                    "deployedOn": "contract.MarketCollateralModule",
                    "gasUsed": 1298300,
                    "gasCost": "1193728026"
                  },
                  "MarketManagerModule": {
                    "address": "0x7656bDEE9f4e7A507fd0C5b2431D3F3690E20711",
                    "abi": [
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IncorrectMarketInterface(address market)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787272",
                    "deployTimestamp": "1738842524",
                    "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                    "contractName": "MarketManagerModule",
                    "deployedOn": "contract.MarketManagerModule",
                    "gasUsed": 2816393,
                    "gasCost": "1171607999"
                  },
                  "PoolConfigurationModule": {
                    "address": "0xB0A8c84360f505e050F4F76042FDC4f29320bE2A",
                    "abi": [
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842770",
                    "deployTimestamp": "1739512729",
                    "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                    "contractName": "PoolConfigurationModule",
                    "deployedOn": "contract.PoolConfigurationModule",
                    "gasUsed": 446271,
                    "gasCost": "1272805637"
                  },
                  "PoolModule": {
                    "address": "0xe8e04A78B54455705ab50F612B43739b1De68D05",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842771",
                    "deployTimestamp": "1739512731",
                    "sourceName": "contracts/modules/core/PoolModule.sol",
                    "contractName": "PoolModule",
                    "deployedOn": "contract.PoolModule",
                    "gasUsed": 4099803,
                    "gasCost": "1239719477"
                  },
                  "RewardsManagerModule": {
                    "address": "0xDdFcbBdd05a85e76Db673fc1cB7D36ecDe472CCF",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error RewardUnavailable(address distributor)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182006",
                    "deployTimestamp": "1743606281",
                    "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                    "contractName": "RewardsManagerModule",
                    "deployedOn": "contract.RewardsManagerModule",
                    "gasUsed": 2642251,
                    "gasCost": "1363835075"
                  },
                  "USDTokenModule": {
                    "address": "0x9839B57EE26ef9061fa67c2e8056217B20084072",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787276",
                    "deployTimestamp": "1738842528",
                    "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                    "contractName": "USDTokenModule",
                    "deployedOn": "contract.USDTokenModule",
                    "gasUsed": 1110294,
                    "gasCost": "1110462497"
                  },
                  "UtilsModule": {
                    "address": "0xd63B709D3E260341c07Cb4D3A62585a6A7e67FdE",
                    "abi": [
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842773",
                    "deployTimestamp": "1739512734",
                    "sourceName": "contracts/modules/core/UtilsModule.sol",
                    "contractName": "UtilsModule",
                    "deployedOn": "contract.UtilsModule",
                    "gasUsed": 770698,
                    "gasCost": "1195500364"
                  },
                  "VaultModule": {
                    "address": "0xA598e80F994aF71929710C4A42eFFE058E94Adf9",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "error PoolNotFound(uint128 poolId)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182007",
                    "deployTimestamp": "1743606282",
                    "sourceName": "contracts/modules/core/VaultModule.sol",
                    "contractName": "VaultModule",
                    "deployedOn": "contract.VaultModule",
                    "gasUsed": 4732148,
                    "gasCost": "1326366888"
                  },
                  "InitialModuleBundle": {
                    "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/modules/InitialModuleBundle.sol",
                    "contractName": "InitialModuleBundle",
                    "deployedOn": "contract.InitialModuleBundle"
                  },
                  "InitialCoreProxy": {
                    "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x828EED723cAF0A8F822249231266E38dF614923C",
                      "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialCoreProxy"
                  },
                  "AccountRouter": {
                    "address": "0x35b51e3dc2a8cf242fdcae8f07cf21a6d91ff783",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployedOn": "router.AccountRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787278",
                    "deployTimestamp": "1738842536",
                    "contractName": "AccountRouter",
                    "sourceName": "AccountRouter.sol",
                    "gasUsed": 1963401,
                    "gasCost": "1089268503"
                  },
                  "CoreRouter": {
                    "address": "0x50d8302c7010c23ec3d2dece65e8a50cc0cc5cb8",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "deployedOn": "router.CoreRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182008",
                    "deployTimestamp": "1743606293",
                    "contractName": "CoreRouter",
                    "sourceName": "CoreRouter.sol",
                    "gasUsed": 5621498,
                    "gasCost": "1298441164"
                  },
                  "USDRouter": {
                    "address": "0x71182391bb34bf922c8ba3ff3047b604ecbb202b",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.USDRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787280",
                    "deployTimestamp": "1738842592",
                    "contractName": "USDRouter",
                    "sourceName": "USDRouter.sol",
                    "gasUsed": 2087424,
                    "gasCost": "1073336908"
                  },
                  "CoreProxy": {
                    "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "constructorArgs": [
                      "<%= contracts.InitialModuleBundle.address %>",
                      "<%= settings.owner %>"
                    ],
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "AccountProxy": {
                    "address": "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "USDProxy": {
                    "address": "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "settings": {
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                },
                "imports": {
                  "oracle_manager": {
                    "url": "ipfs://QmV7BAagvh5kfYDiyBy3UJFh4BQMVsmiiEmXGVadnLTLnT",
                    "contracts": {
                      "NodeModule": {
                        "address": "0xf1e04afF68bb60af56592d4Ac3157be62BF2fad4",
                        "abi": [
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "21787261",
                        "deployTimestamp": "1738842493",
                        "sourceName": "contracts/modules/NodeModule.sol",
                        "contractName": "NodeModule",
                        "deployedOn": "contract.NodeModule",
                        "gasUsed": 4896112,
                        "gasCost": "1597095724"
                      },
                      "CoreModule": {
                        "address": "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1728480815",
                        "sourceName": "contracts/modules/CoreModule.sol",
                        "contractName": "CoreModule",
                        "deployedOn": "contract.CoreModule",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "InitialProxy": {
                        "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                          "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1728480815",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialProxy",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "OracleRouter": {
                        "address": "0x9b39032a686f68d4d7a8149005c0efe9bf3ec1aa",
                        "abi": [
                          "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                          "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                          "function facetAddresses() pure returns (address[] addresses)",
                          "function facetAddress(bytes4 functionSelector) pure returns (address)",
                          "function emitDiamondCutEvent() returns (bool)",
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployedOn": "router.OracleRouter",
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "21787262",
                        "deployTimestamp": "1738842501",
                        "contractName": "OracleRouter",
                        "sourceName": "OracleRouter.sol",
                        "gasUsed": 1728163,
                        "gasCost": "1546820822"
                      },
                      "Proxy": {
                        "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                        "abi": [
                          "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                          "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                          "function facetAddresses() pure returns (address[] addresses)",
                          "function facetAddress(bytes4 functionSelector) pure returns (address)",
                          "function emitDiamondCutEvent() returns (bool)",
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmbSAhExRT5TwFpa2ki8WZmv8PrdQnQFutw7Qt7aQr8YBG",
                        "tags": [
                          "latest"
                        ],
                        "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                        "preset": "with-oracle-manager",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1728480815",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      }
                    },
                    "settings": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    },
                    "txns": {
                      "upgrade_proxy": {
                        "hash": "0x13d2b20513ff1850b5d014df38311142a317418d07a8fc358cc680f58f1f6822",
                        "blockNumber": "21787263",
                        "timestamp": "1738842507",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                                "0x9b39032a686f68d4d7A8149005C0efe9bF3Ec1aa"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 55400,
                        "gasCost": "1486343182",
                        "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                      }
                    },
                    "extras": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    }
                  }
                },
                "txns": {
                  "register_const_one_oracle": {
                    "hash": "0xc364170bfa95b109ebd21a59c7929598bfbc1f3aa61674fd242ba951fe53b18e",
                    "events": {
                      "NodeRegistered": [
                        {
                          "name": "NodeRegistered",
                          "args": [
                            "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                            8,
                            "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                            []
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.register_const_one_oracle"
                  },
                  "upgrade_core_proxy": {
                    "hash": "0x1406d0004a87cce936c31cde83d3a597ba23c9feba4a5e5fd911d389f7ef2efe",
                    "blockNumber": "22182009",
                    "timestamp": "1743606295",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                            "0x50d8302C7010C23eC3D2decE65e8a50CC0CC5CB8"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 51371,
                    "gasCost": "1275116739",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_burnUsd": {
                    "hash": "",
                    "blockNumber": "20339936",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6275726e55736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_burnUsd",
                    "gasUsed": 37049,
                    "gasCost": "3856990971",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_claimRewards": {
                    "hash": "",
                    "blockNumber": "20339937",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x636c61696d526577617264730000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_claimRewards",
                    "gasUsed": 37109,
                    "gasCost": "3500749172",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_createAccount": {
                    "hash": "",
                    "blockNumber": "20339938",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_createAccount",
                    "gasUsed": 37121,
                    "gasCost": "3188928862",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_delegateCollateral": {
                    "hash": "",
                    "blockNumber": "20339939",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_delegateCollateral",
                    "gasUsed": 37181,
                    "gasCost": "2915989882",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_deposit": {
                    "hash": "",
                    "blockNumber": "20339940",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f73697400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_deposit",
                    "gasUsed": 37049,
                    "gasCost": "2677084801",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_depositMarketCollateral": {
                    "hash": "",
                    "blockNumber": "20339941",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                    "gasUsed": 37241,
                    "gasCost": "2467966987",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_depositMarketUsd": {
                    "hash": "",
                    "blockNumber": "20339942",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketUsd",
                    "gasUsed": 37157,
                    "gasCost": "2284926685",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidate": {
                    "hash": "",
                    "blockNumber": "20339943",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174650000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidate",
                    "gasUsed": 37073,
                    "gasCost": "2124708717",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidateToTreasury": {
                    "hash": "0xd40bc0c8fc5179c6a742d96338a6462dbf883e9e27cd987df95e7d990b4d2078",
                    "blockNumber": "22182010",
                    "timestamp": "1743606296",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c6971756964617465546f547265617375727900000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateToTreasury",
                    "gasUsed": 57111,
                    "gasCost": "1240844922",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidateVault": {
                    "hash": "",
                    "blockNumber": "20339944",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateVault",
                    "gasUsed": 37133,
                    "gasCost": "1984467597",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_migrateDelegation": {
                    "hash": "0x92543f30f35ce8d775e52b5648a44b141dacb02744b95ef7c3b8830a772226e2",
                    "blockNumber": "21787282",
                    "timestamp": "1738842601",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d69677261746544656c65676174696f6e000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_migrateDelegation",
                    "gasUsed": 57109,
                    "gasCost": "1057292814",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_mintUsd": {
                    "hash": "",
                    "blockNumber": "20339945",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_mintUsd",
                    "gasUsed": 37049,
                    "gasCost": "1861713783",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdraw": {
                    "hash": "",
                    "blockNumber": "20339946",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x7769746864726177000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdraw",
                    "gasUsed": 37061,
                    "gasCost": "1754265608",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdrawMarketCollateral": {
                    "hash": "",
                    "blockNumber": "20339947",
                    "timestamp": "1721384407",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                    "gasUsed": 37253,
                    "gasCost": "1660215356",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdrawMarketUsd": {
                    "hash": "",
                    "blockNumber": "20339948",
                    "timestamp": "1721384407",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                    "gasUsed": 37169,
                    "gasCost": "1577893395",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "init_account": {
                    "hash": "0x28024a548db5d269ab472f3216b86513f15edf8126dcc490add21c48b5f08033",
                    "blockNumber": "21787283",
                    "timestamp": "1738842609",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                            "0x35B51e3Dc2a8Cf242FdCaE8F07CF21A6D91ff783"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633732310000000000000000000000000000000000000000000000000000",
                            "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                            "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                            "0x35B51e3Dc2a8Cf242FdCaE8F07CF21A6D91ff783"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 80746,
                    "gasCost": "1050158479",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "init_usd": {
                    "hash": "0x4b7971fec2cbb0ec7376030e9329b11912a8dc77e6c2323e91fdae0d128dca52",
                    "blockNumber": "21787284",
                    "timestamp": "1738842616",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            "0x71182391bB34BF922C8BA3FF3047B604EcBB202B"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633230000000000000000000000000000000000000000000000000000000",
                            "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            "0x71182391bB34BF922C8BA3FF3047B604EcBB202B"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 94076,
                    "gasCost": "1043922420",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "set_oracle_manager": {
                    "hash": "0xd14a861aba2399243d6b4bb66289c06a6ca3269b8509fe2af0ca92ed2be6f2e4",
                    "events": {},
                    "deployedOn": "invoke.set_oracle_manager"
                  },
                  "configure_usd_collateral": {
                    "hash": "0x00e044c8fb2f008138244ea81ea15b1ecdbf370b22e70361060b37e1d11cf271",
                    "events": {
                      "CollateralConfigured": [
                        {
                          "name": "CollateralConfigured",
                          "args": [
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            [
                              true,
                              {
                                "type": "BigNumber",
                                "hex": "0x8ac7230489e80000"
                              },
                              {
                                "type": "BigNumber",
                                "hex": "0x8ac7230489e80000"
                              },
                              {
                                "type": "BigNumber",
                                "hex": "0x00"
                              },
                              "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                              "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                              {
                                "type": "BigNumber",
                                "hex": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.configure_usd_collateral"
                  }
                },
                "extras": {
                  "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                }
              }
            },
            "txns": {
              "upgradeSpotMarketProxy": {
                "hash": "",
                "blockNumber": "20339961",
                "timestamp": "1721384429",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x2CD12CcAc6F869650bA88a220b2eb91a937FA5c0",
                        "0x5C41360f2263596E565f4B23D96FB0677C927Cfd"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgradeSpotMarketProxy",
                "gasUsed": 51965,
                "gasCost": "1103234330",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "addCreateSynthToFeatureFlag": {
                "hash": "",
                "blockNumber": "20339962",
                "timestamp": "1721384434",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x63726561746553796e7468000000000000000000000000000000000000000000",
                        "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.addCreateSynthToFeatureFlag",
                "gasUsed": 101729,
                "gasCost": "1090374744",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "addSpotMarketToFeatureFlag": {
                "hash": "",
                "blockNumber": "20339963",
                "timestamp": "1721384435",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                        "0x2CD12CcAc6F869650bA88a220b2eb91a937FA5c0"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.addSpotMarketToFeatureFlag",
                "gasUsed": 84533,
                "gasCost": "1079154516",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "setSynthImplementation": {
                "hash": "",
                "blockNumber": "20339964",
                "timestamp": "1721384435",
                "events": {
                  "SynthImplementationSet": [
                    {
                      "name": "SynthImplementationSet",
                      "args": [
                        "0xD485Ae5977B85dd7a4Df73ca2A524be61Eb80e65"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setSynthImplementation",
                "gasUsed": 56198,
                "gasCost": "1069315962",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "setSynthetixSystem": {
                "hash": "",
                "blockNumber": "20339965",
                "timestamp": "1721384436",
                "events": {
                  "SynthetixSystemSet": [
                    {
                      "name": "SynthetixSystemSet",
                      "args": [
                        "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                        "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                        "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setSynthetixSystem",
                "gasUsed": 124255,
                "gasCost": "1060683929",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              }
            },
            "extras": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "snax",
              "synthetixPackage": "synthetix:3.3.15",
              "synthetixPreset": "main"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.registerUsdeWithStaleness": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerUsdeWithStaleness": {
            "hash": "0xcc808e3008329d81fc4cd1d2b0e50ec54432e988d94d57514e3d731dd5df9f8d",
            "blockNumber": "20333405",
            "timestamp": "1721305691",
            "events": {
              "NodeRegistered": [
                {
                  "name": "NodeRegistered",
                  "args": [
                    "0xc36fbc07601eafcdc7f67c5d7ad39295b34f95704b133fceeaf273cf1f0115b3",
                    7,
                    "0x000000000000000000000000000000000000000000000000000000000001fa40",
                    [
                      "0x50d5252e0e6187250031a3df01cd49930781e14b4efc5c16a30161facc6b612b"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerUsdeWithStaleness",
            "gasUsed": 199327,
            "gasCost": "10052649550",
            "signer": "0xe2163dd599067919d1e9108929b568Bf41D3A420"
          }
        },
        "settings": {
          "usde_oracle_id": "0xc36fbc07601eafcdc7f67c5d7ad39295b34f95704b133fceeaf273cf1f0115b3"
        }
      },
      "hash": "c0d2f40ef1bab77d9dd0a89a2aea6487",
      "version": 7
    },
    "setting.snx_address": {
      "artifacts": {
        "settings": {
          "snx_address": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F"
        }
      },
      "hash": "889e6075cf1dd4e871e0b34e12f76ac9",
      "version": 7
    },
    "invoke.pauseLMMigration": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "pauseLMMigration": {
            "hash": "",
            "blockNumber": "20339966",
            "timestamp": "1721384437",
            "events": {
              "PauseMigrationSet": [
                {
                  "name": "PauseMigrationSet",
                  "args": [
                    "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.pauseLMMigration",
            "gasUsed": 53087,
            "gasCost": "1053161274",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "531b4f0057cafe3a958edc09169a27c3",
      "version": 7
    },
    "invoke.setScPoolConfig": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setScPoolConfig": {
            "hash": "",
            "blockNumber": "20340185",
            "timestamp": "1721387403",
            "events": {
              "PoolConfigurationSet": [
                {
                  "name": "PoolConfigurationSet",
                  "args": [
                    "1",
                    [
                      {
                        "marketId": "1",
                        "weightD18": "100",
                        "maxDebtShareValueD18": "1000000000000000000"
                      }
                    ],
                    "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setScPoolConfig",
            "gasUsed": 350373,
            "gasCost": "4393644122",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "ddcf36cee09c44315f0079828d3abd29",
      "version": 7
    },
    "invoke.registerRewardsDistributor": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "registerRewardsDistributor": {
            "hash": "",
            "blockNumber": "20340186",
            "timestamp": "1721387409",
            "events": {
              "RewardsDistributorRegistered": [
                {
                  "name": "RewardsDistributorRegistered",
                  "args": [
                    "1",
                    "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
                    "0xEb1285672BA71CD73e6f54EC5Be717b1d008e7DD"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.registerRewardsDistributor",
            "gasUsed": 128983,
            "gasCost": "3979347285",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "92b04aabbe5ac53b0f02ba58312540c3",
      "version": 7
    },
    "invoke.createUsdeSynth": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createUsdeSynth": {
            "hash": "",
            "blockNumber": "20389729",
            "timestamp": "1721984953",
            "events": {
              "AssociatedSystemSet": [
                {
                  "name": "AssociatedSystemSet",
                  "args": [
                    "0x6572633230000000000000000000000000000000000000000000000000000000",
                    "0xb8dbcf7ce16e156a8d43319ed5b90e37f573e563159aad9f32277ff88f97dacb",
                    "0x3f3eD1002F55121b8213182f09d4BE544E08B9F9",
                    "0xD485Ae5977B85dd7a4Df73ca2A524be61Eb80e65"
                  ]
                }
              ],
              "SynthRegistered": [
                {
                  "name": "SynthRegistered",
                  "args": [
                    "2",
                    "0x3f3eD1002F55121b8213182f09d4BE544E08B9F9"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createUsdeSynth",
            "gasUsed": 523554,
            "gasCost": "3491525071",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {
          "synth_usde_market_id": "2",
          "synth_usde_token_address": "0x3f3eD1002F55121b8213182f09d4BE544E08B9F9"
        }
      },
      "hash": "760282b71fdf89dc3918fe8832d8e7d2",
      "version": 7
    },
    "import.v2x": {
      "artifacts": {
        "imports": {
          "v2x": {
            "url": "ipfs://QmPJr4roMrX9S5HpNp4KKToYxJQK1CD8wHkd9nn2oiob7w",
            "settings": {
              "network": "sepolia"
            },
            "contracts": {
              "Depot": {
                "address": "0xE1f64079aDa6Ef07b03982Ca34f1dD7152AA3b86",
                "sourceName": "contracts/Depot.sol",
                "contractName": "Depot",
                "abi": [
                  "function exchangeEtherForSNX() payable returns (uint256)",
                  "function resolver() view returns (address)",
                  "function minimumDepositAmount() view returns (uint256)",
                  "function exchangeEtherForSynthsAtRate(uint256 guaranteedRate) payable returns (uint256)",
                  "function synthsReceivedForEther(uint256 amount) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function setPaused(bool _paused)",
                  "function initiationTime() view returns (uint256)",
                  "function exchangeEtherForSynths() payable returns (uint256)",
                  "function setSelfDestructBeneficiary(address _beneficiary)",
                  "function fundsWallet() view returns (address)",
                  "function terminateSelfDestruct()",
                  "function totalSellableDeposits() view returns (uint256)",
                  "function setResolver(address _resolver)",
                  "function nominatedOwner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function setFundsWallet(address _fundsWallet)",
                  "function depositStartIndex() view returns (uint256)",
                  "function acceptOwnership()",
                  "function withdrawMyDepositedSynths()",
                  "function owner() view returns (address)",
                  "function lastPauseTime() view returns (uint256)",
                  "function exchangeEtherForSNXAtRate(uint256 guaranteedEtherRate, uint256 guaranteedSynthetixRate) payable returns (uint256)",
                  "function selfDestruct()",
                  "function synthetixReceivedForSynths(uint256 amount) view returns (uint256)",
                  "function SELFDESTRUCT_DELAY() view returns (uint256)",
                  "function setMinimumDepositAmount(uint256 _amount)",
                  "function deposits(uint256) view returns (address user, uint256 amount)",
                  "function exchangeSynthsForSNXAtRate(uint256 synthAmount, uint256 guaranteedRate) returns (uint256)",
                  "function maxEthPurchase() view returns (uint256)",
                  "function selfDestructInitiated() view returns (bool)",
                  "function setMaxEthPurchase(uint256 _maxEthPurchase)",
                  "function initiateSelfDestruct()",
                  "function selfDestructBeneficiary() view returns (address)",
                  "function smallDeposits(address) view returns (uint256)",
                  "function synthetixReceivedForEther(uint256 amount) view returns (uint256)",
                  "function depositSynths(uint256 amount)",
                  "function withdrawSynthetix(uint256 amount)",
                  "function exchangeSynthsForSNX(uint256 synthAmount) returns (uint256)",
                  "function depositEndIndex() view returns (uint256)",
                  "constructor(address _owner, address _fundsWallet, address _resolver)",
                  "event MaxEthPurchaseUpdated(uint256 amount)",
                  "event FundsWalletUpdated(address newFundsWallet)",
                  "event Exchange(string fromCurrency, uint256 fromAmount, string toCurrency, uint256 toAmount)",
                  "event SynthWithdrawal(address user, uint256 amount)",
                  "event SynthDeposit(address indexed user, uint256 amount, uint256 indexed depositIndex)",
                  "event SynthDepositRemoved(address indexed user, uint256 amount, uint256 indexed depositIndex)",
                  "event SynthDepositNotAccepted(address user, uint256 amount, uint256 minimum)",
                  "event MinimumDepositAmountUpdated(uint256 amount)",
                  "event NonPayableContract(address indexed receiver, uint256 amount)",
                  "event ClearedDeposit(address indexed fromAddress, address indexed toAddress, uint256 fromETHAmount, uint256 toAmount, uint256 indexed depositIndex)",
                  "event PauseChanged(bool isPaused)",
                  "event SelfDestructTerminated()",
                  "event SelfDestructed(address beneficiary)",
                  "event SelfDestructInitiated(uint256 selfDestructDelay)",
                  "event SelfDestructBeneficiaryUpdated(address newBeneficiary)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x7246da8ec30f70ac783498a5b79408cc5ae049ea71bc6bf393557cf3e2c9a8ad",
                "deployedOn": "run.synthetix"
              },
              "EscrowChecker": {
                "address": "0x3b399e00AFd8201ACf8A5a0EcCF1C47d8D5E41da",
                "sourceName": "contracts/EscrowChecker.sol",
                "contractName": "EscrowChecker",
                "abi": [
                  "function checkAccountSchedule(address account) view returns (uint256[16])",
                  "function synthetix_escrow() view returns (address)",
                  "constructor(address _esc)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xa582498dfb84e432ce0e8d0f1e61e4874169337b68ef38a35afd9bee23f00b84",
                "deployedOn": "run.synthetix"
              },
              "ExchangeRates": {
                "address": "0x648280dD2db772CD018A0CEC72fab5bF8B7683AB",
                "sourceName": "contracts/ExchangeRatesWithDexPricing.sol",
                "contractName": "ExchangeRatesWithDexPricing",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event AggregatorAdded(bytes32 currencyKey, address aggregator)",
                  "event AggregatorRemoved(bytes32 currencyKey, address aggregator)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event DexPriceAggregatorUpdated(address newDexPriceAggregator)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function addAggregator(bytes32 currencyKey, address aggregatorAddress)",
                  "function aggregatorKeys(uint256) view returns (bytes32)",
                  "function aggregatorWarningFlags() view returns (address)",
                  "function aggregators(bytes32) view returns (address)",
                  "function anyRateIsInvalid(bytes32[] currencyKeys) view returns (bool)",
                  "function anyRateIsInvalidAtRound(bytes32[] currencyKeys, uint256[] roundIds) view returns (bool)",
                  "function currenciesUsingAggregator(address aggregator) view returns (bytes32[] currencies)",
                  "function currencyKeyDecimals(bytes32) view returns (uint8)",
                  "function dexPriceAggregator() view returns (address)",
                  "function effectiveAtomicValueAndRates(bytes32 sourceCurrencyKey, uint256 amount, bytes32 destinationCurrencyKey) view returns (uint256 value, uint256 systemValue, uint256 systemSourceRate, uint256 systemDestinationRate)",
                  "function effectiveAtomicValueAndRates(tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) sourceSettings, uint256 sourceAmount, tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) destinationSettings, tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) usdSettings) view returns (uint256 value, uint256 systemValue, uint256 systemSourceRate, uint256 systemDestinationRate)",
                  "function effectiveValue(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) view returns (uint256 value)",
                  "function effectiveValueAndRates(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) view returns (uint256 value, uint256 sourceRate, uint256 destinationRate)",
                  "function effectiveValueAndRatesAtRound(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, uint256 roundIdForSrc, uint256 roundIdForDest) view returns (uint256 value, uint256 sourceRate, uint256 destinationRate)",
                  "function getCurrentRoundId(bytes32 currencyKey) view returns (uint256)",
                  "function getLastRoundIdBeforeElapsedSecs(bytes32 currencyKey, uint256 startingRoundId, uint256 startingTimestamp, uint256 timediff) view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function lastRateUpdateTimes(bytes32 currencyKey) view returns (uint256)",
                  "function lastRateUpdateTimesForCurrencies(bytes32[] currencyKeys) view returns (uint256[])",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rateAndInvalid(bytes32 currencyKey) view returns (uint256 rate, bool isInvalid)",
                  "function rateAndTimestampAtRound(bytes32 currencyKey, uint256 roundId) view returns (uint256 rate, uint256 time)",
                  "function rateAndUpdatedTime(bytes32 currencyKey) view returns (uint256 rate, uint256 time)",
                  "function rateForCurrency(bytes32 currencyKey) view returns (uint256)",
                  "function rateIsFlagged(bytes32 currencyKey) view returns (bool)",
                  "function rateIsInvalid(bytes32 currencyKey) view returns (bool)",
                  "function rateIsStale(bytes32 currencyKey) view returns (bool)",
                  "function rateStalePeriod() view returns (uint256)",
                  "function rateWithSafetyChecks(bytes32 currencyKey) returns (uint256 rate, bool broken, bool staleOrInvalid)",
                  "function ratesAndInvalidForCurrencies(bytes32[] currencyKeys) view returns (uint256[] rates, bool anyRateInvalid)",
                  "function ratesAndUpdatedTimeForCurrencyLastNRounds(bytes32 currencyKey, uint256 numRounds, uint256 roundId) view returns (uint256[] rates, uint256[] times)",
                  "function ratesForCurrencies(bytes32[] currencyKeys) view returns (uint256[])",
                  "function rebuildCache()",
                  "function removeAggregator(bytes32 currencyKey)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setDexPriceAggregator(address _dexPriceAggregator)",
                  "function synthTooVolatileForAtomicExchange(bytes32 currencyKey) view returns (bool)",
                  "function synthTooVolatileForAtomicExchange(tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) settings) view returns (bool)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x199dbd6fead9bde5b2f3b363c5dff003a4c735575bdb501b2ddb166b41e849b4",
                "deployedOn": "run.synthetix"
              },
              "FeePool": {
                "address": "0x83105D7CDd2fd9b8185BFF1cb56bB1595a618618",
                "sourceName": "contracts/FeePool.sol",
                "contractName": "FeePool",
                "abi": [
                  "constructor(address _proxy, address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event FeePeriodClosed(uint256 feePeriodId)",
                  "event FeesClaimed(address account, uint256 sUSDAmount, uint256 snxRewards)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function FEE_PERIOD_LENGTH() view returns (uint8)",
                  "function acceptOwnership()",
                  "function allNetworksDebtSharesSupply() view returns (uint256 sharesSupply, uint256 updatedAt)",
                  "function allNetworksSnxBackedDebt() view returns (uint256 debt, uint256 updatedAt)",
                  "function claimFees() returns (bool)",
                  "function claimOnBehalf(address claimingForAddress) returns (bool)",
                  "function closeCurrentFeePeriod()",
                  "function closeSecondary(uint256 allNetworksSnxBackedDebt, uint256 allNetworksDebtSharesSupply)",
                  "function effectiveDebtRatioForPeriod(address account, uint256 period) view returns (uint256)",
                  "function feePeriodDuration() view returns (uint256)",
                  "function feesAvailable(address account) view returns (uint256, uint256)",
                  "function feesBurned(address account) view returns (uint256)",
                  "function feesByPeriod(address account) view returns (uint256[2][2] results)",
                  "function feesToBurn(address account) view returns (uint256 feesFromPeriod)",
                  "function getLastFeeWithdrawal(address _claimingAddress) view returns (uint256)",
                  "function getPenaltyThresholdRatio() view returns (uint256)",
                  "function importFeePeriod(uint256 feePeriodIndex, uint256 feePeriodId, uint256 startTime, uint256 feesToDistribute, uint256 feesClaimed, uint256 rewardsToDistribute, uint256 rewardsClaimed)",
                  "function isFeesClaimable(address account) view returns (bool feesClaimable)",
                  "function isResolverCached() view returns (bool)",
                  "function issuanceRatio() view returns (uint256)",
                  "function messageSender() view returns (address)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function recentFeePeriods(uint256 index) view returns (uint64 feePeriodId, uint64 unused, uint64 startTime, uint256 feesToDistribute, uint256 feesClaimed, uint256 rewardsToDistribute, uint256 rewardsClaimed)",
                  "function recordFeePaid(uint256 amount)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setRewardsToDistribute(uint256 amount)",
                  "function setupExpiryTime() view returns (uint256)",
                  "function targetThreshold() view returns (uint256)",
                  "function totalFeesAvailable() view returns (uint256)",
                  "function totalFeesBurned() view returns (uint256)",
                  "function totalRewardsAvailable() view returns (uint256)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xe00049956356698200908481fa6e6d2fc808aa24c680503834a6b28c490c1cd1",
                "deployedOn": "run.synthetix"
              },
              "ProxyFeePool": {
                "address": "0xb440DD674e1243644791a4AdfE3A2AbB0A92d309",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "abi": [
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function setTarget(address _target)",
                  "function acceptOwnership()",
                  "function owner() view returns (address)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function useDELEGATECALL() view returns (bool)",
                  "function setUseDELEGATECALL(bool value)",
                  "function target() view returns (address)",
                  "constructor(address _owner)",
                  "event TargetUpdated(address newTarget)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployedOn": "run.synthetix"
              },
              "ProxysAUD": {
                "address": "0xF48e200EAF9906362BB1442fca31e0835773b8B4",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysBTC": {
                "address": "0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysCHF": {
                "address": "0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysEUR": {
                "address": "0xD71eCFF9342A5Ced620049e616c5035F1dB98620",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysGBP": {
                "address": "0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysJPY": {
                "address": "0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysUSD": {
                "address": "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "abi": [
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function setTarget(address _target)",
                  "function acceptOwnership()",
                  "function owner() view returns (address)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function useDELEGATECALL() view returns (bool)",
                  "function setUseDELEGATECALL(bool value)",
                  "function target() view returns (address)",
                  "constructor(address _owner)",
                  "event TargetUpdated(address newTarget)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxyERC20sUSD": {
                "address": "0x57Ab1ec28D129707052df4dF418D58a2D46d5f51",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxySynthetix": {
                "address": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "abi": [
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function setTarget(address _target)",
                  "function acceptOwnership()",
                  "function owner() view returns (address)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function useDELEGATECALL() view returns (bool)",
                  "function setUseDELEGATECALL(bool value)",
                  "function target() view returns (address)",
                  "constructor(address _owner)",
                  "event TargetUpdated(address newTarget)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployedOn": "run.synthetix"
              },
              "SafeDecimalMath": {
                "address": "0x84D626B2BB4D0F064067e4BF80FCe7055d8F3E7B",
                "sourceName": "contracts/SafeDecimalMath.sol",
                "contractName": "SafeDecimalMath",
                "abi": [
                  "function decimals() view returns (uint8)",
                  "function PRECISE_UNIT() view returns (uint256)",
                  "function unit() pure returns (uint256)",
                  "function UNIT() view returns (uint256)",
                  "function preciseUnit() pure returns (uint256)",
                  "function highPrecisionDecimals() view returns (uint8)"
                ],
                "deployedOn": "run.synthetix"
              },
              "Synthetix": {
                "address": "0xc5f0b4194455e0C175ab68C501400e46C7203504",
                "sourceName": "contracts/Synthetix.sol",
                "contractName": "Synthetix",
                "abi": [
                  "constructor(address _proxy, address _tokenState, address _owner, uint256 _totalSupply, address _resolver)",
                  "event AccountLiquidated(address indexed account, uint256 snxRedeemed, uint256 amountLiquidated, address liquidator)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event AtomicSynthExchange(address indexed account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event ExchangeRebate(address indexed account, bytes32 currencyKey, uint256 amount)",
                  "event ExchangeReclaim(address indexed account, bytes32 currencyKey, uint256 amount)",
                  "event ExchangeTracking(bytes32 indexed trackingCode, bytes32 toCurrencyKey, uint256 toAmount, uint256 fee)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event SynthExchange(address indexed account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function TOKEN_NAME() view returns (string)",
                  "function TOKEN_SYMBOL() view returns (string)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function anySynthOrSNXRateIsInvalid() view returns (bool anyRateInvalid)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function availableCurrencyKeys() view returns (bytes32[])",
                  "function availableSynthCount() view returns (uint256)",
                  "function availableSynths(uint256 index) view returns (address)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burnSecondary(address, uint256)",
                  "function burnSynths(uint256 amount)",
                  "function burnSynthsOnBehalf(address burnForAddress, uint256 amount)",
                  "function burnSynthsToTarget()",
                  "function burnSynthsToTargetOnBehalf(address burnForAddress)",
                  "function collateral(address account) view returns (uint256)",
                  "function collateralisationRatio(address _issuer) view returns (uint256)",
                  "function debtBalanceOf(address account, bytes32 currencyKey) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function emitAtomicSynthExchange(address account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                  "function emitExchangeRebate(address account, bytes32 currencyKey, uint256 amount)",
                  "function emitExchangeReclaim(address account, bytes32 currencyKey, uint256 amount)",
                  "function emitExchangeTracking(bytes32 trackingCode, bytes32 toCurrencyKey, uint256 toAmount, uint256 fee)",
                  "function emitSynthExchange(address account, bytes32 fromCurrencyKey, uint256 fromAmount, bytes32 toCurrencyKey, uint256 toAmount, address toAddress)",
                  "function exchange(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) returns (uint256 amountReceived)",
                  "function exchangeAtomically(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, bytes32 trackingCode, uint256 minAmount) returns (uint256 amountReceived)",
                  "function exchangeOnBehalf(address exchangeForAddress, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) returns (uint256 amountReceived)",
                  "function exchangeOnBehalfWithTracking(address exchangeForAddress, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived)",
                  "function exchangeWithTracking(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived)",
                  "function exchangeWithTrackingForInitiator(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived)",
                  "function exchangeWithVirtual(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, bytes32 trackingCode) returns (uint256 amountReceived, address vSynth)",
                  "function getFirstNonZeroEscrowIndex(address account) view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function isWaitingPeriod(bytes32 currencyKey) view returns (bool)",
                  "function issueMaxSynths()",
                  "function issueMaxSynthsOnBehalf(address issueForAddress)",
                  "function issueSynths(uint256 amount)",
                  "function issueSynthsOnBehalf(address issueForAddress, uint256 amount)",
                  "function liquidateDelinquentAccount(address account) returns (bool)",
                  "function liquidateDelinquentAccountEscrowIndex(address account, uint256 escrowStartIndex) returns (bool)",
                  "function liquidateSelf() returns (bool)",
                  "function maxIssuableSynths(address account) view returns (uint256 maxIssuable)",
                  "function messageSender() view returns (address)",
                  "function migrateAccountBalances(address account) returns (uint256 totalEscrowRevoked, uint256 totalLiquidBalance)",
                  "function migrateEscrowBalanceToRewardEscrowV2()",
                  "function migrateEscrowContractBalance()",
                  "function mint() returns (bool)",
                  "function mintSecondary(address, uint256)",
                  "function mintSecondaryRewards(uint256)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function remainingIssuableSynths(address account) view returns (uint256 maxIssuable, uint256 alreadyIssued, uint256 totalSystemDebt)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function sUSD() view returns (bytes32)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function settle(bytes32 currencyKey) returns (uint256 reclaimed, uint256 refunded, uint256 numEntriesSettled)",
                  "function symbol() view returns (string)",
                  "function synths(bytes32 currencyKey) view returns (address)",
                  "function synthsByAddress(address synthAddress) view returns (bytes32)",
                  "function tokenState() view returns (address)",
                  "function totalIssuedSynths(bytes32 currencyKey) view returns (uint256)",
                  "function totalIssuedSynthsExcludeOtherCollateral(bytes32 currencyKey) view returns (uint256)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynthetix(address account) view returns (uint256 transferable)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x84fda049dec0e85c997d5014a5e1c4a9a7dc74cb971e2156d6f809355a01bb1f",
                "deployedOn": "run.synthetix"
              },
              "SynthetixEscrow": {
                "address": "0x971e78e0C92392A4E39099835cF7E6aB535b2227",
                "sourceName": "contracts/SynthetixEscrow.sol",
                "contractName": "SynthetixEscrow",
                "abi": [
                  "function purgeAccount(address account)",
                  "function withdrawHavvens(uint256 quantity)",
                  "function getNextVestingIndex(address account) view returns (uint256)",
                  "function appendVestingEntry(address account, uint256 time, uint256 quantity)",
                  "function numVestingEntries(address account) view returns (uint256)",
                  "function totalVestedAccountBalance(address) view returns (uint256)",
                  "function getNextVestingEntry(address account) view returns (uint256[2])",
                  "function decimals() view returns (uint8)",
                  "function vest()",
                  "function vestingSchedules(address, uint256, uint256) view returns (uint256)",
                  "function setHavven(address _havven)",
                  "function nominatedOwner() view returns (address)",
                  "function nominateOwner(address _owner)",
                  "function getNextVestingTime(address account) view returns (uint256)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function acceptOwnership()",
                  "function owner() view returns (address)",
                  "function getNextVestingQuantity(address account) view returns (uint256)",
                  "function getVestingTime(address account, uint256 index) view returns (uint256)",
                  "function havven() view returns (address)",
                  "function UNIT() view returns (uint256)",
                  "function totalVestedBalance() view returns (uint256)",
                  "function addVestingSchedule(address account, uint256[] times, uint256[] quantities)",
                  "function getVestingScheduleEntry(address account, uint256 index) view returns (uint256[2])",
                  "function getVestingQuantity(address account, uint256 index) view returns (uint256)",
                  "constructor(address _owner, address _havven)",
                  "event HavvenUpdated(address newHavven)",
                  "event Vested(address beneficiary, address indexed beneficiaryIndex, uint256 time, uint256 value)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployedOn": "run.synthetix"
              },
              "SynthetixState": {
                "address": "0x4b9Ca5607f1fF8019c1C6A3c2f0CC8de622D5B82",
                "sourceName": "contracts/legacy/SynthetixState.sol",
                "contractName": "SynthetixState",
                "abi": [
                  "function setIssuanceRatio(uint256 _issuanceRatio)",
                  "function debtLedger(uint256) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function importedXDRAmount() view returns (uint256)",
                  "function incrementTotalIssuerCount()",
                  "function appendDebtLedgerValue(uint256 value)",
                  "function lastDebtLedgerEntry() view returns (uint256)",
                  "function setPreferredCurrency(address account, bytes4 currencyKey)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function nominatedOwner() view returns (address)",
                  "function acceptOwnership()",
                  "function issuanceData(address) view returns (uint256 initialDebtOwnership, uint256 debtEntryIndex)",
                  "function owner() view returns (address)",
                  "function totalIssuerCount() view returns (uint256)",
                  "function importIssuerData(address[] accounts, uint256[] sUSDAmounts)",
                  "function setCurrentIssuanceData(address account, uint256 initialDebtOwnership)",
                  "function associatedContract() view returns (address)",
                  "function clearIssuanceData(address account)",
                  "function issuanceRatio() view returns (uint256)",
                  "function hasIssued(address account) view returns (bool)",
                  "function decrementTotalIssuerCount()",
                  "function preferredCurrency(address) view returns (bytes4)",
                  "function debtLedgerLength() view returns (uint256)",
                  "constructor(address _owner, address _associatedContract)",
                  "event IssuanceRatioUpdated(uint256 newRatio)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployedOn": "run.synthetix"
              },
              "SynthsAUD": {
                "address": "0xfb020CA7f4e8C4a5bBBe060f59a249c6275d2b69",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsBTC": {
                "address": "0x1cB004a8e84a5CE95C1fF895EE603BaC8EC506c7",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsCHF": {
                "address": "0xBb5b03E920cF702De5A3bA9Fc1445aF4B3919c88",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsEUR": {
                "address": "0xa8E31E3C38aDD6052A9407298FAEB8fD393A6cF9",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsGBP": {
                "address": "0xdc883b9d9Ee16f74bE08826E68dF4C9D9d26e8bD",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsJPY": {
                "address": "0xE1cc2332852B2Ac0dA59A1f9D3051829f4eF3c1C",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsUSD": {
                "address": "0x10A5F7D9D65bCc2734763444D4940a31b109275f",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xc90a844a8d8bcbecf266b2f4fe039e2933ba2f38fb7b063189cb7e97cc085c7e",
                "deployedOn": "run.synthetix"
              },
              "TokenStatesAUD": {
                "address": "0xCb29D2cf2C65d3Be1d00F07f3441390432D55203",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployedOn": "run.synthetix"
              },
              "TokenStatesBTC": {
                "address": "0x4F6296455F8d754c19821cF1EC8FeBF2cD456E67",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployedOn": "run.synthetix"
              },
              "TokenStatesCHF": {
                "address": "0x52496fE8a4feaEFe14d9433E00D48E6929c13deC",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployedOn": "run.synthetix"
              },
              "TokenStatesEUR": {
                "address": "0x6568D9e750fC44AF00f857885Dfb8281c00529c4",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployedOn": "run.synthetix"
              },
              "TokenStatesGBP": {
                "address": "0x7e88D19A79b291cfE5696d496055f7e57F537A75",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployedOn": "run.synthetix"
              },
              "TokenStatesJPY": {
                "address": "0x4dFACfB15514C21c991ff75Bc7Bf6Fb1F98361ed",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployedOn": "run.synthetix"
              },
              "TokenStatesUSD": {
                "address": "0x05a9CBe762B36632b3594DA4F082340E0e5343e8",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployedOn": "run.synthetix"
              },
              "TokenStateSynthetix": {
                "address": "0x5b1b5fEa1b99D83aD479dF0C222F0492385381dD",
                "sourceName": "contracts/legacy/LegacyTokenState.sol",
                "contractName": "LegacyTokenState",
                "abi": [
                  "function setAssociatedContract(address _associatedContract)",
                  "function nominatedOwner() view returns (address)",
                  "function nominateOwner(address _owner)",
                  "function balanceOf(address) view returns (uint256)",
                  "function acceptOwnership()",
                  "function owner() view returns (address)",
                  "function associatedContract() view returns (address)",
                  "function setBalanceOf(address account, uint256 value)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function allowance(address, address) view returns (uint256)",
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address _associatedContract)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployedOn": "run.synthetix"
              },
              "TokenStatesETH": {
                "address": "0x34A5ef81d18F3a305aE9C2d7DF42beef4c79031c",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysETH": {
                "address": "0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsETH": {
                "address": "0x5D4C724BFe3a228Ff0E29125Ac1571FE093700a4",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "RewardEscrow": {
                "address": "0xb671F2210B1F6621A2607EA63E6B2DC3e2464d1F",
                "sourceName": "contracts/RewardEscrow.sol",
                "contractName": "RewardEscrow",
                "abi": [
                  "function nominateNewOwner(address _owner)",
                  "function setFeePool(address _feePool)",
                  "function getNextVestingIndex(address account) view returns (uint256)",
                  "function numVestingEntries(address account) view returns (uint256)",
                  "function totalVestedAccountBalance(address) view returns (uint256)",
                  "function getNextVestingEntry(address account) view returns (uint256[2])",
                  "function totalEscrowedAccountBalance(address) view returns (uint256)",
                  "function checkAccountSchedule(address account) view returns (uint256[520])",
                  "function vest()",
                  "function vestingSchedules(address, uint256, uint256) view returns (uint256)",
                  "function nominatedOwner() view returns (address)",
                  "function getNextVestingTime(address account) view returns (uint256)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function totalEscrowedBalance() view returns (uint256)",
                  "function synthetix() view returns (address)",
                  "function acceptOwnership()",
                  "function owner() view returns (address)",
                  "function getNextVestingQuantity(address account) view returns (uint256)",
                  "function getVestingTime(address account, uint256 index) view returns (uint256)",
                  "function feePool() view returns (address)",
                  "function appendVestingEntry(address account, uint256 quantity)",
                  "function MAX_VESTING_ENTRIES() view returns (uint256)",
                  "function getVestingScheduleEntry(address account, uint256 index) view returns (uint256[2])",
                  "function getVestingQuantity(address account, uint256 index) view returns (uint256)",
                  "function setSynthetix(address _synthetix)",
                  "constructor(address _owner, address _synthetix, address _feePool)",
                  "event SynthetixUpdated(address newSynthetix)",
                  "event FeePoolUpdated(address newFeePool)",
                  "event Vested(address indexed beneficiary, uint256 time, uint256 value)",
                  "event VestingEntryCreated(address indexed beneficiary, uint256 time, uint256 value)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xd2b722dd4a70fa6be957d59f58bfeea37634be82672a33430256f2452a353cfe",
                "deployedOn": "run.synthetix"
              },
              "FeePoolState": {
                "address": "0x11164F6a47C3f8472D19b9aDd516Fc780cb7Ee02",
                "sourceName": "contracts/legacy/FeePoolState.sol",
                "contractName": "FeePoolState",
                "abi": [
                  "function nominateNewOwner(address _owner)",
                  "function initiationTime() view returns (uint256)",
                  "function setFeePool(address _feePool)",
                  "function setSelfDestructBeneficiary(address _beneficiary)",
                  "function terminateSelfDestruct()",
                  "function importIssuerData(address[] accounts, uint256[] ratios, uint256 periodToInsert, uint256 feePeriodCloseIndex)",
                  "function nominatedOwner() view returns (address)",
                  "function acceptOwnership()",
                  "function accountIssuanceLedger(address, uint256) view returns (uint256 debtPercentage, uint256 debtEntryIndex)",
                  "function owner() view returns (address)",
                  "function appendAccountIssuanceRecord(address account, uint256 debtRatio, uint256 debtEntryIndex, uint256 currentPeriodStartDebtIndex)",
                  "function selfDestruct()",
                  "function SELFDESTRUCT_DELAY() view returns (uint256)",
                  "function feePool() view returns (address)",
                  "function getAccountsDebtEntry(address account, uint256 index) view returns (uint256 debtPercentage, uint256 debtEntryIndex)",
                  "function selfDestructInitiated() view returns (bool)",
                  "function initiateSelfDestruct()",
                  "function selfDestructBeneficiary() view returns (address)",
                  "function FEE_PERIOD_LENGTH() view returns (uint8)",
                  "function applicableIssuanceData(address account, uint256 closingDebtIndex) view returns (uint256, uint256)",
                  "constructor(address _owner, address _feePool)",
                  "event IssuanceDebtRatioEntry(address indexed account, uint256 debtRatio, uint256 feePeriodCloseIndex)",
                  "event SelfDestructTerminated()",
                  "event SelfDestructed(address beneficiary)",
                  "event SelfDestructInitiated(uint256 selfDestructDelay)",
                  "event SelfDestructBeneficiaryUpdated(address newBeneficiary)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x25bec289bff971dde31fafa71168a5482a02ce3bb2cca5186c033cba355502a7",
                "deployedOn": "run.synthetix"
              },
              "SupplySchedule": {
                "address": "0x8d203C458d536Fe0F97e9f741bC231EaC8cd91cf",
                "sourceName": "contracts/SupplySchedule.sol",
                "contractName": "SupplySchedule",
                "abi": [
                  "constructor(address _owner, uint256 _lastMintEvent, uint256 _currentWeek)",
                  "event InflationAmountUpdated(uint256 newInflationAmount)",
                  "event MaxInflationAmountUpdated(uint256 newInflationAmount)",
                  "event MinterRewardUpdated(uint256 newRewardAmount)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event SupplyMinted(uint256 supplyMinted, uint256 numberOfWeeksIssued, uint256 lastMintEvent, uint256 timestamp)",
                  "event SynthetixProxyUpdated(address newAddress)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function INFLATION_START_DATE() view returns (uint256)",
                  "function MAX_MINTER_REWARD() view returns (uint256)",
                  "function MINT_BUFFER() view returns (uint256)",
                  "function MINT_PERIOD_DURATION() view returns (uint256)",
                  "function acceptOwnership()",
                  "function inflationAmount() view returns (uint256)",
                  "function isMintable() view returns (bool)",
                  "function lastMintEvent() view returns (uint256)",
                  "function maxInflationAmount() view returns (uint256)",
                  "function mintableSupply() view returns (uint256)",
                  "function minterReward() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function recordMintEvent(uint256 supplyMinted) returns (uint256)",
                  "function setInflationAmount(uint256 amount)",
                  "function setMaxInflationAmount(uint256 amount)",
                  "function setMinterReward(uint256 amount)",
                  "function setSynthetixProxy(address _synthetixProxy)",
                  "function synthetixProxy() view returns (address)",
                  "function weekCounter() view returns (uint256)",
                  "function weeksSinceLastIssuance() view returns (uint256)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x54e24c856def9032b2de5ea79af0d1c0c3807e0908e45344b4b2a66f63b539cb",
                "deployedOn": "run.synthetix"
              },
              "DelegateApprovals": {
                "address": "0x15fd6e554874B9e70F832Ed37f231Ac5E142362f",
                "sourceName": "contracts/DelegateApprovals.sol",
                "contractName": "DelegateApprovals",
                "abi": [
                  "function canIssueFor(address authoriser, address delegate) view returns (bool)",
                  "function nominateNewOwner(address _owner)",
                  "function canClaimFor(address authoriser, address delegate) view returns (bool)",
                  "function ISSUE_FOR_ADDRESS() view returns (bytes32)",
                  "function approveClaimOnBehalf(address delegate)",
                  "function removeIssueOnBehalf(address delegate)",
                  "function approveExchangeOnBehalf(address delegate)",
                  "function nominatedOwner() view returns (address)",
                  "function removeBurnOnBehalf(address delegate)",
                  "function removeClaimOnBehalf(address delegate)",
                  "function removeAllDelegatePowers(address delegate)",
                  "function acceptOwnership()",
                  "function canBurnFor(address authoriser, address delegate) view returns (bool)",
                  "function owner() view returns (address)",
                  "function eternalStorage() view returns (address)",
                  "function approveBurnOnBehalf(address delegate)",
                  "function APPROVE_ALL() view returns (bytes32)",
                  "function approveIssueOnBehalf(address delegate)",
                  "function approvedAll(address authoriser, address delegate) view returns (bool)",
                  "function setEternalStorage(address _eternalStorage)",
                  "function removeExchangeOnBehalf(address delegate)",
                  "function approveAllDelegatePowers(address delegate)",
                  "function CLAIM_FOR_ADDRESS() view returns (bytes32)",
                  "function EXCHANGE_FOR_ADDRESS() view returns (bytes32)",
                  "function BURN_FOR_ADDRESS() view returns (bytes32)",
                  "function canExchangeFor(address authoriser, address delegate) view returns (bool)",
                  "constructor(address _owner, address _eternalStorage)",
                  "event Approval(address indexed authoriser, address delegate, bytes32 action)",
                  "event WithdrawApproval(address indexed authoriser, address delegate, bytes32 action)",
                  "event EternalStorageUpdated(address newEternalStorage)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xac833bf8b366498447c4b3b95edd86964c40efd1253534b63ebe2faed89226b2",
                "deployedOn": "run.synthetix"
              },
              "FeePoolEternalStorage": {
                "address": "0xC9DFff5fA5605fd94F8B7927b892F2B57391e8bB",
                "sourceName": "contracts/FeePoolEternalStorage.sol",
                "contractName": "FeePoolEternalStorage",
                "abi": [
                  "function getBytes32Value(bytes32 record) view returns (bytes32)",
                  "function deleteAddressValue(bytes32 record)",
                  "function deleteBytesValue(bytes32 record)",
                  "function deleteBytes32Value(bytes32 record)",
                  "function nominateNewOwner(address _owner)",
                  "function getBooleanValue(bytes32 record) view returns (bool)",
                  "function setBytes32Value(bytes32 record, bytes32 value)",
                  "function setUIntValue(bytes32 record, uint256 value)",
                  "function deleteBooleanValue(bytes32 record)",
                  "function setBooleanValue(bytes32 record, bool value)",
                  "function getBytesValue(bytes32 record) view returns (bytes)",
                  "function getAddressValue(bytes32 record) view returns (address)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function nominatedOwner() view returns (address)",
                  "function setAddressValue(bytes32 record, address value)",
                  "function acceptOwnership()",
                  "function deleteIntValue(bytes32 record)",
                  "function owner() view returns (address)",
                  "function getIntValue(bytes32 record) view returns (int256)",
                  "function deleteUIntValue(bytes32 record)",
                  "function getStringValue(bytes32 record) view returns (string)",
                  "function setIntValue(bytes32 record, int256 value)",
                  "function associatedContract() view returns (address)",
                  "function importFeeWithdrawalData(address[] accounts, uint256[] feePeriodIDs)",
                  "function deleteStringValue(bytes32 record)",
                  "function getUIntValue(bytes32 record) view returns (uint256)",
                  "function setBytesValue(bytes32 record, bytes value)",
                  "function setStringValue(bytes32 record, string value)",
                  "constructor(address _owner, address _feePool)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x6c4cfdae798e1aa656db42c421e6e34749b5b9e8312820aebfefa7de530387d0",
                "deployedOn": "run.synthetix"
              },
              "ProxyERC20": {
                "address": "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "RewardsDistribution": {
                "address": "0x94433f0DA8B5bfb473Ea8cd7ad10D9c8aef4aB7b",
                "sourceName": "contracts/RewardsDistribution.sol",
                "contractName": "RewardsDistribution",
                "abi": [
                  "constructor(address _owner, address _authority, address _synthetixProxy, address _rewardEscrow, address _feePoolProxy)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event RewardDistributionAdded(uint256 index, address destination, uint256 amount)",
                  "event RewardsDistributed(uint256 amount)",
                  "function acceptOwnership()",
                  "function addRewardDistribution(address destination, uint256 amount) returns (bool)",
                  "function authority() view returns (address)",
                  "function distributeRewards(uint256 amount) returns (bool)",
                  "function distributions(uint256) view returns (address destination, uint256 amount)",
                  "function distributionsLength() view returns (uint256)",
                  "function editRewardDistribution(uint256 index, address destination, uint256 amount) returns (bool)",
                  "function feePoolProxy() view returns (address)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function removeRewardDistribution(uint256 index)",
                  "function rewardEscrow() view returns (address)",
                  "function setAuthority(address _authority)",
                  "function setFeePoolProxy(address _feePoolProxy)",
                  "function setRewardEscrow(address _rewardEscrow)",
                  "function setSynthetixProxy(address _synthetixProxy)",
                  "function synthetixProxy() view returns (address)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xa58a87848bea70940d4ec501ea9548785d4a4b8e930a267e04b8162754bab925",
                "deployedOn": "run.synthetix"
              },
              "TokenStatesLINK": {
                "address": "0x577D4a7395c6A5f46d9981a5F83fa7294926aBB0",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysLINK": {
                "address": "0xbBC455cb4F1B9e4bFC4B73970d360c8f032EfEE6",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsLINK": {
                "address": "0xDF69bC4541b86Aa4c5A470B4347E730c38b2c3B2",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "Math": {
                "address": "0x385e1Eb2FF28F4A637DA2C9971F8CAF5F5b1E77c",
                "sourceName": "contracts/Math.sol",
                "contractName": "Math",
                "abi": [],
                "deployTxn": "https://etherscan.io/tx/0x4175d01bd44e1c847c8257ba272ea1051d67aa2b2552125f179a5dac7cb8d7d2",
                "deployedOn": "run.synthetix"
              },
              "AddressResolver": {
                "address": "0x823bE81bbF96BEc0e25CA13170F5AaCb5B79ba83",
                "sourceName": "contracts/AddressResolver.sol",
                "contractName": "AddressResolver",
                "abi": [
                  "constructor(address _owner)",
                  "event AddressImported(bytes32 name, address destination)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function areAddressesImported(bytes32[] names, address[] destinations) view returns (bool)",
                  "function getAddress(bytes32 name) view returns (address)",
                  "function getSynth(bytes32 key) view returns (address)",
                  "function importAddresses(bytes32[] names, address[] destinations)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCaches(address[] destinations)",
                  "function repository(bytes32) view returns (address)",
                  "function requireAndGetAddress(bytes32 name, string reason) view returns (address)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x5fd6fc965408c73ccd81346087039498c92cf479308048d7ae6594d92ff4f7a4",
                "deployedOn": "run.synthetix"
              },
              "Exchanger": {
                "address": "0xaeA0065E146FD75Dc24465961a583827284D405a",
                "sourceName": "contracts/ExchangerWithFeeRecAlternatives.sol",
                "contractName": "ExchangerWithFeeRecAlternatives",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event ExchangeEntryAppended(address indexed account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 roundIdForSrc, uint256 roundIdForDest)",
                  "event ExchangeEntrySettled(address indexed from, bytes32 src, uint256 amount, bytes32 dest, uint256 reclaim, uint256 rebate, uint256 srcRoundIdAtPeriodEnd, uint256 destRoundIdAtPeriodEnd, uint256 exchangeTimestamp)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event VirtualSynthCreated(address indexed synth, address indexed recipient, address vSynth, bytes32 currencyKey, uint256 amount)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function atomicMaxVolumePerBlock() view returns (uint256)",
                  "function calculateAmountAfterSettlement(address from, bytes32 currencyKey, uint256 amount, uint256 refunded) view returns (uint256 amountAfterSettlement)",
                  "function dynamicFeeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 feeRate, bool tooVolatile)",
                  "function exchange(address exchangeForAddress, address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress, bool virtualSynth, address rewardAddress, bytes32 trackingCode) returns (uint256 amountReceived, address vSynth)",
                  "function exchangeAtomically(address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress, bytes32 trackingCode, uint256 minAmount) returns (uint256 amountReceived)",
                  "function feeRateForAtomicExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 exchangeFeeRate)",
                  "function feeRateForExchange(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256)",
                  "function getAmountsForAtomicExchange(uint256 sourceAmount, bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate)",
                  "function getAmountsForExchange(uint256 sourceAmount, bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view returns (uint256 amountReceived, uint256 fee, uint256 exchangeFeeRate)",
                  "function hasWaitingPeriodOrSettlementOwing(address account, bytes32 currencyKey) view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function isSynthRateInvalid(bytes32 currencyKey) view returns (bool)",
                  "function lastAtomicVolume() view returns (uint64 time, uint192 volume)",
                  "function lastExchangeRate(bytes32 currencyKey) view returns (uint256)",
                  "function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function priceDeviationThresholdFactor() view returns (uint256)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function settle(address from, bytes32 currencyKey) returns (uint256 reclaimed, uint256 refunded, uint256 numEntriesSettled)",
                  "function settlementOwing(address account, bytes32 currencyKey) view returns (uint256 reclaimAmount, uint256 rebateAmount, uint256 numEntries)",
                  "function tradingRewardsEnabled() view returns (bool)",
                  "function waitingPeriodSecs() view returns (uint256)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x31894f3db9e91f8ba818e97ca5e5f120f6f567d8dadc22120adfe68f77a4d9c6",
                "deployedOn": "run.synthetix"
              },
              "ExchangeState": {
                "address": "0x545973f28950f50fc6c7F52AAb4Ad214A27C0564",
                "sourceName": "contracts/ExchangeState.sol",
                "contractName": "ExchangeState",
                "abi": [
                  "function maxEntriesInQueue() view returns (uint256)",
                  "function getEntryAt(address account, bytes32 currencyKey, uint256 index) view returns (bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 timestamp, uint256 roundIdForSrc, uint256 roundIdForDest)",
                  "function nominateNewOwner(address _owner)",
                  "function appendExchangeEntry(address account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 timestamp, uint256 roundIdForSrc, uint256 roundIdForDest)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function nominatedOwner() view returns (address)",
                  "function exchanges(address, bytes32, uint256) view returns (bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 timestamp, uint256 roundIdForSrc, uint256 roundIdForDest)",
                  "function acceptOwnership()",
                  "function owner() view returns (address)",
                  "function associatedContract() view returns (address)",
                  "function getLengthOfEntries(address account, bytes32 currencyKey) view returns (uint256)",
                  "function setMaxEntriesInQueue(uint256 _maxEntriesInQueue)",
                  "function removeEntries(address account, bytes32 currencyKey)",
                  "function getMaxTimestamp(address account, bytes32 currencyKey) view returns (uint256)",
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerNominated(address newOwner)",
                  "event OwnerChanged(address oldOwner, address newOwner)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x6900724258dbf151dc5ea9d2f5a891ec51ccf72ac82101919f00920a7b8ae567",
                "deployedOn": "run.synthetix"
              },
              "Issuer": {
                "address": "0xab4688E54A216aB3813438D30603Bf855648AF8d",
                "sourceName": "contracts/Issuer.sol",
                "contractName": "Issuer",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event SynthAdded(bytes32 currencyKey, address synth)",
                  "event SynthRemoved(bytes32 currencyKey, address synth)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function addSynth(address synth)",
                  "function addSynths(address[] synthsToAdd)",
                  "function allNetworksDebtInfo() view returns (uint256 debt, uint256 sharesSupply, bool isStale)",
                  "function anySynthOrSNXRateIsInvalid() view returns (bool anyRateInvalid)",
                  "function availableCurrencyKeys() view returns (bytes32[])",
                  "function availableSynthCount() view returns (uint256)",
                  "function availableSynths(uint256) view returns (address)",
                  "function burnAndIssueSynthsWithoutDebtCache(address account, bytes32 currencyKey, uint256 amountOfSynth, uint256 amountInsUSD)",
                  "function burnForRedemption(address deprecatedSynthProxy, address account, uint256 balance)",
                  "function burnSynths(address from, uint256 amount)",
                  "function burnSynthsOnBehalf(address burnForAddress, address from, uint256 amount)",
                  "function burnSynthsToTarget(address from)",
                  "function burnSynthsToTargetOnBehalf(address burnForAddress, address from)",
                  "function burnSynthsWithoutDebt(bytes32 currencyKey, address from, uint256 amount) returns (bool rateInvalid)",
                  "function canBurnSynths(address account) view returns (bool)",
                  "function collateral(address account) view returns (uint256)",
                  "function collateralisationRatio(address _issuer) view returns (uint256 cratio)",
                  "function collateralisationRatioAndAnyRatesInvalid(address _issuer) view returns (uint256 cratio, bool anyRateIsInvalid)",
                  "function debtBalanceOf(address _issuer, bytes32 currencyKey) view returns (uint256 debtBalance)",
                  "function getSynths(bytes32[] currencyKeys) view returns (address[])",
                  "function isResolverCached() view returns (bool)",
                  "function issuanceRatio() view returns (uint256)",
                  "function issueMaxSynths(address from)",
                  "function issueMaxSynthsOnBehalf(address issueForAddress, address from)",
                  "function issueSynths(address from, uint256 amount)",
                  "function issueSynthsOnBehalf(address issueForAddress, address from, uint256 amount)",
                  "function issueSynthsWithoutDebt(bytes32 currencyKey, address to, uint256 amount) returns (bool rateInvalid)",
                  "function lastIssueEvent(address account) view returns (uint256)",
                  "function liquidateAccount(address account, bool isSelfLiquidation) returns (uint256 totalRedeemed, uint256 debtRemoved, uint256 escrowToLiquidate)",
                  "function liquidationAmounts(address account, bool isSelfLiquidation) view returns (uint256 totalRedeemed, uint256 debtToRemove, uint256 escrowToLiquidate, uint256 initialDebtBalance)",
                  "function maxIssuableSynths(address _issuer) view returns (uint256)",
                  "function minimumStakeTime() view returns (uint256)",
                  "function modifyDebtSharesForMigration(address account, uint256 amount)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function remainingIssuableSynths(address _issuer) view returns (uint256 maxIssuable, uint256 alreadyIssued, uint256 totalSystemDebt)",
                  "function removeSynth(bytes32 currencyKey)",
                  "function removeSynths(bytes32[] currencyKeys)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setCurrentPeriodId(uint128 periodId)",
                  "function synths(bytes32) view returns (address)",
                  "function synthsByAddress(address) view returns (bytes32)",
                  "function totalIssuedSynths(bytes32 currencyKey, bool excludeOtherCollateral) view returns (uint256 totalIssued)",
                  "function transferableSynthetixAndAnyRateIsInvalid(address account, uint256 balance) view returns (uint256 transferable, bool anyRateIsInvalid)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x69bc1742c7167108145cf642a3e4927f962750c7579d171c24655be1f747a1ce",
                "deployedOn": "run.synthetix"
              },
              "SystemStatus": {
                "address": "0x696c905F8F8c006cA46e9808fE7e00049507798F",
                "sourceName": "contracts/SystemStatus.sol",
                "contractName": "SystemStatus",
                "abi": [
                  "constructor(address _owner)",
                  "event AccessControlUpdated(bytes32 indexed section, address indexed account, bool canSuspend, bool canResume)",
                  "event ExchangeResumed(uint256 reason)",
                  "event ExchangeSuspended(uint256 reason)",
                  "event FuturesMarketResumed(bytes32 marketKey, uint256 reason)",
                  "event FuturesMarketSuspended(bytes32 marketKey, uint256 reason)",
                  "event FuturesResumed(uint256 reason)",
                  "event FuturesSuspended(uint256 reason)",
                  "event IssuanceResumed(uint256 reason)",
                  "event IssuanceSuspended(uint256 reason)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event SynthExchangeResumed(bytes32 currencyKey, uint256 reason)",
                  "event SynthExchangeSuspended(bytes32 currencyKey, uint256 reason)",
                  "event SynthResumed(bytes32 currencyKey, uint256 reason)",
                  "event SynthSuspended(bytes32 currencyKey, uint256 reason)",
                  "event SystemResumed(uint256 reason)",
                  "event SystemSuspended(uint256 reason)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function SECTION_EXCHANGE() view returns (bytes32)",
                  "function SECTION_FUTURES() view returns (bytes32)",
                  "function SECTION_ISSUANCE() view returns (bytes32)",
                  "function SECTION_SYNTH() view returns (bytes32)",
                  "function SECTION_SYNTH_EXCHANGE() view returns (bytes32)",
                  "function SECTION_SYSTEM() view returns (bytes32)",
                  "function SUSPENSION_REASON_UPGRADE() view returns (uint248)",
                  "function acceptOwnership()",
                  "function accessControl(bytes32, address) view returns (bool canSuspend, bool canResume)",
                  "function exchangeSuspension() view returns (bool suspended, uint248 reason)",
                  "function futuresMarketSuspension(bytes32) view returns (bool suspended, uint248 reason)",
                  "function futuresSuspension() view returns (bool suspended, uint248 reason)",
                  "function getFuturesMarketSuspensions(bytes32[] marketKeys) view returns (bool[] suspensions, uint256[] reasons)",
                  "function getSynthExchangeSuspensions(bytes32[] synths) view returns (bool[] exchangeSuspensions, uint256[] reasons)",
                  "function getSynthSuspensions(bytes32[] synths) view returns (bool[] suspensions, uint256[] reasons)",
                  "function isSystemUpgrading() view returns (bool)",
                  "function issuanceSuspension() view returns (bool suspended, uint248 reason)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function requireExchangeActive() view",
                  "function requireExchangeBetweenSynthsAllowed(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view",
                  "function requireFuturesActive() view",
                  "function requireFuturesMarketActive(bytes32 marketKey) view",
                  "function requireIssuanceActive() view",
                  "function requireSynthActive(bytes32 currencyKey) view",
                  "function requireSynthExchangeActive(bytes32 currencyKey) view",
                  "function requireSynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) view",
                  "function requireSystemActive() view",
                  "function resumeExchange()",
                  "function resumeFutures()",
                  "function resumeFuturesMarket(bytes32 marketKey)",
                  "function resumeFuturesMarkets(bytes32[] marketKeys)",
                  "function resumeIssuance()",
                  "function resumeSynth(bytes32 currencyKey)",
                  "function resumeSynthExchange(bytes32 currencyKey)",
                  "function resumeSynths(bytes32[] currencyKeys)",
                  "function resumeSynthsExchange(bytes32[] currencyKeys)",
                  "function resumeSystem()",
                  "function suspendExchange(uint256 reason)",
                  "function suspendFutures(uint256 reason)",
                  "function suspendFuturesMarket(bytes32 marketKey, uint256 reason)",
                  "function suspendFuturesMarkets(bytes32[] marketKeys, uint256 reason)",
                  "function suspendIssuance(uint256 reason)",
                  "function suspendSynth(bytes32 currencyKey, uint256 reason)",
                  "function suspendSynthExchange(bytes32 currencyKey, uint256 reason)",
                  "function suspendSynths(bytes32[] currencyKeys, uint256 reason)",
                  "function suspendSynthsExchange(bytes32[] currencyKeys, uint256 reason)",
                  "function suspendSystem(uint256 reason)",
                  "function synthExchangeSuspension(bytes32) view returns (bool suspended, uint248 reason)",
                  "function synthSuspended(bytes32 currencyKey) view returns (bool)",
                  "function synthSuspension(bytes32) view returns (bool suspended, uint248 reason)",
                  "function systemSuspended() view returns (bool)",
                  "function systemSuspension() view returns (bool suspended, uint248 reason)",
                  "function updateAccessControl(bytes32 section, address account, bool canSuspend, bool canResume)",
                  "function updateAccessControls(bytes32[] sections, address[] accounts, bool[] canSuspends, bool[] canResumes)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x372d60e75b5eefaf45b03d71a8e7420dc16db4ec49bd08db6ccdfd4b59f162cd",
                "deployedOn": "run.synthetix"
              },
              "DelegateApprovalsEternalStorage": {
                "address": "0x8F586F063ffbb89b186C8e604FC6614766f9C9d1",
                "sourceName": "contracts/EternalStorage.sol",
                "contractName": "EternalStorage",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function associatedContract() view returns (address)",
                  "function deleteAddressValue(bytes32 record)",
                  "function deleteBooleanValue(bytes32 record)",
                  "function deleteBytes32Value(bytes32 record)",
                  "function deleteBytesValue(bytes32 record)",
                  "function deleteIntValue(bytes32 record)",
                  "function deleteStringValue(bytes32 record)",
                  "function deleteUIntValue(bytes32 record)",
                  "function getAddressValue(bytes32 record) view returns (address)",
                  "function getBooleanValue(bytes32 record) view returns (bool)",
                  "function getBytes32Value(bytes32 record) view returns (bytes32)",
                  "function getBytesValue(bytes32 record) view returns (bytes)",
                  "function getIntValue(bytes32 record) view returns (int256)",
                  "function getStringValue(bytes32 record) view returns (string)",
                  "function getUIntValue(bytes32 record) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAddressValue(bytes32 record, address value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBooleanValue(bytes32 record, bool value)",
                  "function setBytes32Value(bytes32 record, bytes32 value)",
                  "function setBytesValue(bytes32 record, bytes value)",
                  "function setIntValue(bytes32 record, int256 value)",
                  "function setStringValue(bytes32 record, string value)",
                  "function setUIntValue(bytes32 record, uint256 value)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xa55a9b0d9d922c9a2749d990bf7f20f729837c8fcd7e128c1dac8eb51fa67f99",
                "deployedOn": "run.synthetix"
              },
              "TokenStatesADA": {
                "address": "0x9956c5019a24fbd5B506AD070b771577bAc5c343",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysADA": {
                "address": "0xe36E2D3c7c34281FA3bC737950a68571736880A1",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsADA": {
                "address": "0x91b82d62Ff322b8e02b86f33E9A99a813437830d",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ReadProxyAddressResolver": {
                "address": "0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2",
                "sourceName": "contracts/ReadProxy.sol",
                "contractName": "ReadProxy",
                "abi": [
                  "constructor(address _owner)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "function acceptOwnership()",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function target() view returns (address)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x1cefe027f7e3d8da401d3deeb63fc6c35a1ce09fc372f4de77c599250f0b496d",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardsiETH": {
                "address": "0x3f27c540ADaE3a9E8c875C61e3B970b559d7F65d",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x398f20e282cebdc84549177e4324ee1f075db952a190c0555fa3fccdeae0b59f",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardsiBTC": {
                "address": "0x167009dcDA2e49930a71712D956f02cc980DcC1b",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xb24447e295063d1471193bbed6d42e107c2a61bc91f3e9de6710d110ce92f34c",
                "deployedOn": "run.synthetix"
              },
              "SynthUtil": {
                "address": "0x81Aee4EA48f678E172640fB5813cf7A96AFaF6C3",
                "sourceName": "contracts/SynthUtil.sol",
                "contractName": "SynthUtil",
                "abi": [
                  "constructor(address resolver)",
                  "function addressResolverProxy() view returns (address)",
                  "function frozenSynths() view returns (bytes32[])",
                  "function synthsBalances(address account) view returns (bytes32[], uint256[], uint256[])",
                  "function synthsRates() view returns (bytes32[], uint256[])",
                  "function synthsTotalSupplies() view returns (bytes32[], uint256[], uint256[])",
                  "function totalSynthsInKey(address account, bytes32 currencyKey) view returns (uint256 total)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xf9c727d79abb8c45375fdf4b2b1138299c24f5b0affa5eaf03fba8cf00f6b1a4",
                "deployedOn": "run.synthetix"
              },
              "DappMaintenance": {
                "address": "0xAb0B2f1Cf979cdbF4676251F35353eC5AF2732Dd",
                "sourceName": "contracts/DappMaintenance.sol",
                "contractName": "DappMaintenance",
                "abi": [
                  "constructor(address _owner)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event SXMaintenance(bool isPaused)",
                  "event StakingMaintenance(bool isPaused)",
                  "function acceptOwnership()",
                  "function isPausedSX() view returns (bool)",
                  "function isPausedStaking() view returns (bool)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setMaintenanceModeAll(bool isPaused)",
                  "function setMaintenanceModeSX(bool isPaused)",
                  "function setMaintenanceModeStaking(bool isPaused)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x0e3b146cbff5337a85bb6e275f20b9808cfaa84912c38d9f9b16f58d31860a35",
                "deployedOn": "run.synthetix"
              },
              "FlexibleStorage": {
                "address": "0xc757aCBa3c0506218b3022266a9DC7F3612d85f5",
                "sourceName": "contracts/FlexibleStorage.sol",
                "contractName": "FlexibleStorage",
                "abi": [
                  "constructor(address _resolver)",
                  "event KeyMigrated(bytes32 fromContractName, bytes32 toContractName, bool removeAccessFromPreviousContract)",
                  "event ValueDeletedAddress(bytes32 contractName, bytes32 record, address value)",
                  "event ValueDeletedBool(bytes32 contractName, bytes32 record, bool value)",
                  "event ValueDeletedBytes32(bytes32 contractName, bytes32 record, bytes32 value)",
                  "event ValueDeletedInt(bytes32 contractName, bytes32 record, int256 value)",
                  "event ValueDeletedUInt(bytes32 contractName, bytes32 record, uint256 value)",
                  "event ValueSetAddress(bytes32 contractName, bytes32 record, address value)",
                  "event ValueSetBool(bytes32 contractName, bytes32 record, bool value)",
                  "event ValueSetBytes32(bytes32 contractName, bytes32 record, bytes32 value)",
                  "event ValueSetInt(bytes32 contractName, bytes32 record, int256 value)",
                  "event ValueSetUInt(bytes32 contractName, bytes32 record, uint256 value)",
                  "function deleteAddressValue(bytes32 contractName, bytes32 record)",
                  "function deleteBoolValue(bytes32 contractName, bytes32 record)",
                  "function deleteBytes32Value(bytes32 contractName, bytes32 record)",
                  "function deleteIntValue(bytes32 contractName, bytes32 record)",
                  "function deleteUIntValue(bytes32 contractName, bytes32 record)",
                  "function getAddressValue(bytes32 contractName, bytes32 record) view returns (address)",
                  "function getAddressValues(bytes32 contractName, bytes32[] records) view returns (address[])",
                  "function getBoolValue(bytes32 contractName, bytes32 record) view returns (bool)",
                  "function getBoolValues(bytes32 contractName, bytes32[] records) view returns (bool[])",
                  "function getBytes32Value(bytes32 contractName, bytes32 record) view returns (bytes32)",
                  "function getBytes32Values(bytes32 contractName, bytes32[] records) view returns (bytes32[])",
                  "function getIntValue(bytes32 contractName, bytes32 record) view returns (int256)",
                  "function getIntValues(bytes32 contractName, bytes32[] records) view returns (int256[])",
                  "function getUIntValue(bytes32 contractName, bytes32 record) view returns (uint256)",
                  "function getUIntValues(bytes32 contractName, bytes32[] records) view returns (uint256[])",
                  "function hashes(bytes32) view returns (bytes32)",
                  "function migrateContractKey(bytes32 fromContractName, bytes32 toContractName, bool removeAccessFromPreviousContract)",
                  "function resolverProxy() view returns (address)",
                  "function setAddressValue(bytes32 contractName, bytes32 record, address value)",
                  "function setAddressValues(bytes32 contractName, bytes32[] records, address[] values)",
                  "function setBoolValue(bytes32 contractName, bytes32 record, bool value)",
                  "function setBoolValues(bytes32 contractName, bytes32[] records, bool[] values)",
                  "function setBytes32Value(bytes32 contractName, bytes32 record, bytes32 value)",
                  "function setBytes32Values(bytes32 contractName, bytes32[] records, bytes32[] values)",
                  "function setIntValue(bytes32 contractName, bytes32 record, int256 value)",
                  "function setIntValues(bytes32 contractName, bytes32[] records, int256[] values)",
                  "function setUIntValue(bytes32 contractName, bytes32 record, uint256 value)",
                  "function setUIntValues(bytes32 contractName, bytes32[] records, uint256[] values)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SystemSettings": {
                "address": "0x202ae40Bed1640b09e2AF7aC5719D129A498B7C8",
                "sourceName": "contracts/SystemSettings.sol",
                "contractName": "SystemSettings",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event AggregatorWarningFlagsUpdated(address flags)",
                  "event AtomicEquivalentForDexPricingUpdated(bytes32 synthKey, address equivalent)",
                  "event AtomicExchangeFeeUpdated(bytes32 synthKey, uint256 newExchangeFeeRate)",
                  "event AtomicMaxVolumePerBlockUpdated(uint256 newMaxVolume)",
                  "event AtomicTwapWindowUpdated(uint256 newWindow)",
                  "event AtomicVolatilityConsiderationWindowUpdated(bytes32 synthKey, uint256 newVolatilityConsiderationWindow)",
                  "event AtomicVolatilityUpdateThresholdUpdated(bytes32 synthKey, uint256 newVolatilityUpdateThreshold)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event CollapseFeeRateUpdated(uint256 collapseFeeRate)",
                  "event CrossChainSynthTransferEnabledUpdated(bytes32 synthKey, uint256 value)",
                  "event CrossDomainMessageGasLimitChanged(uint8 gasLimitType, uint256 newLimit)",
                  "event DebtSnapshotStaleTimeUpdated(uint256 debtSnapshotStaleTime)",
                  "event EtherWrapperBurnFeeRateUpdated(uint256 rate)",
                  "event EtherWrapperMaxETHUpdated(uint256 maxETH)",
                  "event EtherWrapperMintFeeRateUpdated(uint256 rate)",
                  "event ExchangeDynamicFeeRoundsUpdated(uint256 dynamicFeeRounds)",
                  "event ExchangeDynamicFeeThresholdUpdated(uint256 dynamicFeeThreshold)",
                  "event ExchangeDynamicFeeWeightDecayUpdated(uint256 dynamicFeeWeightDecay)",
                  "event ExchangeFeeUpdated(bytes32 synthKey, uint256 newExchangeFeeRate)",
                  "event ExchangeMaxDynamicFeeUpdated(uint256 maxDynamicFee)",
                  "event FeePeriodDurationUpdated(uint256 newFeePeriodDuration)",
                  "event FlagRewardUpdated(uint256 newReward)",
                  "event InteractionDelayUpdated(uint256 interactionDelay)",
                  "event IssuanceRatioUpdated(uint256 newRatio)",
                  "event LiquidateRewardUpdated(uint256 newReward)",
                  "event LiquidationDelayUpdated(uint256 newDelay)",
                  "event LiquidationEscrowDurationUpdated(uint256 newDuration)",
                  "event LiquidationPenaltyUpdated(uint256 newPenalty)",
                  "event LiquidationRatioUpdated(uint256 newRatio)",
                  "event MinimumStakeTimeUpdated(uint256 minimumStakeTime)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PriceDeviationThresholdUpdated(uint256 threshold)",
                  "event PureChainlinkPriceForAtomicSwapsEnabledUpdated(bytes32 synthKey, bool enabled)",
                  "event RateStalePeriodUpdated(uint256 rateStalePeriod)",
                  "event SelfLiquidationPenaltyUpdated(uint256 newPenalty)",
                  "event SnxLiquidationPenaltyUpdated(uint256 newPenalty)",
                  "event TargetThresholdUpdated(uint256 newTargetThreshold)",
                  "event TradingRewardsEnabled(bool enabled)",
                  "event WaitingPeriodSecsUpdated(uint256 waitingPeriodSecs)",
                  "event WrapperBurnFeeRateUpdated(address wrapper, int256 rate)",
                  "event WrapperMaxTokenAmountUpdated(address wrapper, uint256 maxTokenAmount)",
                  "event WrapperMintFeeRateUpdated(address wrapper, int256 rate)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function aggregatorWarningFlags() view returns (address)",
                  "function atomicEquivalentForDexPricing(bytes32 currencyKey) view returns (address)",
                  "function atomicExchangeFeeRate(bytes32 currencyKey) view returns (uint256)",
                  "function atomicMaxVolumePerBlock() view returns (uint256)",
                  "function atomicTwapWindow() view returns (uint256)",
                  "function atomicVolatilityConsiderationWindow(bytes32 currencyKey) view returns (uint256)",
                  "function atomicVolatilityUpdateThreshold(bytes32 currencyKey) view returns (uint256)",
                  "function collapseFeeRate(address collateral) view returns (uint256)",
                  "function crossChainSynthTransferEnabled(bytes32 currencyKey) view returns (uint256)",
                  "function crossDomainMessageGasLimit(uint8 gasLimitType) view returns (uint256)",
                  "function debtSnapshotStaleTime() view returns (uint256)",
                  "function etherWrapperBurnFeeRate() view returns (uint256)",
                  "function etherWrapperMaxETH() view returns (uint256)",
                  "function etherWrapperMintFeeRate() view returns (uint256)",
                  "function exchangeDynamicFeeRounds() view returns (uint256)",
                  "function exchangeDynamicFeeThreshold() view returns (uint256)",
                  "function exchangeDynamicFeeWeightDecay() view returns (uint256)",
                  "function exchangeFeeRate(bytes32 currencyKey) view returns (uint256)",
                  "function exchangeMaxDynamicFee() view returns (uint256)",
                  "function feePeriodDuration() view returns (uint256)",
                  "function flagReward() view returns (uint256)",
                  "function interactionDelay(address collateral) view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function issuanceRatio() view returns (uint256)",
                  "function liquidateReward() view returns (uint256)",
                  "function liquidationDelay() view returns (uint256)",
                  "function liquidationEscrowDuration() view returns (uint256)",
                  "function liquidationPenalty() view returns (uint256)",
                  "function liquidationRatio() view returns (uint256)",
                  "function minimumStakeTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function priceDeviationThresholdFactor() view returns (uint256)",
                  "function pureChainlinkPriceForAtomicSwapsEnabled(bytes32 currencyKey) view returns (bool)",
                  "function rateStalePeriod() view returns (uint256)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function selfLiquidationPenalty() view returns (uint256)",
                  "function setAggregatorWarningFlags(address _flags)",
                  "function setAtomicEquivalentForDexPricing(bytes32 _currencyKey, address _equivalent)",
                  "function setAtomicExchangeFeeRate(bytes32 _currencyKey, uint256 _exchangeFeeRate)",
                  "function setAtomicMaxVolumePerBlock(uint256 _maxVolume)",
                  "function setAtomicTwapWindow(uint256 _window)",
                  "function setAtomicVolatilityConsiderationWindow(bytes32 _currencyKey, uint256 _window)",
                  "function setAtomicVolatilityUpdateThreshold(bytes32 _currencyKey, uint256 _threshold)",
                  "function setCollapseFeeRate(address _collateral, uint256 _collapseFeeRate)",
                  "function setCrossChainSynthTransferEnabled(bytes32 _currencyKey, uint256 _value)",
                  "function setCrossDomainMessageGasLimit(uint8 _gasLimitType, uint256 _crossDomainMessageGasLimit)",
                  "function setDebtSnapshotStaleTime(uint256 _seconds)",
                  "function setEtherWrapperBurnFeeRate(uint256 _rate)",
                  "function setEtherWrapperMaxETH(uint256 _maxETH)",
                  "function setEtherWrapperMintFeeRate(uint256 _rate)",
                  "function setExchangeDynamicFeeRounds(uint256 rounds)",
                  "function setExchangeDynamicFeeThreshold(uint256 threshold)",
                  "function setExchangeDynamicFeeWeightDecay(uint256 weightDecay)",
                  "function setExchangeFeeRateForSynths(bytes32[] synthKeys, uint256[] exchangeFeeRates)",
                  "function setExchangeMaxDynamicFee(uint256 maxFee)",
                  "function setFeePeriodDuration(uint256 _feePeriodDuration)",
                  "function setFlagReward(uint256 reward)",
                  "function setInteractionDelay(address _collateral, uint256 _interactionDelay)",
                  "function setIssuanceRatio(uint256 ratio)",
                  "function setLiquidateReward(uint256 reward)",
                  "function setLiquidationDelay(uint256 time)",
                  "function setLiquidationEscrowDuration(uint256 duration)",
                  "function setLiquidationPenalty(uint256 penalty)",
                  "function setLiquidationRatio(uint256 _liquidationRatio)",
                  "function setMinimumStakeTime(uint256 _seconds)",
                  "function setPriceDeviationThresholdFactor(uint256 _priceDeviationThresholdFactor)",
                  "function setPureChainlinkPriceForAtomicSwapsEnabled(bytes32 _currencyKey, bool _enabled)",
                  "function setRateStalePeriod(uint256 period)",
                  "function setSelfLiquidationPenalty(uint256 penalty)",
                  "function setSnxLiquidationPenalty(uint256 penalty)",
                  "function setTargetThreshold(uint256 percent)",
                  "function setTradingRewardsEnabled(bool _tradingRewardsEnabled)",
                  "function setWaitingPeriodSecs(uint256 _waitingPeriodSecs)",
                  "function setWrapperBurnFeeRate(address _wrapper, int256 _rate)",
                  "function setWrapperMaxTokenAmount(address _wrapper, uint256 _maxTokenAmount)",
                  "function setWrapperMintFeeRate(address _wrapper, int256 _rate)",
                  "function snxLiquidationPenalty() view returns (uint256)",
                  "function targetThreshold() view returns (uint256)",
                  "function tradingRewardsEnabled() view returns (bool)",
                  "function waitingPeriodSecs() view returns (uint256)",
                  "function wrapperBurnFeeRate(address wrapper) view returns (int256)",
                  "function wrapperMaxTokenAmount(address wrapper) view returns (uint256)",
                  "function wrapperMintFeeRate(address wrapper) view returns (int256)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xac49bca0d7f9ab08ac68ad03d2619d3334f639f234c84c6a539b1a5a2935846e",
                "deployedOn": "run.synthetix"
              },
              "TradingRewards": {
                "address": "0x62922670313bf6b41C580143d1f6C173C5C20019",
                "sourceName": "contracts/TradingRewards.sol",
                "contractName": "TradingRewards",
                "abi": [
                  "constructor(address owner, address periodController, address resolver)",
                  "event AssignedRewardTokensRecovered(address recoverAddress, uint256 amount, uint256 periodID)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event ExchangeFeeRecorded(address indexed account, uint256 amount, uint256 periodID)",
                  "event NewPeriodStarted(uint256 periodID)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event PeriodControllerChanged(address newPeriodController)",
                  "event PeriodFinalizedWithRewards(uint256 periodID, uint256 rewards)",
                  "event RewardsClaimed(address indexed account, uint256 amount, uint256 periodID)",
                  "event TokensRecovered(address tokenAddress, address recoverAddress, uint256 amount)",
                  "event UnassignedRewardTokensRecovered(address recoverAddress, uint256 amount)",
                  "function acceptOwnership()",
                  "function claimRewardsForPeriod(uint256 periodID)",
                  "function claimRewardsForPeriods(uint256[] periodIDs)",
                  "function closeCurrentPeriodWithRewards(uint256 rewards)",
                  "function getAvailableRewards() view returns (uint256)",
                  "function getAvailableRewardsForAccountForPeriod(address account, uint256 periodID) view returns (uint256)",
                  "function getAvailableRewardsForAccountForPeriods(address account, uint256[] periodIDs) view returns (uint256 totalRewards)",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getPeriodAvailableRewards(uint256 periodID) view returns (uint256)",
                  "function getPeriodController() view returns (address)",
                  "function getPeriodIsClaimable(uint256 periodID) view returns (bool)",
                  "function getPeriodIsFinalized(uint256 periodID) view returns (bool)",
                  "function getPeriodRecordedFees(uint256 periodID) view returns (uint256)",
                  "function getPeriodTotalRewards(uint256 periodID) view returns (uint256)",
                  "function getRewardsToken() view returns (address)",
                  "function getUnaccountedFeesForAccountForPeriod(address account, uint256 periodID) view returns (uint256)",
                  "function getUnassignedRewards() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function lastPauseTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function rebuildCache()",
                  "function recordExchangeFeeForAccount(uint256 usdFeeAmount, address account)",
                  "function recoverAssignedRewardTokensAndDestroyPeriod(address recoverAddress, uint256 periodID)",
                  "function recoverTokens(address tokenAddress, address recoverAddress)",
                  "function recoverUnassignedRewardTokens(address recoverAddress)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setPaused(bool _paused)",
                  "function setPeriodController(address newPeriodController)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x5a27b38498e8d90883735f65be1745f26f9237bdc2dc3fa135c564c90c07bfa8",
                "deployedOn": "run.synthetix"
              },
              "DebtCache": {
                "address": "0xd1cad1A569E70d2Df4C8ed43d3cC93DBE16285dE",
                "sourceName": "contracts/DebtCache.sol",
                "contractName": "DebtCache",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event DebtCacheSnapshotTaken(uint256 timestamp)",
                  "event DebtCacheUpdated(uint256 cachedDebt)",
                  "event DebtCacheValidityChanged(bool indexed isInvalid)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function cacheInfo() view returns (uint256 debt, uint256 timestamp, bool isInvalid, bool isStale)",
                  "function cacheInvalid() view returns (bool)",
                  "function cacheStale() view returns (bool)",
                  "function cacheTimestamp() view returns (uint256)",
                  "function cachedDebt() view returns (uint256)",
                  "function cachedSynthDebt(bytes32 currencyKey) view returns (uint256)",
                  "function cachedSynthDebts(bytes32[] currencyKeys) view returns (uint256[] snxIssuedDebts)",
                  "function currentDebt() view returns (uint256 debt, bool anyRateIsInvalid)",
                  "function currentSynthDebts(bytes32[] currencyKeys) view returns (uint256[] debtValues, uint256 futuresDebt, uint256 excludedDebt, bool anyRateIsInvalid)",
                  "function debtSnapshotStaleTime() view returns (uint256)",
                  "function excludedIssuedDebts(bytes32[] currencyKeys) view returns (uint256[] excludedDebts)",
                  "function importExcludedIssuedDebts(address prevDebtCache, address prevIssuer)",
                  "function isInitialized() view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function purgeCachedSynthDebt(bytes32 currencyKey)",
                  "function rebuildCache()",
                  "function recordExcludedDebtChange(bytes32 currencyKey, int256 delta)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function takeDebtSnapshot()",
                  "function totalNonSnxBackedDebt() view returns (uint256 excludedDebt, bool isInvalid)",
                  "function updateCachedSynthDebtWithRate(bytes32 currencyKey, uint256 currencyRate)",
                  "function updateCachedSynthDebts(bytes32[] currencyKeys)",
                  "function updateCachedSynthDebtsWithRates(bytes32[] currencyKeys, uint256[] currencyRates)",
                  "function updateCachedsUSDDebt(int256 amount)",
                  "function updateDebtCacheValidity(bool currentlyInvalid)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xea3f7f9b7d76dd042eeb937e0b552693678f8b5bdc1c3c585051d5a248e4e8b1",
                "deployedOn": "run.synthetix"
              },
              "CollateralManagerState": {
                "address": "0x573E5105c4B92416D1544A188F1bf77d442Bb52d",
                "sourceName": "contracts/CollateralManagerState.sol",
                "contractName": "CollateralManagerState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function addShortCurrency(bytes32 currency)",
                  "function associatedContract() view returns (address)",
                  "function borrowRates(uint256) view returns (uint256)",
                  "function borrowRatesLastUpdated() view returns (uint256)",
                  "function decrementLongs(bytes32 synth, uint256 amount)",
                  "function decrementShorts(bytes32 synth, uint256 amount)",
                  "function getRateAt(uint256 index) view returns (uint256)",
                  "function getRatesAndTime(uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)",
                  "function getRatesLength() view returns (uint256)",
                  "function getShortRatesAndTime(bytes32 currency, uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)",
                  "function getShortRatesLength(bytes32 currency) view returns (uint256)",
                  "function incrementLongs(bytes32 synth, uint256 amount)",
                  "function incrementShorts(bytes32 synth, uint256 amount)",
                  "function incrementTotalLoans() returns (uint256)",
                  "function long(bytes32 synth) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function ratesLastUpdated() view returns (uint256)",
                  "function removeShortCurrency(bytes32 currency)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function short(bytes32 synth) view returns (uint256)",
                  "function shortRates(bytes32, uint256) view returns (uint256)",
                  "function shortRatesLastUpdated(bytes32) view returns (uint256)",
                  "function totalIssuedSynths(bytes32) view returns (uint256 long, uint256 short)",
                  "function totalLoans() view returns (uint256)",
                  "function updateBorrowRates(uint256 rate)",
                  "function updateShortRates(bytes32 currency, uint256 rate)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x483a0231282bdf448efedd143f2aa6f4067c6fdc72dba2f72a1f23b18a19dbe5",
                "deployedOn": "run.synthetix"
              },
              "CollateralManager": {
                "address": "0x067e398605E84F2D0aEEC1806e62768C5110DCc6",
                "sourceName": "contracts/CollateralManager.sol",
                "contractName": "CollateralManager",
                "abi": [
                  "constructor(address _state, address _owner, address _resolver, uint256 _maxDebt, uint256 _baseBorrowRate, uint256 _baseShortRate)",
                  "event BaseBorrowRateUpdated(uint256 baseBorrowRate)",
                  "event BaseShortRateUpdated(uint256 baseShortRate)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event CollateralAdded(address collateral)",
                  "event CollateralRemoved(address collateral)",
                  "event LiquidationPenaltyUpdated(uint256 liquidationPenalty)",
                  "event MaxDebtUpdated(uint256 maxDebt)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event ShortableSynthAdded(bytes32 synth)",
                  "event ShortableSynthRemoved(bytes32 synth)",
                  "event SynthAdded(bytes32 synth)",
                  "event SynthRemoved(bytes32 synth)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function addCollaterals(address[] collaterals)",
                  "function addShortableSynths(bytes32[2][] requiredSynthAndInverseNamesInResolver, bytes32[] synthKeys)",
                  "function addSynths(bytes32[] synthNamesInResolver, bytes32[] synthKeys)",
                  "function areShortableSynthsSet(bytes32[] requiredSynthNamesInResolver, bytes32[] synthKeys) view returns (bool)",
                  "function areSynthsAndCurrenciesSet(bytes32[] requiredSynthNamesInResolver, bytes32[] synthKeys) view returns (bool)",
                  "function baseBorrowRate() view returns (uint256)",
                  "function baseShortRate() view returns (uint256)",
                  "function decrementLongs(bytes32 synth, uint256 amount)",
                  "function decrementShorts(bytes32 synth, uint256 amount)",
                  "function exceedsDebtLimit(uint256 amount, bytes32 currency) view returns (bool canIssue, bool anyRateIsInvalid)",
                  "function getBorrowRate() view returns (uint256 borrowRate, bool anyRateIsInvalid)",
                  "function getNewLoanId() returns (uint256 id)",
                  "function getRatesAndTime(uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)",
                  "function getShortRate(bytes32 synth) view returns (uint256 shortRate, bool rateIsInvalid)",
                  "function getShortRatesAndTime(bytes32 currency, uint256 index) view returns (uint256 entryRate, uint256 lastRate, uint256 lastUpdated, uint256 newIndex)",
                  "function hasAllCollaterals(address[] collaterals) view returns (bool)",
                  "function hasCollateral(address collateral) view returns (bool)",
                  "function incrementLongs(bytes32 synth, uint256 amount)",
                  "function incrementShorts(bytes32 synth, uint256 amount)",
                  "function isResolverCached() view returns (bool)",
                  "function isSynthManaged(bytes32 currencyKey) view returns (bool)",
                  "function lastPauseTime() view returns (uint256)",
                  "function long(bytes32 synth) view returns (uint256 amount)",
                  "function maxDebt() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function rebuildCache()",
                  "function removeCollaterals(address[] collaterals)",
                  "function removeShortableSynths(bytes32[] synths)",
                  "function removeSynths(bytes32[] synths, bytes32[] synthKeys)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setBaseBorrowRate(uint256 _baseBorrowRate)",
                  "function setBaseShortRate(uint256 _baseShortRate)",
                  "function setMaxDebt(uint256 _maxDebt)",
                  "function setPaused(bool _paused)",
                  "function setUtilisationMultiplier(uint256 _utilisationMultiplier)",
                  "function short(bytes32 synth) view returns (uint256 amount)",
                  "function state() view returns (address)",
                  "function synthToInverseSynth(bytes32) view returns (bytes32)",
                  "function synthsByKey(bytes32) view returns (bytes32)",
                  "function totalLong() view returns (uint256 susdValue, bool anyRateIsInvalid)",
                  "function totalShort() view returns (uint256 susdValue, bool anyRateIsInvalid)",
                  "function updateBorrowRates(uint256 rate)",
                  "function updateShortRates(bytes32 currency, uint256 rate)",
                  "function utilisationMultiplier() view returns (uint256)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x61ff0be73c7ddeeee873cb21a90a51c05ffc4bbe29160ac510a700dfbc14e377",
                "deployedOn": "run.synthetix"
              },
              "CollateralEth": {
                "address": "0x5c8344bcdC38F1aB5EB5C1d4a35DdEeA522B5DfA",
                "sourceName": "contracts/CollateralEth.sol",
                "contractName": "CollateralEth",
                "abi": [
                  "constructor(address _state, address _owner, address _manager, address _resolver, bytes32 _collateralKey, uint256 _minCratio, uint256 _minCollateral)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event CanOpenLoansUpdated(bool canOpenLoans)",
                  "event CollateralDeposited(address indexed account, uint256 id, uint256 amountDeposited, uint256 collateralAfter)",
                  "event CollateralWithdrawn(address indexed account, uint256 id, uint256 amountWithdrawn, uint256 collateralAfter)",
                  "event InteractionDelayUpdated(uint256 interactionDelay)",
                  "event IssueFeeRateUpdated(uint256 issueFeeRate)",
                  "event LoanClosed(address indexed account, uint256 id)",
                  "event LoanClosedByLiquidation(address indexed account, uint256 id, address indexed liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                  "event LoanCreated(address indexed account, uint256 id, uint256 amount, uint256 collateral, bytes32 currency, uint256 issuanceFee)",
                  "event LoanDrawnDown(address indexed account, uint256 id, uint256 amount)",
                  "event LoanPartiallyLiquidated(address indexed account, uint256 id, address liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                  "event LoanRepaymentMade(address indexed account, address indexed repayer, uint256 id, uint256 amountRepaid, uint256 amountAfter)",
                  "event ManagerUpdated(address manager)",
                  "event MaxLoansPerAccountUpdated(uint256 maxLoansPerAccount)",
                  "event MinCollateralUpdated(uint256 minCollateral)",
                  "event MinCratioRatioUpdated(uint256 minCratio)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function addRewardsContracts(address rewardsContract, bytes32 synth)",
                  "function addSynths(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys)",
                  "function areSynthsAndCurrenciesSet(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys) view returns (bool)",
                  "function canOpenLoans() view returns (bool)",
                  "function claim(uint256 amount)",
                  "function close(uint256 id)",
                  "function collateralKey() view returns (bytes32)",
                  "function collateralRatio(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 cratio)",
                  "function collateralRedeemed(bytes32 currency, uint256 amount) view returns (uint256 collateral)",
                  "function deposit(address borrower, uint256 id) payable",
                  "function draw(uint256 id, uint256 amount)",
                  "function interactionDelay() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function issueFeeRate() view returns (uint256)",
                  "function liquidate(address borrower, uint256 id, uint256 amount)",
                  "function liquidationAmount(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 amount)",
                  "function manager() view returns (address)",
                  "function maxLoan(uint256 amount, bytes32 currency) view returns (uint256 max)",
                  "function maxLoansPerAccount() view returns (uint256)",
                  "function minCollateral() view returns (uint256)",
                  "function minCratio() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function open(uint256 amount, bytes32 currency) payable",
                  "function owner() view returns (address)",
                  "function pendingWithdrawals(address) view returns (uint256)",
                  "function rebuildCache()",
                  "function repay(address account, uint256 id, uint256 amount)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setCanOpenLoans(bool _canOpenLoans)",
                  "function setInteractionDelay(uint256 _interactionDelay)",
                  "function setIssueFeeRate(uint256 _issueFeeRate)",
                  "function setManager(address _newManager)",
                  "function setMinCratio(uint256 _minCratio)",
                  "function shortingRewards(bytes32) view returns (address)",
                  "function state() view returns (address)",
                  "function synths(uint256) view returns (bytes32)",
                  "function synthsByKey(bytes32) view returns (bytes32)",
                  "function withdraw(uint256 id, uint256 withdrawAmount)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xcb3bfca19fb9d841cc43712ce3e568f794dd2d388507709fb7d0268e9e01cec2",
                "deployedOn": "run.synthetix"
              },
              "CollateralErc20": {
                "address": "0xaa03aB31b55DceEeF845C8d17890CC61cD98eD04",
                "sourceName": "contracts/CollateralErc20.sol",
                "contractName": "CollateralErc20",
                "abi": [
                  "constructor(address _state, address _owner, address _manager, address _resolver, bytes32 _collateralKey, uint256 _minCratio, uint256 _minCollateral, address _underlyingContract, uint256 _underlyingDecimals)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event CanOpenLoansUpdated(bool canOpenLoans)",
                  "event CollateralDeposited(address indexed account, uint256 id, uint256 amountDeposited, uint256 collateralAfter)",
                  "event CollateralWithdrawn(address indexed account, uint256 id, uint256 amountWithdrawn, uint256 collateralAfter)",
                  "event InteractionDelayUpdated(uint256 interactionDelay)",
                  "event IssueFeeRateUpdated(uint256 issueFeeRate)",
                  "event LoanClosed(address indexed account, uint256 id)",
                  "event LoanClosedByLiquidation(address indexed account, uint256 id, address indexed liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                  "event LoanCreated(address indexed account, uint256 id, uint256 amount, uint256 collateral, bytes32 currency, uint256 issuanceFee)",
                  "event LoanDrawnDown(address indexed account, uint256 id, uint256 amount)",
                  "event LoanPartiallyLiquidated(address indexed account, uint256 id, address liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                  "event LoanRepaymentMade(address indexed account, address indexed repayer, uint256 id, uint256 amountRepaid, uint256 amountAfter)",
                  "event ManagerUpdated(address manager)",
                  "event MaxLoansPerAccountUpdated(uint256 maxLoansPerAccount)",
                  "event MinCollateralUpdated(uint256 minCollateral)",
                  "event MinCratioRatioUpdated(uint256 minCratio)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function addRewardsContracts(address rewardsContract, bytes32 synth)",
                  "function addSynths(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys)",
                  "function areSynthsAndCurrenciesSet(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys) view returns (bool)",
                  "function canOpenLoans() view returns (bool)",
                  "function close(uint256 id)",
                  "function collateralKey() view returns (bytes32)",
                  "function collateralRatio(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 cratio)",
                  "function collateralRedeemed(bytes32 currency, uint256 amount) view returns (uint256 collateral)",
                  "function deposit(address borrower, uint256 id, uint256 amount)",
                  "function draw(uint256 id, uint256 amount)",
                  "function interactionDelay() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function issueFeeRate() view returns (uint256)",
                  "function liquidate(address borrower, uint256 id, uint256 amount)",
                  "function liquidationAmount(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 amount)",
                  "function manager() view returns (address)",
                  "function maxLoan(uint256 amount, bytes32 currency) view returns (uint256 max)",
                  "function maxLoansPerAccount() view returns (uint256)",
                  "function minCollateral() view returns (uint256)",
                  "function minCratio() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function open(uint256 collateral, uint256 amount, bytes32 currency)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function repay(address borrower, uint256 id, uint256 amount)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function scaleDownCollateral(uint256 collateral) view returns (uint256 scaledDown)",
                  "function scaleUpCollateral(uint256 collateral) view returns (uint256 scaledUp)",
                  "function setCanOpenLoans(bool _canOpenLoans)",
                  "function setInteractionDelay(uint256 _interactionDelay)",
                  "function setIssueFeeRate(uint256 _issueFeeRate)",
                  "function setManager(address _newManager)",
                  "function setMinCratio(uint256 _minCratio)",
                  "function shortingRewards(bytes32) view returns (address)",
                  "function state() view returns (address)",
                  "function synths(uint256) view returns (bytes32)",
                  "function synthsByKey(bytes32) view returns (bytes32)",
                  "function underlyingContract() view returns (address)",
                  "function underlyingContractDecimals() view returns (uint256)",
                  "function withdraw(uint256 id, uint256 amount)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x751eb0cc4a5b2f994bcca8368159e4df951f4a0fbe16a5d00c0b9655bad1f0fe",
                "deployedOn": "run.synthetix"
              },
              "CollateralShort": {
                "address": "0x1F2c3a1046c32729862fcB038369696e3273a516",
                "sourceName": "contracts/CollateralShort.sol",
                "contractName": "CollateralShort",
                "abi": [
                  "constructor(address _state, address _owner, address _manager, address _resolver, bytes32 _collateralKey, uint256 _minCratio, uint256 _minCollateral)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event CanOpenLoansUpdated(bool canOpenLoans)",
                  "event CollateralDeposited(address indexed account, uint256 id, uint256 amountDeposited, uint256 collateralAfter)",
                  "event CollateralWithdrawn(address indexed account, uint256 id, uint256 amountWithdrawn, uint256 collateralAfter)",
                  "event InteractionDelayUpdated(uint256 interactionDelay)",
                  "event IssueFeeRateUpdated(uint256 issueFeeRate)",
                  "event LoanClosed(address indexed account, uint256 id)",
                  "event LoanClosedByLiquidation(address indexed account, uint256 id, address indexed liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                  "event LoanCreated(address indexed account, uint256 id, uint256 amount, uint256 collateral, bytes32 currency, uint256 issuanceFee)",
                  "event LoanDrawnDown(address indexed account, uint256 id, uint256 amount)",
                  "event LoanPartiallyLiquidated(address indexed account, uint256 id, address liquidator, uint256 amountLiquidated, uint256 collateralLiquidated)",
                  "event LoanRepaymentMade(address indexed account, address indexed repayer, uint256 id, uint256 amountRepaid, uint256 amountAfter)",
                  "event ManagerUpdated(address manager)",
                  "event MaxLoansPerAccountUpdated(uint256 maxLoansPerAccount)",
                  "event MinCollateralUpdated(uint256 minCollateral)",
                  "event MinCratioRatioUpdated(uint256 minCratio)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function addRewardsContracts(address rewardsContract, bytes32 synth)",
                  "function addSynths(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys)",
                  "function areSynthsAndCurrenciesSet(bytes32[] _synthNamesInResolver, bytes32[] _synthKeys) view returns (bool)",
                  "function canOpenLoans() view returns (bool)",
                  "function close(uint256 id)",
                  "function collateralKey() view returns (bytes32)",
                  "function collateralRatio(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 cratio)",
                  "function collateralRedeemed(bytes32 currency, uint256 amount) view returns (uint256 collateral)",
                  "function deposit(address borrower, uint256 id, uint256 amount)",
                  "function draw(uint256 id, uint256 amount)",
                  "function getReward(bytes32 currency, address account)",
                  "function interactionDelay() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function issueFeeRate() view returns (uint256)",
                  "function liquidate(address borrower, uint256 id, uint256 amount)",
                  "function liquidationAmount(tuple(uint256 id, address account, uint256 collateral, bytes32 currency, uint256 amount, bool short, uint256 accruedInterest, uint256 interestIndex, uint256 lastInteraction) loan) view returns (uint256 amount)",
                  "function manager() view returns (address)",
                  "function maxLoan(uint256 amount, bytes32 currency) view returns (uint256 max)",
                  "function maxLoansPerAccount() view returns (uint256)",
                  "function minCollateral() view returns (uint256)",
                  "function minCratio() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function open(uint256 collateral, uint256 amount, bytes32 currency)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function repay(address borrower, uint256 id, uint256 amount)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setCanOpenLoans(bool _canOpenLoans)",
                  "function setInteractionDelay(uint256 _interactionDelay)",
                  "function setIssueFeeRate(uint256 _issueFeeRate)",
                  "function setManager(address _newManager)",
                  "function setMinCratio(uint256 _minCratio)",
                  "function shortingRewards(bytes32) view returns (address)",
                  "function state() view returns (address)",
                  "function synths(uint256) view returns (bytes32)",
                  "function synthsByKey(bytes32) view returns (bytes32)",
                  "function withdraw(uint256 id, uint256 amount)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x2fd795c484f9734377526c4ce1656ed416ebb8c954609fdf724c1b3a673af727",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssEURCurve": {
                "address": "0xc0d8994Cd78eE1980885DF1A0C5470fC977b5cFe",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "RewardEscrowV2": {
                "address": "0xFAd53Cc9480634563E8ec71E8e693Ffd07981d38",
                "sourceName": "contracts/RewardEscrowV2.sol",
                "contractName": "RewardEscrowV2",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event AccountMerged(address indexed accountToMerge, address destinationAddress, uint256 escrowAmountMerged, uint256[] entryIDs, uint256 time)",
                  "event AccountMergingDurationUpdated(uint256 newDuration)",
                  "event AccountMergingStarted(uint256 time, uint256 endTime)",
                  "event BurnedForMigrationToL2(address indexed account, uint256[] entryIDs, uint256 escrowedAmountMigrated, uint256 time)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event MaxAccountMergingDurationUpdated(uint256 newDuration)",
                  "event MaxEscrowDurationUpdated(uint256 newDuration)",
                  "event NominateAccountToMerge(address indexed account, address destination)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Revoked(address indexed account, address indexed recipient, uint256 targetAmount, uint256 startIndex, uint256 endIndex)",
                  "event Vested(address indexed beneficiary, uint256 time, uint256 value)",
                  "event VestingEntryCreated(address indexed beneficiary, uint256 time, uint256 value, uint256 duration, uint256 entryID)",
                  "function acceptOwnership()",
                  "function accountMergingDuration() view returns (uint256)",
                  "function accountMergingIsOpen() view returns (bool)",
                  "function accountMergingStartTime() view returns (uint256)",
                  "function accountVestingEntryIDs(address account, uint256 index) view returns (uint256)",
                  "function appendVestingEntry(address account, uint256 quantity, uint256 duration)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burnForMigration(address account, uint256[] entryIDs) returns (uint256 escrowedAccountBalance, tuple(uint64 endTime, uint256 escrowAmount)[] vestingEntries)",
                  "function createEscrowEntry(address beneficiary, uint256 deposit, uint256 duration)",
                  "function getAccountVestingEntryIDs(address account, uint256 index, uint256 pageSize) view returns (uint256[])",
                  "function getVestingEntry(address account, uint256 entryID) view returns (uint64 endTime, uint256 escrowAmount)",
                  "function getVestingEntryClaimable(address account, uint256 entryID) view returns (uint256)",
                  "function getVestingQuantity(address account, uint256[] entryIDs) view returns (uint256 total)",
                  "function getVestingSchedules(address account, uint256 index, uint256 pageSize) view returns (tuple(uint64 endTime, uint256 escrowAmount, uint256 entryID)[])",
                  "function importVestingEntries(address, uint256, tuple(uint64 endTime, uint256 escrowAmount)[])",
                  "function isResolverCached() view returns (bool)",
                  "function maxAccountMergingDuration() view returns (uint256)",
                  "function max_duration() view returns (uint256)",
                  "function mergeAccount(address from, uint256[] entryIDs)",
                  "function migrateAccountEscrowBalances(address[], uint256[], uint256[])",
                  "function migrateVestingSchedule(address)",
                  "function nextEntryId() view returns (uint256)",
                  "function nominateAccountToMerge(address account)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function nominatedReceiver(address) view returns (address)",
                  "function numVestingEntries(address account) view returns (uint256)",
                  "function owner() view returns (address)",
                  "function permittedEscrowCreators(address) view returns (bool)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function revokeFrom(address account, address recipient, uint256 targetAmount, uint256 startIndex)",
                  "function setAccountMergingDuration(uint256 duration)",
                  "function setMaxAccountMergingWindow(uint256 duration)",
                  "function setMaxEscrowDuration(uint256 duration)",
                  "function setPermittedEscrowCreator(address creator, bool permitted)",
                  "function setupExpiryTime() view returns (uint256)",
                  "function startMergingWindow()",
                  "function totalEscrowedAccountBalance(address account) view returns (uint256)",
                  "function totalEscrowedBalance() view returns (uint256)",
                  "function totalVestedAccountBalance(address account) view returns (uint256)",
                  "function vest(uint256[] entryIDs)",
                  "function vestingSchedules(address account, uint256 entryId) view returns (tuple(uint64 endTime, uint256 escrowAmount))"
                ],
                "deployTxn": "https://etherscan.io/tx/0x8fa41447c18ee6493f37145f25be9e3eb205f528023b4a8a360897a12db6c265",
                "deployedOn": "run.synthetix"
              },
              "SynthetixBridgeToOptimism": {
                "address": "0x39Ea01a0298C315d149a490E34B59Dbf2EC7e48F",
                "sourceName": "contracts/SynthetixBridgeToOptimism.sol",
                "contractName": "SynthetixBridgeToOptimism",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event DepositInitiated(address indexed _from, address _to, uint256 _amount)",
                  "event ExportedVestingEntries(address indexed account, uint256 escrowedAccountBalance, tuple(uint64 endTime, uint256 escrowAmount)[] vestingEntries)",
                  "event FeePeriodClosed(uint256 snxBackedDebt, uint256 totalDebtShares)",
                  "event FinalizeSynthTransfer(bytes32 indexed currencyKey, address indexed destination, uint256 amount)",
                  "event InitiateSynthTransfer(bytes32 indexed currencyKey, address indexed destination, uint256 amount)",
                  "event InitiationResumed()",
                  "event InitiationSuspended()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event RewardDepositInitiated(address indexed account, uint256 amount)",
                  "event WithdrawalFinalized(address indexed _to, uint256 _amount)",
                  "function CONTRACT_NAME() pure returns (bytes32)",
                  "function acceptOwnership()",
                  "function closeFeePeriod(uint256 snxBackedAmount, uint256 totalDebtShares)",
                  "function deposit(uint256 amount)",
                  "function depositAndMigrateEscrow(uint256 depositAmount, uint256[][] entryIDs)",
                  "function depositReward(uint256 amount)",
                  "function depositTo(address to, uint256 amount)",
                  "function finalizeSynthTransfer(bytes32 currencyKey, address destination, uint256 amount)",
                  "function finalizeWithdrawal(address to, uint256 amount)",
                  "function forwardTokensToEscrow(address token)",
                  "function initiateSynthTransfer(bytes32 currencyKey, address destination, uint256 amount)",
                  "function initiationActive() view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function migrateEscrow(uint256[][] entryIDs)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 amount)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function resumeInitiation()",
                  "function suspendInitiation()",
                  "function synthTransferReceived() view returns (uint256)",
                  "function synthTransferSent() view returns (uint256)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xec9ece48ccf29124a84515f1f75dc92e513f8f290816be97355a6a00adbdaa3b",
                "deployedOn": "run.synthetix"
              },
              "ShortingRewardssETH": {
                "address": "0x12DC1273915A16ab8BD47bA7866B240c253e4c12",
                "sourceName": "contracts/ShortingRewards.sol",
                "contractName": "ShortingRewards",
                "abi": [
                  "constructor(address _owner, address _resolver, address _rewardsDistribution, address _rewardsToken)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Enrol(address indexed user, uint256 amount)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function enrol(address account, uint256 amount)",
                  "function getReward(address account)",
                  "function getRewardForDuration() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function totalSupply() view returns (uint256)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(address account, uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ShortingRewardssBTC": {
                "address": "0xCed4055b47cfD0421f3727a35F69CE659c8bAF7a",
                "sourceName": "contracts/ShortingRewards.sol",
                "contractName": "ShortingRewards",
                "abi": [
                  "constructor(address _owner, address _resolver, address _rewardsDistribution, address _rewardsToken)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Enrol(address indexed user, uint256 amount)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function enrol(address account, uint256 amount)",
                  "function getReward(address account)",
                  "function getRewardForDuration() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function totalSupply() view returns (uint256)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(address account, uint256 amount)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x632352d3042156b94c179a71a56de841255fc7d7fcf829f3ff40ae53e2f439d0",
                "deployedOn": "run.synthetix"
              },
              "TokenStatesAAVE": {
                "address": "0x9BcED8A8E3Ad81c9b146FFC880358f734A06f7c0",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysAAVE": {
                "address": "0xd2dF355C19471c8bd7D8A3aa27Ff4e26A21b4076",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsAAVE": {
                "address": "0x942Eb6e8c029EB22103743C99985aF4F4515a559",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "TokenStatesDOT": {
                "address": "0x73B1a2643507Cd30F11Dfcf2D974f4373E5BC077",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysDOT": {
                "address": "0x1715AC0743102BF5Cd58EfBB6Cf2dC2685d967b6",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsDOT": {
                "address": "0x75A0c1597137AA36B40b6a515D997F9a6c6eefEB",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssTSLABalancer": {
                "address": "0xF0de877F2F9E7A60767f9BA662F10751566AD01c",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x297b5534a231c8e7544c3b12900bf97b2f3cddea114b47425cb5b24c5711886f",
                "deployedOn": "run.synthetix"
              },
              "TokenStatesKRW": {
                "address": "0x93B6e9FbBd2c32a0DC3C2B943B7C3CBC2fE23730",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysKRW": {
                "address": "0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthsKRW": {
                "address": "0xdAe6C79c46aB3B280Ca28259000695529cbD1339",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "VirtualSynthMastercopy": {
                "address": "0xf02ce48fD47D7FA1B7a45a0444805d320D035775",
                "sourceName": "contracts/VirtualSynthMastercopy.sol",
                "contractName": "VirtualSynthMastercopy",
                "abi": [
                  "constructor()",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Settled(uint256 totalSupply, uint256 amountAfterSettled)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function balanceOfUnderlying(address account) view returns (uint256)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                  "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                  "function initialSupply() view returns (uint256)",
                  "function initialize(address _synth, address _resolver, address _recipient, uint256 _amount, bytes32 _currencyKey)",
                  "function initialized() view returns (bool)",
                  "function name() view returns (string)",
                  "function rate() view returns (uint256)",
                  "function readyToSettle() view returns (bool)",
                  "function resolver() view returns (address)",
                  "function secsLeftInWaitingPeriod() view returns (uint256)",
                  "function settle(address account)",
                  "function settled() view returns (bool)",
                  "function settledAmount() view returns (uint256)",
                  "function symbol() view returns (string)",
                  "function synth() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address recipient, uint256 amount) returns (bool)",
                  "function transferFrom(address sender, address recipient, uint256 amount) returns (bool)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x97cf7f9d52f180b4e0f1f642a3b18e84c3ce0c6fa31cfaef16616a31a81a808f",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssFBBalancer": {
                "address": "0x26Fa0665660c1D3a3666584669511d3c66Ad37Cb",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssAAPLBalancer": {
                "address": "0x7af65f1740c0eB816A27FD808EaF6Ab09F6Fa646",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssAMZNBalancer": {
                "address": "0xDC338C7544654c7dadFEb7E44076E457963113B0",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssNFLXBalancer": {
                "address": "0x8Ef8cA2AcAaAfEc19fB366C11561718357F780F2",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssGOOGBalancer": {
                "address": "0x6fB7F0E78582746bd01BcB6dfbFE62cA5F4F9175",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssCOINBalancer": {
                "address": "0x1C1D97f6338759AB814a5A717aE359573Ab5D5d4",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "StakingRewardssMSFTBalancer": {
                "address": "0x9D003Cc298E7Ea141A809C241C0a703176DA3ba3",
                "sourceName": "contracts/StakingRewards.sol",
                "contractName": "StakingRewards",
                "abi": [
                  "constructor(address _owner, address _rewardsDistribution, address _rewardsToken, address _stakingToken)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "event Recovered(address token, uint256 amount)",
                  "event RewardAdded(uint256 reward)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "event RewardsDurationUpdated(uint256 newDuration)",
                  "event Staked(address indexed user, uint256 amount)",
                  "event Withdrawn(address indexed user, uint256 amount)",
                  "function acceptOwnership()",
                  "function balanceOf(address account) view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function exit()",
                  "function getReward()",
                  "function getRewardForDuration() view returns (uint256)",
                  "function lastPauseTime() view returns (uint256)",
                  "function lastTimeRewardApplicable() view returns (uint256)",
                  "function lastUpdateTime() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function periodFinish() view returns (uint256)",
                  "function recoverERC20(address tokenAddress, uint256 tokenAmount)",
                  "function rewardPerToken() view returns (uint256)",
                  "function rewardPerTokenStored() view returns (uint256)",
                  "function rewardRate() view returns (uint256)",
                  "function rewards(address) view returns (uint256)",
                  "function rewardsDistribution() view returns (address)",
                  "function rewardsDuration() view returns (uint256)",
                  "function rewardsToken() view returns (address)",
                  "function setPaused(bool _paused)",
                  "function setRewardsDistribution(address _rewardsDistribution)",
                  "function setRewardsDuration(uint256 _rewardsDuration)",
                  "function stake(uint256 amount)",
                  "function stakingToken() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function updatePeriodFinish(uint256 timestamp)",
                  "function userRewardPerTokenPaid(address) view returns (uint256)",
                  "function withdraw(uint256 amount)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SynthetixBridgeEscrow": {
                "address": "0x5Fd79D46EBA7F351fe49BFF9E87cdeA6c821eF9f",
                "sourceName": "contracts/SynthetixBridgeEscrow.sol",
                "contractName": "SynthetixBridgeEscrow",
                "abi": [
                  "constructor(address _owner)",
                  "event BridgeApproval(address _token, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function approveBridge(address _token, address _bridge, uint256 _amount)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xdb8c71768753489eed0028075cf515d0695b757b41231886b261e1aa0c573a5e",
                "deployedOn": "run.synthetix"
              },
              "EtherWrapper": {
                "address": "0xC1AAE9d18bBe386B102435a8632C8063d31e747C",
                "sourceName": "contracts/EtherWrapper.sol",
                "contractName": "EtherWrapper",
                "abi": [
                  "constructor(address _owner, address _resolver, address _WETH)",
                  "event Burned(address indexed account, uint256 principal, uint256 fee, uint256 amountIn)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Minted(address indexed account, uint256 principal, uint256 fee, uint256 amountIn)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PauseChanged(bool isPaused)",
                  "function acceptOwnership()",
                  "function burn(uint256 amountIn)",
                  "function burnFeeRate() view returns (uint256)",
                  "function calculateBurnFee(uint256 amount) view returns (uint256)",
                  "function calculateMintFee(uint256 amount) view returns (uint256)",
                  "function capacity() view returns (uint256 _capacity)",
                  "function distributeFees()",
                  "function feesEscrowed() view returns (uint256)",
                  "function getReserves() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function lastPauseTime() view returns (uint256)",
                  "function maxETH() view returns (uint256)",
                  "function mint(uint256 amountIn)",
                  "function mintFeeRate() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function paused() view returns (bool)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function sETHIssued() view returns (uint256)",
                  "function sUSDIssued() view returns (uint256)",
                  "function setPaused(bool _paused)",
                  "function totalIssuedSynths() view returns (uint256)",
                  "function weth() view returns (address)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xcac2d9311b429ff942b8a259d49ef46e1f90caf035513eb382f1b865c1f48d78",
                "deployedOn": "run.synthetix"
              },
              "NativeEtherWrapper": {
                "address": "0x7A3d898b717e50a96fd8b232E9d15F0A547A7eeb",
                "sourceName": "contracts/NativeEtherWrapper.sol",
                "contractName": "NativeEtherWrapper",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event Burned(address indexed account, uint256 amount)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Minted(address indexed account, uint256 amount)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function burn(uint256 amount)",
                  "function isResolverCached() view returns (bool)",
                  "function mint() payable",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x4e628023d059a6811addf1cf4f6377fe258ce669aef5c1b392ba04553b403f44",
                "deployedOn": "run.synthetix"
              },
              "SynthRedeemer": {
                "address": "0xe533139Af961c9747356D947838c98451015e234",
                "sourceName": "contracts/SynthRedeemer.sol",
                "contractName": "SynthRedeemer",
                "abi": [
                  "constructor(address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event SynthDeprecated(address synth, uint256 rateToRedeem, uint256 totalSynthSupply, uint256 supplyInsUSD)",
                  "event SynthRedeemed(address synth, address account, uint256 amountOfSynth, uint256 amountInsUSD)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function balanceOf(address synthProxy, address account) view returns (uint256 balanceInsUSD)",
                  "function deprecate(address synthProxy, uint256 rateToRedeem)",
                  "function isResolverCached() view returns (bool)",
                  "function rebuildCache()",
                  "function redeem(address synthProxy)",
                  "function redeemAll(address[] synthProxies)",
                  "function redeemPartial(address synthProxy, uint256 amountOfSynth)",
                  "function redemptions(address) view returns (uint256)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function totalSupply(address synthProxy) view returns (uint256 supplyInsUSD)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x36ee7d1fff9c77636cab448a6289eca77aa9d5baef562c94cbec7b8409b5b191",
                "deployedOn": "run.synthetix"
              },
              "WrapperFactory": {
                "address": "0x02f9bC46beD33acdB9cb002fe346734CeF8a9480",
                "sourceName": "contracts/WrapperFactory.sol",
                "contractName": "WrapperFactory",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event WrapperCreated(address indexed token, bytes32 indexed currencyKey, address wrapperAddress)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function createWrapper(address token, bytes32 currencyKey, bytes32 synthContractName) returns (address)",
                  "function distributeFees()",
                  "function feesEscrowed() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function isWrapper(address possibleWrapper) view returns (bool)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x2a4b77caf217654c2d7288cec194716f5ad02b902464094bf4c0f95a543bfc01",
                "deployedOn": "run.synthetix"
              },
              "OwnerRelayOnEthereum": {
                "address": "0x0e16A6876210841577b233C4165d7B7EdF640b8a",
                "sourceName": "contracts/OwnerRelayOnEthereum.sol",
                "contractName": "OwnerRelayOnEthereum",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event RelayBatchInitiated(address[] targets, bytes[] payloads)",
                  "event RelayInitiated(address target, bytes payload)",
                  "function acceptOwnership()",
                  "function initiateRelay(address target, bytes payload, uint32 crossDomainGasLimit)",
                  "function initiateRelayBatch(address[] targets, bytes[] payloads, uint32 crossDomainGasLimit)",
                  "function isResolverCached() view returns (bool)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xcb2daf5c04fde995ba13c6ca4e3eb9edd794f3031f0380ce653abed742ae4834",
                "deployedOn": "run.synthetix"
              },
              "TokenStatesETHBTC": {
                "address": "0x042A7A0022A7695454ac5Be77a4860e50c9683fC",
                "sourceName": "contracts/TokenState.sol",
                "contractName": "TokenState",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function allowance(address, address) view returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function balanceOf(address) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setAllowance(address tokenOwner, address spender, uint256 value)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setBalanceOf(address account, uint256 value)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "ProxysETHBTC": {
                "address": "0x104eDF1da359506548BFc7c25bA1E28C16a70235",
                "sourceName": "contracts/ProxyERC20.sol",
                "contractName": "ProxyERC20",
                "abi": [
                  "constructor(address _owner)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event TargetUpdated(address newTarget)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function _emit(bytes callData, uint256 numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function decimals() view returns (uint8)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function setTarget(address _target)",
                  "function symbol() view returns (string)",
                  "function target() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xef2ff387f4ccca14ff4b02d9226420cdd4766873d99f8733a92ec78e8fea2dae",
                "deployedOn": "run.synthetix"
              },
              "SynthsETHBTC": {
                "address": "0x07C1E81C345A7c58d7c24072EFc5D929BD0647AD",
                "sourceName": "contracts/MultiCollateralSynth.sol",
                "contractName": "MultiCollateralSynth",
                "abi": [
                  "constructor(address _proxy, address _tokenState, string _tokenName, string _tokenSymbol, address _owner, bytes32 _currencyKey, uint256 _totalSupply, address _resolver)",
                  "event Approval(address indexed owner, address indexed spender, uint256 value)",
                  "event Burned(address indexed account, uint256 value)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event Issued(address indexed account, uint256 value)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event ProxyUpdated(address proxyAddress)",
                  "event TokenStateUpdated(address newTokenState)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function DECIMALS() view returns (uint8)",
                  "function FEE_ADDRESS() view returns (address)",
                  "function acceptOwnership()",
                  "function allowance(address owner, address spender) view returns (uint256)",
                  "function approve(address spender, uint256 value) returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function burn(address account, uint256 amount)",
                  "function currencyKey() view returns (bytes32)",
                  "function decimals() view returns (uint8)",
                  "function isResolverCached() view returns (bool)",
                  "function issue(address account, uint256 amount)",
                  "function messageSender() view returns (address)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function proxy() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setMessageSender(address sender)",
                  "function setProxy(address _proxy)",
                  "function setTokenState(address _tokenState)",
                  "function setTotalSupply(uint256 amount)",
                  "function symbol() view returns (string)",
                  "function tokenState() view returns (address)",
                  "function totalSupply() view returns (uint256)",
                  "function transfer(address to, uint256 value) returns (bool)",
                  "function transferAndSettle(address to, uint256 value) returns (bool)",
                  "function transferFrom(address from, address to, uint256 value) returns (bool)",
                  "function transferFromAndSettle(address from, address to, uint256 value) returns (bool)",
                  "function transferableSynths(address account) view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "SystemSettingsLib": {
                "address": "0x4a39AEf2281ac0D192a9c4783604833bA8F31174",
                "sourceName": "contracts/SystemSettingsLib.sol",
                "contractName": "SystemSettingsLib",
                "abi": [
                  "function MAX_ATOMIC_TWAP_WINDOW() view returns (uint256)",
                  "function MAX_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW() view returns (uint256)",
                  "function MAX_ATOMIC_VOLUME_PER_BLOCK() view returns (uint256)",
                  "function MAX_CROSS_DOMAIN_GAS_LIMIT() view returns (uint256)",
                  "function MAX_EXCHANGE_FEE_RATE() view returns (uint256)",
                  "function MAX_FEE_PERIOD_DURATION() view returns (uint256)",
                  "function MAX_ISSUANCE_RATIO() view returns (uint256)",
                  "function MAX_LIQUIDATION_DELAY() view returns (uint256)",
                  "function MAX_LIQUIDATION_PENALTY() view returns (uint256)",
                  "function MAX_LIQUIDATION_RATIO() view returns (uint256)",
                  "function MAX_MINIMUM_STAKE_TIME() view returns (uint256)",
                  "function MAX_TARGET_THRESHOLD() view returns (uint256)",
                  "function MAX_WRAPPER_BURN_FEE_RATE() view returns (int256)",
                  "function MAX_WRAPPER_MINT_FEE_RATE() view returns (int256)",
                  "function MIN_ATOMIC_TWAP_WINDOW() view returns (uint256)",
                  "function MIN_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW() view returns (uint256)",
                  "function MIN_CROSS_DOMAIN_GAS_LIMIT() view returns (uint256)",
                  "function MIN_FEE_PERIOD_DURATION() view returns (uint256)",
                  "function MIN_LIQUIDATION_DELAY() view returns (uint256)",
                  "function RATIO_FROM_TARGET_BUFFER() view returns (uint256)",
                  "function SETTINGS_CONTRACT_NAME() view returns (bytes32)",
                  "function contractName() view returns (bytes32)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xca3c6b70fb04703653c0063a49ade442c0f00ac5f29e43d0bea88c7178c197da",
                "deployedOn": "run.synthetix"
              },
              "SynthetixDebtShare": {
                "address": "0x89FCb32F29e509cc42d0C8b6f058C993013A843F",
                "sourceName": "contracts/SynthetixDebtShare.sol",
                "contractName": "SynthetixDebtShare",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event Burn(address indexed account, uint256 amount)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event ChangeAuthorizedBroker(address indexed authorizedBroker, bool authorized)",
                  "event ChangeAuthorizedToSnapshot(address indexed authorizedToSnapshot, bool authorized)",
                  "event Mint(address indexed account, uint256 amount)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Transfer(address indexed from, address indexed to, uint256 value)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function addAuthorizedBroker(address target)",
                  "function addAuthorizedToSnapshot(address target)",
                  "function allowance(address, address spender) view returns (uint256)",
                  "function approve(address, uint256) pure returns (bool)",
                  "function authorizedBrokers(address) view returns (bool)",
                  "function authorizedToSnapshot(address) view returns (bool)",
                  "function balanceOf(address account) view returns (uint256)",
                  "function balanceOfOnPeriod(address account, uint256 periodId) view returns (uint256)",
                  "function balances(address, uint256) view returns (uint128 amount, uint128 periodId)",
                  "function burnShare(address account, uint256 amount)",
                  "function currentPeriodId() view returns (uint128)",
                  "function decimals() view returns (uint8)",
                  "function finishSetup()",
                  "function importAddresses(address[] accounts, uint256[] amounts)",
                  "function isInitialized() view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function mintShare(address account, uint256 amount)",
                  "function name() view returns (string)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function removeAuthorizedBroker(address target)",
                  "function removeAuthorizedToSnapshot(address target)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function sharePercent(address account) view returns (uint256)",
                  "function sharePercentOnPeriod(address account, uint256 periodId) view returns (uint256)",
                  "function symbol() view returns (string)",
                  "function takeSnapshot(uint128 id)",
                  "function totalSupply() view returns (uint256)",
                  "function totalSupplyOnPeriod(uint256) view returns (uint256)",
                  "function transfer(address, uint256) pure returns (bool)",
                  "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x8f8d6ab299f46dbd8d1ac9a7761ead5f2dc8166f71694659381d5d727435a060",
                "deployedOn": "run.synthetix"
              },
              "SignedSafeDecimalMath": {
                "address": "0x728A2B79Cad691531CC1146eF802617FF50c7095",
                "sourceName": "contracts/SignedSafeDecimalMath.sol",
                "contractName": "SignedSafeDecimalMath",
                "abi": [
                  "function PRECISE_UNIT() view returns (int256)",
                  "function UNIT() view returns (int256)",
                  "function decimals() view returns (uint8)",
                  "function highPrecisionDecimals() view returns (uint8)",
                  "function preciseUnit() pure returns (int256)",
                  "function unit() pure returns (int256)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xec1c90d5fdafded769ef75103a4fc257e0db9523087ac7b0dd2da2e3a9a33106",
                "deployedOn": "run.synthetix"
              },
              "OneNetAggregatorIssuedSynths": {
                "address": "0xcf1405b18dBCEA2893Abe635c88359C75878B9e1",
                "sourceName": "contracts/OneNetAggregatorIssuedSynths.sol",
                "contractName": "OneNetAggregatorIssuedSynths",
                "abi": [
                  "constructor(address _resolver)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event SetOverrideTimestamp(uint256 timestamp)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function decimals() view returns (uint8)",
                  "function getAnswer(uint256 _roundId) view returns (int256 answer)",
                  "function getRoundData(uint80) view returns (uint80, int256, uint256, uint256, uint80)",
                  "function getTimestamp(uint256 _roundId) view returns (uint256 timestamp)",
                  "function latestRound() view returns (uint256)",
                  "function latestRoundData() view returns (uint80, int256, uint256, uint256, uint80)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function overrideTimestamp() view returns (uint256)",
                  "function owner() view returns (address)",
                  "function resolver() view returns (address)",
                  "function setOverrideTimestamp(uint256 timestamp)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xc8e3587a015330d52107765989f8e2f2e0d27227c45fbc92d511b261926cca40",
                "deployedOn": "run.synthetix"
              },
              "OneNetAggregatorDebtRatio": {
                "address": "0x977d0DD7eA212E9ca1dcD4Ec15cd7Ceb135fa68D",
                "sourceName": "contracts/OneNetAggregatorDebtRatio.sol",
                "contractName": "OneNetAggregatorDebtRatio",
                "abi": [
                  "constructor(address _resolver)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event SetOverrideTimestamp(uint256 timestamp)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function decimals() view returns (uint8)",
                  "function getAnswer(uint256 _roundId) view returns (int256 answer)",
                  "function getRoundData(uint80) view returns (uint80, int256, uint256, uint256, uint80)",
                  "function getTimestamp(uint256 _roundId) view returns (uint256 timestamp)",
                  "function latestRound() view returns (uint256)",
                  "function latestRoundData() view returns (uint80, int256, uint256, uint256, uint80)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function overrideTimestamp() view returns (uint256)",
                  "function owner() view returns (address)",
                  "function resolver() view returns (address)",
                  "function setOverrideTimestamp(uint256 timestamp)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x46784e77e35b7e2e9999c3c54c776029790e75eb15ca3b77153a7de51b6c5fe0",
                "deployedOn": "run.synthetix"
              },
              "ExchangeCircuitBreaker": {
                "address": "0xeAcaEd9581294b1b5cfb6B941d4B8B81B2005437",
                "sourceName": "contracts/ExchangeCircuitBreaker.sol",
                "contractName": "ExchangeCircuitBreaker",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event LastRateOverriden(bytes32 currencyKey, uint256 previousRate, uint256 newRate)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function CIRCUIT_BREAKER_SUSPENSION_REASON() view returns (uint256)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function exchangeRates() view returns (address)",
                  "function isDeviationAboveThreshold(uint256 base, uint256 comparison) view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function lastExchangeRate(bytes32 currencyKey) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function priceDeviationThresholdFactor() view returns (uint256)",
                  "function rateWithBreakCircuit(bytes32 currencyKey) returns (uint256 lastValidRate, bool circuitBroken)",
                  "function rateWithInvalid(bytes32 currencyKey) view returns (uint256, bool)",
                  "function rebuildCache()",
                  "function resetLastExchangeRate(bytes32[] currencyKeys)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x49e5553deb5ff969b9de6f6a5ebf794164d3a8df08eb3707898e6fd1c866b66b",
                "deployedOn": "run.synthetix"
              },
              "FuturesMarketManager": {
                "address": "0xd3f527F47A9DF2f6cBf631081315b6e2FE4e4521",
                "sourceName": "contracts/EmptyFuturesMarketManager.sol",
                "contractName": "EmptyFuturesMarketManager",
                "abi": [
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function addEndorsedAddresses(address[] addresses)",
                  "function allEndorsedAddresses() view returns (address[])",
                  "function allMarkets() view returns (address[])",
                  "function allMarkets(bool proxiedMarkets) view returns (address[])",
                  "function isEndorsed(address account) view returns (bool)",
                  "function marketForKey(bytes32 marketKey) view returns (address)",
                  "function markets(uint256 index, uint256 pageSize, bool proxiedMarkets) view returns (address[])",
                  "function markets(uint256 index, uint256 pageSize) view returns (address[])",
                  "function marketsForKeys(bytes32[] marketKeys) view returns (address[])",
                  "function numMarkets() view returns (uint256)",
                  "function numMarkets(bool proxiedMarkets) view returns (uint256)",
                  "function removeEndorsedAddresses(address[] addresses)",
                  "function totalDebt() view returns (uint256 debt, bool isInvalid)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x017a6ed7ac148238add457c56425c2e21f2e0b2d4a39719421375480008ada1f",
                "deployedOn": "run.synthetix"
              },
              "Liquidator": {
                "address": "0x8e9757479D5ad4E7f9d951B60d39F5220b893d6c",
                "sourceName": "contracts/Liquidator.sol",
                "contractName": "Liquidator",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event AccountFlaggedForLiquidation(address indexed account, uint256 deadline)",
                  "event AccountRemovedFromLiquidation(address indexed account, uint256 time)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function LIQUIDATION_CALLER() view returns (bytes32)",
                  "function LIQUIDATION_DEADLINE() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function calculateAmountToFixCollateral(uint256 debtBalance, uint256 collateral, uint256 penalty) view returns (uint256)",
                  "function checkAndRemoveAccountInLiquidation(address account)",
                  "function flagAccountForLiquidation(address account)",
                  "function flagReward() view returns (uint256)",
                  "function getLiquidationCallerForAccount(address account) view returns (address)",
                  "function getLiquidationDeadlineForAccount(address account) view returns (uint256)",
                  "function isLiquidationDeadlinePassed(address account) view returns (bool)",
                  "function isLiquidationOpen(address account, bool isSelfLiquidation) view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function issuanceRatio() view returns (uint256)",
                  "function liquidateReward() view returns (uint256)",
                  "function liquidationAmounts(address account, bool isSelfLiquidation) view returns (uint256 totalRedeemed, uint256 debtToRemove, uint256 escrowToLiquidate, uint256 initialDebtBalance)",
                  "function liquidationCollateralRatio() view returns (uint256)",
                  "function liquidationDelay() view returns (uint256)",
                  "function liquidationEscrowDuration() view returns (uint256)",
                  "function liquidationPenalty() view returns (uint256)",
                  "function liquidationRatio() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function removeAccountInLiquidation(address account)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function selfLiquidationPenalty() view returns (uint256)"
                ],
                "deployTxn": "",
                "deployedOn": "run.synthetix"
              },
              "LiquidatorRewards": {
                "address": "0xf79603a71144e415730C1A6f57F366E4Ea962C00",
                "sourceName": "contracts/LiquidatorRewards.sol",
                "contractName": "LiquidatorRewards",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event RewardPaid(address indexed user, uint256 reward)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function accumulatedRewardsPerShare() view returns (uint256)",
                  "function earned(address account) view returns (uint256)",
                  "function entries(address) view returns (uint128 claimable, uint128 entryAccumulatedRewards)",
                  "function getReward(address account)",
                  "function initiated(address) view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function notifyRewardAmount(uint256 reward)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function updateEntry(address account)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xf3d6a0eb6d89c111abcfac7ec969301015c26881fab98c48d5a82c0da32b5831",
                "deployedOn": "run.synthetix"
              },
              "OneNetAggregatorsDEFI": {
                "address": "0x646F23085281Dbd006FBFD211FD38d0743884864",
                "sourceName": "contracts/legacy/OneNetAggregatorsDEFI.sol",
                "contractName": "OneNetAggregatorsDEFI",
                "abi": [
                  "constructor(address _resolver)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event SetOverrideTimestamp(uint256 timestamp)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function decimals() view returns (uint8)",
                  "function getAnswer(uint256 _roundId) view returns (int256 answer)",
                  "function getRoundData(uint80) view returns (uint80, int256, uint256, uint256, uint80)",
                  "function getTimestamp(uint256 _roundId) view returns (uint256 timestamp)",
                  "function latestRound() view returns (uint256)",
                  "function latestRoundData() view returns (uint80, int256, uint256, uint256, uint80)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function overrideTimestamp() view returns (uint256)",
                  "function owner() view returns (address)",
                  "function resolver() view returns (address)",
                  "function setOverrideTimestamp(uint256 timestamp)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x63dc092c2a9d752c794c72d4633229041c4222a530bf15307118e13c381b54cf",
                "deployedOn": "run.synthetix"
              },
              "CircuitBreaker": {
                "address": "0x9f231dBE53D460f359B2B8CC47574493caA5B7Bf",
                "sourceName": "contracts/CircuitBreaker.sol",
                "contractName": "CircuitBreaker",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event CircuitBroken(address indexed oracleAddress, uint256 previousValue, uint256 newValue)",
                  "event LastValueOverridden(address indexed oracleAddress, uint256 previousValue, uint256 newValue)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function circuitBroken(address oracleAddress) view returns (bool)",
                  "function isDeviationAboveThreshold(uint256 base, uint256 comparison) view returns (bool)",
                  "function isInvalid(address oracleAddress, uint256 value) view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function lastValue(address oracleAddress) view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function priceDeviationThresholdFactor() view returns (uint256)",
                  "function probeCircuitBreaker(address oracleAddress, uint256 value) returns (bool circuitBroken)",
                  "function rebuildCache()",
                  "function resetLastValue(address[] oracleAddresses, uint256[] values)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)"
                ],
                "deployTxn": "https://etherscan.io/tx/0xc92882d1eca53d6529f5773049d5d1dde9b0f3901c6ea5e4975f9e7c35bf7b73",
                "deployedOn": "run.synthetix"
              },
              "RewardEscrowV2Storage": {
                "address": "0x182738BD9eE9810BC11f1c81b07Ec6F3691110BB",
                "sourceName": "contracts/RewardEscrowV2Storage.sol",
                "contractName": "RewardEscrowV2Storage",
                "abi": [
                  "constructor(address _owner, address _associatedContract)",
                  "event AssociatedContractUpdated(address associatedContract)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function accountVestingEntryIDs(address account, uint256 index) view returns (uint256)",
                  "function addVestingEntry(address account, tuple(uint64 endTime, uint256 escrowAmount) entry) returns (uint256)",
                  "function associatedContract() view returns (address)",
                  "function fallbackRewardEscrow() view returns (address)",
                  "function firstNonFallbackId() view returns (uint256)",
                  "function nextEntryId() view returns (uint256)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function numVestingEntries(address account) view returns (uint256)",
                  "function owner() view returns (address)",
                  "function setAssociatedContract(address _associatedContract)",
                  "function setFallbackRewardEscrow(address _fallbackRewardEscrow)",
                  "function setZeroAmount(address account, uint256 entryId)",
                  "function setZeroAmountUntilTarget(address account, uint256 startIndex, uint256 targetAmount) returns (uint256 total, uint256 endIndex, uint256 lastEntryTime)",
                  "function totalEscrowedAccountBalance(address account) view returns (uint256)",
                  "function totalEscrowedBalance() view returns (uint256)",
                  "function totalVestedAccountBalance(address account) view returns (uint256)",
                  "function updateEscrowAccountBalance(address account, int256 delta)",
                  "function updateTotalEscrowedBalance(int256 delta)",
                  "function updateVestedAccountBalance(address account, int256 delta)",
                  "function vestingSchedules(address account, uint256 entryId) view returns (tuple(uint64 endTime, uint256 escrowAmount) entry)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x68eb646ac70843b64054c7a1e859a8c50a3ab12c08148fb7cfebf3297111857b",
                "deployedOn": "run.synthetix"
              },
              "ExchangeSettlementLib": {
                "address": "0xAa5A3D7F04E15b22Eb3664B56310aA18A3527Ec7",
                "sourceName": "contracts/ExchangeSettlementLib.sol",
                "contractName": "ExchangeSettlementLib",
                "abi": [
                  "event ExchangeEntryAppended(address indexed account, bytes32 src, uint256 amount, bytes32 dest, uint256 amountReceived, uint256 exchangeFeeRate, uint256 roundIdForSrc, uint256 roundIdForDest)",
                  "event ExchangeEntrySettled(address indexed from, bytes32 src, uint256 amount, bytes32 dest, uint256 reclaim, uint256 rebate, uint256 srcRoundIdAtPeriodEnd, uint256 destRoundIdAtPeriodEnd, uint256 exchangeTimestamp)",
                  "function hasWaitingPeriodOrSettlementOwing(tuple(IExchangeState exchangeState, IExchangeRates exchangeRates, ICircuitBreaker circuitBreaker, IExchangerInternalDebtCache debtCache, IIssuer issuer, ISynthetix synthetix) resolvedAddresses, address account, bytes32 currencyKey, uint256 waitingPeriod) view returns (bool)",
                  "function maxSecsLeftInWaitingPeriod(IExchangeState exchangeState, address account, bytes32 currencyKey, uint256 waitingPeriod) view returns (uint256)",
                  "function settlementOwing(tuple(IExchangeState exchangeState, IExchangeRates exchangeRates, ICircuitBreaker circuitBreaker, IExchangerInternalDebtCache debtCache, IIssuer issuer, ISynthetix synthetix) resolvedAddresses, address account, bytes32 currencyKey, uint256 waitingPeriod) view returns (uint256 reclaimAmount, uint256 rebateAmount, uint256 numEntries, tuple(bytes32 src, uint256 amount, bytes32 dest, uint256 reclaim, uint256 rebate, uint256 srcRoundIdAtPeriodEnd, uint256 destRoundIdAtPeriodEnd, uint256 timestamp)[])"
                ],
                "deployTxn": "https://etherscan.io/tx/0xfbb27053ef5ad1e8af325ade4c9db5bdf3eb3aa44ba0c043e46a53102dfc427d",
                "deployedOn": "run.synthetix"
              },
              "DirectIntegrationManager": {
                "address": "0x5F41718459955217df6A02AA8f5C19614ECfA6E7",
                "sourceName": "contracts/DirectIntegrationManager.sol",
                "contractName": "DirectIntegrationManager",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event IntegrationParametersSet(address indexed integration, bytes32 indexed currencyKey, tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) overrides)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function acceptOwnership()",
                  "function getExchangeParameters(address integration, bytes32 currencyKey) view returns (tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) overrides)",
                  "function isResolverCached() view returns (bool)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function setExchangeParameters(address integration, bytes32[] currencyKeys, tuple(bytes32 currencyKey, address dexPriceAggregator, address atomicEquivalentForDexPricing, uint256 atomicExchangeFeeRate, uint256 atomicTwapWindow, uint256 atomicMaxVolumePerBlock, uint256 atomicVolatilityConsiderationWindow, uint256 atomicVolatilityUpdateThreshold, uint256 exchangeFeeRate, uint256 exchangeMaxDynamicFee, uint256 exchangeDynamicFeeRounds, uint256 exchangeDynamicFeeThreshold, uint256 exchangeDynamicFeeWeightDecay) settings)"
                ],
                "deployTxn": "https://etherscan.io/tx/0x75bd8b9fb9afce02389f9697c69774b8695638cd74b1caa0befd396a2ddce431",
                "deployedOn": "run.synthetix"
              },
              "DebtMigratorOnEthereum": {
                "address": "0x94f864e55c77E07C2C7BF7bFBc334b7a8123442A",
                "sourceName": "contracts/DebtMigratorOnEthereum.sol",
                "contractName": "DebtMigratorOnEthereum",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event InitiationResumed()",
                  "event InitiationSuspended()",
                  "event MigrationInitiated(address indexed account, uint256 totalDebtSharesMigrated, uint256 totalEscrowMigrated, uint256 totalLiquidBalanceMigrated)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "function CONTRACT_NAME() pure returns (bytes32)",
                  "function acceptOwnership()",
                  "function debtTransferReceived() view returns (uint256)",
                  "function debtTransferSent() view returns (uint256)",
                  "function initiationActive() view returns (bool)",
                  "function isResolverCached() view returns (bool)",
                  "function migrateDebt(address account)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function resumeInitiation()",
                  "function suspendInitiation()"
                ],
                "deployTxn": "https://etherscan.io/tx/0xbdabbb5b6aeef7ce35456db0217ccd5702a2710d37bc646feb8e1772e90d3e56",
                "deployedOn": "run.synthetix"
              },
              "DynamicSynthRedeemer": {
                "address": "0x38c8A4d93757D3D2E0110Cfb5f18B9cC293e0fdA",
                "sourceName": "contracts/DynamicSynthRedeemer.sol",
                "contractName": "DynamicSynthRedeemer",
                "abi": [
                  "constructor(address _owner, address _resolver)",
                  "event CacheUpdated(bytes32 name, address destination)",
                  "event DiscountRateUpdated(uint256 discountRate)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event RedemptionResumed()",
                  "event RedemptionSuspended()",
                  "event SynthRedeemed(address synth, address account, uint256 amountOfSynth, uint256 amountInsUSD)",
                  "function CONTRACT_NAME() view returns (bytes32)",
                  "function acceptOwnership()",
                  "function discountRate() view returns (uint256)",
                  "function getDiscountRate() view returns (uint256)",
                  "function isResolverCached() view returns (bool)",
                  "function nominateNewOwner(address _owner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function rebuildCache()",
                  "function redeem(bytes32 currencyKey)",
                  "function redeemAll(bytes32[] currencyKeys)",
                  "function redeemPartial(bytes32 currencyKey, uint256 amountOfSynth)",
                  "function redemptionActive() view returns (bool)",
                  "function resolver() view returns (address)",
                  "function resolverAddressesRequired() view returns (bytes32[] addresses)",
                  "function resumeRedemption()",
                  "function setDiscountRate(uint256 _newRate)",
                  "function suspendRedemption()"
                ],
                "deployTxn": "https://etherscan.io/tx/0x2c53357ad2e530fdacb71fdee91776c9cbfac37206b0589b1bb121d9cc9c497f",
                "deployedOn": "run.synthetix"
              }
            },
            "txns": {},
            "extras": {
              "network": "sepolia"
            }
          }
        }
      },
      "hash": "d5108cdd52bb64d59323b5d49727b39e",
      "version": 7
    },
    "var.governance": {
      "artifacts": {
        "settings": {
          "governance_package": "synthetix-governance:3.0.9",
          "governance_satellite_package": "synthetix-governance-satellite:3.0.9",
          "governance_snapshot_record_package": "synthetix-snapshot-rewards:3.5.0",
          "governance_wormhole_core": "0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B",
          "governance_wormhole_relayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911",
          "governance_snapshot_record": "0x89FCb32F29e509cc42d0C8b6f058C993013A843F",
          "governance_ambassador_weight": "0",
          "governance_spartan_weight": "1",
          "governance_treasury_weight": "1",
          "governance_initial_council_member": "0x6E1613B5c68B4Cf2A58400D8019a97849A678139",
          "governance_minimum_active_members": "1",
          "governance_initial_epoch_index": "0",
          "governance_initial_epoch_start_date": "1725035275",
          "governance_initial_nomination_period_start_date": "1725072898",
          "governance_initial_voting_period_start_date": "1725640075",
          "governance_initial_epoch_end_date": "1726504075"
        }
      },
      "hash": "585c8334f80493b67b22d00452230eeb",
      "version": 7
    },
    "clone.governance_satellite_ambassador": {
      "artifacts": {
        "imports": {
          "governance_satellite_ambassador": {
            "url": "ipfs://QmXWdxykkL87urKWLMga5ySJCtos8nKv6ftykZpxUbKmpj",
            "tags": [
              "latest"
            ],
            "target": "synthetix-governance-satellite:3.0.9@ambassador",
            "preset": "ambassador",
            "contracts": {
              "AssociatedSystemsModule": {
                "address": "0x9c28b86B2EAc76F0D83298a574Bcec1557ed202A",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639443",
                "deployTimestamp": "1724997395",
                "sourceName": "contracts/modules/core/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877177,
                "gasCost": "651165221"
              },
              "CouncilTokenModule": {
                "address": "0x62369FEF0FD388f02112722CD585D605d33cc1CC",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639444",
                "deployTimestamp": "1724997407",
                "sourceName": "contracts/modules/council-nft/CouncilTokenModule.sol",
                "contractName": "CouncilTokenModule",
                "deployedOn": "contract.CouncilTokenModule",
                "gasUsed": 1669243,
                "gasCost": "722115779"
              },
              "ElectionModuleSatellite": {
                "address": "0xcc6cfB3993C539dC2b7bBB686Ea7F06C516923D8",
                "abi": [
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671948",
                "deployTimestamp": "1725389351",
                "sourceName": "contracts/modules/core/ElectionModuleSatellite.sol",
                "contractName": "ElectionModuleSatellite",
                "deployedOn": "contract.ElectionModuleSatellite",
                "gasUsed": 2535574,
                "gasCost": "1186070861"
              },
              "InitialModuleBundle": {
                "address": "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639447",
                "deployTimestamp": "1724997443",
                "sourceName": "contracts/modules/core/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 497794,
                "gasCost": "717678234"
              },
              "SnapshotVotePowerModule": {
                "address": "0xB19fe55e4aA1df3feFd9eBef91f93c830cF66DCD",
                "abi": [
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "error Unauthorized(address addr)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671949",
                "deployTimestamp": "1725389363",
                "sourceName": "contracts/modules/core/SnapshotVotePowerModule.sol",
                "contractName": "SnapshotVotePowerModule",
                "deployedOn": "contract.SnapshotVotePowerModule",
                "gasUsed": 909455,
                "gasCost": "1318158811"
              },
              "InitialProxy": {
                "address": "0x93D3A11B8403C2140D0d1f1c0460601e4FBB52DE",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                  "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20642625",
                "deployTimestamp": "1725035759",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 185346,
                "gasCost": "2714991438"
              },
              "CoreRouter": {
                "address": "0x47c99d36f8a95743ab8cbc339a41e02f306972b8",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671950",
                "deployTimestamp": "1725389375",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 513451,
                "gasCost": "1309095325"
              },
              "CouncilTokenRouter": {
                "address": "0x6b2f489700814e8c0c0f5dd14988e7e4776cc586",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CouncilTokenRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639451",
                "deployTimestamp": "1724997491",
                "contractName": "CouncilTokenRouter",
                "sourceName": "CouncilTokenRouter.sol",
                "gasUsed": 403592,
                "gasCost": "743274171"
              },
              "GovernanceProxy": {
                "address": "0x93D3A11B8403C2140D0d1f1c0460601e4FBB52DE",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "CouncilToken": {
                "address": "0x8776A1C7f986e86A58F1459F76d7f2b1435Ccb76",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmfDevfFY4kcr5Qa9UMovtRp3b1bVWFWvNGeUkKtMPj814",
                "settings": {
                  "salt": "salt"
                },
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1721305343",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                },
                "extras": {
                  "salt": "salt"
                }
              }
            },
            "settings": {
              "council_token_name": "Synthetix Governance Module",
              "council_token_symbol": "SNXGOV",
              "council_token_uri": "https://synthetix.io",
              "initial_council_member": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "initial_epoch_end_date": "0",
              "initial_epoch_index": "0",
              "initial_epoch_start_date": "0",
              "initial_nomination_period_start_date": "0",
              "initial_voting_period_start_date": "0",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "governance",
              "wormhole_core": "0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B",
              "wormhole_relayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911"
            },
            "txns": {
              "upgrade_core_proxy": {
                "hash": "",
                "blockNumber": "20672040",
                "timestamp": "1725390535",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x93D3A11B8403C2140D0d1f1c0460601e4FBB52DE",
                        "0x47c99D36f8A95743Ab8CBc339a41e02f306972B8"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51024,
                "gasCost": "1958649972",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "init_council_token": {
                "hash": "",
                "blockNumber": "20642893",
                "timestamp": "1725039046",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x636f756e63696c546f6b656e0000000000000000000000000000000000000000",
                        "0x8776A1C7f986e86A58F1459F76d7f2b1435Ccb76",
                        "0x6b2f489700814e8C0C0f5dd14988E7E4776Cc586"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 355045,
                "gasCost": "1895920957",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "init_election_module": {
                "hash": "",
                "blockNumber": "20642894",
                "timestamp": "1725039049",
                "events": {
                  "CouncilMemberAdded": [
                    {
                      "name": "CouncilMemberAdded",
                      "args": [
                        "0x6E1613B5c68B4Cf2A58400D8019a97849A678139",
                        "0"
                      ]
                    }
                  ],
                  "EpochSetup": [
                    {
                      "name": "EpochSetup",
                      "args": [
                        "0",
                        "1725035275",
                        "1725072898",
                        "1725640075",
                        "1726504075"
                      ]
                    }
                  ],
                  "InitializedSatellite": [
                    {
                      "name": "InitializedSatellite",
                      "args": [
                        "0",
                        "1725035275",
                        "1725072898",
                        "1725640075",
                        "1726504075",
                        [
                          "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                        ]
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_election_module",
                "gasUsed": 342198,
                "gasCost": "1786581607",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              }
            },
            "extras": {
              "council_token_name": "Synthetix Governance Module",
              "council_token_symbol": "SNXGOV",
              "council_token_uri": "https://synthetix.io",
              "initial_council_member": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "initial_epoch_end_date": "0",
              "initial_epoch_index": "0",
              "initial_epoch_start_date": "0",
              "initial_nomination_period_start_date": "0",
              "initial_voting_period_start_date": "0",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "governance",
              "wormhole_core": "0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B",
              "wormhole_relayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "clone.governance_satellite_spartan": {
      "artifacts": {
        "imports": {
          "governance_satellite_spartan": {
            "url": "ipfs://QmTpmRtkzKYXctAE7DrmpZxSn5hoCXkVDFkSwARUWpsYVo",
            "tags": [
              "latest"
            ],
            "target": "synthetix-governance-satellite:3.0.9@spartan",
            "preset": "spartan",
            "contracts": {
              "AssociatedSystemsModule": {
                "address": "0xb0Ba0c7955cBd3eeE05EC73a54a7b49706EFfADe",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639453",
                "deployTimestamp": "1724997515",
                "sourceName": "contracts/modules/core/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877177,
                "gasCost": "688954650"
              },
              "CouncilTokenModule": {
                "address": "0xb5A36c91DFb60C4aF40a87554B75D4E95017580e",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639456",
                "deployTimestamp": "1724997551",
                "sourceName": "contracts/modules/council-nft/CouncilTokenModule.sol",
                "contractName": "CouncilTokenModule",
                "deployedOn": "contract.CouncilTokenModule",
                "gasUsed": 1669243,
                "gasCost": "721315201"
              },
              "ElectionModuleSatellite": {
                "address": "0xBdf9143F9535fb70A683EbDdFc1863DB5a7a9075",
                "abi": [
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671951",
                "deployTimestamp": "1725389387",
                "sourceName": "contracts/modules/core/ElectionModuleSatellite.sol",
                "contractName": "ElectionModuleSatellite",
                "deployedOn": "contract.ElectionModuleSatellite",
                "gasUsed": 2535574,
                "gasCost": "1327461782"
              },
              "InitialModuleBundle": {
                "address": "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "1724997563",
                "sourceName": "contracts/modules/core/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "SnapshotVotePowerModule": {
                "address": "0x93389F495e16aC301D1B97844a371c993f2D1C8d",
                "abi": [
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "error Unauthorized(address addr)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671952",
                "deployTimestamp": "1725389399",
                "sourceName": "contracts/modules/core/SnapshotVotePowerModule.sol",
                "contractName": "SnapshotVotePowerModule",
                "deployedOn": "contract.SnapshotVotePowerModule",
                "gasUsed": 909455,
                "gasCost": "1304664577"
              },
              "InitialProxy": {
                "address": "0x2082d5A6f6F17F5e421FD6508b867D794472A42a",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                  "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20642627",
                "deployTimestamp": "1725035783",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 185346,
                "gasCost": "2850218474"
              },
              "CoreRouter": {
                "address": "0xd97ceca7e78ffc22c769ff84a0a23f037c9f081c",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671954",
                "deployTimestamp": "1725389423",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 513451,
                "gasCost": "1184054845"
              },
              "CouncilTokenRouter": {
                "address": "0x123e0f392175e69bdb5898d6138fdb07f2b05b91",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CouncilTokenRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639462",
                "deployTimestamp": "1724997623",
                "contractName": "CouncilTokenRouter",
                "sourceName": "CouncilTokenRouter.sol",
                "gasUsed": 403592,
                "gasCost": "694303160"
              },
              "GovernanceProxy": {
                "address": "0x2082d5A6f6F17F5e421FD6508b867D794472A42a",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "CouncilToken": {
                "address": "0x32cB924fF3555fAd5f310B2E5Aa8385434022Be8",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmfDevfFY4kcr5Qa9UMovtRp3b1bVWFWvNGeUkKtMPj814",
                "settings": {
                  "salt": "salt"
                },
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1721305343",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                },
                "extras": {
                  "salt": "salt"
                }
              }
            },
            "settings": {
              "council_token_name": "Synthetix Governance Module",
              "council_token_symbol": "SNXGOV",
              "council_token_uri": "https://synthetix.io",
              "initial_council_member": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "initial_epoch_end_date": "0",
              "initial_epoch_index": "0",
              "initial_epoch_start_date": "0",
              "initial_nomination_period_start_date": "0",
              "initial_voting_period_start_date": "0",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "governance",
              "wormhole_core": "0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B",
              "wormhole_relayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911"
            },
            "txns": {
              "upgrade_core_proxy": {
                "hash": "",
                "blockNumber": "20672041",
                "timestamp": "1725390550",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x2082d5A6f6F17F5e421FD6508b867D794472A42a",
                        "0xd97cecA7E78FfC22c769Ff84A0A23f037c9F081c"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51024,
                "gasCost": "1839226344",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "init_council_token": {
                "hash": "",
                "blockNumber": "20642896",
                "timestamp": "1725039069",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x636f756e63696c546f6b656e0000000000000000000000000000000000000000",
                        "0x32cB924fF3555fAd5f310B2E5Aa8385434022Be8",
                        "0x123e0f392175E69bdB5898D6138fDB07f2b05b91"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 355057,
                "gasCost": "1604462909",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "init_election_module": {
                "hash": "",
                "blockNumber": "20642897",
                "timestamp": "1725039073",
                "events": {
                  "CouncilMemberAdded": [
                    {
                      "name": "CouncilMemberAdded",
                      "args": [
                        "0x6E1613B5c68B4Cf2A58400D8019a97849A678139",
                        "0"
                      ]
                    }
                  ],
                  "EpochSetup": [
                    {
                      "name": "EpochSetup",
                      "args": [
                        "0",
                        "1725035275",
                        "1725072898",
                        "1725640075",
                        "1726504075"
                      ]
                    }
                  ],
                  "InitializedSatellite": [
                    {
                      "name": "InitializedSatellite",
                      "args": [
                        "0",
                        "1725035275",
                        "1725072898",
                        "1725640075",
                        "1726504075",
                        [
                          "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                        ]
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_election_module",
                "gasUsed": 342198,
                "gasCost": "1530693536",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              }
            },
            "extras": {
              "council_token_name": "Synthetix Governance Module",
              "council_token_symbol": "SNXGOV",
              "council_token_uri": "https://synthetix.io",
              "initial_council_member": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "initial_epoch_end_date": "0",
              "initial_epoch_index": "0",
              "initial_epoch_start_date": "0",
              "initial_nomination_period_start_date": "0",
              "initial_voting_period_start_date": "0",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "governance",
              "wormhole_core": "0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B",
              "wormhole_relayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "clone.governance_satellite_treasury": {
      "artifacts": {
        "imports": {
          "governance_satellite_treasury": {
            "url": "ipfs://QmUYAn4GrSSnB8SVqhx1SHoQjkXGHJnhZgvzMBDkE2QHAa",
            "tags": [
              "latest"
            ],
            "target": "synthetix-governance-satellite:3.0.9@treasury",
            "preset": "treasury",
            "contracts": {
              "AssociatedSystemsModule": {
                "address": "0x8A3a4e15e4acB6064c2E7Bb62484552C4ca62D2a",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639463",
                "deployTimestamp": "1724997635",
                "sourceName": "contracts/modules/core/AssociatedSystemsModule.sol",
                "contractName": "AssociatedSystemsModule",
                "deployedOn": "contract.AssociatedSystemsModule",
                "gasUsed": 877177,
                "gasCost": "780928948"
              },
              "CouncilTokenModule": {
                "address": "0xb12Bb2943F9264c44e4108fF81b4c54D213ba0D2",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639464",
                "deployTimestamp": "1724997647",
                "sourceName": "contracts/modules/council-nft/CouncilTokenModule.sol",
                "contractName": "CouncilTokenModule",
                "deployedOn": "contract.CouncilTokenModule",
                "gasUsed": 1669243,
                "gasCost": "749566438"
              },
              "ElectionModuleSatellite": {
                "address": "0x692aAF2FcC594b63C81ed7b5610587e4d6A5B0b3",
                "abi": [
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error Unauthorized(address addr)",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671955",
                "deployTimestamp": "1725389435",
                "sourceName": "contracts/modules/core/ElectionModuleSatellite.sol",
                "contractName": "ElectionModuleSatellite",
                "deployedOn": "contract.ElectionModuleSatellite",
                "gasUsed": 2535574,
                "gasCost": "1331824252"
              },
              "InitialModuleBundle": {
                "address": "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "1724997659",
                "sourceName": "contracts/modules/core/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "contract.InitialModuleBundle",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "SnapshotVotePowerModule": {
                "address": "0x5267e6F29CFdab76A6242Ac85E6070f1C6ae40Aa",
                "abi": [
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OverflowUint256ToUint128()",
                  "error OverflowUint256ToUint64()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "error Unauthorized(address addr)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671956",
                "deployTimestamp": "1725389447",
                "sourceName": "contracts/modules/core/SnapshotVotePowerModule.sol",
                "contractName": "SnapshotVotePowerModule",
                "deployedOn": "contract.SnapshotVotePowerModule",
                "gasUsed": 909455,
                "gasCost": "1357656837"
              },
              "InitialProxy": {
                "address": "0xECfA1d4B17AaCD691173b6194C3ade361ef38367",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x8a0221CabE12b3C8BA33ab13397dDC575DA1CcC1",
                  "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20642628",
                "deployTimestamp": "1725035795",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 185346,
                "gasCost": "2835535075"
              },
              "CoreRouter": {
                "address": "0x7461bfca54b6e606c3c7bdbd603b20a851f6942b",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CoreRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20671957",
                "deployTimestamp": "1725389459",
                "contractName": "CoreRouter",
                "sourceName": "CoreRouter.sol",
                "gasUsed": 513451,
                "gasCost": "1258860944"
              },
              "CouncilTokenRouter": {
                "address": "0xdc829d0c1a4f368b7df7d064697a2003dcfe5761",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployedOn": "router.CouncilTokenRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "20639470",
                "deployTimestamp": "1724997719",
                "contractName": "CouncilTokenRouter",
                "sourceName": "CouncilTokenRouter.sol",
                "gasUsed": 403580,
                "gasCost": "887763420"
              },
              "GovernanceProxy": {
                "address": "0xECfA1d4B17AaCD691173b6194C3ade361ef38367",
                "abi": [
                  "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                  "error MissingAssociatedSystem(bytes32 id)",
                  "error Unauthorized(address addr)",
                  "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                  "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                  "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                  "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                  "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                  "error AlreadyACouncilMember()",
                  "error EmptyArray()",
                  "error InsufficientValue()",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidVM(string reason)",
                  "error MessageAlreadyProcessed()",
                  "error NoVotingPower(address sender, uint256 currentEpoch)",
                  "error NotACouncilMember()",
                  "error NotCallableInCurrentPeriod(uint8 currentPeriod)",
                  "error OnlyRelayer()",
                  "error OverflowUint256ToUint16()",
                  "error OverflowUint256ToUint64()",
                  "error PositionOutOfBounds()",
                  "error UnregisteredEmitter()",
                  "error UnsupportedNetwork(uint64)",
                  "error ValueAlreadyInSet()",
                  "error ValueNotInSet()",
                  "event CouncilMemberAdded(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMemberRemoved(address indexed member, uint256 indexed epochIndex)",
                  "event CouncilMembersDismissed(address[] dismissedMembers, uint256 epochId)",
                  "event EpochScheduleTweaked(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event EpochSetup(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "event GasLimitSet(uint256 gasLimit)",
                  "event InitializedSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "event VoteCastSent(address sender, address[] candidates, uint256[] amounts)",
                  "event VoteWithdrawnSent(address sender)",
                  "function _recvDismissMembers(address[] membersToDismiss, uint256 epochIndex)",
                  "function _recvResolve(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address[] councilMembers)",
                  "function _recvTweakEpochSchedule(uint256 epochIndex, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate)",
                  "function cast(address[] candidates, uint256[] amounts) payable",
                  "function getCurrentPeriod() view returns (uint256)",
                  "function getElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getEpochIndex() view returns (uint256)",
                  "function getEpochSchedule() view returns (tuple(uint64 startDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 endDate) epoch)",
                  "function getGasLimit() view returns (uint256)",
                  "function getNextElectionSettings() view returns (tuple(uint8 epochSeatCount, uint8 minimumActiveMembers, uint64 epochDuration, uint64 nominationPeriodDuration, uint64 votingPeriodDuration, uint64 maxDateAdjustmentTolerance) settings)",
                  "function getRegisteredEmitters() view returns (bytes32[])",
                  "function getSupportedNetworks() view returns (uint16[])",
                  "function getWormholeCore() view returns (address)",
                  "function getWormholeRelayer() view returns (address)",
                  "function hasProcessedMsg(bytes32 deliveryHash) view returns (bool)",
                  "function initElectionModuleSatellite(uint256 epochIndex, uint64 epochStartDate, uint64 nominationPeriodStartDate, uint64 votingPeriodStartDate, uint64 epochEndDate, address wormholeCore, address wormholeRelayer, address[] councilMembers)",
                  "function isElectionModuleInitialized() view returns (bool)",
                  "function quoteCrossChainDeliveryPrice(uint16 targetChain, uint256 receiverValue, uint256 gasLimit) view returns (uint256 cost)",
                  "function receiveWormholeMessages(bytes payload, bytes[], bytes32 sourceAddress, uint16 sourceChain, bytes32 deliveryHash) payable",
                  "function removeRegisteredEmitters(uint16[] chainIds)",
                  "function setGasLimit(uint256 gasLimit)",
                  "function setRegisteredEmitters(uint16[] chainIds, address[] emitters)",
                  "function withdrawVote() payable",
                  "error BallotAlreadyPrepared(address voter, uint256 electionId)",
                  "error InvalidSnapshotContract()",
                  "error InvalidWeightType()",
                  "error NoPower(uint256, address)",
                  "error OverflowUint256ToUint128()",
                  "error SnapshotAlreadyTaken(uint128 snapshotId)",
                  "error SnapshotNotTaken(address snapshotContract, uint128 electionId)",
                  "event ScaleSet(address indexed snapshotContract, uint256 scale)",
                  "event SnapshotContractSet(address indexed snapshotContract, bool indexed enabled, uint8 weight)",
                  "function getPreparedBallot(address voter) view returns (uint256 power)",
                  "function getVotePowerSnapshotId(address snapshotContract, uint128 electionId) view returns (uint128)",
                  "function getVotingPowerForUser(address snapshotContract, address voter, uint256 periodId) view returns (uint256)",
                  "function prepareBallotWithSnapshot(address snapshotContract, address voter) returns (uint256 votingPower)",
                  "function setScale(address snapshotContract, uint256 scale)",
                  "function setSnapshotContract(address snapshotContract, uint8 weight, bool enabled)",
                  "function takeVotePowerSnapshot(address snapshotContract) returns (uint128 snapshotId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              },
              "CouncilToken": {
                "address": "0xB15d5609565AC796E9bc6dEedB31767F9d2f66A2",
                "abi": [
                  "error AlreadyInitialized()",
                  "error CannotSelfApprove(address addr)",
                  "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                  "error InvalidOwner(address addr)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidTransferRecipient(address addr)",
                  "error NotImplemented()",
                  "error TokenAlreadyMinted(uint256 id)",
                  "error TokenDoesNotExist(uint256 id)",
                  "error Unauthorized(address addr)",
                  "error ZeroAddress()",
                  "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                  "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                  "function approve(address to, uint256 tokenId)",
                  "function balanceOf(address holder) view returns (uint256 balance)",
                  "function burn(uint256 tokenId)",
                  "function getApproved(uint256 tokenId) view returns (address operator)",
                  "function initialize(string tokenName, string tokenSymbol, string uri)",
                  "function isApprovedForAll(address holder, address operator) view returns (bool)",
                  "function isInitialized() view returns (bool)",
                  "function mint(address to, uint256 tokenId)",
                  "function name() view returns (string)",
                  "function ownerOf(uint256 tokenId) view returns (address)",
                  "function safeMint(address to, uint256 tokenId, bytes data)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId)",
                  "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                  "function setAllowance(uint256 tokenId, address spender)",
                  "function setApprovalForAll(address operator, bool approved)",
                  "function setBaseTokenURI(string uri)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function symbol() view returns (string)",
                  "function tokenByIndex(uint256 index) view returns (uint256)",
                  "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                  "function tokenURI(uint256 tokenId) view returns (string)",
                  "function totalSupply() view returns (uint256)",
                  "function transferFrom(address from, address to, uint256 tokenId)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error UpgradeSimulationFailed()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 0,
                "gasCost": "0"
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmfDevfFY4kcr5Qa9UMovtRp3b1bVWFWvNGeUkKtMPj814",
                "settings": {
                  "salt": "salt"
                },
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1721305343",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                },
                "extras": {
                  "salt": "salt"
                }
              }
            },
            "settings": {
              "council_token_name": "Synthetix Governance Module",
              "council_token_symbol": "SNXGOV",
              "council_token_uri": "https://synthetix.io",
              "initial_council_member": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "initial_epoch_end_date": "0",
              "initial_epoch_index": "0",
              "initial_epoch_start_date": "0",
              "initial_nomination_period_start_date": "0",
              "initial_voting_period_start_date": "0",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "governance",
              "wormhole_core": "0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B",
              "wormhole_relayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911"
            },
            "txns": {
              "upgrade_core_proxy": {
                "hash": "",
                "blockNumber": "20672042",
                "timestamp": "1725390566",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0xECfA1d4B17AaCD691173b6194C3ade361ef38367",
                        "0x7461BfCA54b6E606c3c7bdbD603b20a851f6942B"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_core_proxy",
                "gasUsed": 51024,
                "gasCost": "1734679891",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "init_council_token": {
                "hash": "",
                "blockNumber": "20642899",
                "timestamp": "1725039087",
                "events": {
                  "AssociatedSystemSet": [
                    {
                      "name": "AssociatedSystemSet",
                      "args": [
                        "0x6572633732310000000000000000000000000000000000000000000000000000",
                        "0x636f756e63696c546f6b656e0000000000000000000000000000000000000000",
                        "0xB15d5609565AC796E9bc6dEedB31767F9d2f66A2",
                        "0xdc829d0c1A4F368B7Df7d064697a2003dcfe5761"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_council_token",
                "gasUsed": 355057,
                "gasCost": "1407821078",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "init_election_module": {
                "hash": "",
                "blockNumber": "20642900",
                "timestamp": "1725039090",
                "events": {
                  "CouncilMemberAdded": [
                    {
                      "name": "CouncilMemberAdded",
                      "args": [
                        "0x6E1613B5c68B4Cf2A58400D8019a97849A678139",
                        "0"
                      ]
                    }
                  ],
                  "EpochSetup": [
                    {
                      "name": "EpochSetup",
                      "args": [
                        "0",
                        "1725035275",
                        "1725072898",
                        "1725640075",
                        "1726504075"
                      ]
                    }
                  ],
                  "InitializedSatellite": [
                    {
                      "name": "InitializedSatellite",
                      "args": [
                        "0",
                        "1725035275",
                        "1725072898",
                        "1725640075",
                        "1726504075",
                        [
                          "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                        ]
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.init_election_module",
                "gasUsed": 342198,
                "gasCost": "1358050108",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              }
            },
            "extras": {
              "council_token_name": "Synthetix Governance Module",
              "council_token_symbol": "SNXGOV",
              "council_token_uri": "https://synthetix.io",
              "initial_council_member": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "initial_epoch_end_date": "0",
              "initial_epoch_index": "0",
              "initial_epoch_start_date": "0",
              "initial_nomination_period_start_date": "0",
              "initial_voting_period_start_date": "0",
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "governance",
              "wormhole_core": "0x98f3c9e6E3fAce36bAAd05FE09d375Ef1464288B",
              "wormhole_relayer": "0x27428DD2d3DD32A4D7f7C497eAaa23130d894911"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "invoke.GovernanceProxy_setGasLimit_ambassador": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setGasLimit_ambassador": {
            "hash": "",
            "blockNumber": "20642901",
            "timestamp": "1725039150",
            "events": {
              "GasLimitSet": [
                {
                  "name": "GasLimitSet",
                  "args": [
                    "1000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.GovernanceProxy_setGasLimit_ambassador",
            "gasUsed": 55692,
            "gasCost": "1314314879",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "c590275ad621b0e9aa27dfebbf052b56",
      "version": 7
    },
    "invoke.GovernanceProxy_setGasLimit_spartan": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setGasLimit_spartan": {
            "hash": "",
            "blockNumber": "20642902",
            "timestamp": "1725039151",
            "events": {
              "GasLimitSet": [
                {
                  "name": "GasLimitSet",
                  "args": [
                    "1000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.GovernanceProxy_setGasLimit_spartan",
            "gasUsed": 55692,
            "gasCost": "1275171393",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "719117f650f3a6f0e1182fca2e4d2347",
      "version": 7
    },
    "invoke.GovernanceProxy_setGasLimit_treasury": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setGasLimit_treasury": {
            "hash": "",
            "blockNumber": "20642903",
            "timestamp": "1725039151",
            "events": {
              "GasLimitSet": [
                {
                  "name": "GasLimitSet",
                  "args": [
                    "1000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.GovernanceProxy_setGasLimit_treasury",
            "gasUsed": 55692,
            "gasCost": "1240902676",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "933533e73db8fcee19d04048a4eec70a",
      "version": 7
    },
    "invoke.GovernanceProxy_setRegisteredEmitters_ambassador": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setRegisteredEmitters_ambassador": {
            "hash": "",
            "blockNumber": "20642904",
            "timestamp": "1725039153",
            "events": {},
            "deployedOn": "invoke.GovernanceProxy_setRegisteredEmitters_ambassador",
            "gasUsed": 268286,
            "gasCost": "1210901645",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "bf1a9f27078fb875a5a5bb76d3e83384",
      "version": 7
    },
    "invoke.GovernanceProxy_setRegisteredEmitters_spartan": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setRegisteredEmitters_spartan": {
            "hash": "",
            "blockNumber": "20642905",
            "timestamp": "1725039155",
            "events": {},
            "deployedOn": "invoke.GovernanceProxy_setRegisteredEmitters_spartan",
            "gasUsed": 268286,
            "gasCost": "1185010456",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "d43d5e1d2843f6f0df3aad8399328120",
      "version": 7
    },
    "invoke.GovernanceProxy_setRegisteredEmitters_treasury": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setRegisteredEmitters_treasury": {
            "hash": "",
            "blockNumber": "20642906",
            "timestamp": "1725039157",
            "events": {},
            "deployedOn": "invoke.GovernanceProxy_setRegisteredEmitters_treasury",
            "gasUsed": 268286,
            "gasCost": "1162297780",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "009b9dad5936b78567b629d6d5607a8d",
      "version": 7
    },
    "invoke.GovernanceProxy_setSnapshotContract_ambassador": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setSnapshotContract_ambassador": {
            "hash": "",
            "blockNumber": "20642907",
            "timestamp": "1725039158",
            "events": {
              "SnapshotContractSet": [
                {
                  "name": "SnapshotContractSet",
                  "args": [
                    "0x89FCb32F29e509cc42d0C8b6f058C993013A843F",
                    true,
                    0
                  ]
                }
              ]
            },
            "deployedOn": "invoke.GovernanceProxy_setSnapshotContract_ambassador",
            "gasUsed": 62760,
            "gasCost": "1142373410",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "25b9a8a5cb8ef6b8d95d1e6aad21a8d8",
      "version": 7
    },
    "invoke.GovernanceProxy_setSnapshotContract_spartan": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setSnapshotContract_spartan": {
            "hash": "",
            "blockNumber": "20685770",
            "timestamp": "1725556139",
            "events": {
              "SnapshotContractSet": [
                {
                  "name": "SnapshotContractSet",
                  "args": [
                    "0x89FCb32F29e509cc42d0C8b6f058C993013A843F",
                    true,
                    1
                  ]
                }
              ]
            },
            "deployedOn": "invoke.GovernanceProxy_setSnapshotContract_spartan",
            "gasUsed": 45674,
            "gasCost": "3642502380",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "56681b6e106e8af03f4cfa8de7c6fb2e",
      "version": 7
    },
    "invoke.GovernanceProxy_setSnapshotContract_treasury": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "GovernanceProxy_setSnapshotContract_treasury": {
            "hash": "",
            "blockNumber": "20642909",
            "timestamp": "1725039159",
            "events": {
              "SnapshotContractSet": [
                {
                  "name": "SnapshotContractSet",
                  "args": [
                    "0x89FCb32F29e509cc42d0C8b6f058C993013A843F",
                    true,
                    1
                  ]
                }
              ]
            },
            "deployedOn": "invoke.GovernanceProxy_setSnapshotContract_treasury",
            "gasUsed": 62772,
            "gasCost": "1109134990",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "e3c95de56995a103b800c24ae272c48e",
      "version": 7
    },
    "invoke.SynthetixDebtShare_addAuthorizedToSnapshot_ambassador": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SynthetixDebtShare_addAuthorizedToSnapshot_ambassador": {
            "hash": "",
            "blockNumber": "20642910",
            "timestamp": "1725039160",
            "events": {
              "ChangeAuthorizedToSnapshot": [
                {
                  "name": "ChangeAuthorizedToSnapshot",
                  "args": [
                    "0x93D3A11B8403C2140D0d1f1c0460601e4FBB52DE",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SynthetixDebtShare_addAuthorizedToSnapshot_ambassador",
            "gasUsed": 47581,
            "gasCost": "1095550205",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "74cc7d4187f4c1a2b63770acc981dacc",
      "version": 7
    },
    "invoke.SynthetixDebtShare_addAuthorizedToSnapshot_spartan": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SynthetixDebtShare_addAuthorizedToSnapshot_spartan": {
            "hash": "",
            "blockNumber": "20642911",
            "timestamp": "1725039160",
            "events": {
              "ChangeAuthorizedToSnapshot": [
                {
                  "name": "ChangeAuthorizedToSnapshot",
                  "args": [
                    "0x2082d5A6f6F17F5e421FD6508b867D794472A42a",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SynthetixDebtShare_addAuthorizedToSnapshot_spartan",
            "gasUsed": 47581,
            "gasCost": "1083644316",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "ab31655453aa1c240c9225ed2f9f053d",
      "version": 7
    },
    "invoke.SynthetixDebtShare_addAuthorizedToSnapshot_treasury": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "SynthetixDebtShare_addAuthorizedToSnapshot_treasury": {
            "hash": "",
            "blockNumber": "20642912",
            "timestamp": "1725039160",
            "events": {
              "ChangeAuthorizedToSnapshot": [
                {
                  "name": "ChangeAuthorizedToSnapshot",
                  "args": [
                    "0xECfA1d4B17AaCD691173b6194C3ade361ef38367",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.SynthetixDebtShare_addAuthorizedToSnapshot_treasury",
            "gasUsed": 47581,
            "gasCost": "1073221943",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "1617870cfbcdbaac2e08c45f24b664cd",
      "version": 7
    },
    "import.cannonRegistry": {
      "artifacts": {
        "imports": {
          "cannonRegistry": {
            "url": "ipfs://QmQzQqEsXkkDni23Yw1FgRZXyahEvPsWMDe3Vq4wV3eutm",
            "settings": {
              "initialOwner": "0x3852C9fdc6a5C0A4A6230c1d2d954ccCB9b90465",
              "l1ChainId": "1",
              "optimismL1Sender": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
              "optimismL2Receiver": "0x4200000000000000000000000000000000000007",
              "salt": "official-registry"
            },
            "contracts": {
              "Implementation": {
                "address": "0x1005C6DD40c9cbd2Ac14d5F32B42e566bC261E7f",
                "abi": [
                  "constructor(address _optimismMessenger, address _optimismReceiver, uint256 _l1ChainId)",
                  "error FeeRequired(uint256 amount)",
                  "error ImplementationIsSterile(address implementation)",
                  "error InvalidName(bytes32 name)",
                  "error InvalidTags()",
                  "error InvalidUrl(string url)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error PackageNotFound()",
                  "error Unauthorized(address addr)",
                  "error Unauthorized()",
                  "error UpgradeSimulationFailed()",
                  "error WithdrawFail(uint256 withdrawAmount)",
                  "error WrongChain(uint256 expectedChainId)",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PackageOwnerChanged(bytes32 indexed name, address owner)",
                  "event PackageOwnerNominated(bytes32 indexed name, address currentOwner, address nominatedOwner)",
                  "event PackagePublishWithFee(bytes32 indexed name, bytes32 indexed tag, bytes32 indexed variant, string deployUrl, string metaUrl, address owner, uint256 feePaid)",
                  "event PackagePublishersChanged(bytes32 indexed name, address[] publisher)",
                  "event PackageRegistered(bytes32 indexed name, address registrant)",
                  "event PackageUnpublish(bytes32 indexed name, bytes32 indexed tag, bytes32 indexed variant, address owner)",
                  "event PackageUnverify(bytes32 indexed name, address indexed verifier)",
                  "event PackageVerify(bytes32 indexed name, address indexed verifier)",
                  "event TagPublish(bytes32 indexed name, bytes32 indexed variant, bytes32 indexed tag, bytes32 versionOfTag)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function MAX_PACKAGE_PUBLISH_TAGS() view returns (uint256)",
                  "function MIN_PACKAGE_NAME_LENGTH() view returns (uint256)",
                  "function acceptOwnership()",
                  "function getAdditionalPublishers(bytes32 _packageName) view returns (address[] additionalPublishers)",
                  "function getImplementation() view returns (address)",
                  "function getPackageMeta(bytes32 _packageName, bytes32 _packageVersionName, bytes32 _packageVariant) view returns (string)",
                  "function getPackageNominatedOwner(bytes32 _packageName) view returns (address)",
                  "function getPackageOwner(bytes32 _packageName) view returns (address)",
                  "function getPackageUrl(bytes32 _packageName, bytes32 _packageVersionName, bytes32 _packageVariant) view returns (string)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatePackageOwner(bytes32 _packageName, address _newPackageOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function publish(bytes32 _packageName, bytes32 _variant, bytes32[] _packageTags, string _packageDeployUrl, string _packageMetaUrl) payable",
                  "function publishFee() view returns (uint256)",
                  "function registerFee() view returns (uint256)",
                  "function renounceNomination()",
                  "function setAdditionalPublishers(bytes32 _packageName, address[] _additionalPublishersEthereum, address[] _additionalPublishersOptimism)",
                  "function setFees(uint256 _publishFee, uint256 _registerFee)",
                  "function setPackageOwnership(bytes32 _packageName, address _owner) payable",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function unpublish(bytes32 _packageName, bytes32 _variant, bytes32[] _packageTags)",
                  "function unused() view returns (uint256)",
                  "function unused2() view returns (uint256)",
                  "function unverifyPackage(bytes32 _packageName)",
                  "function upgradeTo(address _newImplementation)",
                  "function validatePackageName(bytes32 _name) pure returns (bool)",
                  "function verifyPackage(bytes32 _packageName)",
                  "function withdraw()"
                ],
                "constructorArgs": [
                  "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
                  "0x4200000000000000000000000000000000000007",
                  "1"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "0x0524c0303d4120f95d13d1e95cfb20b944a32e24830fc8356af48c3c5c8105ba",
                "sourceName": "contracts/CannonRegistry.sol",
                "contractName": "CannonRegistry",
                "deployedOn": "contract.Implementation",
                "gasUsed": 2172726,
                "gasCost": "4726073795"
              },
              "InitialImpl": {
                "address": "0x65027Bfbd1644a0188984a17501Fd2682ae7D70E",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address _newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/OwnedUpgradable.sol",
                "contractName": "OwnedUpgradable",
                "deployedOn": "contract.InitialImpl",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "InitialProxy": {
                "address": "0x8E5C7EFC9636A6A0408A46BB7F617094B81e5dba",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address _newImplementation)"
                ],
                "constructorArgs": [
                  "0x65027Bfbd1644a0188984a17501Fd2682ae7D70E",
                  "0x3852C9fdc6a5C0A4A6230c1d2d954ccCB9b90465"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "Proxy": {
                "address": "0x8E5C7EFC9636A6A0408A46BB7F617094B81e5dba",
                "abi": [
                  "constructor(address _optimismMessenger, address _optimismReceiver, uint256 _l1ChainId)",
                  "error FeeRequired(uint256 amount)",
                  "error ImplementationIsSterile(address implementation)",
                  "error InvalidName(bytes32 name)",
                  "error InvalidTags()",
                  "error InvalidUrl(string url)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error PackageNotFound()",
                  "error Unauthorized(address addr)",
                  "error Unauthorized()",
                  "error UpgradeSimulationFailed()",
                  "error WithdrawFail(uint256 withdrawAmount)",
                  "error WrongChain(uint256 expectedChainId)",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event PackageOwnerChanged(bytes32 indexed name, address owner)",
                  "event PackageOwnerNominated(bytes32 indexed name, address currentOwner, address nominatedOwner)",
                  "event PackagePublishWithFee(bytes32 indexed name, bytes32 indexed tag, bytes32 indexed variant, string deployUrl, string metaUrl, address owner, uint256 feePaid)",
                  "event PackagePublishersChanged(bytes32 indexed name, address[] publisher)",
                  "event PackageRegistered(bytes32 indexed name, address registrant)",
                  "event PackageUnpublish(bytes32 indexed name, bytes32 indexed tag, bytes32 indexed variant, address owner)",
                  "event PackageUnverify(bytes32 indexed name, address indexed verifier)",
                  "event PackageVerify(bytes32 indexed name, address indexed verifier)",
                  "event TagPublish(bytes32 indexed name, bytes32 indexed variant, bytes32 indexed tag, bytes32 versionOfTag)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function MAX_PACKAGE_PUBLISH_TAGS() view returns (uint256)",
                  "function MIN_PACKAGE_NAME_LENGTH() view returns (uint256)",
                  "function acceptOwnership()",
                  "function getAdditionalPublishers(bytes32 _packageName) view returns (address[] additionalPublishers)",
                  "function getImplementation() view returns (address)",
                  "function getPackageMeta(bytes32 _packageName, bytes32 _packageVersionName, bytes32 _packageVariant) view returns (string)",
                  "function getPackageNominatedOwner(bytes32 _packageName) view returns (address)",
                  "function getPackageOwner(bytes32 _packageName) view returns (address)",
                  "function getPackageUrl(bytes32 _packageName, bytes32 _packageVersionName, bytes32 _packageVariant) view returns (string)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatePackageOwner(bytes32 _packageName, address _newPackageOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function publish(bytes32 _packageName, bytes32 _variant, bytes32[] _packageTags, string _packageDeployUrl, string _packageMetaUrl) payable",
                  "function publishFee() view returns (uint256)",
                  "function registerFee() view returns (uint256)",
                  "function renounceNomination()",
                  "function setAdditionalPublishers(bytes32 _packageName, address[] _additionalPublishersEthereum, address[] _additionalPublishersOptimism)",
                  "function setFees(uint256 _publishFee, uint256 _registerFee)",
                  "function setPackageOwnership(bytes32 _packageName, address _owner) payable",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function unpublish(bytes32 _packageName, bytes32 _variant, bytes32[] _packageTags)",
                  "function unused() view returns (uint256)",
                  "function unused2() view returns (uint256)",
                  "function unverifyPackage(bytes32 _packageName)",
                  "function upgradeTo(address _newImplementation)",
                  "function validatePackageName(bytes32 _name) pure returns (bool)",
                  "function verifyPackage(bytes32 _packageName)",
                  "function withdraw()"
                ],
                "deployTxnHash": "",
                "sourceName": "",
                "contractName": "",
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "txns": {
              "upgrade_proxy": {
                "hash": "",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x8E5C7EFC9636A6A0408A46BB7F617094B81e5dba",
                        "0x1005C6DD40c9cbd2Ac14d5F32B42e566bC261E7f"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 50816,
                "gasCost": "4820364380",
                "signer": "0x493E75825b862c355a4263C9C1CB6F650539B328"
              }
            },
            "extras": {
              "initialOwner": "0x3852C9fdc6a5C0A4A6230c1d2d954ccCB9b90465",
              "l1ChainId": "1",
              "optimismL1Sender": "0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1",
              "optimismL2Receiver": "0x4200000000000000000000000000000000000007",
              "salt": "official-registry"
            }
          }
        }
      },
      "hash": "9cf50166c147704f16d0c45514159cc5",
      "version": 7
    },
    "invoke.authorizedPublishers_arbitrum_gas_oracle": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_arbitrum_gas_oracle": {
            "hash": "",
            "blockNumber": "20682766",
            "timestamp": "1725519796",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x617262697472756d2d6761732d6f7261636c6500000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_arbitrum_gas_oracle",
            "gasUsed": 606632,
            "gasCost": "2126608777",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "bee89a971345c69b565d18c22b3e3c37",
      "version": 7
    },
    "invoke.authorizedPublishers_arbitrum_gas_price_oracle": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_arbitrum_gas_price_oracle": {
            "hash": "",
            "blockNumber": "20682767",
            "timestamp": "1725519801",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x617262697472756d2d6761732d70726963652d6f7261636c6500000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_arbitrum_gas_price_oracle",
            "gasUsed": 668746,
            "gasCost": "1991477988",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "9276e89e286704aa0a0b2cb6df2ec5f5",
      "version": 7
    },
    "invoke.authorizedPublishers_buyback_snx": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_buyback_snx": {
            "hash": "",
            "blockNumber": "20682768",
            "timestamp": "1725519802",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x6275796261636b2d736e78000000000000000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_buyback_snx",
            "gasUsed": 668578,
            "gasCost": "1873068631",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "1f9c0a3d3ab37ab5114a79fab7cea842",
      "version": 7
    },
    "invoke.authorizedPublishers_chainlink": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_chainlink": {
            "hash": "",
            "blockNumber": "20682769",
            "timestamp": "1725519803",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x636861696e6c696e6b0000000000000000000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_chainlink",
            "gasUsed": 702754,
            "gasCost": "1768799340",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "eab4b22e25fb4b1bfebf67abb534073b",
      "version": 7
    },
    "invoke.authorizedPublishers_erc4626": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_erc4626": {
            "hash": "",
            "blockNumber": "20682770",
            "timestamp": "1725519804",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x6572633436323600000000000000000000000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_erc4626",
            "gasUsed": 702730,
            "gasCost": "1677201730",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "5fd01dc8d5254f3c96fbccd38333d135",
      "version": 7
    },
    "invoke.authorizedPublishers_erc_4626_to_assets_ratio_oracle": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_erc_4626_to_assets_ratio_oracle": {
            "hash": "",
            "blockNumber": "20682771",
            "timestamp": "1725519805",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x6572632d343632362d746f2d6173736574732d726174696f2d6f7261636c6500",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_erc_4626_to_assets_ratio_oracle",
            "gasUsed": 703018,
            "gasCost": "1596517264",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "bb42dfd073211a5aaff72c275ec05782",
      "version": 7
    },
    "invoke.authorizedPublishers_fake_susde_token": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_fake_susde_token": {
            "hash": "",
            "blockNumber": "20682772",
            "timestamp": "1725519806",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x66616b652d73757364652d746f6b656e00000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_fake_susde_token",
            "gasUsed": 702838,
            "gasCost": "1525447293",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "d28745626dbd60cbfe2cbc7be76f126e",
      "version": 7
    },
    "invoke.authorizedPublishers_fake_usde_token": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_fake_usde_token": {
            "hash": "",
            "blockNumber": "20682773",
            "timestamp": "1725519807",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x66616b652d757364652d746f6b656e0000000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_fake_usde_token",
            "gasUsed": 702826,
            "gasCost": "1462843918",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "b1dfcaf7dbbc12c7bd0dafa8e0dac0f6",
      "version": 7
    },
    "invoke.authorizedPublishers_fake_wsteth_token": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_fake_wsteth_token": {
            "hash": "",
            "blockNumber": "20682774",
            "timestamp": "1725519813",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x66616b652d7773746574682d746f6b656e000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_fake_wsteth_token",
            "gasUsed": 702850,
            "gasCost": "1407699252",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "38d0ffc6ae6fd5c2e0f80f7c93eb391b",
      "version": 7
    },
    "invoke.authorizedPublishers_lido_wsteth_to_eth_ratio_oracle": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_lido_wsteth_to_eth_ratio_oracle": {
            "hash": "",
            "blockNumber": "20682775",
            "timestamp": "1725519814",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x6c69646f2d7773746574682d746f2d6574682d726174696f2d6f7261636c6500",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_lido_wsteth_to_eth_ratio_oracle",
            "gasUsed": 668818,
            "gasCost": "1359124774",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "08359d9dee55398f35bceab000a3f0e7",
      "version": 7
    },
    "invoke.authorizedPublishers_mintable_token": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_mintable_token": {
            "hash": "",
            "blockNumber": "20682776",
            "timestamp": "1725519815",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x6d696e7461626c652d746f6b656e000000000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_mintable_token",
            "gasUsed": 668614,
            "gasCost": "1316235754",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "3671af1cf702fb603a921c10678e8e93",
      "version": 7
    },
    "invoke.authorizedPublishers_op_gas_oracle": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_op_gas_oracle": {
            "hash": "",
            "blockNumber": "20682777",
            "timestamp": "1725519816",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x6f702d6761732d6f7261636c6500000000000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_op_gas_oracle",
            "gasUsed": 668602,
            "gasCost": "1278468282",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "50ed514e7990859e1e1859ddb70bb3c9",
      "version": 7
    },
    "invoke.authorizedPublishers_op_gas_price_oracle": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_op_gas_price_oracle": {
            "hash": "",
            "blockNumber": "20682778",
            "timestamp": "1725519817",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x6f702d6761732d70726963652d6f7261636c6500000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_op_gas_price_oracle",
            "gasUsed": 668674,
            "gasCost": "1245211284",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "93060a14493b688df7a098b0649e952f",
      "version": 7
    },
    "invoke.authorizedPublishers_oracle_manager": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_oracle_manager": {
            "hash": "",
            "blockNumber": "20682779",
            "timestamp": "1725519818",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x6f7261636c652d6d616e61676572000000000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_oracle_manager",
            "gasUsed": 668614,
            "gasCost": "1215926261",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "1c650ddc79bcd6a967c3f585823ea5e9",
      "version": 7
    },
    "invoke.authorizedPublishers_pyth_erc7412_wrapper": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_pyth_erc7412_wrapper": {
            "hash": "",
            "blockNumber": "20682780",
            "timestamp": "1725519819",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x707974682d657263373431322d77726170706572000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_pyth_erc7412_wrapper",
            "gasUsed": 668686,
            "gasCost": "1190138573",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "255ba4207c7cc41fccaf7a56981b9a18",
      "version": 7
    },
    "invoke.authorizedPublishers_spot_market_oracle": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_spot_market_oracle": {
            "hash": "",
            "blockNumber": "20682781",
            "timestamp": "1725519827",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73706f742d6d61726b65742d6f7261636c650000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_spot_market_oracle",
            "gasUsed": 668662,
            "gasCost": "1167430777",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "c5516139e44b5ca672bac3b0bfff2eb7",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix": {
            "hash": "",
            "blockNumber": "20682782",
            "timestamp": "1725519828",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469780000000000000000000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix",
            "gasUsed": 668554,
            "gasCost": "1147434885",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "22a035700098a59e5470deccb32f50b5",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_bfp_market": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_bfp_market": {
            "hash": "",
            "blockNumber": "20682783",
            "timestamp": "1725519830",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d6266702d6d61726b6574000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_bfp_market",
            "gasUsed": 668686,
            "gasCost": "1129826926",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "e7b876c1d7fb8347951cb09754086365",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_governance": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_governance": {
            "hash": "",
            "blockNumber": "20682784",
            "timestamp": "1725519831",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d676f7665726e616e6365000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_governance",
            "gasUsed": 668686,
            "gasCost": "1114322006",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "4b5cfb5676644ed6d6ec7e7934875fc2",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_governance_satellite": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_governance_satellite": {
            "hash": "",
            "blockNumber": "20682785",
            "timestamp": "1725519832",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d676f7665726e616e63652d736174656c6c6974650000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_governance_satellite",
            "gasUsed": 668806,
            "gasCost": "1100668802",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "bc5ee066b5e1ba88121f0b8b2dbe347f",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_legacy_market": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_legacy_market": {
            "hash": "",
            "blockNumber": "20682786",
            "timestamp": "1725519833",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d6c65676163792d6d61726b6574000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_legacy_market",
            "gasUsed": 668722,
            "gasCost": "1088646268",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "92287fe48299775f816957ea6a0c5c8f",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_omnibus": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_omnibus": {
            "hash": "",
            "blockNumber": "20682787",
            "timestamp": "1725519834",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d6f6d6e69627573000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_omnibus",
            "gasUsed": 668650,
            "gasCost": "1078059483",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "a812ee6a3b219000c51b02054ce94d7b",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_perps_market": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_perps_market": {
            "hash": "",
            "blockNumber": "20682788",
            "timestamp": "1725519835",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d70657270732d6d61726b657400000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_perps_market",
            "gasUsed": 668710,
            "gasCost": "1068737002",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "a708f89a00e64b251e6849bd8f62814d",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_rewards_dist_ext": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_rewards_dist_ext": {
            "hash": "",
            "blockNumber": "20682789",
            "timestamp": "1725519839",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d726577617264732d646973742d657874000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_rewards_dist_ext",
            "gasUsed": 702958,
            "gasCost": "1060527920",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "b72527b2c2f30fc7495bc2303effaa7f",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_rewards_distributor": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_rewards_distributor": {
            "hash": "",
            "blockNumber": "20682790",
            "timestamp": "1725519840",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d726577617264732d6469737472696275746f72000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_rewards_distributor",
            "gasUsed": 668794,
            "gasCost": "1053316502",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "ccec23211e107b77cfd8151e70b5c7bf",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_rewards_manager": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_rewards_manager": {
            "hash": "",
            "blockNumber": "20682791",
            "timestamp": "1725519841",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d726577617264732d6d616e6167657200000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_rewards_manager",
            "gasUsed": 702946,
            "gasCost": "1046949088",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "247512139f9c33fdcf22a00ba3cc86b5",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_sandbox": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_sandbox": {
            "hash": "",
            "blockNumber": "20682792",
            "timestamp": "1725519842",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d73616e64626f78000000000000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_sandbox",
            "gasUsed": 668650,
            "gasCost": "1041355475",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "aa353054ed6154fd5dd2631e45422e8d",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_snapshot_rewards": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_snapshot_rewards": {
            "hash": "",
            "blockNumber": "20682793",
            "timestamp": "1725519843",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d736e617073686f742d72657761726473000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_snapshot_rewards",
            "gasUsed": 702958,
            "gasCost": "1036416477",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "9bb6a6b2e21455222d637b0c3f1be9d9",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_spot_market": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_spot_market": {
            "hash": "",
            "blockNumber": "20682794",
            "timestamp": "1725519844",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d73706f742d6d61726b65740000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_spot_market",
            "gasUsed": 668698,
            "gasCost": "1032077745",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "aad0a680339b868668e43d717804d465",
      "version": 7
    },
    "invoke.authorizedPublishers_transparent_upgradable_proxy": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_transparent_upgradable_proxy": {
            "hash": "",
            "blockNumber": "20682795",
            "timestamp": "1725519845",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x7472616e73706172656e742d75706772616461626c652d70726f787900000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_transparent_upgradable_proxy",
            "gasUsed": 668782,
            "gasCost": "1028246780",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "ee40c2b827467151b9ceab4d16c9bc35",
      "version": 7
    },
    "invoke.authorizedPublishers_trusted_multicall_forwarder": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_trusted_multicall_forwarder": {
            "hash": "",
            "blockNumber": "20682796",
            "timestamp": "1725519847",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x747275737465642d6d756c746963616c6c2d666f727761726465720000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_trusted_multicall_forwarder",
            "gasUsed": 668770,
            "gasCost": "1024873357",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "4486a078d8fc5e79d7cfeb1cc1768c66",
      "version": 7
    },
    "invoke.setSynthAsyncFixedFeeUsde": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setSynthAsyncFixedFeeUsde": {
            "hash": "",
            "blockNumber": "20682798",
            "timestamp": "1725519948",
            "events": {
              "AsyncFixedFeeSet": [
                {
                  "name": "AsyncFixedFeeSet",
                  "args": [
                    "2",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSynthAsyncFixedFeeUsde",
            "gasUsed": 36766,
            "gasCost": "1019180379",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "61f1b43e9a4c7b2178736620e208e4a3",
      "version": 7
    },
    "invoke.setSynthPriceUsde": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setSynthPriceUsde": {
            "hash": "",
            "blockNumber": "20682799",
            "timestamp": "1725519949",
            "events": {
              "SynthPriceDataUpdated": [
                {
                  "name": "SynthPriceDataUpdated",
                  "args": [
                    "2",
                    "0xc36fbc07601eafcdc7f67c5d7ad39295b34f95704b133fceeaf273cf1f0115b3",
                    "0xc36fbc07601eafcdc7f67c5d7ad39295b34f95704b133fceeaf273cf1f0115b3",
                    "60"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSynthPriceUsde",
            "gasUsed": 102810,
            "gasCost": "1016788709",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "9f4103a34765fdecbb1fc7a981fc5cb3",
      "version": 7
    },
    "invoke.setSynthSkewScaleUsde": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setSynthSkewScaleUsde": {
            "hash": "",
            "blockNumber": "20682800",
            "timestamp": "1725519949",
            "events": {
              "MarketSkewScaleSet": [
                {
                  "name": "MarketSkewScaleSet",
                  "args": [
                    "2",
                    "0"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setSynthSkewScaleUsde",
            "gasUsed": 36710,
            "gasCost": "1014704505",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "7c1015f3a53977132b8fdb07e4b06c05",
      "version": 7
    },
    "invoke.authorizedPublishers_synthetix_mock_tokens": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "authorizedPublishers_synthetix_mock_tokens": {
            "hash": "",
            "blockNumber": "20685089",
            "timestamp": "1725547809",
            "events": {
              "PackagePublishersChanged": [
                {
                  "name": "PackagePublishersChanged",
                  "args": [
                    "0x73796e7468657469782d6d6f636b2d746f6b656e730000000000000000000000",
                    [
                      "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                      "0x1C8236B406911A376369e33D39189F1b4B39F27D"
                    ]
                  ]
                }
              ]
            },
            "deployedOn": "invoke.authorizedPublishers_synthetix_mock_tokens",
            "gasUsed": 380964,
            "gasCost": "3394516523",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "43cbf467e795291c200103925d24b723",
      "version": 7
    },
    "setting.oracle_manager_package": {
      "artifacts": {
        "settings": {
          "oracle_manager_package": "oracle-manager:3.10.1"
        }
      },
      "hash": "92fdcb64b3c75d08a007bdd55d9cbe33",
      "version": 7
    },
    "clone.oracle_manager": {
      "artifacts": {
        "imports": {
          "oracle_manager": {
            "url": "ipfs://QmV7BAagvh5kfYDiyBy3UJFh4BQMVsmiiEmXGVadnLTLnT",
            "tags": [
              "latest"
            ],
            "target": "oracle-manager:3.10.1@main",
            "preset": "main",
            "contracts": {
              "NodeModule": {
                "address": "0xf1e04afF68bb60af56592d4Ac3157be62BF2fad4",
                "abi": [
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidPrice(int256 price)",
                  "error NodeNotRegistered(bytes32 nodeId)",
                  "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowInt56ToInt24()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint160()",
                  "error OverflowUint56ToInt56()",
                  "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                  "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                  "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                  "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787261",
                "deployTimestamp": "1738842493",
                "sourceName": "contracts/modules/NodeModule.sol",
                "contractName": "NodeModule",
                "deployedOn": "contract.NodeModule",
                "gasUsed": 4896112,
                "gasCost": "1597095724"
              },
              "CoreModule": {
                "address": "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "1728480815",
                "sourceName": "contracts/modules/CoreModule.sol",
                "contractName": "CoreModule",
                "deployedOn": "contract.CoreModule",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "InitialProxy": {
                "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                  "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "1728480815",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "contract.InitialProxy",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "OracleRouter": {
                "address": "0x9b39032a686f68d4d7a8149005c0efe9bf3ec1aa",
                "abi": [
                  "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                  "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                  "function facetAddresses() pure returns (address[] addresses)",
                  "function facetAddress(bytes4 functionSelector) pure returns (address)",
                  "function emitDiamondCutEvent() returns (bool)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidPrice(int256 price)",
                  "error NodeNotRegistered(bytes32 nodeId)",
                  "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowInt56ToInt24()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint160()",
                  "error OverflowUint56ToInt56()",
                  "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                  "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                  "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                  "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                ],
                "deployedOn": "router.OracleRouter",
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787262",
                "deployTimestamp": "1738842501",
                "contractName": "OracleRouter",
                "sourceName": "OracleRouter.sol",
                "gasUsed": 1728163,
                "gasCost": "1546820822"
              },
              "Proxy": {
                "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                "abi": [
                  "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                  "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                  "function facetAddresses() pure returns (address[] addresses)",
                  "function facetAddress(bytes4 functionSelector) pure returns (address)",
                  "function emitDiamondCutEvent() returns (bool)",
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)",
                  "error EmptyRevertReason()",
                  "error Errors(bytes[] errors)",
                  "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error InvalidPrice(int256 price)",
                  "error NodeNotRegistered(bytes32 nodeId)",
                  "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowInt56ToInt24()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint160()",
                  "error OverflowUint56ToInt56()",
                  "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                  "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                  "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                  "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                  "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                  "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "sourceName": "contracts/Proxy.sol",
                "contractName": "Proxy",
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "imports": {
              "trusted_multicall_forwarder": {
                "url": "ipfs://QmbSAhExRT5TwFpa2ki8WZmv8PrdQnQFutw7Qt7aQr8YBG",
                "tags": [
                  "latest"
                ],
                "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                "preset": "with-oracle-manager",
                "settings": {
                  "salt": "salt"
                },
                "contracts": {
                  "TrustedMulticallForwarder": {
                    "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                    "abi": [
                      "constructor()",
                      "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                      "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                      "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                      "function getBasefee() view returns (uint256 basefee)",
                      "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                      "function getBlockNumber() view returns (uint256 blockNumber)",
                      "function getChainId() view returns (uint256 chainid)",
                      "function getCurrentBlockCoinbase() view returns (address coinbase)",
                      "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                      "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                      "function getEthBalance(address addr) view returns (uint256 balance)",
                      "function getLastBlockHash() view returns (bytes32 blockHash)",
                      "function getPrevRandao() view returns (uint256 prevrandao)",
                      "function nonces(address owner) view returns (uint256)",
                      "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                      "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                      "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                      "event EIP712DomainChanged()",
                      "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                      "error AddressInsufficientBalance(address account)",
                      "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                      "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                      "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                      "error ERC2771UntrustfulTarget(address target, address forwarder)",
                      "error FailedInnerCall()",
                      "error InvalidAccountNonce(address account, uint256 currentNonce)",
                      "error InvalidShortString()",
                      "error StringTooLong(string str)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "1728480815",
                    "sourceName": "src/TrustedMulticallForwarder.sol",
                    "contractName": "TrustedMulticallForwarder",
                    "deployedOn": "contract.TrustedMulticallForwarder",
                    "gasUsed": 0,
                    "gasCost": "0"
                  }
                },
                "extras": {
                  "salt": "salt"
                }
              }
            },
            "settings": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "oracle-manager-official"
            },
            "txns": {
              "upgrade_proxy": {
                "hash": "0x13d2b20513ff1850b5d014df38311142a317418d07a8fc358cc680f58f1f6822",
                "blockNumber": "21787263",
                "timestamp": "1738842507",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                        "0x9b39032a686f68d4d7A8149005C0efe9bF3Ec1aa"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgrade_proxy",
                "gasUsed": 55400,
                "gasCost": "1486343182",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              }
            },
            "extras": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "salt": "oracle-manager-official"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "setting.treasury": {
      "artifacts": {
        "settings": {
          "treasury": "0x99f4176ee457afedffcb1839c7ab7a030a5e4a92"
        }
      },
      "hash": "6683db575ca23eee423460716179c4d0",
      "version": 7
    },
    "setting.treasury_market_package": {
      "artifacts": {
        "settings": {
          "treasury_market_package": "synthetix-treasury-market:3.12.0"
        }
      },
      "hash": "dab454030a59e1d3f01b229ad70b1986",
      "version": 7
    },
    "setting.treasury_pool_id_setting": {
      "artifacts": {
        "settings": {
          "treasury_pool_id_setting": "8"
        }
      },
      "hash": "839c1e8e302a9d76c52b0df39b2fb653",
      "version": 7
    },
    "invoke.createTreasuryPool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "createTreasuryPool": {
            "hash": "0xe824fae2b6b465c110afa132f60676019c2eb801119189ced02926922c1ea962",
            "blockNumber": "21787285",
            "timestamp": "1738842654",
            "events": {
              "PoolCreated": [
                {
                  "name": "PoolCreated",
                  "args": [
                    "8",
                    "0xEb3107117FEAd7de89Cd14D463D340A2E6917769",
                    "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.createTreasuryPool",
            "gasUsed": 82624,
            "gasCost": "1038466552",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {
          "treasury_pool_id": "8"
        }
      },
      "hash": "ccbf8ed4d20e8c3bba5fff4c5f59a27e",
      "version": 7
    },
    "invoke.setTreasuryPoolCollateralDisabled": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setTreasuryPoolCollateralDisabled": {
            "hash": "0x7df79f58424c020c9dff27abafff81f4c13d12ba55158adfe5c96a384c14e713",
            "blockNumber": "21787287",
            "timestamp": "1738842657",
            "events": {
              "PoolCollateralDisabledByDefaultSet": [
                {
                  "name": "PoolCollateralDisabledByDefaultSet",
                  "args": [
                    "8",
                    true
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setTreasuryPoolCollateralDisabled",
            "gasUsed": 58648,
            "gasCost": "1029485717",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "f876b99129fdc33d100af8c40909235c",
      "version": 7
    },
    "invoke.setTreasuryPoolName": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setTreasuryPoolName": {
            "hash": "0xa1502012f97a2cba73499321b0e1ff4dd91816dbb8534a25ac2a2e3b0367aa18",
            "blockNumber": "21787288",
            "timestamp": "1738842658",
            "events": {
              "PoolNameUpdated": [
                {
                  "name": "PoolNameUpdated",
                  "args": [
                    "8",
                    "Treasury Pool",
                    "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setTreasuryPoolName",
            "gasUsed": 61007,
            "gasCost": "1025814414",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "5d0d576a787e200245d13eac701dc9fb",
      "version": 7
    },
    "invoke.setTreasuryPoolSnxExclusiveDeposit": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setTreasuryPoolSnxExclusiveDeposit": {
            "hash": "0xb1681d6614f56f6c7500ea6fb71b86fa09e355f54cdf34a10b4b519167439c5e",
            "blockNumber": "21787289",
            "timestamp": "1738842660",
            "events": {
              "PoolCollateralConfigurationUpdated": [
                {
                  "name": "PoolCollateralConfigurationUpdated",
                  "args": [
                    "8",
                    "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F",
                    {
                      "collateralLimitD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
                      "issuanceRatioD18": "115792089237316195423570985008687907853269984665640564039457584007913129639935"
                    }
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setTreasuryPoolSnxExclusiveDeposit",
            "gasUsed": 83034,
            "gasCost": "1022600737",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "1a3b5864a3685e7ee48f9765e257d8b7",
      "version": 7
    },
    "provision.treasury_market": {
      "artifacts": {
        "imports": {
          "treasury_market": {
            "url": "ipfs://QmNmvgZpo5mdoaW31L8wx2kMaV8hoTyoQuatEs6NMZtBJ9",
            "tags": [
              "latest"
            ],
            "target": "synthetix-treasury-market:3.12.0@main",
            "preset": "main",
            "contracts": {
              "InitialModuleBundle": {
                "address": "0x3b0cA9B54C9c85E3223Ccc66F7163A33aB8f87FD",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787290",
                "deployTimestamp": "1738842667",
                "sourceName": "contracts/InitialModuleBundle.sol",
                "contractName": "InitialModuleBundle",
                "deployedOn": "deploy.InitialModuleBundle",
                "gasUsed": 497616,
                "gasCost": "1019791284"
              },
              "InitialProxy": {
                "address": "0x7b952507306E7D983bcFe6942Ac9F2f75C1332D8",
                "abi": [
                  "error ImplementationIsSterile(address implementation)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function getImplementation() view returns (address)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function owner() view returns (address)",
                  "function renounceNomination()",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function upgradeTo(address newImplementation)"
                ],
                "constructorArgs": [
                  "0x3b0cA9B54C9c85E3223Ccc66F7163A33aB8f87FD",
                  "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "21787291",
                "deployTimestamp": "1738842668",
                "sourceName": "contracts/SynthetixTreasuryProxy.sol",
                "contractName": "SynthetixTreasuryProxy",
                "deployedOn": "deploy.InitialProxy",
                "gasUsed": 163967,
                "gasCost": "1017399444"
              },
              "MarketImpl": {
                "address": "0x295Fa82cbAE4bB441A40629FF636a9d537e8741B",
                "abi": [
                  "constructor(address v3SystemAddress, address oracleManagerAddress, address treasuryAddress, uint128 v3PoolId, address collateralTokenAddress)",
                  "error ImplementationIsSterile(address implementation)",
                  "error InsufficientAvailableReward(address rewardToken, uint256 rewardedAmount, uint256 availableToReward)",
                  "error InsufficientCRatio(uint128 accountId, uint256 currentDebt, uint256 targetDebt)",
                  "error InsufficientExcessDebt(int256 neededToRepay, int256 ableToRepay)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketAlreadyRegistered(uint128 marketId)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error OutstandingLoan(uint128 accountId, uint256 outstandingLoanAmount)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event AccountSaddled(uint128 indexed accountId, uint256 collateralAmount, uint256 debtAssigned)",
                  "event AccountUnsaddled(uint128 indexed accountId, uint256 collateralAmount, uint256 debtUnassigned)",
                  "event DebtDecayUpdated(uint32 power, uint32 duration, uint128 startPenalty, uint128 endPenalty)",
                  "event DepositRewardIssued(uint128 indexed accountId, address indexed rewardToken, tuple(uint64 startTime, uint32 power, uint32 duration, uint128 loanAmount) depositedRewardData)",
                  "event DepositRewardRedeemed(uint128 indexed accountId, address indexed rewardToken, uint256 rewardRedeemed, uint256 penaltyPaid)",
                  "event LoanAdjusted(uint128 indexed accountId, uint256 newLoanedAmount, uint256 previousLoanedAmount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Rebalanced(int256 previousVaultDebt, int256 newVaultDebt)",
                  "event TargetCRatioSet(uint256 newCRatio)",
                  "event TreasuryBurned(uint256 amount)",
                  "event TreasuryMinted(uint256 amount)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function adjustLoan(uint128 accountId, uint256 amount)",
                  "function artificialDebt() view returns (int256)",
                  "function availableDepositRewards(address) view returns (uint256)",
                  "function burnTreasury(uint256 amount)",
                  "function collateralToken() view returns (address)",
                  "function debtDecayPenaltyEnd() view returns (uint128)",
                  "function debtDecayPenaltyStart() view returns (uint128)",
                  "function debtDecayPower() view returns (uint32)",
                  "function debtDecayTime() view returns (uint32)",
                  "function depositRewardAvailable(uint128 accountId, address rewardTokenAddress) view returns (uint256)",
                  "function depositRewardConfigurations(uint256) view returns (address token, uint32 power, uint32 duration, uint128 percent, bytes32 valueRatioOracle, uint128 penaltyStart, uint128 penaltyEnd)",
                  "function depositRewardPenalty(uint128 accountId, address depositRewardToken) view returns (uint256)",
                  "function depositRewards(uint128, address) view returns (uint64 startTime, uint32 power, uint32 duration, uint128 loanAmount)",
                  "function fundForDepositReward(address token, uint256 amount) returns (uint256)",
                  "function getImplementation() view returns (address)",
                  "function loanedAmount(uint128 accountId) view returns (uint256)",
                  "function loans(uint128) view returns (uint64 startTime, uint32 power, uint32 duration, uint128 loanAmount)",
                  "function marketId() view returns (uint128)",
                  "function minimumCredit(uint128) view returns (uint256 lockedAmount)",
                  "function mintTreasury(uint256 amount)",
                  "function name(uint128) pure returns (string)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function onERC721Received(address, address, uint256, bytes) pure returns (bytes4)",
                  "function oracleManager() view returns (address)",
                  "function owner() view returns (address)",
                  "function poolId() view returns (uint128)",
                  "function rebalance()",
                  "function registerMarket() returns (uint128 newMarketId)",
                  "function removeFromDepositReward(address token, uint256 amount) returns (uint256)",
                  "function renounceNomination()",
                  "function repaymentPenalty(uint128 accountId, uint256 targetLoan) view returns (uint256)",
                  "function reportedDebt(uint128 requestedMarketId) view returns (uint256 debt)",
                  "function saddle(uint128 accountId)",
                  "function saddledCollateral(uint128) view returns (uint256)",
                  "function setDebtDecayFunction(uint32 power, uint32 time, uint128 startPenalty, uint128 endPenalty)",
                  "function setDepositRewardConfigurations(tuple(address token, uint32 power, uint32 duration, uint128 percent, bytes32 valueRatioOracle, uint128 penaltyStart, uint128 penaltyEnd)[] newDrcs)",
                  "function setTargetCRatio(uint256 ratio)",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function targetCratio() view returns (uint256)",
                  "function totalSaddledCollateral() view returns (uint256)",
                  "function treasury() view returns (address)",
                  "function unsaddle(uint128 accountId)",
                  "function upgradeTo(address to)",
                  "function v3System() view returns (address)"
                ],
                "constructorArgs": [
                  "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                  "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                  "0x99f4176ee457afedffcb1839c7ab7a030a5e4a92",
                  "8",
                  "0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F"
                ],
                "linkedLibraries": {},
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "1743606321",
                "sourceName": "contracts/TreasuryMarket.sol",
                "contractName": "TreasuryMarket",
                "deployedOn": "deploy.MarketImpl",
                "gasUsed": 0,
                "gasCost": "0"
              },
              "Proxy": {
                "address": "0x7b952507306E7D983bcFe6942Ac9F2f75C1332D8",
                "abi": [
                  "constructor(address v3SystemAddress, address oracleManagerAddress, address treasuryAddress, uint128 v3PoolId, address collateralTokenAddress)",
                  "error ImplementationIsSterile(address implementation)",
                  "error InsufficientAvailableReward(address rewardToken, uint256 rewardedAmount, uint256 availableToReward)",
                  "error InsufficientCRatio(uint128 accountId, uint256 currentDebt, uint256 targetDebt)",
                  "error InsufficientExcessDebt(int256 neededToRepay, int256 ableToRepay)",
                  "error InvalidParameter(string parameter, string reason)",
                  "error MarketAlreadyRegistered(uint128 marketId)",
                  "error NoChange()",
                  "error NotAContract(address contr)",
                  "error NotNominated(address addr)",
                  "error OutstandingLoan(uint128 accountId, uint256 outstandingLoanAmount)",
                  "error OverflowInt256ToUint256()",
                  "error OverflowUint256ToInt256()",
                  "error OverflowUint256ToUint128()",
                  "error Unauthorized(address addr)",
                  "error UpgradeSimulationFailed()",
                  "error ZeroAddress()",
                  "event AccountSaddled(uint128 indexed accountId, uint256 collateralAmount, uint256 debtAssigned)",
                  "event AccountUnsaddled(uint128 indexed accountId, uint256 collateralAmount, uint256 debtUnassigned)",
                  "event DebtDecayUpdated(uint32 power, uint32 duration, uint128 startPenalty, uint128 endPenalty)",
                  "event DepositRewardIssued(uint128 indexed accountId, address indexed rewardToken, tuple(uint64 startTime, uint32 power, uint32 duration, uint128 loanAmount) depositedRewardData)",
                  "event DepositRewardRedeemed(uint128 indexed accountId, address indexed rewardToken, uint256 rewardRedeemed, uint256 penaltyPaid)",
                  "event LoanAdjusted(uint128 indexed accountId, uint256 newLoanedAmount, uint256 previousLoanedAmount)",
                  "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                  "event OwnerChanged(address oldOwner, address newOwner)",
                  "event OwnerNominated(address newOwner)",
                  "event Rebalanced(int256 previousVaultDebt, int256 newVaultDebt)",
                  "event TargetCRatioSet(uint256 newCRatio)",
                  "event TreasuryBurned(uint256 amount)",
                  "event TreasuryMinted(uint256 amount)",
                  "event Upgraded(address indexed self, address implementation)",
                  "function acceptOwnership()",
                  "function adjustLoan(uint128 accountId, uint256 amount)",
                  "function artificialDebt() view returns (int256)",
                  "function availableDepositRewards(address) view returns (uint256)",
                  "function burnTreasury(uint256 amount)",
                  "function collateralToken() view returns (address)",
                  "function debtDecayPenaltyEnd() view returns (uint128)",
                  "function debtDecayPenaltyStart() view returns (uint128)",
                  "function debtDecayPower() view returns (uint32)",
                  "function debtDecayTime() view returns (uint32)",
                  "function depositRewardAvailable(uint128 accountId, address rewardTokenAddress) view returns (uint256)",
                  "function depositRewardConfigurations(uint256) view returns (address token, uint32 power, uint32 duration, uint128 percent, bytes32 valueRatioOracle, uint128 penaltyStart, uint128 penaltyEnd)",
                  "function depositRewardPenalty(uint128 accountId, address depositRewardToken) view returns (uint256)",
                  "function depositRewards(uint128, address) view returns (uint64 startTime, uint32 power, uint32 duration, uint128 loanAmount)",
                  "function fundForDepositReward(address token, uint256 amount) returns (uint256)",
                  "function getImplementation() view returns (address)",
                  "function loanedAmount(uint128 accountId) view returns (uint256)",
                  "function loans(uint128) view returns (uint64 startTime, uint32 power, uint32 duration, uint128 loanAmount)",
                  "function marketId() view returns (uint128)",
                  "function minimumCredit(uint128) view returns (uint256 lockedAmount)",
                  "function mintTreasury(uint256 amount)",
                  "function name(uint128) pure returns (string)",
                  "function nominateNewOwner(address newNominatedOwner)",
                  "function nominatedOwner() view returns (address)",
                  "function onERC721Received(address, address, uint256, bytes) pure returns (bytes4)",
                  "function oracleManager() view returns (address)",
                  "function owner() view returns (address)",
                  "function poolId() view returns (uint128)",
                  "function rebalance()",
                  "function registerMarket() returns (uint128 newMarketId)",
                  "function removeFromDepositReward(address token, uint256 amount) returns (uint256)",
                  "function renounceNomination()",
                  "function repaymentPenalty(uint128 accountId, uint256 targetLoan) view returns (uint256)",
                  "function reportedDebt(uint128 requestedMarketId) view returns (uint256 debt)",
                  "function saddle(uint128 accountId)",
                  "function saddledCollateral(uint128) view returns (uint256)",
                  "function setDebtDecayFunction(uint32 power, uint32 time, uint128 startPenalty, uint128 endPenalty)",
                  "function setDepositRewardConfigurations(tuple(address token, uint32 power, uint32 duration, uint128 percent, bytes32 valueRatioOracle, uint128 penaltyStart, uint128 penaltyEnd)[] newDrcs)",
                  "function setTargetCRatio(uint256 ratio)",
                  "function simulateUpgradeTo(address newImplementation)",
                  "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                  "function targetCratio() view returns (uint256)",
                  "function totalSaddledCollateral() view returns (uint256)",
                  "function treasury() view returns (address)",
                  "function unsaddle(uint128 accountId)",
                  "function upgradeTo(address to)",
                  "function v3System() view returns (address)"
                ],
                "deployTxnHash": "",
                "deployTxnBlockNumber": "",
                "deployTimestamp": "",
                "constructorArgs": [
                  "<%= contracts.InitialModuleBundle.address %>",
                  "<%= settings.owner %>"
                ],
                "sourceName": "contracts/SynthetixTreasuryProxy.sol",
                "contractName": "SynthetixTreasuryProxy",
                "deployedOn": "invoke.upgradeProxy",
                "gasUsed": 0,
                "gasCost": "0",
                "highlight": true
              }
            },
            "settings": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "pool_id": "1",
              "treasury_address": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "v3_package": "synthetix:latest",
              "collateral_token": "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
              "market_id": "3"
            },
            "imports": {
              "v3": {
                "url": "ipfs://QmQL57bhoyBFdLpVHgkFvtVxC37e5998PXKupsxann16c2",
                "contracts": {
                  "AccountModule": {
                    "address": "0xe7B2390C847e16459F1AD7e9735A93D3F80D9088",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "error ZeroAddress()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182001",
                    "deployTimestamp": "1743606279",
                    "sourceName": "contracts/modules/core/AccountModule.sol",
                    "contractName": "AccountModule",
                    "deployedOn": "contract.AccountModule",
                    "gasUsed": 1225797,
                    "gasCost": "1625316474"
                  },
                  "AccountTokenModule": {
                    "address": "0x5D2B70aBE685F3B6Ff82F5d3e6eb94085FD224cD",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787265",
                    "deployTimestamp": "1738842516",
                    "sourceName": "contracts/modules/account/AccountTokenModule.sol",
                    "contractName": "AccountTokenModule",
                    "deployedOn": "contract.AccountTokenModule",
                    "gasUsed": 1787668,
                    "gasCost": "1376902284"
                  },
                  "AssociateDebtModule": {
                    "address": "0xb72aa6558DDC2B2969D64A9c92645586067f5686",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182002",
                    "deployTimestamp": "1743606279",
                    "sourceName": "contracts/modules/core/AssociateDebtModule.sol",
                    "contractName": "AssociateDebtModule",
                    "deployedOn": "contract.AssociateDebtModule",
                    "gasUsed": 2612609,
                    "gasCost": "1553539507"
                  },
                  "AssociatedSystemsModule": {
                    "address": "0xa8DD42C00E0e7434d04c74374CA1Da610E6Ef71C",
                    "abi": [
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "error Unauthorized(address addr)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20333356",
                    "deployTimestamp": "1721305103",
                    "sourceName": "contracts/modules/associated-systems/AssociatedSystemsModule.sol",
                    "contractName": "AssociatedSystemsModule",
                    "deployedOn": "contract.AssociatedSystemsModule",
                    "gasUsed": 877153,
                    "gasCost": "9017689799"
                  },
                  "CcipReceiverModule": {
                    "address": "0xF122049f28315D49B8135379A796f56D3C6A03fe",
                    "abi": [
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error Unauthorized(address addr)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928365",
                    "deployTimestamp": "1728480899",
                    "sourceName": "contracts/modules/core/CcipReceiverModule.sol",
                    "contractName": "CcipReceiverModule",
                    "deployedOn": "contract.CcipReceiverModule",
                    "gasUsed": 469476,
                    "gasCost": "25231538550"
                  },
                  "CollateralConfigurationModule": {
                    "address": "0xCDF47798128b2a771465B5833ca0C3eF1C913ADd",
                    "abi": [
                      "error EmptyRevertReason()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error PositionOutOfBounds()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787267",
                    "deployTimestamp": "1738842518",
                    "sourceName": "contracts/modules/core/CollateralConfigurationModule.sol",
                    "contractName": "CollateralConfigurationModule",
                    "deployedOn": "contract.CollateralConfigurationModule",
                    "gasUsed": 872728,
                    "gasCost": "1300781065"
                  },
                  "CollateralModule": {
                    "address": "0xd7FE43584585954EfaE4aEdb39807534e4B6aE45",
                    "abi": [
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error AccountNotFound(uint128 accountId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182003",
                    "deployTimestamp": "1743606280",
                    "sourceName": "contracts/modules/core/CollateralModule.sol",
                    "contractName": "CollateralModule",
                    "deployedOn": "contract.CollateralModule",
                    "gasUsed": 1937434,
                    "gasCost": "1496398588"
                  },
                  "CrossChainUSDModule": {
                    "address": "0x9d227f1c685b7c207f44416Eb59e457d8d59AbdC",
                    "abi": [
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928368",
                    "deployTimestamp": "1728480935",
                    "sourceName": "contracts/modules/core/CrossChainUSDModule.sol",
                    "contractName": "CrossChainUSDModule",
                    "deployedOn": "contract.CrossChainUSDModule",
                    "gasUsed": 595289,
                    "gasCost": "26447314844"
                  },
                  "FeatureFlagModule": {
                    "address": "0x3E8d0225423fe6FcC0377F49B2a6046BCE6D34c7",
                    "abi": [
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "20928369",
                    "deployTimestamp": "1728480947",
                    "sourceName": "contracts/modules/core/FeatureFlagModule.sol",
                    "contractName": "FeatureFlagModule",
                    "deployedOn": "contract.FeatureFlagModule",
                    "gasUsed": 777054,
                    "gasCost": "26552367099"
                  },
                  "IssueUSDModule": {
                    "address": "0x6FA4b55c8b9AdC03129c3796414d44cA0ef50764",
                    "abi": [
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182004",
                    "deployTimestamp": "1743606280",
                    "sourceName": "contracts/modules/core/IssueUSDModule.sol",
                    "contractName": "IssueUSDModule",
                    "deployedOn": "contract.IssueUSDModule",
                    "gasUsed": 3042995,
                    "gasCost": "1442363261"
                  },
                  "LiquidationModule": {
                    "address": "0xA610198f9521850393DF6029d95e26b79a6918A6",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error CannotScaleEmptyMapping()",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint256ToUint64()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PositionOutOfBounds()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182005",
                    "deployTimestamp": "1743606281",
                    "sourceName": "contracts/modules/core/LiquidationModule.sol",
                    "contractName": "LiquidationModule",
                    "deployedOn": "contract.LiquidationModule",
                    "gasUsed": 4620402,
                    "gasCost": "1398285430"
                  },
                  "MarketCollateralModule": {
                    "address": "0x50a6b732B9a4Dd3cAa5F8fb33110728F8f65e4f0",
                    "abi": [
                      "error CollateralNotFound()",
                      "error EmptyRevertReason()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "error Unauthorized(address addr)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787271",
                    "deployTimestamp": "1738842523",
                    "sourceName": "contracts/modules/core/MarketCollateralModule.sol",
                    "contractName": "MarketCollateralModule",
                    "deployedOn": "contract.MarketCollateralModule",
                    "gasUsed": 1298300,
                    "gasCost": "1193728026"
                  },
                  "MarketManagerModule": {
                    "address": "0x7656bDEE9f4e7A507fd0C5b2431D3F3690E20711",
                    "abi": [
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error FeatureUnavailable(bytes32 which)",
                      "error IncorrectMarketInterface(address market)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error Unauthorized(address addr)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787272",
                    "deployTimestamp": "1738842524",
                    "sourceName": "contracts/modules/core/MarketManagerModule.sol",
                    "contractName": "MarketManagerModule",
                    "deployedOn": "contract.MarketManagerModule",
                    "gasUsed": 2816393,
                    "gasCost": "1171607999"
                  },
                  "PoolConfigurationModule": {
                    "address": "0xB0A8c84360f505e050F4F76042FDC4f29320bE2A",
                    "abi": [
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842770",
                    "deployTimestamp": "1739512729",
                    "sourceName": "contracts/modules/core/PoolConfigurationModule.sol",
                    "contractName": "PoolConfigurationModule",
                    "deployedOn": "contract.PoolConfigurationModule",
                    "gasUsed": 446271,
                    "gasCost": "1272805637"
                  },
                  "PoolModule": {
                    "address": "0xe8e04A78B54455705ab50F612B43739b1De68D05",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "error PoolNotFound(uint128 poolId)",
                      "error Unauthorized(address addr)",
                      "error ZeroAddress()",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842771",
                    "deployTimestamp": "1739512731",
                    "sourceName": "contracts/modules/core/PoolModule.sol",
                    "contractName": "PoolModule",
                    "deployedOn": "contract.PoolModule",
                    "gasUsed": 4099803,
                    "gasCost": "1239719477"
                  },
                  "RewardsManagerModule": {
                    "address": "0xDdFcbBdd05a85e76Db673fc1cB7D36ecDe472CCF",
                    "abi": [
                      "error AccountNotFound(uint128 accountId)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PositionOutOfBounds()",
                      "error RewardUnavailable(address distributor)",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182006",
                    "deployTimestamp": "1743606281",
                    "sourceName": "contracts/modules/core/RewardsManagerModule.sol",
                    "contractName": "RewardsManagerModule",
                    "deployedOn": "contract.RewardsManagerModule",
                    "gasUsed": 2642251,
                    "gasCost": "1363835075"
                  },
                  "USDTokenModule": {
                    "address": "0x9839B57EE26ef9061fa67c2e8056217B20084072",
                    "abi": [
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error Unauthorized(address addr)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787276",
                    "deployTimestamp": "1738842528",
                    "sourceName": "contracts/modules/usd/USDTokenModule.sol",
                    "contractName": "USDTokenModule",
                    "deployedOn": "contract.USDTokenModule",
                    "gasUsed": 1110294,
                    "gasCost": "1110462497"
                  },
                  "UtilsModule": {
                    "address": "0xd63B709D3E260341c07Cb4D3A62585a6A7e67FdE",
                    "abi": [
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error Unauthorized(address addr)",
                      "error ValueAlreadyInSet()",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21842773",
                    "deployTimestamp": "1739512734",
                    "sourceName": "contracts/modules/core/UtilsModule.sol",
                    "contractName": "UtilsModule",
                    "deployedOn": "contract.UtilsModule",
                    "gasUsed": 770698,
                    "gasCost": "1195500364"
                  },
                  "VaultModule": {
                    "address": "0xA598e80F994aF71929710C4A42eFFE058E94Adf9",
                    "abi": [
                      "error CapacityLocked(uint256 marketId)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error MarketNotFound(uint128 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error OverflowInt128ToUint128()",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "error PoolNotFound(uint128 poolId)",
                      "error PositionOutOfBounds()",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182007",
                    "deployTimestamp": "1743606282",
                    "sourceName": "contracts/modules/core/VaultModule.sol",
                    "contractName": "VaultModule",
                    "deployedOn": "contract.VaultModule",
                    "gasUsed": 4732148,
                    "gasCost": "1326366888"
                  },
                  "InitialModuleBundle": {
                    "address": "0x828EED723cAF0A8F822249231266E38dF614923C",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/modules/InitialModuleBundle.sol",
                    "contractName": "InitialModuleBundle",
                    "deployedOn": "contract.InitialModuleBundle"
                  },
                  "InitialCoreProxy": {
                    "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                    "abi": [
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)"
                    ],
                    "constructorArgs": [
                      "0x828EED723cAF0A8F822249231266E38dF614923C",
                      "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                    ],
                    "linkedLibraries": {},
                    "deployTxnHash": "",
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "contract.InitialCoreProxy"
                  },
                  "AccountRouter": {
                    "address": "0x35b51e3dc2a8cf242fdcae8f07cf21a6d91ff783",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployedOn": "router.AccountRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787278",
                    "deployTimestamp": "1738842536",
                    "contractName": "AccountRouter",
                    "sourceName": "AccountRouter.sol",
                    "gasUsed": 1963401,
                    "gasCost": "1089268503"
                  },
                  "CoreRouter": {
                    "address": "0x50d8302c7010c23ec3d2dece65e8a50cc0cc5cb8",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "deployedOn": "router.CoreRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "22182008",
                    "deployTimestamp": "1743606293",
                    "contractName": "CoreRouter",
                    "sourceName": "CoreRouter.sol",
                    "gasUsed": 5621498,
                    "gasCost": "1298441164"
                  },
                  "USDRouter": {
                    "address": "0x71182391bb34bf922c8ba3ff3047b604ecbb202b",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployedOn": "router.USDRouter",
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "21787280",
                    "deployTimestamp": "1738842592",
                    "contractName": "USDRouter",
                    "sourceName": "USDRouter.sol",
                    "gasUsed": 2087424,
                    "gasCost": "1073336908"
                  },
                  "CoreProxy": {
                    "address": "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error ValueAlreadyInSet()",
                      "error ValueNotInSet()",
                      "event FeatureFlagAllowAllSet(bytes32 indexed feature, bool allowAll)",
                      "event FeatureFlagAllowlistAdded(bytes32 indexed feature, address account)",
                      "event FeatureFlagAllowlistRemoved(bytes32 indexed feature, address account)",
                      "event FeatureFlagDeniersReset(bytes32 indexed feature, address[] deniers)",
                      "event FeatureFlagDenyAllSet(bytes32 indexed feature, bool denyAll)",
                      "function addToFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function getDeniers(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagAllowAll(bytes32 feature) view returns (bool)",
                      "function getFeatureFlagAllowlist(bytes32 feature) view returns (address[])",
                      "function getFeatureFlagDenyAll(bytes32 feature) view returns (bool)",
                      "function isFeatureAllowed(bytes32 feature, address account) view returns (bool)",
                      "function removeFromFeatureFlagAllowlist(bytes32 feature, address account)",
                      "function setDeniers(bytes32 feature, address[] deniers)",
                      "function setFeatureFlagAllowAll(bytes32 feature, bool allowAll)",
                      "function setFeatureFlagDenyAll(bytes32 feature, bool denyAll)",
                      "error FeatureUnavailable(bytes32 which)",
                      "error InvalidAccountId(uint128 accountId)",
                      "error InvalidPermission(bytes32 permission)",
                      "error OnlyAccountTokenProxy(address origin)",
                      "error PermissionDenied(uint128 accountId, bytes32 permission, address target)",
                      "error PermissionNotGranted(uint128 accountId, bytes32 permission, address user)",
                      "error PositionOutOfBounds()",
                      "event AccountCreated(uint128 indexed accountId, address indexed owner)",
                      "event PermissionGranted(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "event PermissionRevoked(uint128 indexed accountId, bytes32 indexed permission, address indexed user, address sender)",
                      "function createAccount() returns (uint128 accountId)",
                      "function createAccount(uint128 requestedAccountId)",
                      "function getAccountLastInteraction(uint128 accountId) view returns (uint256)",
                      "function getAccountOwner(uint128 accountId) view returns (address)",
                      "function getAccountPermissions(uint128 accountId) view returns (tuple(address user, bytes32[] permissions)[] accountPerms)",
                      "function getAccountTokenAddress() view returns (address)",
                      "function grantPermission(uint128 accountId, bytes32 permission, address user)",
                      "function hasPermission(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function isAuthorized(uint128 accountId, bytes32 permission, address user) view returns (bool)",
                      "function notifyAccountTransfer(address to, uint128 accountId)",
                      "function renouncePermission(uint128 accountId, bytes32 permission)",
                      "function revokePermission(uint128 accountId, bytes32 permission, address user)",
                      "error AccountNotFound(uint128 accountId)",
                      "error EmptyDistribution()",
                      "error EmptyRevertReason()",
                      "error Errors(bytes[] errors)",
                      "error InsufficientCollateralRatio(uint256 collateralValue, uint256 debt, uint256 ratio, uint256 minRatio)",
                      "error MarketNotFound(uint128 marketId)",
                      "error NotFundedByPool(uint256 marketId, uint256 poolId)",
                      "error OverflowInt256ToInt128()",
                      "error OverflowInt256ToUint256()",
                      "error OverflowUint128ToInt128()",
                      "error OverflowUint256ToInt256()",
                      "error OverflowUint256ToUint128()",
                      "event DebtAssociated(uint128 indexed marketId, uint128 indexed poolId, address indexed collateralType, uint128 accountId, uint256 amount, int256 updatedDebt)",
                      "function associateDebt(uint128 marketId, uint128 poolId, address collateralType, uint128 accountId, uint256 amount) returns (int256)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error InvalidMessage()",
                      "error NotCcipRouter(address)",
                      "error UnsupportedNetwork(uint64)",
                      "function ccipReceive(tuple(bytes32 messageId, uint64 sourceChainSelector, bytes sender, bytes data, tuple(address token, uint256 amount)[] tokenAmounts) message)",
                      "error AccountActivityTimeoutPending(uint128 accountId, uint256 currentTime, uint256 requiredTime)",
                      "error CollateralDepositDisabled(address collateralType)",
                      "error CollateralNotFound()",
                      "error FailedTransfer(address from, address to, uint256 value)",
                      "error InsufficientAccountCollateral(uint256 amount)",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientAvailableCollateral(uint256 amountAvailableForDelegationD18, uint256 amountD18)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error OverflowUint256ToUint64()",
                      "error PrecisionLost(uint256 tokenAmount, uint8 decimals)",
                      "event CollateralLockCreated(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, uint64 expireTimestamp)",
                      "event CollateralLockExpired(uint256 tokenAmount, uint64 expireTimestamp)",
                      "event Deposited(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "event Withdrawn(uint128 indexed accountId, address indexed collateralType, uint256 tokenAmount, address indexed sender)",
                      "function cleanExpiredLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) returns (uint256 cleared, uint256 remainingLockAmountD18)",
                      "function createLock(uint128 accountId, address collateralType, uint256 amount, uint64 expireTimestamp)",
                      "function deposit(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "function getAccountAvailableCollateral(uint128 accountId, address collateralType) view returns (uint256)",
                      "function getAccountCollateral(uint128 accountId, address collateralType) view returns (uint256 totalDeposited, uint256 totalAssigned, uint256 totalLocked)",
                      "function getLocks(uint128 accountId, address collateralType, uint256 offset, uint256 count) view returns (tuple(uint128 amountD18, uint64 lockExpirationTime)[] locks)",
                      "function withdraw(uint128 accountId, address collateralType, uint256 tokenAmount)",
                      "event CollateralConfigured(address indexed collateralType, tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function configureCollateral(tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18) config)",
                      "function getCollateralConfiguration(address collateralType) pure returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18))",
                      "function getCollateralConfigurations(bool hideDisabled) view returns (tuple(bool depositingEnabled, uint256 issuanceRatioD18, uint256 liquidationRatioD18, uint256 liquidationRewardD18, bytes32 oracleNodeId, address tokenAddress, uint256 minDelegationD18)[])",
                      "function getCollateralPrice(address collateralType) view returns (uint256)",
                      "error InsufficientCcipFee(uint256 requiredAmount, uint256 availableAmount)",
                      "event TransferCrossChainInitiated(uint64 indexed destChainId, uint256 indexed amount, address sender)",
                      "function transferCrossChain(uint64 destChainId, uint256 amount) payable returns (uint256 gasTokenUsed)",
                      "error InsufficientDebt(int256 currentDebt)",
                      "error PoolNotFound(uint128 poolId)",
                      "event UsdBurned(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "event UsdMinted(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, address indexed sender)",
                      "function burnUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "function mintUsd(uint128 accountId, uint128 poolId, address collateralType, uint256 amount)",
                      "error CannotScaleEmptyMapping()",
                      "error IneligibleForLiquidation(uint256 collateralValue, int256 debt, uint256 currentCRatio, uint256 cratio)",
                      "error InsufficientMappedAmount()",
                      "error MustBeVaultLiquidated()",
                      "error OverflowInt128ToUint128()",
                      "error OverflowUint256ToUint32()",
                      "error OverflowUint32ToInt32()",
                      "error OverflowUint64ToInt64()",
                      "event Liquidation(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "event VaultLiquidation(uint128 indexed poolId, address indexed collateralType, tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData, uint128 liquidateAsAccountId, address sender)",
                      "function isPositionLiquidatable(uint128 accountId, uint128 poolId, address collateralType) returns (bool)",
                      "function isVaultLiquidatable(uint128 poolId, address collateralType) returns (bool)",
                      "function liquidate(uint128 accountId, uint128 poolId, address collateralType, uint128 liquidateAsAccountId) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateToTreasury(uint128 accountId, uint128 poolId, address collateralType) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "function liquidateVault(uint128 poolId, address collateralType, uint128 liquidateAsAccountId, uint256 maxUsd) returns (tuple(uint256 debtLiquidated, uint256 collateralLiquidated, uint256 amountRewarded) liquidationData)",
                      "error InsufficientMarketCollateralDepositable(uint128 marketId, address collateralType, uint256 tokenAmountToDeposit)",
                      "error InsufficientMarketCollateralWithdrawable(uint128 marketId, address collateralType, uint256 tokenAmountToWithdraw)",
                      "event MarketCollateralDeposited(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MarketCollateralWithdrawn(uint128 indexed marketId, address indexed collateralType, uint256 tokenAmount, address indexed sender, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue, uint256 reportedDebt)",
                      "event MaximumMarketCollateralConfigured(uint128 indexed marketId, address indexed collateralType, uint256 systemAmount, address indexed owner)",
                      "function configureMaximumMarketCollateral(uint128 marketId, address collateralType, uint256 amount)",
                      "function depositMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "function getMarketCollateralAmount(uint128 marketId, address collateralType) view returns (uint256 collateralAmountD18)",
                      "function getMarketCollateralValue(uint128 marketId) view returns (uint256)",
                      "function getMaximumMarketCollateral(uint128 marketId, address collateralType) view returns (uint256)",
                      "function withdrawMarketCollateral(uint128 marketId, address collateralType, uint256 tokenAmount)",
                      "error IncorrectMarketInterface(address market)",
                      "error NotEnoughLiquidity(uint128 marketId, uint256 amount)",
                      "event MarketRegistered(address indexed market, uint128 indexed marketId, address indexed sender)",
                      "event MarketUsdDeposited(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event MarketUsdWithdrawn(uint128 indexed marketId, address indexed target, uint256 amount, address indexed market, int128 creditCapacity, int128 netIssuance, uint256 depositedCollateralValue)",
                      "event SetMarketMinLiquidityRatio(uint128 indexed marketId, uint256 minLiquidityRatio)",
                      "event SetMinDelegateTime(uint128 indexed marketId, uint32 minDelegateTime)",
                      "function depositMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "function distributeDebtToPools(uint128 marketId, uint256 maxIter) returns (bool)",
                      "function getMarketAddress(uint128 marketId) view returns (address)",
                      "function getMarketCapacityContributionFromPool(uint128 marketId, uint128 poolId) view returns (uint256)",
                      "function getMarketCollateral(uint128 marketId) view returns (uint256)",
                      "function getMarketDebtPerShare(uint128 marketId) returns (int256)",
                      "function getMarketFees(uint128, uint256 amount) view returns (uint256 depositFeeAmount, uint256 withdrawFeeAmount)",
                      "function getMarketMinDelegateTime(uint128 marketId) view returns (uint32)",
                      "function getMarketNetIssuance(uint128 marketId) view returns (int128)",
                      "function getMarketPoolDebtDistribution(uint128 marketId, uint128 poolId) returns (uint256 sharesD18, uint128 totalSharesD18, int128 valuePerShareD27)",
                      "function getMarketPoolMaxDebtPerShare(uint128 marketId, uint128 poolId) view returns (int256)",
                      "function getMarketPools(uint128 marketId) returns (uint128[] inRangePoolIds, uint128[] outRangePoolIds)",
                      "function getMarketReportedDebt(uint128 marketId) view returns (uint256)",
                      "function getMarketTotalDebt(uint128 marketId) view returns (int256)",
                      "function getMinLiquidityRatio(uint128 marketId) view returns (uint256)",
                      "function getOracleManager() view returns (address)",
                      "function getUsdToken() view returns (address)",
                      "function getWithdrawableMarketUsd(uint128 marketId) view returns (uint256)",
                      "function isMarketCapacityLocked(uint128 marketId) view returns (bool)",
                      "function registerMarket(address market) returns (uint128 marketId)",
                      "function setMarketMinDelegateTime(uint128 marketId, uint32 minDelegateTime)",
                      "function setMinLiquidityRatio(uint128 marketId, uint256 minLiquidityRatio)",
                      "function withdrawMarketUsd(uint128 marketId, address target, uint256 amount) returns (uint256 feeAmount)",
                      "event PoolApprovedAdded(uint256 poolId)",
                      "event PoolApprovedRemoved(uint256 poolId)",
                      "event PreferredPoolSet(uint256 poolId)",
                      "function addApprovedPool(uint128 poolId)",
                      "function getApprovedPools() view returns (uint256[])",
                      "function getPreferredPool() view returns (uint128)",
                      "function removeApprovedPool(uint128 poolId)",
                      "function setPreferredPool(uint128 poolId)",
                      "error CapacityLocked(uint256 marketId)",
                      "error MinDelegationTimeoutPending(uint128 poolId, uint32 timeRemaining)",
                      "error PoolAlreadyExists(uint128 poolId)",
                      "event PoolCollateralConfigurationUpdated(uint128 indexed poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "event PoolCollateralDisabledByDefaultSet(uint128 poolId, bool disabled)",
                      "event PoolConfigurationSet(uint128 indexed poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] markets, address indexed sender)",
                      "event PoolCreated(uint128 indexed poolId, address indexed owner, address indexed sender)",
                      "event PoolNameUpdated(uint128 indexed poolId, string name, address indexed sender)",
                      "event PoolNominationRenounced(uint128 indexed poolId, address indexed owner)",
                      "event PoolNominationRevoked(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnerNominated(uint128 indexed poolId, address indexed nominatedOwner, address indexed owner)",
                      "event PoolOwnershipAccepted(uint128 indexed poolId, address indexed owner)",
                      "event PoolOwnershipRenounced(uint128 indexed poolId, address indexed owner)",
                      "event SetMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function acceptPoolOwnership(uint128 poolId)",
                      "function createPool(uint128 requestedPoolId, address owner)",
                      "function getMinLiquidityRatio() view returns (uint256)",
                      "function getNominatedPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolCollateralConfiguration(uint128 poolId, address collateralType) view returns (tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) config)",
                      "function getPoolCollateralIssuanceRatio(uint128 poolId, address collateral) view returns (uint256)",
                      "function getPoolConfiguration(uint128 poolId) view returns (tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[])",
                      "function getPoolDebtPerShare(uint128 poolId) returns (int256 debtPerShareD18)",
                      "function getPoolName(uint128 poolId) view returns (string poolName)",
                      "function getPoolOwner(uint128 poolId) view returns (address)",
                      "function getPoolTotalDebt(uint128 poolId) returns (int256 totalDebtD18)",
                      "function nominatePoolOwner(address nominatedOwner, uint128 poolId)",
                      "function rebalancePool(uint128 poolId, address optionalCollateralType)",
                      "function renouncePoolNomination(uint128 poolId)",
                      "function renouncePoolOwnership(uint128 poolId)",
                      "function revokePoolNomination(uint128 poolId)",
                      "function setMinLiquidityRatio(uint256 minLiquidityRatio)",
                      "function setPoolCollateralConfiguration(uint128 poolId, address collateralType, tuple(uint256 collateralLimitD18, uint256 issuanceRatioD18) newConfig)",
                      "function setPoolCollateralDisabledByDefault(uint128 poolId, bool disabled)",
                      "function setPoolConfiguration(uint128 poolId, tuple(uint128 marketId, uint128 weightD18, int128 maxDebtShareValueD18)[] newMarketConfigurations)",
                      "function setPoolName(uint128 poolId, string name)",
                      "error RewardUnavailable(address distributor)",
                      "event RewardsClaimed(uint128 indexed accountId, uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount)",
                      "event RewardsDistributed(uint128 indexed poolId, address indexed collateralType, address distributor, uint256 amount, uint256 start, uint256 duration)",
                      "event RewardsDistributorRegistered(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "event RewardsDistributorRemoved(uint128 indexed poolId, address indexed collateralType, address indexed distributor)",
                      "function claimPoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function claimRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function distributeRewards(uint128 poolId, address collateralType, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function distributeRewardsByOwner(uint128 poolId, address collateralType, address rewardsDistributor, uint256 amount, uint64 start, uint32 duration) returns (int256)",
                      "function getAvailablePoolRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getAvailableRewards(uint128 accountId, uint128 poolId, address collateralType, address distributor) returns (uint256)",
                      "function getRewardRate(uint128 poolId, address collateralType, address distributor) view returns (uint256)",
                      "function registerRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function removeRewardsDistributor(uint128 poolId, address collateralType, address distributor)",
                      "function updateRewards(uint128 poolId, address collateralType, uint128 accountId) returns (uint256[], address[], uint256)",
                      "event ConfigSet(bytes32 indexed k, bytes32 v)",
                      "event NewSupportedCrossChainNetwork(uint64 newChainId)",
                      "function configureChainlinkCrossChain(address ccipRouter, address ccipTokenPool)",
                      "function configureOracleManager(address oracleManagerAddress)",
                      "function getConfig(bytes32 k) view returns (bytes32 v)",
                      "function getConfigAddress(bytes32 k) view returns (address v)",
                      "function getConfigUint(bytes32 k) view returns (uint256 v)",
                      "function getTrustedForwarder() pure returns (address)",
                      "function isTrustedForwarder(address forwarder) pure returns (bool)",
                      "function setConfig(bytes32 k, bytes32 v)",
                      "function setSupportedCrossChainNetworks(uint64[] supportedNetworks, uint64[] ccipSelectors) returns (uint256 numRegistered)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "error InsufficientDelegation(uint256 minDelegation)",
                      "error InsufficientVaultCollateralRatio(uint128 poolId, address collateralType)",
                      "error InvalidCollateralAmount()",
                      "error InvalidLeverage(uint256 leverage)",
                      "error PoolCollateralLimitExceeded(uint128 poolId, address collateralType, uint256 currentCollateral, uint256 maxCollateral)",
                      "event DelegationUpdated(uint128 indexed accountId, uint128 indexed poolId, address collateralType, uint256 amount, uint256 leverage, address indexed sender)",
                      "function delegateCollateral(uint128 accountId, uint128 poolId, address collateralType, uint256 newCollateralAmountD18, uint256 leverage)",
                      "function getLastDelegationTime(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 lastDelegationTime)",
                      "function getPosition(uint128 accountId, uint128 poolId, address collateralType) returns (uint256 collateralAmount, uint256 collateralValue, int256 debt, uint256 collateralizationRatio)",
                      "function getPositionCollateral(uint128 accountId, uint128 poolId, address collateralType) view returns (uint256 amount)",
                      "function getPositionCollateralRatio(uint128 accountId, uint128 poolId, address collateralType) returns (uint256)",
                      "function getPositionDebt(uint128 accountId, uint128 poolId, address collateralType) returns (int256 debt)",
                      "function getVaultCollateral(uint128 poolId, address collateralType) view returns (uint256 amount, uint256 value)",
                      "function getVaultCollateralRatio(uint128 poolId, address collateralType) returns (uint256)",
                      "function getVaultDebt(uint128 poolId, address collateralType) returns (int256)",
                      "function migrateDelegation(uint128 accountId, uint128 oldPoolId, address collateralType, uint128 newPoolId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "constructorArgs": [
                      "<%= contracts.InitialModuleBundle.address %>",
                      "<%= settings.owner %>"
                    ],
                    "sourceName": "contracts/Proxy.sol",
                    "contractName": "Proxy",
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "AccountProxy": {
                    "address": "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error AlreadyInitialized()",
                      "error CannotSelfApprove(address addr)",
                      "error IndexOverrun(uint256 requestedIndex, uint256 length)",
                      "error InvalidOwner(address addr)",
                      "error InvalidParameter(string parameter, string reason)",
                      "error InvalidTransferRecipient(address addr)",
                      "error OverflowUint256ToUint128()",
                      "error TokenAlreadyMinted(uint256 id)",
                      "error TokenDoesNotExist(uint256 id)",
                      "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
                      "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
                      "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
                      "function approve(address to, uint256 tokenId)",
                      "function balanceOf(address holder) view returns (uint256 balance)",
                      "function burn(uint256 tokenId)",
                      "function getApproved(uint256 tokenId) view returns (address operator)",
                      "function initialize(string tokenName, string tokenSymbol, string uri)",
                      "function isApprovedForAll(address holder, address operator) view returns (bool)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address to, uint256 tokenId)",
                      "function name() view returns (string)",
                      "function ownerOf(uint256 tokenId) view returns (address)",
                      "function safeMint(address to, uint256 tokenId, bytes data)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId)",
                      "function safeTransferFrom(address from, address to, uint256 tokenId, bytes data)",
                      "function setAllowance(uint256 tokenId, address spender)",
                      "function setApprovalForAll(address operator, bool approved)",
                      "function setBaseTokenURI(string uri)",
                      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
                      "function symbol() view returns (string)",
                      "function tokenByIndex(uint256 index) view returns (uint256)",
                      "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
                      "function tokenURI(uint256 tokenId) view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transferFrom(address from, address to, uint256 tokenId)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  },
                  "USDProxy": {
                    "address": "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                    "abi": [
                      "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                      "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                      "function facetAddresses() pure returns (address[] addresses)",
                      "function facetAddress(bytes4 functionSelector) pure returns (address)",
                      "function emitDiamondCutEvent() returns (bool)",
                      "error ImplementationIsSterile(address implementation)",
                      "error NoChange()",
                      "error NotAContract(address contr)",
                      "error NotNominated(address addr)",
                      "error Unauthorized(address addr)",
                      "error UpgradeSimulationFailed()",
                      "error ZeroAddress()",
                      "event OwnerChanged(address oldOwner, address newOwner)",
                      "event OwnerNominated(address newOwner)",
                      "event Upgraded(address indexed self, address implementation)",
                      "function acceptOwnership()",
                      "function getImplementation() view returns (address)",
                      "function nominateNewOwner(address newNominatedOwner)",
                      "function nominatedOwner() view returns (address)",
                      "function owner() view returns (address)",
                      "function renounceNomination()",
                      "function simulateUpgradeTo(address newImplementation)",
                      "function upgradeTo(address newImplementation)",
                      "error MismatchAssociatedSystemKind(bytes32 expected, bytes32 actual)",
                      "error MissingAssociatedSystem(bytes32 id)",
                      "event AssociatedSystemSet(bytes32 indexed kind, bytes32 indexed id, address proxy, address impl)",
                      "function getAssociatedSystem(bytes32 id) view returns (address addr, bytes32 kind)",
                      "function initOrUpgradeNft(bytes32 id, string name, string symbol, string uri, address impl)",
                      "function initOrUpgradeToken(bytes32 id, string name, string symbol, uint8 decimals, address impl)",
                      "function registerUnmanagedSystem(bytes32 id, address endpoint)",
                      "error AlreadyInitialized()",
                      "error InsufficientAllowance(uint256 required, uint256 existing)",
                      "error InsufficientBalance(uint256 required, uint256 existing)",
                      "error InvalidParameter(string parameter, string reason)",
                      "event Approval(address indexed owner, address indexed spender, uint256 amount)",
                      "event Transfer(address indexed from, address indexed to, uint256 amount)",
                      "function allowance(address owner, address spender) view returns (uint256)",
                      "function approve(address spender, uint256 amount) returns (bool)",
                      "function balanceOf(address owner) view returns (uint256)",
                      "function burn(uint256 amount)",
                      "function burn(address target, uint256 amount)",
                      "function burnWithAllowance(address from, address spender, uint256 amount)",
                      "function decimals() view returns (uint8)",
                      "function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)",
                      "function increaseAllowance(address spender, uint256 addedValue) returns (bool)",
                      "function initialize(string tokenName, string tokenSymbol, uint8 tokenDecimals)",
                      "function isInitialized() view returns (bool)",
                      "function mint(address target, uint256 amount)",
                      "function name() view returns (string)",
                      "function setAllowance(address from, address spender, uint256 amount)",
                      "function symbol() view returns (string)",
                      "function totalSupply() view returns (uint256)",
                      "function transfer(address to, uint256 amount) returns (bool)",
                      "function transferFrom(address from, address to, uint256 amount) returns (bool)"
                    ],
                    "deployTxnHash": "",
                    "deployTxnBlockNumber": "",
                    "deployTimestamp": "",
                    "sourceName": "@synthetixio/core-contracts/contracts/proxy/UUPSProxyWithOwner.sol",
                    "contractName": "UUPSProxyWithOwner",
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 0,
                    "gasCost": "0",
                    "highlight": true
                  }
                },
                "settings": {
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                },
                "imports": {
                  "oracle_manager": {
                    "url": "ipfs://QmV7BAagvh5kfYDiyBy3UJFh4BQMVsmiiEmXGVadnLTLnT",
                    "contracts": {
                      "NodeModule": {
                        "address": "0xf1e04afF68bb60af56592d4Ac3157be62BF2fad4",
                        "abi": [
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "21787261",
                        "deployTimestamp": "1738842493",
                        "sourceName": "contracts/modules/NodeModule.sol",
                        "contractName": "NodeModule",
                        "deployedOn": "contract.NodeModule",
                        "gasUsed": 4896112,
                        "gasCost": "1597095724"
                      },
                      "CoreModule": {
                        "address": "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1728480815",
                        "sourceName": "contracts/modules/CoreModule.sol",
                        "contractName": "CoreModule",
                        "deployedOn": "contract.CoreModule",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "InitialProxy": {
                        "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                        "abi": [
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)"
                        ],
                        "constructorArgs": [
                          "0x874573f87a53e6D9D6F11eE8Bb994E247dB55509",
                          "0x6E1613B5c68B4Cf2A58400D8019a97849A678139"
                        ],
                        "linkedLibraries": {},
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "1728480815",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "contract.InitialProxy",
                        "gasUsed": 0,
                        "gasCost": "0"
                      },
                      "OracleRouter": {
                        "address": "0x9b39032a686f68d4d7a8149005c0efe9bf3ec1aa",
                        "abi": [
                          "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                          "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                          "function facetAddresses() pure returns (address[] addresses)",
                          "function facetAddress(bytes4 functionSelector) pure returns (address)",
                          "function emitDiamondCutEvent() returns (bool)",
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployedOn": "router.OracleRouter",
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "21787262",
                        "deployTimestamp": "1738842501",
                        "contractName": "OracleRouter",
                        "sourceName": "OracleRouter.sol",
                        "gasUsed": 1728163,
                        "gasCost": "1546820822"
                      },
                      "Proxy": {
                        "address": "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                        "abi": [
                          "function facets() pure returns (tuple(address facetAddress, bytes4[] functionSelectors)[])",
                          "function facetFunctionSelectors(address facet) pure returns (bytes4[] functionSelectors)",
                          "function facetAddresses() pure returns (address[] addresses)",
                          "function facetAddress(bytes4 functionSelector) pure returns (address)",
                          "function emitDiamondCutEvent() returns (bool)",
                          "error ImplementationIsSterile(address implementation)",
                          "error NoChange()",
                          "error NotAContract(address contr)",
                          "error NotNominated(address addr)",
                          "error Unauthorized(address addr)",
                          "error UpgradeSimulationFailed()",
                          "error ZeroAddress()",
                          "event OwnerChanged(address oldOwner, address newOwner)",
                          "event OwnerNominated(address newOwner)",
                          "event Upgraded(address indexed self, address implementation)",
                          "function acceptOwnership()",
                          "function getImplementation() view returns (address)",
                          "function nominateNewOwner(address newNominatedOwner)",
                          "function nominatedOwner() view returns (address)",
                          "function owner() view returns (address)",
                          "function renounceNomination()",
                          "function simulateUpgradeTo(address newImplementation)",
                          "function upgradeTo(address newImplementation)",
                          "error EmptyRevertReason()",
                          "error Errors(bytes[] errors)",
                          "error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)",
                          "error InvalidParameter(string parameter, string reason)",
                          "error InvalidPrice(int256 price)",
                          "error NodeNotRegistered(bytes32 nodeId)",
                          "error OracleDataRequired(address oracleContract, bytes oracleQuery)",
                          "error OverflowInt256ToUint256()",
                          "error OverflowInt56ToInt24()",
                          "error OverflowUint256ToInt256()",
                          "error OverflowUint256ToUint160()",
                          "error OverflowUint56ToInt56()",
                          "event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)",
                          "function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)",
                          "function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)",
                          "function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function processManyWithManyRuntime(bytes32[] nodeIds, bytes32[][] runtimeKeys, bytes32[][] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processManyWithRuntime(bytes32[] nodeIds, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2)[] nodes)",
                          "function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)",
                          "function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)"
                        ],
                        "deployTxnHash": "",
                        "deployTxnBlockNumber": "",
                        "deployTimestamp": "",
                        "sourceName": "contracts/Proxy.sol",
                        "contractName": "Proxy",
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 0,
                        "gasCost": "0",
                        "highlight": true
                      }
                    },
                    "imports": {
                      "trusted_multicall_forwarder": {
                        "url": "ipfs://QmbSAhExRT5TwFpa2ki8WZmv8PrdQnQFutw7Qt7aQr8YBG",
                        "tags": [
                          "latest"
                        ],
                        "target": "trusted-multicall-forwarder:latest@with-oracle-manager",
                        "preset": "with-oracle-manager",
                        "settings": {
                          "salt": "salt"
                        },
                        "contracts": {
                          "TrustedMulticallForwarder": {
                            "address": "0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e",
                            "abi": [
                              "constructor()",
                              "function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)",
                              "function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)",
                              "function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable",
                              "function getBasefee() view returns (uint256 basefee)",
                              "function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)",
                              "function getBlockNumber() view returns (uint256 blockNumber)",
                              "function getChainId() view returns (uint256 chainid)",
                              "function getCurrentBlockCoinbase() view returns (address coinbase)",
                              "function getCurrentBlockGasLimit() view returns (uint256 gaslimit)",
                              "function getCurrentBlockTimestamp() view returns (uint256 timestamp)",
                              "function getEthBalance(address addr) view returns (uint256 balance)",
                              "function getLastBlockHash() view returns (bytes32 blockHash)",
                              "function getPrevRandao() view returns (uint256 prevrandao)",
                              "function nonces(address owner) view returns (uint256)",
                              "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)",
                              "function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)",
                              "function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)",
                              "event EIP712DomainChanged()",
                              "event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)",
                              "error AddressInsufficientBalance(address account)",
                              "error ERC2771ForwarderExpiredRequest(uint48 deadline)",
                              "error ERC2771ForwarderInvalidSigner(address signer, address from)",
                              "error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)",
                              "error ERC2771UntrustfulTarget(address target, address forwarder)",
                              "error FailedInnerCall()",
                              "error InvalidAccountNonce(address account, uint256 currentNonce)",
                              "error InvalidShortString()",
                              "error StringTooLong(string str)"
                            ],
                            "constructorArgs": [],
                            "linkedLibraries": {},
                            "deployTxnHash": "",
                            "deployTxnBlockNumber": "",
                            "deployTimestamp": "1728480815",
                            "sourceName": "src/TrustedMulticallForwarder.sol",
                            "contractName": "TrustedMulticallForwarder",
                            "deployedOn": "contract.TrustedMulticallForwarder",
                            "gasUsed": 0,
                            "gasCost": "0"
                          }
                        },
                        "extras": {
                          "salt": "salt"
                        }
                      }
                    },
                    "settings": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    },
                    "txns": {
                      "upgrade_proxy": {
                        "hash": "0x13d2b20513ff1850b5d014df38311142a317418d07a8fc358cc680f58f1f6822",
                        "blockNumber": "21787263",
                        "timestamp": "1738842507",
                        "events": {
                          "Upgraded": [
                            {
                              "name": "Upgraded",
                              "args": [
                                "0x0aaF300E148378489a8A471DD3e9E53E30cb42e3",
                                "0x9b39032a686f68d4d7A8149005C0efe9bF3Ec1aa"
                              ]
                            }
                          ]
                        },
                        "deployedOn": "invoke.upgrade_proxy",
                        "gasUsed": 55400,
                        "gasCost": "1486343182",
                        "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                      }
                    },
                    "extras": {
                      "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                      "salt": "oracle-manager-official"
                    }
                  }
                },
                "txns": {
                  "register_const_one_oracle": {
                    "hash": "0xc364170bfa95b109ebd21a59c7929598bfbc1f3aa61674fd242ba951fe53b18e",
                    "events": {
                      "NodeRegistered": [
                        {
                          "name": "NodeRegistered",
                          "args": [
                            "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                            8,
                            "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
                            []
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.register_const_one_oracle"
                  },
                  "upgrade_core_proxy": {
                    "hash": "0x1406d0004a87cce936c31cde83d3a597ba23c9feba4a5e5fd911d389f7ef2efe",
                    "blockNumber": "22182009",
                    "timestamp": "1743606295",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xffffffaEff0B96Ea8e4f94b2253f31abdD875847",
                            "0x50d8302C7010C23eC3D2decE65e8a50CC0CC5CB8"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.upgrade_core_proxy",
                    "gasUsed": 51371,
                    "gasCost": "1275116739",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_burnUsd": {
                    "hash": "",
                    "blockNumber": "20339936",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6275726e55736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_burnUsd",
                    "gasUsed": 37049,
                    "gasCost": "3856990971",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_claimRewards": {
                    "hash": "",
                    "blockNumber": "20339937",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x636c61696d526577617264730000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_claimRewards",
                    "gasUsed": 37109,
                    "gasCost": "3500749172",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_createAccount": {
                    "hash": "",
                    "blockNumber": "20339938",
                    "timestamp": "1721384404",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6372656174654163636f756e7400000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_createAccount",
                    "gasUsed": 37121,
                    "gasCost": "3188928862",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_delegateCollateral": {
                    "hash": "",
                    "blockNumber": "20339939",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x64656c6567617465436f6c6c61746572616c0000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_delegateCollateral",
                    "gasUsed": 37181,
                    "gasCost": "2915989882",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_deposit": {
                    "hash": "",
                    "blockNumber": "20339940",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f73697400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_deposit",
                    "gasUsed": 37049,
                    "gasCost": "2677084801",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_depositMarketCollateral": {
                    "hash": "",
                    "blockNumber": "20339941",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b6574436f6c6c61746572616c000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketCollateral",
                    "gasUsed": 37241,
                    "gasCost": "2467966987",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_depositMarketUsd": {
                    "hash": "",
                    "blockNumber": "20339942",
                    "timestamp": "1721384405",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6465706f7369744d61726b657455736400000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_depositMarketUsd",
                    "gasUsed": 37157,
                    "gasCost": "2284926685",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidate": {
                    "hash": "",
                    "blockNumber": "20339943",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174650000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidate",
                    "gasUsed": 37073,
                    "gasCost": "2124708717",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidateToTreasury": {
                    "hash": "0xd40bc0c8fc5179c6a742d96338a6462dbf883e9e27cd987df95e7d990b4d2078",
                    "blockNumber": "22182010",
                    "timestamp": "1743606296",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c6971756964617465546f547265617375727900000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateToTreasury",
                    "gasUsed": 57111,
                    "gasCost": "1240844922",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_liquidateVault": {
                    "hash": "",
                    "blockNumber": "20339944",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_liquidateVault",
                    "gasUsed": 37133,
                    "gasCost": "1984467597",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_migrateDelegation": {
                    "hash": "0x92543f30f35ce8d775e52b5648a44b141dacb02744b95ef7c3b8830a772226e2",
                    "blockNumber": "21787282",
                    "timestamp": "1738842601",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d69677261746544656c65676174696f6e000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_migrateDelegation",
                    "gasUsed": 57109,
                    "gasCost": "1057292814",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_mintUsd": {
                    "hash": "",
                    "blockNumber": "20339945",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x6d696e7455736400000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_mintUsd",
                    "gasUsed": 37049,
                    "gasCost": "1861713783",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdraw": {
                    "hash": "",
                    "blockNumber": "20339946",
                    "timestamp": "1721384406",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x7769746864726177000000000000000000000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdraw",
                    "gasUsed": 37061,
                    "gasCost": "1754265608",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdrawMarketCollateral": {
                    "hash": "",
                    "blockNumber": "20339947",
                    "timestamp": "1721384407",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574436f6c6c61746572616c0000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketCollateral",
                    "gasUsed": 37253,
                    "gasCost": "1660215356",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "enable_feature_withdrawMarketUsd": {
                    "hash": "",
                    "blockNumber": "20339948",
                    "timestamp": "1721384407",
                    "events": {
                      "FeatureFlagAllowAllSet": [
                        {
                          "name": "FeatureFlagAllowAllSet",
                          "args": [
                            "0x77697468647261774d61726b6574557364000000000000000000000000000000",
                            true
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.enable_feature_withdrawMarketUsd",
                    "gasUsed": 37169,
                    "gasCost": "1577893395",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "init_account": {
                    "hash": "0x28024a548db5d269ab472f3216b86513f15edf8126dcc490add21c48b5f08033",
                    "blockNumber": "21787283",
                    "timestamp": "1738842609",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                            "0x35B51e3Dc2a8Cf242FdCaE8F07CF21A6D91ff783"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633732310000000000000000000000000000000000000000000000000000",
                            "0x6163636f756e744e667400000000000000000000000000000000000000000000",
                            "0x0E429603D3Cb1DFae4E6F52Add5fE82d96d77Dac",
                            "0x35B51e3Dc2a8Cf242FdCaE8F07CF21A6D91ff783"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_account",
                    "gasUsed": 80746,
                    "gasCost": "1050158479",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "init_usd": {
                    "hash": "0x4b7971fec2cbb0ec7376030e9329b11912a8dc77e6c2323e91fdae0d128dca52",
                    "blockNumber": "21787284",
                    "timestamp": "1738842616",
                    "events": {
                      "Upgraded": [
                        {
                          "name": "Upgraded",
                          "args": [
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            "0x71182391bB34BF922C8BA3FF3047B604EcBB202B"
                          ]
                        }
                      ],
                      "AssociatedSystemSet": [
                        {
                          "name": "AssociatedSystemSet",
                          "args": [
                            "0x6572633230000000000000000000000000000000000000000000000000000000",
                            "0x555344546f6b656e000000000000000000000000000000000000000000000000",
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            "0x71182391bB34BF922C8BA3FF3047B604EcBB202B"
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.init_usd",
                    "gasUsed": 94076,
                    "gasCost": "1043922420",
                    "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
                  },
                  "set_oracle_manager": {
                    "hash": "0xd14a861aba2399243d6b4bb66289c06a6ca3269b8509fe2af0ca92ed2be6f2e4",
                    "events": {},
                    "deployedOn": "invoke.set_oracle_manager"
                  },
                  "configure_usd_collateral": {
                    "hash": "0x00e044c8fb2f008138244ea81ea15b1ecdbf370b22e70361060b37e1d11cf271",
                    "events": {
                      "CollateralConfigured": [
                        {
                          "name": "CollateralConfigured",
                          "args": [
                            "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                            [
                              true,
                              {
                                "type": "BigNumber",
                                "hex": "0x8ac7230489e80000"
                              },
                              {
                                "type": "BigNumber",
                                "hex": "0x8ac7230489e80000"
                              },
                              {
                                "type": "BigNumber",
                                "hex": "0x00"
                              },
                              "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                              "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
                              {
                                "type": "BigNumber",
                                "hex": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    "deployedOn": "invoke.configure_usd_collateral"
                  }
                },
                "extras": {
                  "const_one_oracle_id": "0x066ef68c9d9ca51eee861aeb5bce51a12e61f06f10bf62243c563671ae3a9733",
                  "account_token_name": "Synthetix Account",
                  "account_token_symbol": "SACCT",
                  "bundleSalt": "main",
                  "oracle_manager_package": "oracle-manager",
                  "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
                  "salt": "main",
                  "usd_token_name": "Synthetic USD Token v3",
                  "usd_token_symbol": "sUSD"
                }
              }
            },
            "txns": {
              "upgradeProxy": {
                "hash": "0x53fd41e894f1b8a8f14a0e6e0ff2110660a0ed1893ba9cac2b871266cf48d69d",
                "blockNumber": "22182018",
                "timestamp": "1743606327",
                "events": {
                  "Upgraded": [
                    {
                      "name": "Upgraded",
                      "args": [
                        "0x7b952507306E7D983bcFe6942Ac9F2f75C1332D8",
                        "0x295Fa82cbAE4bB441A40629FF636a9d537e8741B"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.upgradeProxy",
                "gasUsed": 47287,
                "gasCost": "1085391886",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "setFeatureFlagAssociateDebt": {
                "hash": "0xce43fc627a54fa4ef4836b6ad893e474fc1b6e94afb4c2d6eb43c9eac9d830ba",
                "blockNumber": "21787294",
                "timestamp": "1738842673",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x6173736f63696174654465627400000000000000000000000000000000000000",
                        "0x7b952507306E7D983bcFe6942Ac9F2f75C1332D8"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setFeatureFlagAssociateDebt",
                "gasUsed": 84583,
                "gasCost": "1012030237",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "setFeatureFlagMarket": {
                "hash": "0xbeb5be67f009c23f589dbfac7e5289142181f5b8c31062d916510a15366f00cd",
                "blockNumber": "21787295",
                "timestamp": "1738842676",
                "events": {
                  "FeatureFlagAllowlistAdded": [
                    {
                      "name": "FeatureFlagAllowlistAdded",
                      "args": [
                        "0x72656769737465724d61726b6574000000000000000000000000000000000000",
                        "0x7b952507306E7D983bcFe6942Ac9F2f75C1332D8"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.setFeatureFlagMarket",
                "gasUsed": 84595,
                "gasCost": "1010534937",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              },
              "registerMarket": {
                "hash": "0x6ff09c7b77a726e2f5b28598e2f7552338e4119beefc34b0d0a7ce305eaf9165",
                "blockNumber": "21787296",
                "timestamp": "1738842680",
                "events": {
                  "MarketRegistered": [
                    {
                      "name": "MarketRegistered",
                      "args": [
                        "0x7b952507306E7D983bcFe6942Ac9F2f75C1332D8",
                        "3",
                        "0x7b952507306E7D983bcFe6942Ac9F2f75C1332D8"
                      ]
                    }
                  ]
                },
                "deployedOn": "invoke.registerMarket",
                "gasUsed": 253917,
                "gasCost": "1009225497",
                "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
              }
            },
            "extras": {
              "owner": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "pool_id": "1",
              "treasury_address": "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
              "v3_package": "synthetix:latest",
              "collateral_token": "0xb2F30A7C980f052f02563fb518dcc39e6bf38175",
              "market_id": "3"
            }
          }
        }
      },
      "hash": null,
      "version": 7
    },
    "setting.position_manager_address": {
      "artifacts": {
        "settings": {
          "position_manager_address": "0x100c6c18381c9a7527762063047236356bbd0b8d"
        }
      },
      "hash": "ba34a53b7aa640f63081745cdc2053c6",
      "version": 7
    },
    "setting.treasury_market_target_cratio": {
      "artifacts": {
        "settings": {
          "treasury_market_target_cratio": "1100000000000000000"
        }
      },
      "hash": "109f80ca4fb572bb6f910537ee0e25cf",
      "version": 7
    },
    "invoke.disableLiquidate": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "disableLiquidate": {
            "hash": "0xa3339de5f4a79aa389796c301c6413eb21712c67549c49150632d621d63673b5",
            "blockNumber": "21872440",
            "timestamp": "1739871907",
            "events": {
              "FeatureFlagAllowAllSet": [
                {
                  "name": "FeatureFlagAllowAllSet",
                  "args": [
                    "0x6c69717569646174650000000000000000000000000000000000000000000000",
                    false
                  ]
                }
              ]
            },
            "deployedOn": "invoke.disableLiquidate",
            "gasUsed": 34535,
            "gasCost": "1831681551",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "bb6914c2ef286f8c075f4048b2478a93",
      "version": 7
    },
    "invoke.disableLiquidateVault": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "disableLiquidateVault": {
            "hash": "0x65148125c4c20f889e08a0181a810acb436436355e1fa6125ba59c71783b79cd",
            "blockNumber": "21872441",
            "timestamp": "1739871911",
            "events": {
              "FeatureFlagAllowAllSet": [
                {
                  "name": "FeatureFlagAllowAllSet",
                  "args": [
                    "0x6c69717569646174655661756c74000000000000000000000000000000000000",
                    false
                  ]
                }
              ]
            },
            "deployedOn": "invoke.disableLiquidateVault",
            "gasUsed": 34595,
            "gasCost": "1727960709",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "0a1e35f21254751f5f64aa9067612bdc",
      "version": 7
    },
    "invoke.setPositionManagerOverrideWithdrawTimeout": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPositionManagerOverrideWithdrawTimeout": {
            "hash": "0x2f477df1d45b66cd30e1e3be8e8addf97595d9c5166c6dcd46f6c3e751eea36f",
            "blockNumber": "21895433",
            "timestamp": "1740149597",
            "events": {
              "ConfigSet": [
                {
                  "name": "ConfigSet",
                  "args": [
                    "0x8622f2696ac19335f3e89357baa0a70800291d5a785f76db55073c291483a51e",
                    "0x0000000000000000000000000000000000000000000000000000000000000001"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPositionManagerOverrideWithdrawTimeout",
            "gasUsed": 56443,
            "gasCost": "2386949926",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "b9f65fb7df161a11c0731da84a63353b",
      "version": 7
    },
    "invoke.setPositionManagerOverrideMinDelegateTime": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setPositionManagerOverrideMinDelegateTime": {
            "hash": "0xebc3c74238e5a9eb4785b64f9f920bdb8a4f7f83bbde6086691c928a910aa436",
            "blockNumber": "21895434",
            "timestamp": "1740149608",
            "events": {
              "ConfigSet": [
                {
                  "name": "ConfigSet",
                  "args": [
                    "0xbc03617fd4bc1ddd9704ad293f84e0ea760799885a10f4e38499d582f17d3238",
                    "0x0000000000000000000000000000000000000000000000000000000000000001"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setPositionManagerOverrideMinDelegateTime",
            "gasUsed": 56455,
            "gasCost": "2214233549",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "9c909aefef1f4fe5689cc323c939fb37",
      "version": 7
    },
    "invoke.setCRatio": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setCRatio": {
            "hash": "0xe3374521df4544050dfa78ea99138398d75c8e1ea9032bd6cb1dada348a236f1",
            "blockNumber": "21872444",
            "timestamp": "1739871970",
            "events": {
              "TargetCRatioSet": [
                {
                  "name": "TargetCRatioSet",
                  "args": [
                    "1100000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setCRatio",
            "gasUsed": 65085,
            "gasCost": "1488362211",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "09a7878db872c22d2169c4a70b9713b6",
      "version": 7
    },
    "invoke.setDebtDecayFunction": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "setDebtDecayFunction": {
            "hash": "0x43870cdf3ba3c89ba05fa1e505f3b05fda0c69adc4e3935c09991656e6815ef0",
            "blockNumber": "21916427",
            "timestamp": "1740403073",
            "events": {
              "DebtDecayUpdated": [
                {
                  "name": "DebtDecayUpdated",
                  "args": [
                    1,
                    31536000,
                    "1000000000000000000",
                    "500000000000000000"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.setDebtDecayFunction",
            "gasUsed": 76545,
            "gasCost": "1478013676",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "6df1224fcec9d99abfe80d778459320f",
      "version": 7
    },
    "var.treasuryInfo": {
      "artifacts": {
        "settings": {
          "treasury_account_id": "10",
          "treasury_liquidator_address": "0x9DAffb42b60Bb14d8EE80b503AAfC312dCbAF552"
        }
      },
      "hash": "c2fac7d3c52155bea61455569ab9c436",
      "version": 7
    },
    "invoke.allow_liquidate_to_treasury": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "allow_liquidate_to_treasury": {
            "hash": "0xe408b09a4b97b94264a57e21c5b83b3f35df0ed6850ef7130b9d3030c85518df",
            "blockNumber": "22182011",
            "timestamp": "1743606304",
            "events": {
              "FeatureFlagAllowlistAdded": [
                {
                  "name": "FeatureFlagAllowlistAdded",
                  "args": [
                    "0x6c6971756964617465546f547265617375727900000000000000000000000000",
                    "0x9DAffb42b60Bb14d8EE80b503AAfC312dCbAF552"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.allow_liquidate_to_treasury",
            "gasUsed": 101733,
            "gasCost": "1210853931",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "cd4c6a0f94b1d8ced993ce13a29cc6e8",
      "version": 7
    },
    "invoke.disable_treasury_pool_liquidations": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "disable_treasury_pool_liquidations": {
            "hash": "0x65b5ccb84f16fa3aa094620bd8775926b22919f74883e66723b67b8daf157c4f",
            "blockNumber": "22182012",
            "timestamp": "1743606305",
            "events": {
              "ConfigSet": [
                {
                  "name": "ConfigSet",
                  "args": [
                    "0x00dbc77c9d35bc98a809b72d038b1c6330f633ff2e505d4218c52af23196f685",
                    "0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.disable_treasury_pool_liquidations",
            "gasUsed": 56837,
            "gasCost": "1184675947",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "f1d9f7b022e786fcdf988f96fb8aebf8",
      "version": 7
    },
    "invoke.set_treasury_account": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "set_treasury_account": {
            "hash": "0x6127a902072652d5f0f3a9ec415a6542dd6a914d4b0b50279c2206cbd515a29c",
            "blockNumber": "22244844",
            "timestamp": "1744364230",
            "events": {
              "ConfigSet": [
                {
                  "name": "ConfigSet",
                  "args": [
                    "0x74726561737572794163636f756e744964000000000000000000000000000000",
                    "0x000000000000000000000000000000000000000000000000000000000000000a"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.set_treasury_account",
            "gasUsed": 39197,
            "gasCost": "1370714009",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "53fb9fd9517f421c1c2eddb044a9ed36",
      "version": 7
    },
    "invoke.set_treasury_pool": {
      "artifacts": {
        "contracts": {},
        "txns": {
          "set_treasury_pool": {
            "hash": "0x048eb4a59e2c77bc1daca42461b7b46e0a75dfdcbe7e23d9fc03775e14db18b7",
            "blockNumber": "22182017",
            "timestamp": "1743606321",
            "events": {
              "ConfigSet": [
                {
                  "name": "ConfigSet",
                  "args": [
                    "0x7472656173757279506f6f6c4964000000000000000000000000000000000000",
                    "0x0000000000000000000000000000000000000000000000000000000000000008"
                  ]
                }
              ]
            },
            "deployedOn": "invoke.set_treasury_pool",
            "gasUsed": 56261,
            "gasCost": "1097538463",
            "signer": "0xEb3107117FEAd7de89Cd14D463D340A2E6917769"
          }
        },
        "settings": {}
      },
      "hash": "11be534e3bf3e8795e5535e76a9d23c9",
      "version": 7
    }
  },
  "options": {},
  "miscUrl": "ipfs://QmeSt2mnJKE8qmRhLyYbHQQxDKpsFbcWnw5e7JF4xVbN6k",
  "chainId": 1
}